{"page":1,"text":"Universal Serial Bus\nPower Delivery Specification\nRevision:\n3.2\nVersion:\n1.1\nRelease Date:\n2024-10\n","image_count":0,"table_count":0}
{"page":2,"text":"Page 2\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nRevision History\nRevision Version\nComments\nIssue Date\n1.0\n1.0\nInitial release Revision 1.0\n5 July, 2012\n1.0\n1.1\nIncluding errata through 31-October-2012\n31 October 2012\n1.0\n1.2\nIncluding errata through 26-June-2013\n26 June, 2013\n1.0\n1.3\nIncluding errata through 11-March-2014\n11 March 2014\n2.0\n1.0\nInitial release Revision 2.0\n11 August 2014\n2.0\n1.1\nIncluding errata through 7-May 2015\n7 May 2015\n2.0\n1.2\nIncluding errata through 25-March-2016\n25 March 2016\n2.0\n1.3\nIncluding errata through 11-January-2017\n11 January 2017\n3.0\n1.0\nInitial release Revision 3.0\n11 December 2015\n3.0\n1.0a\nIncluding errata through 25-March-2016\n25 March 2016\n3.0\n1.1\nIncluding errata through 12-January-2017\n12 January 2017\n3.0\n1.2\nIncluding errata through 21-June-2018\n21 June 2018\n3.0\n2.0\nIncluding errata through 29-August-2019\n29 August 2019\n3.1\n1.0\nIncluding errata through May 2021\nMay 2021\n3.1\n1.1\nIncluding errata through July 2021\nThis version incorporates the following ECNs:\n\nEPR Clarifications\n\nDefine AMS starting point\nJuly 2021\n3.1\n1.2\nIncluding errata through October 2021\nThis version incorporates the following ECNs:\n\nClarify use of Retries\n\nBattery Capabilities\n\nFRS timing problem\n\nPPS power rule clarifications\n\nPeak current support for EPR AVS APDO\nOctober 2021\n3.1\n1.3\nThis version incorporates the following ECNs:\n\nRobust EPR Source Operation\n\nEPR Source Caps Editorial\n\nSRC PPS behavior in low current request\n\nEnter USB\nJanuary 2022\n3.1\n1.4\nEditorial changes\nThis version incorporates the following ECNs:\n\nCapabilities Mismatch Update\n\nChunking Timing Issue\n\nOT Mitigation\nApril 2022\n","image_count":0,"table_count":2}
{"page":3,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 3\n3.1\n1.5\nEditorial changes\nThis version incorporates the following ECNs:\n\nTimer Description Corrections\n\nChange Source_Info Requirements\n\nAMS Update\nJuly 2022\n3.1\n1.6\nEditorial changes\nThis version incorporates the following ECNs:\n\nUSB4® V2 Updates\n\nData Reset Issues\n\nIncrease tSenderResponse\n\nPPS Power Limit Bit Update\n\nSupport for Asymmetric Mode\n\nTimer Description Corrections Revisited\nOctober 2022\n3.1\n1.7\nEditorial Changes\nThis version incorporates the following ECNs:\n\nData Reset Invalid Reject Handling\n\nSource request\n\nSource Transition\n\nEPR Entry\nJanuary 2023\n3.1\n1.8\nEditorial Changes\nThis version incorporates the following ECNs:\n\nSlew rate exemption for Power Role Swap.\n\nEUDO cable speed clarification.\n\nUpdate to PPS Requirements.\n\nDeprecate Interruptibility.\n\nSection 7.3 restructure and update.\nApril 2023\n3.1\n1.9\nEditorial Changes\nJuly 2023\nRevision Version\nComments\nIssue Date\n","image_count":0,"table_count":2}
{"page":4,"text":"Page 4\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n3.2\n1.0\nThis version incorporates the following ECNs:\n\nVDM-use Conditions.\n\ntTypeCSinkWaitCap.\n\ntFirstSourceCap Clarification\n\nHard Reset Clarification.\n\nUnrecognized Country Code\n\nEPR Entry Process-1\n\nSPR AVS Definition\n\nEPR Power Rules Clarifications\nOctober 2023\n3.2\n1.1\nThis version incorporates the following ECNs:\n\nPower Transition time from EPR to PR_Swap\n\nCapabilities Mismatch Update\n\nDeprecate GotoMin and GiveBack Features and Update \nPower Reserve\n\nEPR Entry requirements Clarification\n\nEPRMDO and Entry Clarification.\n\nRemove 10.2.4 power sharing between ports\n\nSource PDP rating field clarifications\n\nSource Power Rules update.\n\nSource_Info Message Clarifications.\n\nCorrection to BMC description.\n\nEPR Source cap clarification.\n\nDelaying of VCONN Swap.\n\nEPR_Request in SPR Mode.\n\nGeneric transition diagram.\n\nRemoving the usage of Ping message\n\nSink Standby\n\nSource Info Support\nOctober 2024\nRevision Version\nComments\nIssue Date\n","image_count":0,"table_count":2}
{"page":5,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 5\nLIMITED COPYRIGHT LICENSE\nTHE USB 3.0 PROMOTERS GRANT A CONDITIONAL COPYRIGHT LICENSE UNDER THE COPYRIGHTS EMBODIED \nIN THE USB POWER DELVERY SPECIFICATION TO USE AND REPRODUCE THE SPECIFICATION FOR THE SOLE \nPURPOSE OF, AND SOLELY TO THE EXTENT NECESSARY FOR, EVALUATING WHETHER TO IMPLEMENT THE \nSPECIFICATION IN PRODUCTS THAT WOULD COMPLY WITH THE SPECIFICATION. WITHOUT LIMITING THE \nFOREGOING, USE THE OF SPECIFICATION FOR THE PURPOSE OF FILING OR MODIFYING ANY PATENT \nAPPLICATION TO TARGET THE SPECIFICATION OR USB COMPLIANT PRODUCTS IS NOT AUTHORIZED. EXCEPT \nFOR THIS EXPRESS COPYRIGHT LICENSE, NO OTHER RIGHTS OR LICENSES ARE GRANTED, INCLUDING \nWITHOUT LIMITATION ANY PATENT LICENSES. IN ORDER TO OBTAIN ANY ADDITIONALY INTELLECTUAL \nPROPERTY LICENSES OR LICENSING COMMITMENTS ASSOCIATED WITH THE SPECIFICATION A PARTY MUST \nEXECUTE THE USB 3.0 ADOPTERS AGREEMENT. NOTE: BY USING THE SPECIFICATION, YOU ACCEPT THESE \nLICENSE TERMS ON YOUR OWN BEHALF AND, IN THE CASE WHERE YOU ARE DOING THIS AS AN EMPLOYEE, ON \nBEHALF OF YOUR EMPLOYER.\nINTELLECTUAL PROPERTY DISCLAIMER\nTHIS SPECIFICATION IS PROVIDED TO YOU \"AS IS\" WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY \nWARRANTY OF MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE. THE \nAUTHORS OF THIS SPECIFICATION DISCLAIM ALL LIABILITY, INCLUDING LIABILITY FOR INFRINGEMENT OF \nANY PROPRIETARY RIGHTS, RELATING TO USE OR IMPLEMENTATION OF INFORMATION IN THIS \nSPECIFICATION. THE PROVISION OF THIS SPECIFICATION TO YOU DOES NOT PROVIDE YOU WITH ANY LICENSE, \nEXPRESS OR IMPLIED, BY ESTOPPEL OR OTHERWISE, TO ANY INTELLECTUAL PROPERTY RIGHTS.\nUSB Type-C® and USB4® are trademarks of the Universal Serial Bus Implementers Forum (USB-IF).\nUSB Type-C®, USB-C® and USB4® are trademarks of the Universal Serial Bus Implementers Forum (USB-IF). \nDisplayPort™ is a trademark of VESA.   Thunderbolt™ is a trademark of Intel Corporation.  All product names are \ntrademarks, registered trademarks, or service marks of their respective owners.\nYou may only use the Thunderbolt™ trademark or logo in conjunction with products designed to this specification \nthat complete proper certification and executing a Thunderbolt™ trademark license - see http://usb.org/\ncompliance for further information.\nAll product names are trademarks, registered trademarks, or service marks of their respective owners.\nCopyright © 2010- 2024, USB 3.0 Promoter Group: Apple Inc., Hewlett-Packard Inc., Intel Corporation, Microsoft \nCorporation, Renesas, STMicroelectronics, and Texas Instruments.\nAll rights reserved.\nPlease send comments via electronic mail to techsup@usb.org.\nFor industry information, refer to the USB Implementers Forum web page at http://www.usb.org.\n","image_count":0,"table_count":1}
{"page":6,"text":"Page 6\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nEditors\nContributors\nBob Dunstan\nRichard Petrie\nCharles Wang\nACON, Advanced-Connectek, Inc.\nZaki Moussaoui\nApple\nConrad Choy\nACON, Advanced-Connectek, Inc.\nJeff Liu\nASMedia Technology Inc.\nDennis Chuang\nACON, Advanced-Connectek, Inc.\nKuo Lung Li\nASMedia Technology Inc.\nSteve Sedio\nACON, Advanced-Connectek, Inc.\nMing-Wei Hsu\nASMedia Technology Inc.\nSunney Yang\nACON, Advanced-Connectek, Inc.\nPS Tseng\nASMedia Technology Inc.\nVicky Chuang\nACON, Advanced-Connectek, Inc.\nSam Tzeng\nASMedia Technology Inc.\nJoseph Scanlon\nAdvanced Micro Devices\nThomas Hsu\nASMedia Technology Inc.\nSujan Thomas\nAdvanced Micro Devices\nWeikao Chang\nASMedia Technology Inc.\nCaspar Lin\nAllion Labs, Inc.\nYang Cheng\nASMedia Technology Inc.\nCasper Lee\nAllion Labs, Inc.\nAaron Hou\nBizlink Technology Inc.\nDanny Shih\nAllion Labs, Inc.\nShawn Meng\nBizlink Technology Inc.\nHoward Chang\nAllion Labs, Inc.\nBernard Shyu\nBizlink Technology, Inc.\nGreg Stewart\nAnalogix Semiconductor, Inc.\nEric Wu\nBizlink Technology, Inc.\nMehran Badii\nAnalogix Semiconductor, Inc.\nMorphy Hsieh\nBizlink Technology, Inc.\nAlexei Kosut\nApple\nSean O'Neal\nBizlink Technology, Inc.\nBill Cornelius\nApple\nTiffany Hsiao\nBizlink Technology, Inc.\nCarlos Colderon\nApple\nWeichung Ooi\nBizlink Technology, Inc.\nChris Uiterwijk\nApple\nRahul Bhushan\nBroadcom Corp.\nColin Whitby-Strevens\nApple\nAsila nahas\nCadence Design Systems, Inc.\nCorey Axelowitz\nApple\nClaire Ying\nCadence Design Systems, Inc.\nCorey Lange\nApple\nJie min\nCadence Design Systems, Inc.\nDave Conroy\nApple\nMark Summers\nCadence Design Systems, Inc.\nDavid Sekowski\nApple\nMichal Staworko\nCadence Design Systems, Inc.\nGirault Jones\nApple\nSathish Kumar Ganesan\nCadence Design Systems, Inc.\nJames Orr\nApple\nAlessandro Ingrassia\nCanova Tech\nJason Chung\nApple\nAndrea Colognese\nCanova Tech\nJay Kim\nApple\nAntonio Orzelli\nCanova Tech\nJeff Wilcox\nApple\nDavide Ghedin\nCanova Tech\nJennifer Tsai\nApple\nMatteo Casalin\nCanova Tech\nKarl Bowers\nApple\nMichael Marioli\nCanova Tech\nKeith Porthouse\nApple\nNicola Scantamburlo\nCanova Tech\nKevin Hsiue\nApple\nPaolo Pilla\nCanova Tech\nMatt Mora\nApple\nRay Huang\nCanyon Semiconductor\nPaul Baker\nApple\nYi-Feng Lin\nCanyon Semiconductor\nReese Schreiber\nApple\nYuHung Lin\nCanyon Semiconductor\nRicardo Janezic Pregitzer\nApple\nDavid Tsai\nChrontel, Inc.\nRuchi Chaturvedi\nApple\nAnshul Gulati\nCypress Semiconductor\nSameer Kelkar\nApple\nAnup Nayak\nCypress Semiconductor\nSasha Tietz\nApple\nBenjamin Kropf\nCypress Semiconductor\nScott Jackson\nApple\nDhanraj Rajput\nCypress Semiconductor\nSree Raman\nApple\nGanesh Subramaniam\nCypress Semiconductor\nWilliam Ferry\nApple\nJagadeesan Raj\nCypress Semiconductor\n","image_count":0,"table_count":1}
{"page":7,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 7\nJunjie cui\nCypress Semiconductor\nChien-Cheng Kuo\neEver Technology, Inc.\nManu Kumar\nCypress Semiconductor\nShyanjia Chen\neEver Technology, Inc.\nMuthu M\nCypress Semiconductor\nAbel Astley\nEllisys\nNicholas Bodnaruk\nCypress Semiconductor\nChuck Trefts\nEllisys\nPradeep Bajpai\nCypress Semiconductor\nEmmanuel Durin\nEllisys\nRajaram R\nCypress Semiconductor\nMario Pasquali\nEllisys\nRama Vakkantula\nCypress Semiconductor\nTim Wei\nEllisys\nRushil Kadakia\nCypress Semiconductor\nChien-Cheng Kuo\nEtron Technology, Inc.\nSimon Nguyen\nCypress Semiconductor\nJack Yang\nEtron Technology, Inc.\nSteven Wong\nCypress Semiconductor\nRichard Crisp\nEtron Technology, Inc.\nSubu Sankaran\nCypress Semiconductor\nShyanjia Chen\nEtron Technology, Inc.\nSumeet Gupta\nCypress Semiconductor\nTsungTa Lu\nEtron Technology, Inc.\nTejender Sheoran\nCypress Semiconductor\nChristian Klein\nFairchild Semiconductor\nVenkat Mandagulathar\nCypress Semiconductor\nOscar Freitas\nFairchild Semiconductor\nXiaofeng Shen\nCypress Semiconductor\nSouhib Harb\nFairchild Semiconductor\nZeng Wei\nCypress Semiconductor\nAmanda Ying\nFeature Integration Technology Inc.\nAdie Tan\nDell Inc.\nJacky Chan\nFeature Integration Technology Inc.\nAdolfo Montero\nDell Inc.\nKenny Hsieh\nFeature Integration Technology Inc.\nBruce Montag\nDell Inc.\nKungAn Lin\nFeature Integration Technology Inc.\nGary Verdun\nDell Inc.\nPaul Yang\nFeature Integration Technology Inc.\nKen Nicholas\nDell Inc.\nSu Jaden\nFeature Integration Technology Inc.\nMarcin Nowak\nDell Inc.\nYu-Lin Chu\nFeature Integration Technology Inc.\nMerle Wood\nDell Inc.\nYulin Lan\nFeature Integration Technology Inc.\nMohammed Hijazi\nDell Inc.\nAJ Yang\nFoxconn / Hon Hai\nSiddhartha Reddy\nDell Inc.\nBob Hall\nFoxconn / Hon Hai\nTerry Matula\nDell Inc.\nChihyin Kan\nFoxconn / Hon Hai\nJay Hu\nDerun Semiconductor\nFred Fons\nFoxconn / Hon Hai\nShelly Liu\nDerun Semiconductor\nJie Zheng\nFoxconn / Hon Hai\nBindhu Vasu\nDialog Semiconductor (UK) Ltd\nPatrick Casher\nFoxconn / Hon Hai\nChanchal Gupta\nDialog Semiconductor (UK) Ltd\nShruti Deore\nFoxconn / Hon Hai\nDipti Baheti\nDialog Semiconductor (UK) Ltd\nSteve Sedio\nFoxconn / Hon Hai\nDuc Doan\nDialog Semiconductor (UK) Ltd\nTerry Little\nFoxconn / Hon Hai\nHolger Petersen\nDialog Semiconductor (UK) Ltd\nBob McVay\nFresco Logic Inc.\nJianming Yao\nDialog Semiconductor (UK) Ltd\nChristopher Meyers\nFresco Logic Inc.\nJohn Shi\nDialog Semiconductor (UK) Ltd\nDian Kurniawan\nFresco Logic Inc.\nKE Hong\nDialog Semiconductor (UK) Ltd\nTom Burton\nFresco Logic Inc.\nKevin Mori\nDialog Semiconductor (UK) Ltd\nAbraham Levkoy\nGoogle Inc.\nLarry Ping\nDialog Semiconductor (UK) Ltd\nAdam Rodriguez\nGoogle Inc.\nMengfei Liu\nDialog Semiconductor (UK) Ltd\nAlec Berg\nGoogle Inc.\nScott Brown\nDialog Semiconductor (UK) Ltd\nBartosz Szpila\nGoogle Inc.\nYimin Chen\nDialog Semiconductor (UK) Ltd\nBenson Leung\nGoogle Inc.\nYong Li\nDialog Semiconductor (UK) Ltd\nChao Fei\nGoogle Inc.\nJustin Lee\nDiodes Incorporated\nDave Bernard\nGoogle Inc.\nDan Ellis\nDisplayLink (UK) Ltd.\nDavid Schneider\nGoogle Inc.\nJason Young\nDisplayLink (UK) Ltd.\nDiana Zigterman\nGoogle Inc.\nKevin Jacobs\nDisplayLink (UK) Ltd.\nEric Herrmann\nGoogle Inc.\nPaulo Alcobia\nDisplayLink (UK) Ltd.\nGeorge-Daniel Matei\nGoogle Inc.\nPeter Burgers\nDisplayLink (UK) Ltd.\nJameson Thies\nGoogle Inc.\nRichard Petrie\nDisplayLink (UK) Ltd.\nJim Guerin\nGoogle Inc.\n","image_count":0,"table_count":1}
{"page":8,"text":"Page 8\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nJuan Fantin\nGoogle Inc.\nLee Leppo\nHP Inc.\nKen Wu\nGoogle Inc.\nRahul Lakdawala\nHP Inc.\nKyle Tso\nGoogle Inc.\nRobin Castell\nHP Inc.\nMark Hayter\nGoogle Inc.\nRoger Benson\nHP Inc.\nNathan Kolluru\nGoogle Inc.\nSteve Chen\nHP Inc.\nNithya Jagannathan\nGoogle Inc.\nBai Sean\nHuawei Technologies Co., Ltd.\nSrikanth Lakshmikanthan\nGoogle Inc.\nChunjiang Zhao\nHuawei Technologies Co., Ltd.\nTodd Broch\nGoogle Inc.\nJianQuan Wu\nHuawei Technologies Co., Ltd.\nToshak Singhal\nGoogle Inc.\nLi Zongjian\nHuawei Technologies Co., Ltd.\nVincent Palatin\nGoogle Inc.\nLiansheng Zheng\nHuawei Technologies Co., Ltd.\nXuelin Wu\nGoogle Inc.\nLihua Duan\nHuawei Technologies Co., Ltd.\nZhenxue Xu\nGoogle Inc.\nMin Chen\nHuawei Technologies Co., Ltd.\nAlan Kinningham\nGranite River Labs\nWang Feng\nHuawei Technologies Co., Ltd.\nAnand Murugan\nGranite River Labs\nWei Haihong\nHuawei Technologies Co., Ltd.\nBalamurugan Manialagan\nGranite River Labs\nZhenning Shi\nHuawei Technologies Co., Ltd.\nMedipalli Sowmya\nGranite River Labs\nJames Xie\nHynetek Semiconductor Co., Ltd\nMike Engbretson\nGranite River Labs\nYingyang Ou\nHynetek Semiconductor Co., Ltd\nMike Wu\nGranite River Labs\nRobert Heaton\nIndie Semiconductor\nMukesh Tatiya\nGranite River Labs\nVincent Wang\nIndie Semiconductor\nNaresh Botsa\nGranite River Labs\nBenjamin Kropf\nInfineon Technologies\nPoornaKumar M.\nGranite River Labs\nSie Boo Chiang\nInfineon Technologies\nPrajwal Rathod\nGranite River Labs\nTue Fatt David Wee\nInfineon Technologies\nRajaraman V\nGranite River Labs\nWee Tar Richard Ng\nInfineon Technologies\nSaai Ghoutham Revathi \nSelvam\nGranite River Labs\nWolfgang Furtner\nInfineon Technologies\nSivan Perumal\nGranite River Labs\nAruni Nelson\nIntel Corporation\nSivaram Murugesan\nGranite River Labs\nBob Dunstan\nIntel Corporation\nTim Lin\nGranite River Labs\nBrad Saunders\nIntel Corporation\nVijay S.\nGranite River Labs\nChee Lim Nge\nIntel Corporation\nVijayakumar P\nGranite River Labs\nChristine Krause\nIntel Corporation\nVishal Kakade\nGranite River Labs\nChuen Ming Tan\nIntel Corporation\nYogeshwaran Venkatesan\nGranite River Labs\nDan Froelich\nIntel Corporation\nJerry Qin\nGuangDong OPPO Mobile \nTelecommunications Corp., Ltd.\nDavid Harriman\nIntel Corporation\nAlan Berkema\nHewlett Packard\nDavid Hines\nIntel Corporation\nLee Atkinson\nHewlett Packard\nDavid Thompson\nIntel Corporation\nRahul Lakdawala\nHewlett Packard\nGuobin Liu\nIntel Corporation\nRobin Castell\nHewlett Packard\nHarry Skinner\nIntel Corporation\nRon Schooley\nHewlett Packard\nHenrik Leegaard\nIntel Corporation\nSteve Chen\nHewlett Packard\nJenn Chuan Cheng\nIntel Corporation\nSuketa Partiwala\nHewlett Packard\nJervis Lin\nIntel Corporation\nVaibhav Malik\nHewlett Packard\nJohn Howard\nIntel Corporation\nWalter Fry\nHewlett Packard\nKarthi Vadivelu\nIntel Corporation\nHideyuki HAYAFUJI\nHosiden Corporation\nLeo Heiland\nIntel Corporation\nKeiji Mine\nHosiden Corporation\nMaarit Harkonen\nIntel Corporation\nMasaki Yamaoka\nHosiden Corporation\nNge Chee Lim\nIntel Corporation\nTakashi Muto\nHosiden Corporation\nPaul Durley\nIntel Corporation\nYasunori Nishikawa\nHosiden Corporation\nRahman Ismail\nIntel Corporation\nAlan Berkema\nHP Inc.\nRajaram Regupathy\nIntel Corporation\nKenneth Chan\nHP Inc.\nRonald Swartz\nIntel Corporation\nLee Atkinson\nHP Inc.\nSarah Sharp\nIntel Corporation\n","image_count":0,"table_count":1}
{"page":9,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 9\nSteve McGowan\nIntel Corporation\nEric Wen\nLuxshare-ICT\nTim McKee\nIntel Corporation\nJames Kirk\nLuxshare-ICT\nToby Opferman\nIntel Corporation\nJames Stevens\nLuxshare-ICT\nUma Medepalli\nIntel Corporation\nJosue Castillo\nLuxshare-ICT\nVenkataramani \nGopalakrishnan\nIntel Corporation\nPat Young\nLuxshare-ICT\nZiv Kabiry\nIntel Corporation\nScott Shuey\nLuxshare-ICT\nJia Wei\nIntersil Corporation\nStone Lin\nLuxshare-ICT\nWeijie Huang \niST - Integrated Service \nTechnology Inc.\nChikara Kakizawa\nMaxim Integrated Products\nAl Hsiao\nITE Tech. Inc.\nJacob Scott\nMaxim Integrated Products\nGreg Song\nITE Tech. Inc.\nKen Helfrich\nMaxim Integrated Products\nRichard Guo\nITE Tech. Inc.\nMichael Miskho\nMaxim Integrated Products\nVictor Lin\nITE Tech. Inc.\nChris Yokum\nMCCI Corporation\nY.C. Chou\nITE Tech. Inc.\nGeert Knapen\nMCCI Corporation\nKenta Minejima\nJapan Aviation Electronics \nIndustry Ltd. (JAE)\nTerry Moore\nMCCI Corporation\nMark Saubert\nJapan Aviation Electronics \nIndustry Ltd. (JAE)\nVelmurugan Selvaraj\nMCCI Corporation\nToshio Shimoyama\nJapan Aviation Electronics \nIndustry Ltd. (JAE)\nTung-Sheng Lin\nMediaTek Inc.\nBrian Fetz\nKeysight Technologies Inc.\nSatoru Kumashiro\nMegaChips Corporation\nJit Lim\nKeysight Technologies Inc.\nBrian Marley\nMicrochip Technology Inc.\nKoji Asakawa\nKinetic Technologies Inc.\nDave Perchlik\nMicrochip Technology Inc.\nBabu Mailachalam\nLattice Semiconductor Corp\nDon Perkins\nMicrochip Technology Inc.\nGianluca Mariani\nLattice Semiconductor Corp\nFernando Gonzalez\nMicrochip Technology Inc.\nJoel Coplen\nLattice Semiconductor Corp\nJohn Sisto\nMicrochip Technology Inc.\nThomas Watza\nLattice Semiconductor Corp\nJosh Averyt\nMicrochip Technology Inc.\nVesa Lauri\nLattice Semiconductor Corp\nKiet Tran\nMicrochip Technology Inc.\nBruce Chuang\nLeadtrend\nMark Bohm\nMicrochip Technology Inc.\nEilian Liu\nLeadtrend\nMatthew Kalibat\nMicrochip Technology Inc.\nChetan Kopalle\nLeCroy Corporation\nMick Davis\nMicrochip Technology Inc.\nDaniel H Jacobs\nLeCroy Corporation\nPrasanna Vengateshan\nMicrochip Technology Inc.\nJake Jacobs\nLeCroy Corporation\nRich Wahler\nMicrochip Technology Inc.\nKimberley McKay\nLeCroy Corporation\nRichard Petrie\nMicrochip Technology Inc.\nMike Engbretson\nLeCroy Corporation\nRonald Kunin\nMicrochip Technology Inc.\nMike Micheletti\nLeCroy Corporation\nShannon Cash\nMicrochip Technology Inc.\nRoy Chestnut\nLeCroy Corporation\nThomas Farkas\nMicrochip Technology Inc.\nTyler Joe\nLeCroy Corporation\nVenkataraman \nKrishnamoorthy\nMicrochip Technology Inc.\nPhil Jakes\nLenovo\nAndrew Yang\nMicrosoft Corporation\nDo Kyun Kim\nLG electronics\nAnthony Chen\nMicrosoft Corporation\nWon-Jong Choi\nLG electronics\nArvind Murching\nMicrosoft Corporation\nWon-Jong Choi\nLG Electronics Ltd.\nDave Perchlik\nMicrosoft Corporation\nAaron Melgar\nLion Semiconductor\nDavid Voth\nMicrosoft Corporation\nChris Zhou\nLion Semiconductor\nGeoff Shew\nMicrosoft Corporation\nSehyung Jeon\nLion Semiconductor\nJayson Kastens\nMicrosoft Corporation\nWonyoung Kim\nLion Semiconductor\nKai Inha\nMicrosoft Corporation\nYongho Kim\nLion Semiconductor\nMarwan Kadado\nMicrosoft Corporation\nDave Thompson\nLSI Corporation\nMichelle Bergeron\nMicrosoft Corporation\nAlan Kinningham\nLuxshare-ICT\nNathan Sherman\nMicrosoft Corporation\nAlan Liu\nLuxshare-ICT\nRahul Ramadas\nMicrosoft Corporation\nScott Brenden\nIntel Corporation\nRandy Aull\nMicrosoft Corporation\nSridharan Ranganathan\nIntel Corporation\nShiu Ng\nMicrosoft Corporation\nDaniel Chen\nLuxshare-ICT\nTieyong Yin\nMicrosoft Corporation\n","image_count":0,"table_count":1}
{"page":10,"text":"Page 10\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTimo Toivola\nMicrosoft Corporation\nHung-Chih Chiu\nPower Forest Technology Corporation\nToby Nixon\nMicrosoft Corporation\nJay Tu\nPower Forest Technology Corporation\nVahid Vassey\nMicrosoft Corporation\nAdel Lahham\nPower Integrations\nVivek Gupta\nMicrosoft Corporation\nAditya Kulkarni\nPower Integrations\nYang You\nMicrosoft Corporation\nAkshay Nayaknur\nPower Integrations\nAdib Al Abaji\nMolex LLC\nAmruta Patra\nPower Integrations\nAaron Xu\nMonolithic Power Systems Inc.\nK R Rahul Raj\nPower Integrations\nBo Zhou\nMonolithic Power Systems Inc.\nKaushik Raam\nPower Integrations\nChristian Sporck\nMonolithic Power Systems Inc.\nRahul Joshi\nPower Integrations\nDi Han\nMonolithic Power Systems Inc.\nRicardo Pregiteer\nPower Integrations\nZhihong Yu\nMonolithic Power Systems Inc.\nShruti Anand\nPower Integrations\nDan Wagner\nMotorola Mobility Inc.\nAmit gupta\nQualcomm, Inc\nBen Crowe\nMQP Electronics Ltd.\nGeorge Paparrizos\nQualcomm, Inc\nPat Crowe\nMQP Electronics Ltd.\nGiovanni Garcea\nQualcomm, Inc\nSten Carlsen\nMQP Electronics Ltd.\nJack Pham\nQualcomm, Inc\nKenji Oguma\nNEC Corporation\nJames Goel\nQualcomm, Inc\nChinJui Lin\nNexperia B.V.\nJoshua Warner\nQualcomm, Inc\nMax Guan\nNexperia B.V.\nKaryn Vuong\nQualcomm, Inc\nStefan Seider\nNexperia B.V.\nLalan Mishra\nQualcomm, Inc\nFrank Borngräber\nNokia Corporation\nNicholas Cadieux\nQualcomm, Inc\nKai Inha\nNokia Corporation\nVamsi Samavedam\nQualcomm, Inc\nPekka Leinonen\nNokia Corporation\nVatsal Patel\nQualcomm, Inc\nRichard Petrie\nNokia Corporation\nChris Sporck\nQualcomm, Inc.\nSten Carlsen\nNokia Corporation\nCraig Aiken\nQualcomm, Inc.\nAbhijeet Kulkarni\nNXP Semiconductors\nNarendra Mehta\nQualcomm, Inc.\nAhmad Yazdi\nNXP Semiconductors\nTerry Remple\nQualcomm, Inc.\nBart Vertenten\nNXP Semiconductors\nWill Kun\nQualcomm, Inc.\nDennis Ha\nNXP Semiconductors\nYoram Rimoni\nQualcomm, Inc.\nDong Nguyen\nNXP Semiconductors\nFan-Hau Hsu\nRealtek Semiconductor Corp.\nGuru Prasad\nNXP Semiconductors\nTsung-Peng Chuang\nRealtek Semiconductor Corp.\nKen Jaramillo\nNXP Semiconductors\nAtsushi Mitamura\nRenesas Electronics Corp.\nKrishnan TN\nNXP Semiconductors\nBob Dunstan\nRenesas Electronics Corp.\nMichael Joehren\nNXP Semiconductors\nBrian Allen\nRenesas Electronics Corp.\nRobert de Nie\nNXP Semiconductors\nDan Aoki\nRenesas Electronics Corp.\nRod Whitby\nNXP Semiconductors\nFengshuan Zhou\nRenesas Electronics Corp.\nVijendra Kuroodi\nNXP Semiconductors\nHajime Nozaki\nRenesas Electronics Corp.\nWinston Langeslag\nNXP Semiconductors\nJohn Carpenter\nRenesas Electronics Corp.\nRobert Heaton\nObsidian Technology\nKiichi Muto\nRenesas Electronics Corp.\nAndrew Yoo\nON Semiconductor\nMasami Katagiri\nRenesas Electronics Corp.\nBrady Maasen\nON Semiconductor\nNobuo Furuya\nRenesas Electronics Corp.\nBryan McCoy\nON Semiconductor\nPatrick Yu\nRenesas Electronics Corp.\nChristian Klein\nON Semiconductor\nPeter Teng\nRenesas Electronics Corp.\nCor Voorwinden\nON Semiconductor\nPhilip Leung\nRenesas Electronics Corp.\nEdward Berrios\nON Semiconductor\nSteve Roux\nRenesas Electronics Corp.\nMichael Smith\nON Semiconductor\nTetsu Sato\nRenesas Electronics Corp.\nOscar Freitas\nON Semiconductor\nToshifumi Yamaoka\nRenesas Electronics Corp.\nTom Duffy\nON Semiconductor\nYimin Chen\nRenesas Electronics Corp.\nBrian Collins\nParade Technologies Inc.\nChunan Kuo\nRichtek Technology Corporation\nCraig Wiley\nParade Technologies Inc.\nHeinz Wei\nRichtek Technology Corporation\n","image_count":0,"table_count":1}
{"page":11,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 11\nMax Huang\nRichtek Technology Corporation\nShannon Cash\nSMSC\nTZUHSIEN CHUANG\nRichtek Technology Corporation\nMark Bohm\nSMSC \nTatsuya Irisawa\nRicoh Company Ltd.\nTim Knowlton\nSMSC \nAkihiro Ono\nRohm Co. Ltd.\nWilliam Chiechi\nSMSC\nChris Lin\nRohm Co. Ltd.\nShigenori Tagami\nSony Corporation\nHidenori Nishimoto\nRohm Co. Ltd.\nShinichi Hirata\nSony Corporation\nKris Bahar\nRohm Co. Ltd.\nAmanda Hosler\nSpecwerkz\nManabu Miyata\nRohm Co. Ltd.\nBob Dunstan\nSpecwerkz\nRuben Balbuena\nRohm Co. Ltd.\nBrad Saunders\nSpecwerkz\nTakashi Sato\nRohm Co. Ltd.\nDiane Lenox\nSpecwerkz\nVijendra Kuroodi\nRohm Co. Ltd.\nMichael Munn\nStarTech.com Ltd.\nYusuke Kondo\nRohm Co. Ltd.\nFabien Friess\nST-Ericsson\nKazuomi Nagai\nROHM Co., Ltd.\nGiuseppe Platania\nST-Ericsson\nMatti Kulmala\nSalcomp Plc\nJean-Francois Gatto\nST-Ericsson\nToni Lehimo\nSalcomp Plc\nMilan Stamenkovic\nST-Ericsson\nEdward Lee\nSamsung Electronics Co. Ltd.\nNicolas Florenchie\nST-Ericsson\nTong Kim\nSamsung Electronics Co. Ltd.\nPatrizia Milazzo\nST-Ericsson\nAmit Bouzaglo\nScosche Industries\nChristophe Cochard\nSTMicroelectronics\nAlvin Cox\nSeagate Technology LLC\nChristophe Lorin\nSTMicroelectronics\nEmmanuel Lemay\nSeagate Technology LLC\nFilippo Bonaccorso\nSTMicroelectronics\nJohn Hein\nSeagate Technology LLC\nJessy Guilbot\nSTMicroelectronics\nMarc Noblitt\nSeagate Technology LLC\nJoel Huloux\nSTMicroelectronics\nMichael Morgan\nSeagate Technology LLC\nJohn Bloomfield\nSTMicroelectronics\nRonald Rueckert\nSeagate Technology LLC\nMassimo Panzica\nSTMicroelectronics\nTony Priborsky\nSeagate Technology LLC\nMeriem Mersel\nSTMicroelectronics\nChin Chang\nSemtech Corporation\nNathalie Ballot\nSTMicroelectronics\nTom Farkas\nSemtech Corporation\nPascal Legrand\nSTMicroelectronics\nAnkit Garg\nSiemens Industry Software Inc.\nPatrizia Milazzo\nSTMicroelectronics\nNing Dai\nSilergy Corp.\nRichard O’Connor\nSTMicroelectronics\nWanfeng Zhang\nSilergy Corp.\nMorten Christiansen\nSynopsys, Inc.\nKafai Leung\nSilicon Laboratories, Inc.\nNivin George\nSynopsys, Inc.\nKok Hong Soh\nSilicon Laboratories, Inc.\nPrishkit Abrol\nSynopsys, Inc.\nSorin Badiu\nSilicon Laboratories, Inc.\nZongyao Wen\nSynopsys, Inc.\nSteven Ghang\nSilicon Laboratories, Inc.\nJoan Marrinan\nTektronix\nAbhishek Sardeshpande\nSiliConch Systems Private \nLimited\nKimberley McKay\nTeledyne-LeCroy\nAniket Mathad\nSiliConch Systems Private \nLimited\nMatthew Dunn\nTeledyne-LeCroy\nChandana N\nSiliConch Systems Private \nLimited\nTony Minchell\nTeledyne-LeCroy\nJaswanth Ammineni\nSiliConch Systems Private \nLimited\nAnand Dabak\nTexas Instruments\nJinisha Patel\nSiliConch Systems Private \nLimited\nAnnamalai Kasthuri\nTexas Instruments\nKaustubh Kumar\nSiliConch Systems Private \nLimited\nBIJU Erayamkot \nPanayamthatta\nTexas Instruments\nNitish\nSiliConch Systems Private \nLimited\nBill Waters\nTexas Instruments\nPavitra Balasubramanian\nSiliConch Systems Private \nLimited\nBing Lu\nTexas Instruments\nRakesh Polasa\nSiliConch Systems Private \nLimited\nDeric Waters\nTexas Instruments\nSatish Anand Verkila\nSiliConch Systems Private \nLimited\nGrant Ley\nTexas Instruments\nShubham Paliwal\nSiliConch Systems Private \nLimited\nGregory Watkins\nTexas Instruments\nVishnu Pusuluri\nSiliConch Systems Private \nLimited\nIngolf Frank\nTexas Instruments\nJohn Sisto\nSMSC\nIvo Huber\nTexas Instruments\nKen Gay\nSMSC \nJaved Ahmad\nTexas Instruments\nRichard Wahler\nSMSC \nJean Picard\nTexas Instruments\n","image_count":0,"table_count":1}
{"page":12,"text":"Page 12\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nJohn Perry\nTexas Instruments\nKasthuri Annamalai\nTexas Instruments\nMartin Patoka\nTexas Instruments\nMike Campbell\nTexas Instruments\nScott Jackson\nTexas Instruments\nShafiuddin Mohammed\nTexas Instruments\nSrinath Hosur\nTexas Instruments\nSteven Tom\nTexas Instruments\nYoon Lee\nTexas Instruments\nTim Wilhelm\nThe Silanna Group Pty. Ltd.\nTod Wolf\nThe Silanna Group Pty. Ltd.\nChris Yokum\nTotal Phase\nDylan Su\nUL LLC\nEric Wall\nUL LLC\nJason Smith\nUL LLC\nTerry Kao\nUL LLC\nSteven Chen\nUnigraf OY\nTopi Lampiranta\nUnigraf OY\nBrad Cox\nVentev Mobile\nColin Vose\nVentev Mobile\nDydron Lin\nVIA Technologies, Inc.\nFong-Jim Wang\nVIA Technologies, Inc.\nJay Tseng\nVIA Technologies, Inc.\nRex Chang\nVIA Technologies, Inc.\nTerrance Shih\nVIA Technologies, Inc.\nHo Wen Tsai\nWeltrend Semiconductor\nHung Chiang\nWeltrend Semiconductor\nJeng Cheng Liu\nWeltrend Semiconductor\nPriscilla Lee\nWeltrend Semiconductor\nWayne Lo\nWeltrend Semiconductor\nCharles Neumann\nWestern Digital Technologies, \nInc.\nCurtis Stevens\nWestern Digital Technologies, \nInc.\nJohn Maroney\nWestern Digital Technologies, \nInc.\nJoe O'Brien\nWilder Technologies\nWill Miller\nWilder Technologies\nCanfeng Chen\nXiaomi Communications Co., Ltd.\nJuejia Zhou\nXiaomi Communications Co., Ltd.\nXiaoxing Yang\nXiaomi Communications Co., Ltd.\nLiu Qiong\nZhuhai Smartware Technology \nCo., Ltd.\nLong Zhang\nZhuhai Smartware Technology \nCo., Ltd.\nYuanchao Liang\nZhuhai Smartware Technology \nCo., Ltd.\n","image_count":0,"table_count":1}
{"page":13,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 13\nTable Of Contents\nRevision History  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nLIMITED COPYRIGHT LICENSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nINTELLECTUAL PROPERTY DISCLAIMER . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nEditors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nContributors  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nTable Of Contents  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13\nList of Figures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19\nList of Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .27\n1\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34\n1.1\nOverview............................................................................................................................................ 34\n1.2\nPurpose .............................................................................................................................................. 35\n1.2.1\nScope ..............................................................................................................................................................................36\n1.3\nSection Overview ........................................................................................................................... 36\n1.4\nConventions...................................................................................................................................... 37\n1.4.1\nPrecedence ..................................................................................................................................................................37\n1.4.2\nKeywords .....................................................................................................................................................................37\n1.4.3\nNumbering ..................................................................................................................................................................38\n1.5\nRelated Documents ....................................................................................................................... 39\n1.6\nTerms and Abbreviations........................................................................................................... 40\n1.7\nParameter Values........................................................................................................................... 52\n1.8\nChanges from Revision 3.0......................................................................................................... 52\n1.9\nCompatibility with Revision 2.0 .............................................................................................. 52\n2\nOverview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53\n2.1\nIntroduction ..................................................................................................................................... 53\n2.1.1\nPower Delivery Source Operational Contracts ............................................................................................53\n2.1.2\nPower Delivery Contract Negotiation .............................................................................................................53\n2.1.3\nOther Uses for Power Delivery ...........................................................................................................................54\n2.2\nCompatibility with Revision 2.0 .............................................................................................. 54\n2.3\nUSB Power Delivery Capable Devices................................................................................... 55\n2.4\nSOP* Communication................................................................................................................... 57\n2.4.1\nIntroduction ................................................................................................................................................................57\n2.4.2\nSOP* Collision Avoidance ......................................................................................................................................57\n2.4.3\nSOP Communication ............................................................................................................................................... 57\n2.4.4\nSOP'/SOP'' Communication with Cable Plugs ..............................................................................................57\n2.5\nOperational Overview.................................................................................................................. 59\n2.5.1\nSource Operation ......................................................................................................................................................59\n2.5.2\nSink Operation ...........................................................................................................................................................62\n2.5.3\nCable Plugs ..................................................................................................................................................................65\n2.6\nArchitectural Overview............................................................................................................... 66\n2.6.1\nPolicy ............................................................................................................................................................................. 69\n2.6.2\nMessage Formation and Transmission ...........................................................................................................70\n2.6.3\nCollision Avoidance ................................................................................................................................................. 70\n2.6.4\nPower supply .............................................................................................................................................................71\n2.6.5\nDFP/UFP ......................................................................................................................................................................71\n","image_count":0,"table_count":1}
{"page":14,"text":"Page 14\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n2.6.6\nCable and Connectors ............................................................................................................................................. 72\n2.6.7\nInteractions between Non-PD, BC, and PD devices ...................................................................................72\n2.6.8\nPower Rules ................................................................................................................................................................72\n2.7\nExtended Power Range (EPR) Operation............................................................................ 73\n2.8\nCharging Models............................................................................................................................. 75\n2.8.1\nFixed Supply Charging Models ...........................................................................................................................75\n2.8.2\nProgrammable Power Supply (PPS) Charging Models ............................................................................ 75\n2.8.3\nAdjustable Voltage Supply (AVS) Charging Models ..................................................................................76\n3\nUSB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77\n4\nElectrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78\n4.1\nInteroperability with other USB Specifications................................................................ 78\n4.2\nDead Battery Detection / Unpowered Port Detection................................................... 78\n4.3\nCable IR Ground Drop (IR Drop)............................................................................................. 78\n4.4\nCable Type Detection.................................................................................................................... 78\n5\nPhysical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79\n5.1\nPhysical Layer Overview ............................................................................................................ 79\n5.2\nPhysical Layer Functions............................................................................................................ 79\n5.3\nSymbol Encoding............................................................................................................................ 80\n5.4\nOrdered Sets..................................................................................................................................... 81\n5.5\nTransmitted Bit Ordering........................................................................................................... 83\n5.6\nPacket Format ................................................................................................................................. 84\n5.6.1\nPacket Framing .........................................................................................................................................................84\n5.6.2\nCRC .................................................................................................................................................................................86\n5.6.3\nPacket Detection Errors ........................................................................................................................................89\n5.6.4\nHard Reset ...................................................................................................................................................................89\n5.6.5\nCable Reset ..................................................................................................................................................................90\n5.7\nCollision Avoidance....................................................................................................................... 91\n5.8\nBi-phase Mark Coding (BMC) Signaling Scheme.............................................................. 92\n5.8.1\nEncoding and signaling ..........................................................................................................................................92\n5.8.2\nTransmit and Receive Masks ...............................................................................................................................96\n5.8.3\nTransmitter Load Model .....................................................................................................................................103\n5.8.4\nBMC Common specifications .............................................................................................................................105\n5.8.5\nBMC Transmitter Specifications ......................................................................................................................106\n5.8.6\nBMC Receiver Specifications .............................................................................................................................110\n5.9\nBuilt in Self-Test (BIST)............................................................................................................  113\n5.9.1\nBIST Carrier Mode .................................................................................................................................................113\n5.9.2\nBIST Test Data Mode .............................................................................................................................................113\n6\nProtocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\n6.1\nOverview......................................................................................................................................... 114\n6.2\nMessages......................................................................................................................................... 115\n6.2.1\nMessage Construction ..........................................................................................................................................115\n6.3\nControl Message .......................................................................................................................... 128\n6.3.1\nGoodCRC Message ..................................................................................................................................................129\n6.3.2\nGotoMin Message (Deprecated) .......................................................................................................................129\n6.3.3\nAccept Message .......................................................................................................................................................129\n6.3.4\nReject Message ........................................................................................................................................................129\n6.3.5\nPing Message ............................................................................................................................................................130\n6.3.6\nPS_RDY Message .....................................................................................................................................................130\n6.3.7\nGet_Source_Cap Message ....................................................................................................................................131\n6.3.8\nGet_Sink_Cap Message ..........................................................................................................................................131\n","image_count":0,"table_count":1}
{"page":15,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 15\n6.3.9\nDR_Swap Message ..................................................................................................................................................131\n6.3.10\nPR_Swap Message ..................................................................................................................................................131\n6.3.11\nVCONN_Swap Message ...........................................................................................................................................132\n6.3.12\nWait Message ...........................................................................................................................................................133\n6.3.13\nSoft Reset Message ................................................................................................................................................134\n6.3.14\nData_Reset Message ..............................................................................................................................................135\n6.3.15\nData_Reset_Complete Message .........................................................................................................................135\n6.3.16\nNot_Supported Message ......................................................................................................................................135\n6.3.17\nGet_Source_Cap_Extended Message ...............................................................................................................136\n6.3.18\nGet_Status Message ................................................................................................................................................136\n6.3.19\nFR_Swap Message ..................................................................................................................................................136\n6.3.20\nGet_PPS_Status .........................................................................................................................................................137\n6.3.21\nGet_Country_Codes ................................................................................................................................................137\n6.3.22\nGet_Sink_Cap_Extended Message ....................................................................................................................137\n6.3.23\nGet_Source_Info Message ....................................................................................................................................137\n6.3.24\nGet_Revision Message ..........................................................................................................................................137\n6.4\nData Message ................................................................................................................................  138\n6.4.1\nCapabilities Message .............................................................................................................................................139\n6.4.2\nRequest Message ....................................................................................................................................................155\n6.4.3\nBIST Message ...........................................................................................................................................................159\n6.4.4\nVendor Defined Message .....................................................................................................................................162\n6.4.5\nBattery_Status Message .......................................................................................................................................196\n6.4.6\nAlert Message ...........................................................................................................................................................198\n6.4.7\nGet_Country_Info Message .................................................................................................................................201\n6.4.8\nEnter_USB Message ...............................................................................................................................................202\n6.4.9\nEPR_Request Message ..........................................................................................................................................205\n6.4.10\nEPR_Mode Message ...............................................................................................................................................206\n6.4.11\nSource_Info Message .............................................................................................................................................212\n6.4.12\nRevision Message ...................................................................................................................................................214\n6.5\nExtended Message ...................................................................................................................... 215\n6.5.1\nSource_Capabilities_Extended Message .......................................................................................................216\n6.5.2\nStatus Message ........................................................................................................................................................221\n6.5.3\nGet_Battery_Cap Message ...................................................................................................................................227\n6.5.4\nGet_Battery_Status Message ..............................................................................................................................227\n6.5.5\nBattery_Capabilities Message ...........................................................................................................................228\n6.5.6\nGet_Manufacturer_Info Message ......................................................................................................................230\n6.5.7\nManufacturer_Info Message ..............................................................................................................................231\n6.5.8\nSecurity Messages ..................................................................................................................................................233\n6.5.9\nFirmware Update Messages ..............................................................................................................................234\n6.5.10\nPPS_Status Message ...............................................................................................................................................235\n6.5.11\nCountry_Codes Message ......................................................................................................................................237\n6.5.12\nCountry_Info Message ..........................................................................................................................................238\n6.5.13\nSink_Capabilities_Extended Message ............................................................................................................239\n6.5.14\nExtended_Control Message ................................................................................................................................244\n6.5.15\nEPR Capabilities Message ...................................................................................................................................245\n6.5.16\nVendor_Defined_Extended Message ..............................................................................................................247\n6.6\nTimers.............................................................................................................................................. 249\n6.6.1\nCRCReceiveTimer ...................................................................................................................................................249\n6.6.2\nSenderResponseTimer .........................................................................................................................................249\n6.6.3\nCapability Timers ...................................................................................................................................................249\n6.6.4\nWait Timers and Times ........................................................................................................................................251\n6.6.5\nPower Supply Timers ...........................................................................................................................................251\n6.6.6\nNoResponseTimer .................................................................................................................................................253\n6.6.7\nBIST Timers ..............................................................................................................................................................253\n6.6.8\nPower Role Swap Timers ....................................................................................................................................254\n6.6.9\nSoft Reset Timers ...................................................................................................................................................254\n6.6.10\n Data Reset Timers .................................................................................................................................................254\n6.6.11\nHard Reset Timers .................................................................................................................................................255\n","image_count":0,"table_count":1}
{"page":16,"text":"Page 16\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.6.12\nStructured VDM Timers .......................................................................................................................................255\n6.6.13\nVCONN Timers ...........................................................................................................................................................257\n6.6.14\ntCableMessage .........................................................................................................................................................257\n6.6.15\nDiscoverIdentityTimer .........................................................................................................................................257\n6.6.16\nCollision Avoidance Timers ...............................................................................................................................257\n6.6.17\nFast Role Swap Timers .........................................................................................................................................258\n6.6.18\n Chunking Timers ...................................................................................................................................................258\n6.6.19\nProgrammable Power Supply Timers ...........................................................................................................259\n6.6.20\ntEnterUSB ..................................................................................................................................................................260\n6.6.21\nEPR Timers ................................................................................................................................................................260\n6.6.22\nTime Values and Timers ......................................................................................................................................262\n6.7\nCounters.......................................................................................................................................... 265\n6.7.1\nMessageID Counter ................................................................................................................................................265\n6.7.2\nRetry Counter ...........................................................................................................................................................265\n6.7.3\nHard Reset Counter ...............................................................................................................................................266\n6.7.4\nCapabilities Counter ..............................................................................................................................................266\n6.7.5\nDiscover Identity Counter ..................................................................................................................................266\n6.7.6\nVDMBusyCounter ...................................................................................................................................................266\n6.7.7\nCounter Values and Counters ...........................................................................................................................267\n6.8\nReset ................................................................................................................................................. 268\n6.8.1\nSoft Reset and Protocol Error ...........................................................................................................................268\n6.8.2\nData Reset ..................................................................................................................................................................270\n6.8.3\nHard Reset .................................................................................................................................................................270\n6.8.4\nCable Reset ................................................................................................................................................................271\n6.9\nAccept, Reject and Wait............................................................................................................  272\n6.10\nCollision Avoidance....................................................................................................................  273\n6.11\nMessage Discarding....................................................................................................................  274\n6.12\nState behavior............................................................................................................................... 275\n6.12.1\nIntroduction to state diagrams used in Chapter 6 ...................................................................................275\n6.12.2\nState Operation .......................................................................................................................................................276\n6.12.3\nList of Protocol Layer States ..............................................................................................................................298\n6.13\nMessage Applicability ...............................................................................................................  300\n6.13.1\nApplicability of Control Messages ...................................................................................................................301\n6.13.2\nApplicability of Data Messages .........................................................................................................................303\n6.13.3\nApplicability of Extended Messages ...............................................................................................................305\n6.13.4\nApplicability of Extended Control Messages ..............................................................................................308\n6.13.5\nApplicability of Structured VDM Commands .............................................................................................309\n6.13.6\nApplicability of Reset Signaling ........................................................................................................................310\n6.13.7\nApplicability of Fast Role Swap Request ......................................................................................................310\n6.14\nValue Parameters........................................................................................................................  311\n7\nPower Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312\n7.1\nSource Requirements................................................................................................................  312\n7.1.1\nBehavioral Aspects ................................................................................................................................................312\n7.1.2\nSource Bulk Capacitance .....................................................................................................................................312\n7.1.3\n Types of Sources ....................................................................................................................................................312\n7.1.4\nSource Transitions .................................................................................................................................................313\n7.1.5\nResponse to Hard Resets ....................................................................................................................................322\n7.1.6\nChanging the Output Power Capability ........................................................................................................323\n7.1.7\nRobust Source Operation ....................................................................................................................................323\n7.1.8\nOutput Voltage Tolerance and Range ............................................................................................................325\n7.1.9\nCharging and Discharging the Bulk Capacitance on VBUS .....................................................................328\n7.1.10\nSwap Standby for Sources ..................................................................................................................................328\n7.1.11\nSource Peak Current Operation .......................................................................................................................328\n7.1.12\n Source Capabilities Extended Parameters .................................................................................................329\n7.1.13\nFast Role Swap .........................................................................................................................................................331\n","image_count":0,"table_count":1}
{"page":17,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 17\n7.1.14\nNon-application of VBUS Slew Rate Limits ...................................................................................................332\n7.1.15\nVCONN Power Cycle ................................................................................................................................................333\n7.2\nSink Requirements..................................................................................................................... 335\n7.2.1\nBehavioral Aspects ................................................................................................................................................335\n7.2.2\nSink Bulk Capacitance ..........................................................................................................................................335\n7.2.3\nSink Standby .............................................................................................................................................................335\n7.2.4\nSuspend Power Consumption ...........................................................................................................................336\n7.2.5\nZero Negotiated Current .....................................................................................................................................336\n7.2.6\nTransient Load Behavior ....................................................................................................................................336\n7.2.7\nSwap Standby for Sinks .......................................................................................................................................336\n7.2.8\nSink Peak Current Operation ............................................................................................................................336\n7.2.9\nRobust Sink Operation .........................................................................................................................................337\n7.2.10\nFast Role Swap .........................................................................................................................................................338\n7.3\nTransitions..................................................................................................................................... 339\n7.3.1\nTransitions caused by a Request Message ..................................................................................................340\n7.3.2\nTransitions Caused by Power Role Swap ....................................................................................................388\n7.3.3\nTransitions Caused by Hard Reset ..................................................................................................................396\n7.3.4\nTransitions Caused by Fast Role Swap .........................................................................................................400\n7.4\nElectrical Parameters................................................................................................................  404\n7.4.1\nSource Electrical Parameters ............................................................................................................................404\n7.4.2\nSink Electrical Parameters .................................................................................................................................413\n7.4.3\nCommon Electrical Parameters .......................................................................................................................415\n8\nDevice Policy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\n8.1\nOverview......................................................................................................................................... 416\n8.2\nDevice Policy Manager.............................................................................................................. 417\n8.2.1\nCapabilities ................................................................................................................................................................418\n8.2.2\nSystem Policy ...........................................................................................................................................................418\n8.2.3\nControl of Source/Sink ........................................................................................................................................419\n8.2.4\nCable Detection .......................................................................................................................................................419\n8.2.5\nManaging Power Requirements .......................................................................................................................420\n8.2.6\nUse of \"Unconstrained Power\" bit with Batteries and AC supplies ..................................................421\n8.2.7\nInterface to the Policy Engine ...........................................................................................................................423\n8.3\nPolicy Engine................................................................................................................................. 424\n8.3.1\nIntroduction ..............................................................................................................................................................424\n8.3.2\nAtomic Message Sequence Diagrams ............................................................................................................425\n8.3.3\nState Diagrams .........................................................................................................................................................822\n9\nStates and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975\n9.1\nOverview......................................................................................................................................... 975\n9.1.1\nPDUSB Device and Hub Requirements .........................................................................................................979\n9.1.2\nMapping to USB Device States ..........................................................................................................................980\n9.1.3\nPD Software Stack ..................................................................................................................................................983\n9.1.4\nPDUSB Device Enumeration ..............................................................................................................................984\n9.2\nPD Specific Descriptors ............................................................................................................  985\n9.2.1\nUSB Power Delivery Capability Descriptor .................................................................................................986\n9.2.2\nBattery Info Capability Descriptor ..................................................................................................................987\n9.2.3\nPD Consumer Port Capability Descriptor ....................................................................................................988\n9.2.4\nPD Provider Port Capability Descriptor .......................................................................................................989\n9.3\nPD Specific Requests and Events.......................................................................................... 990\n9.3.1\nPD Specific Requests .............................................................................................................................................990\n9.4\nPDUSB Hub and PDUSB Peripheral Device Requests..................................................  991\n9.4.1\nGetBatteryStatus .....................................................................................................................................................991\n9.4.2\nSetPDFeature ...........................................................................................................................................................992\n10\nPower Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995\n","image_count":0,"table_count":1}
{"page":18,"text":"Page 18\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10.1\nIntroduction .................................................................................................................................. 995\n10.2\nSource Power Rules ...................................................................................................................  995\n10.2.1\nSource Power Rule Considerations ................................................................................................................996\n10.2.2\nNormative Voltages and Currents ...................................................................................................................997\n10.2.3\nOptional Voltages/Currents ............................................................................................................................1005\n10.3\nSink Power Rules ...................................................................................................................... 1013\n10.3.1\nSink Power Rule Considerations ..................................................................................................................1013\n10.3.2\nNormative Sink Rules ........................................................................................................................................1013\nA\nCRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nA.1\nC code example .......................................................................................................................... 1015\nB\nMessage Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC\nVDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nC.1\nDiscover Identity Example.................................................................................................... 1017\nC.1.1\nDiscover Identity Command request ..........................................................................................................1017\nC.1.2\nDiscover Identity Command response - Active Cable. ........................................................................1018\nC.1.3\nDiscover Identity Command response - Hub. .........................................................................................1020\nC.2\nDiscover SVIDs Example........................................................................................................ 1021\nC.2.1\nDiscover SVIDs Command request ..............................................................................................................1021\nC.2.2\nDiscover SVIDs Command response ...........................................................................................................1022\nC.3\nDiscover Modes Example....................................................................................................... 1023\nC.3.1\nDiscover Modes Command request .............................................................................................................1023\nC.3.2\nDiscover Modes Command response .........................................................................................................1024\nC.4\nEnter Mode Example ............................................................................................................... 1025\nC.4.1\nEnter Mode Command request .....................................................................................................................1025\nC.4.2\nEnter Mode Command response ..................................................................................................................1026\nC.4.3\nEnter Mode Command request with additional VDO. .........................................................................1027\nC.5\nExit Mode Example................................................................................................................... 1028\nC.5.1\nExit Mode Command request .........................................................................................................................1028\nC.5.2\nExit Mode Command response ......................................................................................................................1029\nC.6\nAttention Example.................................................................................................................... 1030\nC.6.1\nAttention Command request ..........................................................................................................................1030\nC.6.2\nAttention Command request with additional VDO. ..............................................................................1031\nD\nBMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nD.1\nFinite Difference Scheme....................................................................................................... 1032\nD.1.1\nSample Circuitry ..................................................................................................................................................1032\nD.1.2\nTheory ......................................................................................................................................................................1032\nD.1.3\nData Recovery .......................................................................................................................................................1034\nD.1.4\nNoise Zone and Detection Zone ....................................................................................................................1035\nD.2\nSubtraction Scheme ................................................................................................................. 1036\nD.2.1\nSample Circuitry ..................................................................................................................................................1036\nD.2.2\nOutput of Each Circuit Block ..........................................................................................................................1036\nD.2.3\nSubtractor Output at Power Source and Power Sink ..........................................................................1036\nD.2.4\nNoise Zone and Detection Zone ....................................................................................................................1037\nE\nFRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nE.1\nOverview....................................................................................................................................... 1038\nE.2\nFRS Initial Setup ........................................................................................................................ 1041\nE.3\nFRS Process ................................................................................................................................. 1044\n","image_count":0,"table_count":1}
{"page":19,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 19\nList of Figures\n1\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34\n2\nOverview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53\nFigure  2.1\nLogical Structure of USB Power Delivery Capable Devices..............................................................55\nFigure  2.2\nExample SOP' Communication between VCONN Source and Cable Plug(s) ...............................58\nFigure  2.3\nUSB Power Delivery Communications Stack..........................................................................................67\nFigure  2.4\nUSB Power Delivery Communication Over USB ...................................................................................68\nFigure  2.5\nHigh Level Architecture View ....................................................................................................................... 69\nFigure  2.6\nExample of a Normal EPR Mode Operational Flow.............................................................................74\n3\nUSB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77\n4\nElectrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78\n5\nPhysical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79\nFigure  5.1\nInterpretation of ordered sets......................................................................................................................81\nFigure  5.2\nTransmit Order for Various Sizes of Data................................................................................................83\nFigure  5.3\nUSB Power Delivery Packet Format...........................................................................................................84\nFigure  5.4\nCRC-32 Generation ............................................................................................................................................88\nFigure  5.5\nLine format of Hard Reset...............................................................................................................................89\nFigure  5.6\nLine format of Cable Reset..............................................................................................................................90\nFigure  5.7\nBMC Example .......................................................................................................................................................92\nFigure  5.8\nBMC Transmitter Block Diagram.................................................................................................................92\nFigure  5.9\nBMC Receiver Block Diagram........................................................................................................................93\nFigure  5.10\nBMC Encoded Start of Preamble..................................................................................................................93\nFigure  5.11\nTransmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low \nLast Transition.....................................................................................................................................................94\nFigure  5.12\nTransmitting or Receiving BMC Encoded Frame Terminated by One with High-to-Low \nLast Transition.....................................................................................................................................................94\nFigure  5.13\nTransmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High \nLast Transition.....................................................................................................................................................95\nFigure  5.14\nTransmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last \nTransition .............................................................................................................................................................. 95\nFigure  5.15\nBMC Tx 'ONE' Mask ...........................................................................................................................................96\nFigure  5.16\nBMC Tx 'ZERO' Mask.........................................................................................................................................97\nFigure  5.17\nBMC Rx 'ONE' Mask when Sourcing Power.............................................................................................99\nFigure  5.18\nBMC Rx 'ZERO' Mask when Sourcing Power........................................................................................100\nFigure  5.19\nBMC Rx 'ONE' Mask when Power neutral..............................................................................................100\nFigure  5.20\nBMC Rx 'ZERO' Mask when Power neutral ...........................................................................................101\nFigure  5.21\nBMC Rx 'ONE' Mask when Sinking Power .............................................................................................101\nFigure  5.22\nBMC Rx 'ZERO' Mask when Sinking Power...........................................................................................102\nFigure  5.23\nTransmitter Load Model for BMC Tx from a Source .........................................................................103\nFigure  5.24\nTransmitter Load Model for BMC Tx from a Sink ..............................................................................103\nFigure  5.25\nTransmitter diagram illustrating zDriver..............................................................................................107\nFigure  5.26\nInter-Frame Gap Timings..............................................................................................................................108\nFigure  5.27\nExample Multi-Drop Configuration showing two DRPs..................................................................111\nFigure  5.28\nExample Multi-Drop Configuration showing a DFP and UFP........................................................111\nFigure  5.29\nTest Frame...........................................................................................................................................................113\n6\nProtocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nFigure  6.1\nUSB Power Delivery Packet Format for a Control Message...........................................................115\nFigure  6.2\nUSB Power Delivery Packet Format including Data Message Payload .....................................116\nFigure  6.3\nUSB Power Delivery Packet Format including an Extended Message Header and Payload\n116\n","image_count":0,"table_count":1}
{"page":20,"text":"Page 20\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure  6.4\nExample Security_Request sequence Unchunked (Chunked bit = 0)........................................123\nFigure  6.5\nExample byte transmission for Security_Request Message of Data Size 7 (Chunked bit is \nset to zero)...........................................................................................................................................................123\nFigure  6.6\nExample byte transmission for Security_Response Message of Data Size 30 (Chunked bit \nis set to zero)......................................................................................................................................................124\nFigure  6.7\nExample Security_Request sequence Chunked (Chunked bit = 1)..............................................125\nFigure  6.8\nExample Security_Request Message of Data Size 7 (Chunked bit set to 1).............................126\nFigure  6.9\nExample Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)126\nFigure  6.10\nExample byte transmission for a Security_Response Message Chunk request (Chunked bit \nis set to 1).............................................................................................................................................................127\nFigure  6.11\nExample Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)127\nFigure  6.12\nSPR Capabilities Message Construction..................................................................................................152\nFigure  6.13\nExample Capabilities Message with 2 Power Data Objects............................................................152\nFigure  6.14\nBIST Message .....................................................................................................................................................159\nFigure  6.15\nVendor Defined Message...............................................................................................................................162\nFigure  6.16\nDiscover Identity Command response....................................................................................................169\nFigure  6.17\nDiscover Identity Command response for a DRD...............................................................................169\nFigure  6.18\nExample Discover SVIDs response with 3 SVIDs................................................................................186\nFigure  6.19\nExample Discover SVIDs response with 4 SVIDs................................................................................187\nFigure  6.20\nExample Discover SVIDs response with 12 SVIDs followed by an empty response...........187\nFigure  6.21\nExample Discover Modes response for a given SVID with 3 Modes ..........................................188\nFigure  6.22\nSuccessful Enter Mode sequence...............................................................................................................189\nFigure  6.23\nUnsuccessful Enter Mode sequence due to NAK.................................................................................190\nFigure  6.24\nExit Mode sequence.........................................................................................................................................191\nFigure  6.25\nAttention Command request/response sequence.............................................................................192\nFigure  6.26\nCommand request/response sequence..................................................................................................193\nFigure  6.27\nEnter/Exit Mode Process..............................................................................................................................195\nFigure  6.28\nBattery_Status Message.................................................................................................................................196\nFigure  6.29\nAlert Message.....................................................................................................................................................198\nFigure  6.30\nGet_Country_Info Message ...........................................................................................................................201\nFigure  6.31\nEnter_USB Message .........................................................................................................................................203\nFigure  6.32\nEPR_Request Message....................................................................................................................................205\nFigure  6.33\nEPR Mode DO Message...................................................................................................................................206\nFigure  6.34\nIllustration of process to enter EPR Mode.............................................................................................208\nFigure  6.35\nSource_Info Message.......................................................................................................................................212\nFigure  6.36\nRevision Message Data Object....................................................................................................................214\nFigure  6.37\nSource_Capabilities_Extended Message .................................................................................................216\nFigure  6.38\nSOP Status Message.........................................................................................................................................221\nFigure  6.39\nSOP'/SOP'' Status Message...........................................................................................................................226\nFigure  6.40\nGet_Battery_Cap Message .............................................................................................................................227\nFigure  6.41\nGet_Battery_Status Message ........................................................................................................................227\nFigure  6.42\nBattery_Capabilities Message......................................................................................................................228\nFigure  6.43\nGet_Manufacturer_Info Message................................................................................................................230\nFigure  6.44\nManufacturer_Info Message.........................................................................................................................231\nFigure  6.45\nSecurity_Request Message............................................................................................................................233\nFigure  6.46\nSecurity_Response Message ........................................................................................................................233\nFigure  6.47\nFirmware_Update_Request Message .......................................................................................................234\nFigure  6.48\nFirmware_Update_Response Message....................................................................................................234\nFigure  6.49\nPPS_Status Message.........................................................................................................................................235\nFigure  6.50\nCountry_Codes Message................................................................................................................................237\nFigure  6.51\nCountry_Info Message ....................................................................................................................................238\nFigure  6.52\nSink_Capabilities_Extended Message.......................................................................................................239\nFigure  6.53\nExtended_Control Message ..........................................................................................................................244\nFigure  6.54\nMapping SPR Capabilities to EPR Capabilities.....................................................................................245\nFigure  6.55\nEPR_Source_Capabilities message with no EPR PDOs .....................................................................246\nFigure  6.56\nVendor_Defined_Extended Message ........................................................................................................247\nFigure  6.57\nOutline of States................................................................................................................................................275\nFigure  6.58\nReferences to states.........................................................................................................................................275\n","image_count":0,"table_count":1}
{"page":21,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 21\nFigure  6.59\nChunking architecture Showing Message and Control Flow.........................................................277\nFigure  6.60\nChunked Rx State Diagram...........................................................................................................................278\nFigure  6.61\nChunked Tx State Diagram...........................................................................................................................281\nFigure  6.62\nChunked Message Router State Diagram...............................................................................................284\nFigure  6.63\nCommon Protocol Layer Message Transmission State Diagram.................................................286\nFigure  6.64\nSource Protocol Layer Message Transmission State Diagram......................................................289\nFigure  6.65\nSink Protocol Layer Message Transmission State Diagram...........................................................291\nFigure  6.66\nProtocol layer Message reception.............................................................................................................293\nFigure  6.67\nHard/Cable Reset.............................................................................................................................................295\n7\nPower Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312\nFigure  7.1\nPlacement of Source Bulk Capacitance...................................................................................................312\nFigure  7.2\nTransition Envelope for Positive Voltage Transitions .....................................................................313\nFigure  7.3\nTransition Envelope for Negative Voltage Transitions....................................................................314\nFigure  7.4\nPPS Positive Voltage Transitions...............................................................................................................315\nFigure  7.5\n PPS Negative Voltage Transitions............................................................................................................316\nFigure  7.6\nSPR PPS Programmable Voltage and Current Limit..........................................................................318\nFigure  7.7\nSPR PPS Constant Power...............................................................................................................................319\nFigure  7.8\nAVS Positive Voltage Transitions ..............................................................................................................321\nFigure  7.9\nAVS Negative Voltage Transitions.............................................................................................................321\nFigure  7.10\nSource VBUS and VCONN Response to Hard Reset................................................................................323\nFigure  7.11\nApplication of vSrcNew and vSrcValid limits after tSrcReady......................................................325\nFigure  7.12\nExpected AVS/PPS Ripple Relative to an LSB......................................................................................326\nFigure  7.13\nAllowed DNL errors and tolerance of Voltage and Current in AVS/PPS mode.....................327\nFigure  7.14\nSource Peak Current Overload ...................................................................................................................329\nFigure  7.15\nHoldup Time Measurement.........................................................................................................................330\nFigure  7.16\nVBUS Power during Fast Role Swap ..........................................................................................................331\nFigure  7.17\nVBUS detection and timing during Fast Role Swap, initial VBUS (at new source) > \nvSafe5V(min)......................................................................................................................................................332\nFigure  7.18\n VBUS detection and timing during Fast Role Swap, initial VBUS (at new source) < \nvSafe5V(min)......................................................................................................................................................332\nFigure  7.19\nData Reset UFP VCONN Power Cycle .........................................................................................................333\nFigure  7.20\nData Reset DFP VCONN Power Cycle .........................................................................................................334\nFigure  7.21\nPlacement of Sink Bulk Capacitance ........................................................................................................335\nFigure  7.22\nTransition Diagram for Increasing the Voltage...................................................................................342\nFigure  7.23\nTransition Diagram for Increasing the Voltage and Current.........................................................345\nFigure  7.24\nTransition Diagram for Increasing the Voltage and Decreasing the Current.........................348\nFigure  7.25\nTransition Diagram for Decreasing the Voltage and Increasing the Current.........................351\nFigure  7.26\nTransition Diagram for Decreasing the Voltage..................................................................................354\nFigure  7.27\nTransition Diagram for Decreasing the Voltage and the Current................................................357\nFigure  7.28\nTransition Diagram for no change in Current or Voltage...............................................................360\nFigure  7.29\nTransition Diagram for Increasing the Current ..................................................................................362\nFigure  7.30\nTransition Diagram for Decreasing the Current.................................................................................365\nFigure  7.31\nTransition Diagram for Increasing the Programmable Power Supply Voltage.....................368\nFigure  7.32\nTransition Diagram for Decreasing the Programmable Power Supply Voltage ...................371\nFigure  7.33\nTransition Diagram for increasing the Current in PPS mode........................................................374\nFigure  7.34\nTransition Diagram for decreasing the Current in PPS mode.......................................................377\nFigure  7.35\nTransition Diagram for no change in Current or Voltage in PPS mode....................................380\nFigure  7.36\nTransition Diagram for Increasing the Adjustable Power Supply Voltage..............................382\nFigure  7.37\nTransition Diagram for Decreasing the Adjustable Voltage Supply Voltage..........................385\nFigure  7.38\nTransition Diagram for no change in Current or Voltage in AVS mode....................................387\nFigure  7.39\nTransition Diagram for a Sink Requested Power Role Swap ........................................................389\nFigure  7.40\nTransition Diagram for a Source Requested Power Role Swap...................................................393\nFigure  7.41\nTransition Diagram for a Source Initiated Hard Reset.....................................................................397\nFigure  7.42\nTransition Diagram for a Sink Initiated Hard Reset..........................................................................399\nFigure  7.43\nTransition Diagram for Fast Role Swap..................................................................................................401\n","image_count":0,"table_count":1}
{"page":22,"text":"Page 22\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8\nDevice Policy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\nFigure  8.1\nExample of daisy chained displays ...........................................................................................................422\nFigure  8.2\nBasic Message Exchange (Successful).....................................................................................................426\nFigure  8.3\nBasic Message flow indicating possible errors....................................................................................427\nFigure  8.4\nBasic Message Flow with Bad followed by a Retry............................................................................428\nFigure  8.5\nSuccessful Fixed, Variable or Battery SPR Power Negotiation.....................................................448\nFigure  8.6\nRejected Fixed, Variable or Battery SPR Power Negotiation.........................................................452\nFigure  8.7\nWait response to Fixed, Variable or Battery SPR Power Negotiation.......................................455\nFigure  8.8\nSPR PPS Keep Alive..........................................................................................................................................458\nFigure  8.9\nSPR Sink Makes Request (Accept) ............................................................................................................461\nFigure  8.10\nSPR Sink Makes Request (Reject)..............................................................................................................464\nFigure  8.11\nSPR Sink Makes Request (Wait).................................................................................................................467\nFigure  8.12\nEntering EPR Mode (Success).....................................................................................................................470\nFigure  8.13\nEntering EPR Mode (Failure due to non-EPR cable).........................................................................473\nFigure  8.14\nEntering EPR Mode (Failure of VCONN Swap).......................................................................................476\nFigure  8.15\nSuccessful Fixed EPR Power Negotiation ..............................................................................................480\nFigure  8.16\nRejected Fixed EPR Power Negotiation..................................................................................................484\nFigure  8.17\nWait response to Fixed EPR Power Negotiation.................................................................................487\nFigure  8.18\nEPR Keep Alive ..................................................................................................................................................490\nFigure  8.19\nExiting EPR Mode (Sink Initiated) ............................................................................................................493\nFigure  8.20\nExiting EPR Mode (Source Initiated).......................................................................................................496\nFigure  8.21\nEPR Sink Makes Request (Accept)............................................................................................................499\nFigure  8.22\nEPR Sink Makes Request (Reject) .............................................................................................................502\nFigure  8.23\nEPR Sink Makes Request (Wait) ................................................................................................................505\nFigure  8.24\nUnsupported message....................................................................................................................................508\nFigure  8.25\nSoft Reset .............................................................................................................................................................511\nFigure  8.26\nDFP Initiated Data Reset where the DFP is the VCONN Source......................................................514\nFigure  8.27\nDFP Receives Data Reset where the DFP is the VCONN Source .....................................................517\nFigure  8.28\nDFP Initiated Data Reset where the UFP is the VCONN Source......................................................520\nFigure  8.29\nDFP Receives a Data Reset where the UFP is the VCONN Source..................................................524\nFigure  8.30\nSource initiated Hard Reset.........................................................................................................................528\nFigure  8.31\nSink Initiated Hard Reset..............................................................................................................................531\nFigure  8.32\nSource initiated reset - Sink long reset...................................................................................................534\nFigure  8.33\nSuccessful Power Role Swap Sequence Initiated by the Source..................................................538\nFigure  8.34\nRejected Power Role Swap Sequence Initiated by the Source......................................................542\nFigure  8.35\nPower Role Swap Sequence with wait Initiated by the Source....................................................545\nFigure  8.36\nSuccessful Power Role Swap Sequence Initiated by the Sink .......................................................549\nFigure  8.37\nRejected Power Role Swap Sequence Initiated by the Sink...........................................................553\nFigure  8.38\nPower Role Swap Sequence with wait Initiated by the Sink.........................................................556\nFigure  8.39\nSuccessful Fast Role Swap Sequence .......................................................................................................560\nFigure  8.40\nData Role Swap, UFP operating as Sink initiates................................................................................564\nFigure  8.41\nRejected Data Role Swap, UFP operating as Sink initiates.............................................................567\nFigure  8.42\nData Role Swap with Wait, UFP operating as Sink initiates...........................................................570\nFigure  8.43\nData Role Swap, UFP operating as Source initiates...........................................................................573\nFigure  8.44\nRejected Data Role Swap, UFP operating as Source initiates........................................................576\nFigure  8.45\nData Role Swap with Wait, UFP operating as Source initiates .....................................................579\nFigure  8.46\nData Role Swap, DFP operating as Source initiates...........................................................................582\nFigure  8.47\nRejected Data Role Swap, DFP operating as Source initiates........................................................585\nFigure  8.48\nData Role Swap with Wait, DFP operating as Source initiates .....................................................588\nFigure  8.49\nData Role Swap, DFP operating as Sink initiates................................................................................591\nFigure  8.50\nRejected Data Role Swap, DFP operating as Sink initiates.............................................................594\nFigure  8.51\nData Role Swap with Wait, DFP operating as Sink initiates...........................................................597\nFigure  8.52\nSuccessful VCONN Source Swap, initiated by VCONN Source.........................................................600\nFigure  8.53\nRejected VCONN Source Swap, initiated by VCONN Source.............................................................603\nFigure  8.54\nVCONN Source Swap with Wait, initiated by VCONN Source.............................................................606\nFigure  8.55\nVCONN Source Swap, initiated by non-VCONN Source.........................................................................609\nFigure  8.56\nRejected VCONN Source Swap, initiated by non-VCONN Source......................................................612\n","image_count":0,"table_count":1}
{"page":23,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 23\nFigure  8.57\nVCONN Source Swap with Wait....................................................................................................................615\nFigure  8.58\nSource Alert to Sink.........................................................................................................................................618\nFigure  8.59\nSink Alert to Source.........................................................................................................................................620\nFigure  8.60\nSink Gets Source Status..................................................................................................................................622\nFigure  8.61\nSource Gets Sink Status..................................................................................................................................625\nFigure  8.62\nVCONN Source Gets Cable Plug Status.......................................................................................................628\nFigure  8.63\nSink Gets Source PPS Status.........................................................................................................................631\nFigure  8.64\nSink Gets Source's Capabilities...................................................................................................................634\nFigure  8.65\nDual-Role Source Gets Dual-Role Sink's Capabilities as a Source ...............................................637\nFigure  8.66\nSource Gets Sink's Capabilities...................................................................................................................640\nFigure  8.67\nDual-Role Sink Gets Dual-Role Source's Capabilities as a Sink ....................................................643\nFigure  8.68\nSink Gets Source's EPR Capabilities.........................................................................................................646\nFigure  8.69\nDual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source...................................649\nFigure  8.70\nSource Gets Sink's EPR Capabilities.........................................................................................................652\nFigure  8.71\nDual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink........................................655\nFigure  8.72\nSink Gets Source's Extended Capabilities..............................................................................................658\nFigure  8.73\nDual-Role Source Gets Dual-Role Sink's Extended Capabilities...................................................661\nFigure  8.74\nSource Gets Sink's Extended Capabilities..............................................................................................664\nFigure  8.75\nDual-Role Sink Gets Dual-Role Source's Extended Capabilities...................................................667\nFigure  8.76\nSink Gets Source's Battery Capabilities ..................................................................................................670\nFigure  8.77\nSource Gets Sink's Battery Capabilities ..................................................................................................673\nFigure  8.78\nSink Gets Source's Battery Status..............................................................................................................676\nFigure  8.79\nSource Gets Sink's Battery Status..............................................................................................................679\nFigure  8.80\nSource Gets Sink's Port Manufacturer Information ..........................................................................682\nFigure  8.81\nSink Gets Source's Port Manufacturer Information ..........................................................................685\nFigure  8.82\nSource Gets Sink's Battery Manufacturer Information....................................................................688\nFigure  8.83\nSink Gets Source's Battery Manufacturer Information....................................................................691\nFigure  8.84\nVCONN Source Gets Cable Plug's Manufacturer Information..........................................................694\nFigure  8.85\nSource Gets Sink's Country Codes.............................................................................................................697\nFigure  8.86\nSink Gets Source's Country Codes.............................................................................................................700\nFigure  8.87\nVCONN Source Gets Cable Plug's Country Codes..................................................................................703\nFigure  8.88\nSource Gets Sink's Country Information................................................................................................706\nFigure  8.89\nSink Gets Source's Country Information................................................................................................709\nFigure  8.90\nVCONN Source Gets Cable Plug's Country Information .....................................................................712\nFigure  8.91\nSource Gets Sink's Revision Information...............................................................................................715\nFigure  8.92\nSink Gets Source's Revision Information...............................................................................................718\nFigure  8.93\nVCONN Source Gets Cable Plug's Revision Information ....................................................................721\nFigure  8.94\nSink Gets Source's Information..................................................................................................................724\nFigure  8.95\nDual-Role Source Gets Dual-Role Sink's Information as a Source...............................................727\nFigure  8.96\nSource requests security exchange with Sink......................................................................................730\nFigure  8.97\nSink requests security exchange with Source......................................................................................733\nFigure  8.98\nVCONN Source requests security exchange with Cable Plug...........................................................736\nFigure  8.99\nSource requests firmware update exchange with Sink ...................................................................739\nFigure  8.100\nSink requests firmware update exchange with Source ...................................................................742\nFigure  8.101\nVCONN Source requests firmware update exchange with Cable Plug.........................................745\nFigure  8.102\nInitiator to Responder Discover Identity (ACK).................................................................................748\nFigure  8.103\nInitiator to Responder Discover Identity (NAK).................................................................................751\nFigure  8.104\nInitiator to Responder Discover Identity (BUSY)...............................................................................754\nFigure  8.105\nInitiator to Responder Discover SVIDs (ACK) .....................................................................................757\nFigure  8.106\nInitiator to Responder Discover SVIDs (NAK).....................................................................................760\nFigure  8.107\nInitiator to Responder Discover SVIDs (BUSY)...................................................................................763\nFigure  8.108\nInitiator to Responder Discover Modes (ACK)....................................................................................766\nFigure  8.109\nInitiator to Responder Discover Modes (NAK) ...................................................................................769\nFigure  8.110\nInitiator to Responder Discover Modes (BUSY)..................................................................................772\nFigure  8.111\nDFP to UFP Enter Mode.................................................................................................................................775\nFigure  8.112\nDFP to UFP Exit Mode.....................................................................................................................................778\nFigure  8.113\nDFP to Cable Plug Enter Mode....................................................................................................................781\nFigure  8.114\nDFP to Cable Plug Exit Mode .......................................................................................................................784\n","image_count":0,"table_count":1}
{"page":24,"text":"Page 24\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure  8.115\nInitiator to Responder Attention...............................................................................................................787\nFigure  8.116\nBIST Carrier Mode Test .................................................................................................................................789\nFigure  8.117\nBIST Test Data Test .........................................................................................................................................792\nFigure  8.118\nBIST Share Capacity Mode Test..................................................................................................................795\nFigure  8.119\nUFP Entering USB4 Mode (Accept)...........................................................................................................798\nFigure  8.120\nUFP Entering USB4 Mode (Reject)............................................................................................................801\nFigure  8.121\nUFP Entering USB4 Mode (Wait)...............................................................................................................804\nFigure  8.122\nCable Plug Entering USB4 Mode (Accept) .............................................................................................807\nFigure  8.123\nCable Plug Entering USB4 Mode (Reject)...............................................................................................810\nFigure  8.124\nCable Plug Entering USB4 Mode (Wait)..................................................................................................813\nFigure  8.125\nUnstructured VDM Message Sequence ...................................................................................................816\nFigure  8.126\nVDEM Message Sequence..............................................................................................................................819\nFigure  8.127\nOutline of States................................................................................................................................................822\nFigure  8.128\nReferences to states.........................................................................................................................................823\nFigure  8.129\nExample of state reference with conditions .........................................................................................823\nFigure  8.130\nExample of state reference with the same entry and exit ..............................................................823\nFigure  8.131\nSenderResponseTimer Policy Engine State Diagram.......................................................................825\nFigure  8.132\nSource Port State Diagram ...........................................................................................................................827\nFigure  8.133\nSink Port State Diagram.................................................................................................................................835\nFigure  8.134\nSOP Source Port Soft Reset and Protocol Error State Diagram....................................................841\nFigure  8.135\nSink Port Soft Reset and Protocol Error Diagram..............................................................................843\nFigure  8.136\nDFP Data_Reset Message State Diagram................................................................................................845\nFigure  8.137\nUFP Data_Reset Message State Diagram ................................................................................................847\nFigure  8.138\nSource Port Not Supported Message State Diagram.........................................................................850\nFigure  8.139\nSink Port Not Supported Message State Diagram..............................................................................852\nFigure  8.140\nSource Port Source Alert State Diagram.................................................................................................854\nFigure  8.141\nSink Port Source Alert State Diagram......................................................................................................855\nFigure  8.142\nSink Port Sink Alert State Diagram...........................................................................................................856\nFigure  8.143\nSource Port Sink Alert State Diagram......................................................................................................857\nFigure  8.144\nSink Port Get Source Capabilities Extended State Diagram...........................................................858\nFigure  8.145\nSource Give Source Capabilities Extended State Diagram..............................................................859\nFigure  8.146\nSource Port Get Sink Capabilities Extended State Diagram...........................................................860\nFigure  8.147\nSink Give Sink Capabilities Extended State Diagram........................................................................861\nFigure  8.148\nSink Port Get Source Information State Diagram...............................................................................862\nFigure  8.149\nSource Give Source Information State Diagram..................................................................................863\nFigure  8.150\nGet Status State Diagram...............................................................................................................................864\nFigure  8.151\nGive Status State Diagram.............................................................................................................................865\nFigure  8.152\nSink Port Get Source PPS Status State Diagram..................................................................................866\nFigure  8.153\nSource Give Source PPS Status State Diagram.....................................................................................867\nFigure  8.154\nGet Battery Capabilities State Diagram...................................................................................................868\nFigure  8.155\nGive Battery Capabilities State Diagram ................................................................................................869\nFigure  8.156\nGet Battery Status State Diagram..............................................................................................................870\nFigure  8.157\nGive Battery Status State Diagram............................................................................................................871\nFigure  8.158\nGet Manufacturer Information State Diagram.....................................................................................872\nFigure  8.159\nGive Manufacturer Information State Diagram...................................................................................873\nFigure  8.160\nGet Country Codes State Diagram.............................................................................................................874\nFigure  8.161\nGive Country Codes State Diagram...........................................................................................................875\nFigure  8.162\nGet Country Information State Diagram.................................................................................................876\nFigure  8.163\nGive Country Information State Diagram ..............................................................................................877\nFigure  8.164\nGet Revision State Diagram..........................................................................................................................878\nFigure  8.165\nGive Revision State Diagram .......................................................................................................................879\nFigure  8.166\nDFP Enter_USB Message State Diagram .................................................................................................880\nFigure  8.167\nUFP Enter_USB Message State Diagram .................................................................................................881\nFigure  8.168\nSend security request State Diagram.......................................................................................................882\nFigure  8.169\nSend security response State Diagram....................................................................................................883\nFigure  8.170\nSecurity response received State Diagram............................................................................................884\nFigure  8.171\nSend firmware update request State Diagram ....................................................................................885\nFigure  8.172\nSend firmware update response State Diagram.................................................................................886\n","image_count":0,"table_count":1}
{"page":25,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 25\nFigure  8.173\nFirmware update response received State Diagram.........................................................................887\nFigure  8.174\nDFP to UFP Data Role Swap State Diagram...........................................................................................888\nFigure  8.175\nUFP to DFP Data Role Swap State Diagram...........................................................................................891\nFigure  8.176\nDual-Role Port in Source to Sink Power Role Swap State Diagram............................................894\nFigure  8.177\nDual-role Port in Sink to Source Power Role Swap State Diagram.............................................898\nFigure  8.178\nDual-Role Port in Source to Sink Fast Role Swap State Diagram.................................................902\nFigure  8.179\nDual-role Port in Sink to Source Fast Role Swap State Diagram..................................................906\nFigure  8.180\nDual-Role (Source) Get Source Capabilities diagram .......................................................................909\nFigure  8.181\nDual-Role (Source) Give Sink Capabilities diagram ..........................................................................910\nFigure  8.182\nDual-Role (Sink) Get Sink Capabilities State Diagram......................................................................911\nFigure  8.183\nDual-Role (Sink) Give Source Capabilities State Diagram ..............................................................912\nFigure  8.184\nDual-Role (Source) Get Source Capabilities Extended State Diagram ......................................913\nFigure  8.185\nDual-Role (Sink) Give Source Capabilities Extended diagram......................................................914\nFigure  8.186\nDual-Role (Sink) Get Sink Capabilities Extended State Diagram.................................................915\nFigure  8.187\nDual-Role (Source) Give Sink Capabilities Extended diagram......................................................916\nFigure  8.188\nDual-Role (Source) Get Source Information State Diagram ..........................................................917\nFigure  8.189\nDual-Role (Source) Give Source Information diagram ....................................................................918\nFigure  8.190\nVCONN Swap State Diagram ..........................................................................................................................919\nFigure  8.191\nInitiator to Port VDM Discover Identity State Diagram...................................................................922\nFigure  8.192\nInitiator VDM Discover SVIDs State Diagram ......................................................................................924\nFigure  8.193\nInitiator VDM Discover Modes State Diagram.....................................................................................926\nFigure  8.194\nInitiator VDM Attention State Diagram ..................................................................................................928\nFigure  8.195\nResponder Structured VDM Discover Identity State Diagram .....................................................929\nFigure  8.196\nResponder Structured VDM Discover SVIDs State Diagram..........................................................930\nFigure  8.197\nResponder Structured VDM Discover Modes State Diagram........................................................931\nFigure  8.198\nReceiving a Structured VDM Attention State Diagram ....................................................................932\nFigure  8.199\nDFP VDM Mode Entry State Diagram ......................................................................................................933\nFigure  8.200\nDFP VDM Mode Exit State Diagram..........................................................................................................935\nFigure  8.201\nUFP Structured VDM Enter Mode State Diagram...............................................................................937\nFigure  8.202\nUFP Structured VDM Exit Mode State Diagram...................................................................................939\nFigure  8.203\nCable Ready State Diagram..........................................................................................................................941\nFigure  8.204\nCable Plug Soft Reset State Diagram........................................................................................................942\nFigure  8.205\nCable Plug Hard Reset State Diagram......................................................................................................943\nFigure  8.206\nDFP/VCONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram.........944\nFigure  8.207\nUFP/VCONN Source Soft Reset of a Cable Plug or VPD State Diagram .......................................946\nFigure  8.208\nSource Startup Structured VDM Discover Identity State Diagram .............................................947\nFigure  8.209\nCable Plug Structured VDM Enter Mode State Diagram..................................................................949\nFigure  8.210\nCable Plug Structured VDM Exit Mode State Diagram .....................................................................951\nFigure  8.211\nSource EPR Mode Entry State Diagram ..................................................................................................953\nFigure  8.212\nSink EPR Mode Entry State Diagram........................................................................................................956\nFigure  8.213\nSource EPR Mode Exit State Diagram......................................................................................................958\nFigure  8.214\nSink EPR Mode Exit State Diagram...........................................................................................................959\nFigure  8.215\nBIST Carrier Mode State Diagram.............................................................................................................960\nFigure  8.216\nBIST Test Data Mode State Diagram ........................................................................................................962\nFigure  8.217\nBIST Shared Capacity Test Mode State Diagram ................................................................................964\n9\nStates and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975\nFigure  9.1\nExample PD Topology ....................................................................................................................................976\nFigure  9.2\nMapping of PD Topology to USB................................................................................................................977\nFigure  9.3\nUse of SPM in the PD System.......................................................................................................................978\nFigure  9.4\nUSB Attached to USB Powered State Transition.................................................................................980\nFigure  9.5\nAny USB State to USB Attached State Transition (When operating as a Consumer)..........981\nFigure  9.6\nAny USB State to USB Attached State Transition (When operating as a Provider).............981\nFigure  9.7\nAny USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)..982\nFigure  9.8\nSoftware stack on a PD aware OS..............................................................................................................983\nFigure  9.9\nEnumeration of a PDUSB Device................................................................................................................984\n","image_count":0,"table_count":1}
{"page":26,"text":"Page 26\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10\nPower Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995\nFigure  10.1\nSPR Source Power Rule Illustration for Fixed Supply PDOs.......................................................1000\nFigure  10.2\nSPR Source Power Rule Example For Fixed Supply PDOs...........................................................1001\nFigure  10.3\nValid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\n1003\nFigure  10.4\nValid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\n1003\nFigure  10.5\nValid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤ \n100W...................................................................................................................................................................1004\nFigure  10.6\nValid EPR AVS Operating Region............................................................................................................1011\nFigure  10.7\nEPR Source Power Rule Illustration for Fixed PDOs......................................................................1012\nA\nCRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nB\nMessage Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC\nVDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nD\nBMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nFigure  D.1\nCircuit Block of BMC Finite Difference Receiver..............................................................................1032\nFigure  D.2\nBMC AC and DC noise from VBUS at Power Sink...............................................................................1033\nFigure  D.3\nSample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise.............1033\nFigure  D.4\nScaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with \nUSB 2.0 Noise ..................................................................................................................................................1034\nFigure  D.5\nBMC Signal and Finite Difference Output with Various Time Steps........................................1034\nFigure  D.6\nOutput of Finite Difference in dash line and Edge Detector in solid line..............................1035\nFigure  D.7\nNoise Zone and Detect Zone of BMC Receiver..................................................................................1035\nFigure  D.8\nCircuit Block of BMC Subtraction Receiver........................................................................................1036\nFigure  D.9\n(a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output..............................1036\nFigure  D.10\nOutput of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at \nPower Source (b) at Power Sink.............................................................................................................1037\nE\nFRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nFigure  E.1\nExample FRS Capable System..................................................................................................................1038\nFigure  E.2\nSlow VBUS Discharge ....................................................................................................................................1039\nFigure  E.3\nFast VBUS Discharge......................................................................................................................................1040\nFigure  E.4\nSlow VBUS discharge after FR_Swap message is sent.....................................................................1044\nFigure  E.5\nVBUS discharges quickly before FR_Swap message is sent after adapter disconnected.1046\n","image_count":0,"table_count":1}
{"page":27,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 27\nList of Tables\nRevision History  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2\nLIMITED COPYRIGHT LICENSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nINTELLECTUAL PROPERTY DISCLAIMER . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5\nEditors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nContributors  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6\nTable Of Contents  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .13\nList of Figures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .19\nList of Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .27\n1\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .34\nTable 1.1\nSection Overview....................................................................................................................................................36\nTable 1.2\nKeywords ...................................................................................................................................................................37\nTable 1.3\nDocument References...........................................................................................................................................39\nTable 1.4\nTerms and Abbreviations.................................................................................................................................... 40\n2\nOverview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53\nTable 2.1\nFixed Supply Power Ranges...............................................................................................................................75\nTable 2.2\nPPS Voltage Power Ranges.................................................................................................................................75\nTable 2.3\nAVS Voltage Power Ranges ................................................................................................................................ 76\n3\nUSB Type-A and USB Type-B Cable Assemblies and Connectors . . . . . .77\n4\nElectrical Requirements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .78\n5\nPhysical Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .79\nTable 5.1\n4b5b Symbol Encoding ........................................................................................................................................80\nTable 5.2\nOrdered Sets .............................................................................................................................................................81\nTable 5.3\nValidation of Ordered Sets.................................................................................................................................. 82\nTable 5.4\nData Size .....................................................................................................................................................................83\nTable 5.5\nSOP Ordered Set......................................................................................................................................................84\nTable 5.6\nSOP’ Ordered Set.....................................................................................................................................................85\nTable 5.7\nSOP’’ Ordered Set....................................................................................................................................................85\nTable 5.8\nSOP’_Debug Ordered Set......................................................................................................................................86\nTable 5.9\nSOP’’_Debug Ordered Set.....................................................................................................................................86\nTable 5.10\nCRC-32 Mapping .....................................................................................................................................................88\nTable 5.11\nHard Reset Ordered Set .......................................................................................................................................89\nTable 5.12\nCable Reset Ordered Set ......................................................................................................................................90\nTable 5.13\nRp values used for Collision Avoidance.........................................................................................................91\nTable 5.14\nBMC Tx Mask Definition, X Values................................................................................................................... 97\nTable 5.15\nBMC Tx Mask Definition, Y Values................................................................................................................... 98\nTable 5.16\nBMC Rx Mask Definition....................................................................................................................................102\nTable 5.17\nBMC Common Normative Requirements...................................................................................................105\nTable 5.18\nBMC Transmitter Normative Requirements.............................................................................................106\nTable 5.19\nBMC Receiver Normative Requirements....................................................................................................110\n6\nProtocol Layer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114\nTable 6.1\nMessage Header ....................................................................................................................................................116\nTable 6.2\nRevision Interoperability during an Explicit Contract.........................................................................119\nTable 6.3\nExtended Message Header................................................................................................................................120\nTable 6.4\nUse of Unchunked Message Supported bit................................................................................................122\nTable 6.5\nControl Message Types ......................................................................................................................................128\n","image_count":0,"table_count":1}
{"page":28,"text":"Page 28\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 6.6\nData Message Types ............................................................................................................................................138\nTable 6.7\nPower Data Object................................................................................................................................................139\nTable 6.8\nAugmented Power Data Object.......................................................................................................................140\nTable 6.9\nFixed Supply PDO – Source ..............................................................................................................................141\nTable 6.10\nFixed Power Source Peak Current Capability ..........................................................................................143\nTable 6.11\nVariable Supply (non-Battery) PDO – Source ..........................................................................................143\nTable 6.12\nBattery Supply PDO – Source ..........................................................................................................................144\nTable 6.13\nSPR Programmable Power Supply APDO – Source................................................................................145\nTable 6.14\nSPR Adjustable Voltage Supply APDO – Source.......................................................................................146\nTable 6.15\nEPR Adjustable Voltage Supply APDO – Source......................................................................................146\nTable 6.16\nEPR AVS Power Source Peak Current Capability....................................................................................147\nTable 6.17\nFixed Supply PDO – Sink....................................................................................................................................148\nTable 6.18\nVariable Supply (non-Battery) PDO – Sink................................................................................................149\nTable 6.19\nBattery Supply PDO – Sink................................................................................................................................150\nTable 6.20\nSPR Programmable Power Supply APDO – Sink.....................................................................................150\nTable 6.21\nSPR Adjustable Voltage Supply APDO – Sink............................................................................................151\nTable 6.22\nEPR Adjustable Voltage Supply APDO – Sink ...........................................................................................151\nTable 6.23\nFixed and Variable Request Data Object ....................................................................................................155\nTable 6.24\nBattery Request Data Object............................................................................................................................156\nTable 6.25\nPPS Request Data Object ...................................................................................................................................156\nTable 6.26\nAVS Request Data Object...................................................................................................................................156\nTable 6.27\nBIST Data Object ...................................................................................................................................................160\nTable 6.28\nUnstructured VDM Header...............................................................................................................................163\nTable 6.29\nStructured VDM Header ....................................................................................................................................164\nTable 6.30\nStructured VDM Commands ............................................................................................................................165\nTable 6.31\nSVID Values .............................................................................................................................................................165\nTable 6.32\nCommands and Responses...............................................................................................................................167\nTable 6.33\nID Header VDO.......................................................................................................................................................169\nTable 6.34\nProduct Types (UFP)...........................................................................................................................................170\nTable 6.35\nProduct Types (Cable Plug/VPD) ..................................................................................................................171\nTable 6.36\nProduct Types (DFP)...........................................................................................................................................171\nTable 6.37\nCert Stat VDO..........................................................................................................................................................172\nTable 6.38\nProduct VDO ...........................................................................................................................................................172\nTable 6.39\nUFP VDO ...................................................................................................................................................................172\nTable 6.40\nDFP VDO ...................................................................................................................................................................175\nTable 6.41\nPassive Cable VDO................................................................................................................................................176\nTable 6.42\nActive Cable VDO1................................................................................................................................................179\nTable 6.43\nActive Cable VDO2................................................................................................................................................180\nTable 6.44\nVPD VDO...................................................................................................................................................................184\nTable 6.45\nDiscover SVIDs Responder VDO.....................................................................................................................186\nTable 6.46\nBattery Status Data Object (BSDO)...............................................................................................................196\nTable 6.47\nAlert Data Object (ADO).....................................................................................................................................198\nTable 6.48\nCountry Code Data Object (CCDO)................................................................................................................201\nTable 6.49\nEnter_USB Data Object (EUDO)......................................................................................................................203\nTable 6.50\nEPR Mode Data Object (EPRMDO)................................................................................................................206\nTable 6.51\nSource_Info Data Object (SIDO)......................................................................................................................212\nTable 6.52\nRevision Message Data Object (RMDO)......................................................................................................214\nTable 6.53\nExtended Message Types..................................................................................................................................215\nTable 6.54\nSource Capabilities Extended Data Block (SCEDB) ...............................................................................216\nTable 6.55\nSOP Status Data Block (SDB)...........................................................................................................................221\nTable 6.56\n “SOP’/SOP’’ Status Data Block (SPDB)”......................................................................................................226\nTable 6.57\nGet Battery Cap Data Block (GBCDB)...........................................................................................................227\nTable 6.58\nGet Battery Status Data Block (GBSDB)......................................................................................................227\nTable 6.59\n Battery Capability Data Block (BCDB)”......................................................................................................228\nTable 6.60\nGet Manufacturer Info Data Block (GMIDB) .............................................................................................230\nTable 6.61\nManufacturer Info Data Block (MIDB) ........................................................................................................231\nTable 6.62\n PPS Status Data Block (PPSSDB)...................................................................................................................235\nTable 6.63\nCountry Codes Data Block (CCDB)................................................................................................................237\n","image_count":0,"table_count":1}
{"page":29,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 29\nTable 6.64\nCountry Info Data Block (CIDB) .....................................................................................................................238\nTable 6.65\n Sink Capabilities Extended Data Block (SKEDB)...................................................................................239\nTable 6.66\nExtended Control Data Block (ECDB)..........................................................................................................244\nTable 6.67\nExtended Control Message Types .................................................................................................................244\nTable 6.68\nTime Values.............................................................................................................................................................262\nTable 6.69\nTimers........................................................................................................................................................................264\nTable 6.70\nCounter Parameters ............................................................................................................................................267\nTable 6.71\nCounters ...................................................................................................................................................................267\nTable 6.72\nResponse to an incoming Message (except VDM)..................................................................................269\nTable 6.73\nResponse to an incoming VDM.......................................................................................................................269\nTable 6.74\nMessage Discarding.............................................................................................................................................274\nTable 6.75\nProtocol Layer States..........................................................................................................................................298\nTable 6.76\nMessage Applicability Abbreviations...........................................................................................................300\nTable 6.77\nApplicability of Control Messages.................................................................................................................301\nTable 6.78\nApplicability of Data Messages.......................................................................................................................303\nTable 6.79\nApplicability of Extended Messages.............................................................................................................305\nTable 6.80\nApplicability of Extended Control Messages ............................................................................................308\nTable 6.81\nApplicability of Structured VDM Commands............................................................................................309\nTable 6.82\nApplicability of Reset Signaling......................................................................................................................310\nTable 6.83\nApplicability of Fast Role Swap Request....................................................................................................310\nTable 6.84\nValue Parameters .................................................................................................................................................311\n7\nPower Supply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312\nTable 7.1\nSequence Description for Increasing the Voltage...................................................................................343\nTable 7.2\nSequence Diagram for Increasing the Voltage and Current...............................................................346\nTable 7.3\nSequence Description for Increasing the Voltage and Decreasing the Current ........................349\nTable 7.4\nSequence Description for Decreasing the Voltage and Increasing the Current ........................352\nTable 7.5\nSequence Description for Decreasing the Voltage .................................................................................355\nTable 7.6\nSequence Description for Decreasing the Voltage and the Current ...............................................358\nTable 7.7\nSequence Description for no change in Current or Voltage...............................................................360\nTable 7.8\nSequence Description for Increasing the Current..................................................................................363\nTable 7.9\nSequence Description for Decreasing the Current.................................................................................366\nTable 7.10\nSequence Description for Increasing the Programmable Power Supply Voltage ....................369\nTable 7.11\nSequence Description for Decreasing the Programmable Power Supply Voltage...................372\nTable 7.12\nSequence Description for increasing the Current in PPS mode .......................................................375\nTable 7.13\nSequence Description for decreasing the Current in PPS mode ......................................................378\nTable 7.14\nSequence Description for no change in Current or Voltage in PPS mode....................................380\nTable 7.15\nSequence Description for Increasing the Adjustable Voltage Supply Voltage...........................383\nTable 7.16\nSequence Description for Decreasing the Adjustable Voltage Supply Voltage..........................386\nTable 7.17\nSequence Description for no change in Current or Voltage in AVS mode ...................................387\nTable 7.18\nSequence Description for a Sink Requested Power Role Swap........................................................390\nTable 7.19\nSequence Description for a Source Requested Power Role Swap...................................................394\nTable 7.20\nSequence Description for a Source Initiated Hard Reset ....................................................................397\nTable 7.21\nSequence Description for a Sink Initiated Hard Reset .........................................................................399\nTable 7.22\nSequence Description for Fast Role Swap .................................................................................................402\nTable 7.23\nSource Electrical Parameters..........................................................................................................................404\nTable 7.24\nSink Electrical Parameters ...............................................................................................................................413\nTable 7.25\nCommon Source/Sink Electrical Parameters...........................................................................................415\n8\nDevice Policy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416\nTable 8.1\nBasic Message Flow.............................................................................................................................................426\nTable 8.2\nPotential issues in Basic Message Flow ......................................................................................................427\nTable 8.3\nBasic Message Flow with CRC failure ..........................................................................................................429\nTable 8.4\nAtomic Message Sequences..............................................................................................................................430\nTable 8.5\nAMS: Power Negotiation (SPR) ......................................................................................................................431\nTable 8.6\nAMS: Power Negotiation (EPR)......................................................................................................................432\nTable 8.7\nAMS: Unsupported Message ............................................................................................................................434\n","image_count":0,"table_count":1}
{"page":30,"text":"Page 30\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.8\nAMS: Soft Reset......................................................................................................................................................434\nTable 8.9\nAMS: Data Reset ....................................................................................................................................................434\nTable 8.10\nAMS: Power Role Swap ......................................................................................................................................435\nTable 8.11\nAMS: Fast Role Swap...........................................................................................................................................435\nTable 8.12\nAMS: Data Role Swap..........................................................................................................................................436\nTable 8.13\nAMS: VCONN Swap.................................................................................................................................................437\nTable 8.14\nAMS: Alert................................................................................................................................................................437\nTable 8.15\nAMS: Status..............................................................................................................................................................438\nTable 8.16\nAMS: Source/Sink Capabilities (SPR) ..........................................................................................................438\nTable 8.17\nAMS: Source/Sink Capabilities (EPR)..........................................................................................................439\nTable 8.18\nAMS: Extended Capabilities .............................................................................................................................440\nTable 8.19\nAMS: Battery Capabilities..................................................................................................................................440\nTable 8.20\nAMS: Manufacturer Information....................................................................................................................441\nTable 8.21\nAMS: Country Codes............................................................................................................................................441\nTable 8.22\nAMS: Country Information ...............................................................................................................................441\nTable 8.23\nAMS: Revision Information ..............................................................................................................................442\nTable 8.24\nAMS: Source Information..................................................................................................................................442\nTable 8.25\nAMS: Security .........................................................................................................................................................442\nTable 8.26\nAMS: Firmware Update......................................................................................................................................443\nTable 8.27\nAMS: Structured VDM.........................................................................................................................................444\nTable 8.28\nAMS: Built-In Self-Test (BIST).........................................................................................................................445\nTable 8.29\nAMS: Enter USB .....................................................................................................................................................445\nTable 8.30\nAMS: Unstructured VDM ...................................................................................................................................445\nTable 8.31\nAMS: Hard Reset ...................................................................................................................................................446\nTable 8.32\nSteps for a successful Power Negotiation..................................................................................................449\nTable 8.33\nSteps for a rejected Power Negotiation ......................................................................................................453\nTable 8.34\nSteps for a Wait response to a Power Negotiation.................................................................................456\nTable 8.35\nSteps for SPR PPS Keep Alive ..........................................................................................................................459\nTable 8.36\nSteps for SPR Sink Makes Request (Accept).............................................................................................462\nTable 8.37\nSteps for SPR Sink Makes Request (Reject) ..............................................................................................465\nTable 8.38\nSteps for SPR Sink Makes Request (Wait) .................................................................................................468\nTable 8.39\nSteps for Entering EPR Mode (Success)......................................................................................................471\nTable 8.40\nSteps for Entering EPR Mode (Failure due to non-EPR cable) .........................................................474\nTable 8.41\nSteps for Entering EPR Mode (Failure of VCONN Swap) .......................................................................477\nTable 8.42\nSteps for a successful EPR Power Negotiation ........................................................................................481\nTable 8.43\nSteps for a Rejected EPR Power Negotiation............................................................................................485\nTable 8.44\nSteps for a Wait response to an EPR Power Negotiation....................................................................488\nTable 8.45\nSteps for EPR Keep Alive...................................................................................................................................491\nTable 8.46\nSteps for Exiting EPR Mode (Sink Initiated).............................................................................................494\nTable 8.47\nSteps for Exiting EPR Mode (Source Initiated)........................................................................................497\nTable 8.48\nSteps for EPR Sink Makes Request (Accept).............................................................................................500\nTable 8.49\nSteps for EPR Sink Makes Request (Reject)..............................................................................................503\nTable 8.50\nSteps for SPR Sink Makes Request (Wait) .................................................................................................506\nTable 8.51\nSteps for an Unsupported Message ..............................................................................................................509\nTable 8.52\nSteps for a Soft Reset...........................................................................................................................................512\nTable 8.53\nSteps for a DFP Initiated Data Reset where the DFP is the VCONN Source...................................515\nTable 8.54\nSteps for a DFP Receiving a Data Reset where the DFP is the VCONNSource..............................518\nTable 8.55\nSteps for a DFP Initiated Data Reset where the UFP is the VCONN Source...................................521\nTable 8.56\nSteps for a DFP Receiving a Data Reset where the UFP is the VCONN Source.............................525\nTable 8.57\nSteps for Source initiated Hard Reset..........................................................................................................529\nTable 8.58\nSteps for Sink initiated Hard Reset...............................................................................................................532\nTable 8.59\nSteps for Source initiated Hard Reset - Sink long reset .......................................................................535\nTable 8.60\nSteps for a Successful Source Initiated Power Role Swap Sequence .............................................539\nTable 8.61\nSteps for a Rejected Source Initiated Power Role Swap Sequence.................................................543\nTable 8.62\nSteps for a Source Initiated Power Role Swap with Wait Sequence...............................................546\nTable 8.63\nSteps for a Successful Sink Initiated Power Role Swap Sequence...................................................550\nTable 8.64\nSteps for a Rejected Sink Initiated Power Role Swap Sequence ......................................................554\nTable 8.65\nSteps for a Sink Initiated Power Role Swap with Wait Sequence....................................................557\n","image_count":0,"table_count":1}
{"page":31,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 31\nTable 8.66\nSteps for a Successful Fast Role Swap Sequence ....................................................................................561\nTable 8.67\nSteps for Data Role Swap, UFP operating as Sink initiates.................................................................565\nTable 8.68\nSteps for Rejected Data Role Swap, UFP operating as Sink initiates..............................................568\nTable 8.69\nSteps for Data Role Swap with Wait, UFP operating as Sink initiates ...........................................571\nTable 8.70\nSteps for Data Role Swap, UFP operating as Source initiates............................................................574\nTable 8.71\nSteps for Rejected Data Role Swap, UFP operating as Source initiates.........................................577\nTable 8.72\nSteps for Data Role Swap with Wait, UFP operating as Source initiates......................................580\nTable 8.73\nSteps for Data Role Swap, DFP operating as Source initiates............................................................583\nTable 8.74\nSteps for Rejected Data Role Swap, DFP operating as Source initiates ........................................586\nTable 8.75\nSteps for Data Role Swap with Wait, DFP operating as Source initiates......................................589\nTable 8.76\nSteps for Data Role Swap, DFP operating as Sink initiates.................................................................592\nTable 8.77\nSteps for Rejected Data Role Swap, DFP operating as Sink initiates..............................................595\nTable 8.78\nSteps for Data Role Swap with Wait, DFP operating as Sink initiates ...........................................598\nTable 8.79\nSteps for Source to Sink VCONN Source Swap ...........................................................................................601\nTable 8.80\nSteps for Rejected VCONN Source Swap.......................................................................................................604\nTable 8.81\nSteps for VCONN Source Swap with Wait.....................................................................................................607\nTable 8.82\nSteps for VCONN Source Swap, Initiated by non-VCONN Source.........................................................610\nTable 8.83\nSteps for Rejected VCONN Source Swap, Initiated by non-VCONN Source......................................613\nTable 8.84\nSteps for VCONN Source Swap with Wait.....................................................................................................616\nTable 8.85\nSteps for Source Alert to Sink..........................................................................................................................619\nTable 8.86\nSteps for Sink Alert to Source..........................................................................................................................621\nTable 8.87\nSteps for a Sink getting Source Status Sequence.....................................................................................623\nTable 8.88\nSteps for a Source getting Sink Status Sequence.....................................................................................626\nTable 8.89\nSteps for a VCONN Source getting Cable Plug Status Sequence..........................................................629\nTable 8.90\nSteps for a Sink getting Source PPS status Sequence............................................................................632\nTable 8.91\nSteps for a Sink getting Source Capabilities Sequence.........................................................................635\nTable 8.92\nSteps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence...638\nTable 8.93\nSteps for a Source getting Sink Capabilities Sequence.........................................................................641\nTable 8.94\nSteps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence ...........644\nTable 8.95\nSteps for a Sink getting EPR Source Capabilities Sequence ...............................................................647\nTable 8.96\nSteps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Se-\nquence .......................................................................................................................................................................650\nTable 8.97\nSteps for a Source getting Sink EPR Capabilities Sequence ...............................................................653\nTable 8.98\nSteps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\n656\nTable 8.99\nSteps for a Sink getting Source Extended Capabilities Sequence ....................................................659\nTable 8.100\nSteps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence.........662\nTable 8.101\nSteps for a Source getting Sink Extended Capabilities Sequence ....................................................665\nTable 8.102\nSteps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence.........668\nTable 8.103\nSteps for a Sink getting Source Battery capabilities Sequence.........................................................671\nTable 8.104\nSteps for a Source getting Sink Battery capabilities Sequence.........................................................674\nTable 8.105\nSteps for a Sink getting Source Battery status Sequence ....................................................................677\nTable 8.106\nSteps for a Source getting Sink Battery status Sequence ....................................................................680\nTable 8.107\nSteps for a Source getting Sink's Port Manufacturer Information Sequence .............................683\nTable 8.108\nSteps for a Source getting Sink's Port Manufacturer Information Sequence .............................686\nTable 8.109\nSteps for a Source getting Sink's Battery Manufacturer Information Sequence.......................689\nTable 8.110\nSteps for a Source getting Sink's Battery Manufacturer Information Sequence.......................692\nTable 8.111\nSteps for a VCONN Source getting Sink's Port Manufacturer Information Sequence ...............695\nTable 8.112\nSteps for a Source getting Country Codes Sequence.............................................................................698\nTable 8.113\nSteps for a Source getting Sink's Country Codes Sequence................................................................701\nTable 8.114\nSteps for a VCONN Source getting Sink's Country Codes Sequence..................................................704\nTable 8.115\nSteps for a Source getting Country Information Sequence ................................................................707\nTable 8.116\nSteps for a Source getting Sink's Country Information Sequence...................................................710\nTable 8.117\nSteps for a VCONN Source getting Sink's Country Information Sequence.....................................713\nTable 8.118\nSteps for a Source getting Revision Information Sequence ...............................................................716\nTable 8.119\nSteps for a Source getting Sink's Revision Information Sequence..................................................719\nTable 8.120\nSteps for a VCONN Source getting Sink's Revision Information Sequence....................................722\nTable 8.121\nSteps for a Sink getting Source Information Sequence ........................................................................725\n","image_count":0,"table_count":1}
{"page":32,"text":"Page 32\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.122\nSteps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence .728\nTable 8.123\nSteps for a Source requesting a security exchange with a Sink Sequence...................................731\nTable 8.124\nSteps for a Sink requesting a security exchange with a Source Sequence...................................734\nTable 8.125\nSteps for a VCONN Source requesting a security exchange with a Cable Plug Sequence........737\nTable 8.126\nSteps for a Source requesting a firmware update exchange with a Sink Sequence.................740\nTable 8.127\nSteps for a Sink requesting a firmware update exchange with a Source Sequence.................743\nTable 8.128\nSteps for a VCONN Source requesting a firmware update exchange with a Cable Plug Se-\nquence .......................................................................................................................................................................746\nTable 8.129\nSteps for Initiator to UFP Discover Identity (ACK)................................................................................749\nTable 8.130\nSteps for Initiator to UFP Discover Identity (NAK) ...............................................................................752\nTable 8.131\nSteps for Initiator to UFP Discover Identity (BUSY)..............................................................................755\nTable 8.132\nSteps for DFP to UFP Discover SVIDs (ACK).............................................................................................758\nTable 8.133\nSteps for DFP to UFP Discover SVIDs (NAK) ............................................................................................761\nTable 8.134\nSteps for DFP to UFP Discover SVIDs (BUSY) ..........................................................................................764\nTable 8.135\nSteps for DFP to UFP Discover Modes (ACK) ...........................................................................................767\nTable 8.136\nSteps for DFP to UFP Discover Modes (NAK)...........................................................................................770\nTable 8.137\nSteps for DFP to UFP Discover Modes (BUSY).........................................................................................773\nTable 8.138\nSteps for DFP to UFP Enter Mode..................................................................................................................776\nTable 8.139\nSteps for DFP to UFP Exit Mode .....................................................................................................................779\nTable 8.140\nSteps for DFP to Cable Plug Enter Mode.....................................................................................................782\nTable 8.141\nSteps for DFP to Cable Plug Exit Mode........................................................................................................785\nTable 8.142\nSteps for Initiator to Responder Attention................................................................................................788\nTable 8.143\nSteps for BIST Carrier Mode Test..................................................................................................................790\nTable 8.144\nSteps for BIST Test Data Test..........................................................................................................................793\nTable 8.145\nSteps for BIST Shared Capacity Test Mode Test .....................................................................................796\nTable 8.146\nSteps for UFP USB4 Mode Entry (Accept)..................................................................................................799\nTable 8.147\nSteps for UFP USB4 Mode Entry (Reject)...................................................................................................802\nTable 8.148\nSteps for UFP USB4 Mode Entry (Wait)......................................................................................................805\nTable 8.149\nSteps for Cable Plug USB4 Mode Entry (Accept) ....................................................................................808\nTable 8.150\nSteps for Cable Plug USB4 Mode Entry (Reject)......................................................................................811\nTable 8.151\nSteps for Cable Plug USB4 Mode Entry (Wait).........................................................................................814\nTable 8.152\nSteps for Unstructured VDM Message Sequence....................................................................................817\nTable 8.153\nSteps for VDEM Message Sequence ..............................................................................................................820\nTable 8.154\nPolicy Engine States.............................................................................................................................................966\n9\nStates and Status Reporting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975\nTable 9.1\nUSB Power Delivery Type Codes ...................................................................................................................985\nTable 9.2\nUSB Power Delivery Capability Descriptor...............................................................................................986\nTable 9.3\nBattery Info Capability Descriptor................................................................................................................987\nTable 9.4\nPD Consumer Port Descriptor.........................................................................................................................988\nTable 9.5\nPD Provider Port Descriptor............................................................................................................................989\nTable 9.6\nPD Requests ............................................................................................................................................................990\nTable 9.7\nPD Request Codes.................................................................................................................................................990\nTable 9.8\nPD Feature Selectors...........................................................................................................................................990\nTable 9.9\nGet Battery Status Request...............................................................................................................................991\nTable 9.10\nBattery Status Structure....................................................................................................................................991\nTable 9.11\nSet PD Feature........................................................................................................................................................992\nTable 9.12\nBattery Wake Mask..............................................................................................................................................993\nTable 9.13\nCharging Policy Encoding .................................................................................................................................994\n10\nPower Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995\nTable 10.1\nConsiderations for Sources ..............................................................................................................................996\nTable 10.2\nSPR Normative Voltages and Minimum Currents ..................................................................................997\nTable 10.3\nSPR Source Capabilities When Port Present PDP is less than Port Maximum PDP.................998\nTable 10.4\nSPR Source Port Present PDP less than Port Maximum PDP Examples.......................................999\nTable 10.5\nFixed Supply PDO - Source 5V......................................................................................................................1001\nTable 10.6\nFixed Supply PDO - Source 9V......................................................................................................................1002\n","image_count":0,"table_count":1}
{"page":33,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 33\nTable 10.7\nFixed Supply PDO - Source 15V...................................................................................................................1002\nTable 10.8\nFixed Supply PDO - Source 20V...................................................................................................................1002\nTable 10.9\nSPR Adjustable Voltage Supply (AVS) Voltage Ranges......................................................................1004\nTable 10.10\nSPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP...1005\nTable 10.11\nSPR Programmable Power Supply Voltage Ranges............................................................................1006\nTable 10.12\nEPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\n1009\nTable 10.14\nEPR Source Examples when Port Present PDP is less than Port Maximum PDP...................1010\nTable 10.13\nEPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using \nan EPR-capable cable.......................................................................................................................................1010\nTable 10.15\nEPR Adjustable Voltage Supply (AVS) Voltage Ranges.....................................................................1012\nA\nCRC calculation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1015\nB\nMessage Sequence Examples (Deprecated) . . . . . . . . . . . . . . . . . . . . . . . 1016\nC\nVDM Command Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1017\nTable C.1\nDiscover Identity Command request from Initiator Example .......................................................1017\nTable C.2\nDiscover Identity Command response from Active Cable Responder Example ....................1018\nTable C.3\nDiscover Identity Command response from Hub Responder Example .....................................1020\nTable C.4\nDiscover SVIDs Command request from Initiator Example............................................................1021\nTable C.5\nDiscover SVIDs Command response from Responder Example ...................................................1022\nTable C.6\nDiscover Modes Command request from Initiator Example ..........................................................1023\nTable C.7\nDiscover Modes Command response from Responder Example..................................................1024\nTable C.8\nEnter Mode Command request from Initiator Example...................................................................1025\nTable C.9\nEnter Mode Command response from Responder Example...........................................................1026\nTable C.10\nEnter Mode Command request with additional VDO Example .....................................................1027\nTable C.11\nExit Mode Command request from Initiator Example ......................................................................1028\nTable C.12\nExit Mode Command response from Responder Example..............................................................1029\nTable C.13\nAttention Command request from Initiator Example........................................................................1030\nTable C.14\nAttention Command request from Initiator with additional VDO Example ............................1031\nD\nBMC Receiver Design Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032\nE\nFRS System Level Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038\nTable E.1\nSequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)...............1041\nTable E.2\nSequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\n1042\nTable E.3\nSequence for slow VBUS discharge (it discharges after FR_Swap message is sent)..............1045\nTable E.4\nVBUS discharges quickly after adapter disconnected.........................................................................1046\n","image_count":0,"table_count":1}
{"page":34,"text":"Page 34\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n1\n Introduction\nUSB has evolved from a data interface capable of supplying limited power to a primary provider of power with a \ndata interface. Today many devices charge or get their power from USB Ports contained in laptops, cars, aircraft or \neven wall sockets. USB has become a ubiquitous power socket for many small devices such as cell phones and other \nhand-held devices. Users need USB to fulfill their requirements not only in terms of data but also to provide power \nto, or charge, their devices simply, often without the need to load a driver, in order to carry out “traditional” USB \nfunctions.\nThere are, however, still many devices which either require an additional power connection to the wall, or exceed \nthe USB default current in order to operate. Increasingly, international regulations require better energy \nmanagement due to ecological and practical concerns relating to the availability of power. Regulations limit the \namount of power available from the wall which has led to a pressing need to optimize power usage. The USB Power \nDelivery Specification has the potential to minimize waste as it becomes a standard for charging devices that are \nnot satisfied by [USBBC 1.2] or [USB Type-C 2.4].\nWider usage of wireless solutions is an attempt to remove data cabling but the need for “tethered” charging \nremains. In addition, industrial design requirements drive wired connectivity to do much more over the same \nconnector.\nUSB Power Delivery is designed to enable the maximum functionality of USB by providing more flexible power \ndelivery along with data over a single cable. Its aim is to operate with and build on the existing USB ecosystem; \nincreasing power levels from existing USB standards, for example [USBBC 1.2], enabling new higher power use \ncases such as USB powered Hard Disk Drives (HDDs), laptops and monitors.\nWith USB Power Delivery the power direction is no longer fixed. This enables the product with the power (USB \nHost or Peripheral) to provide the power. For example, a display with a supply from the wall can power, or charge, \na laptop. Alternatively, USB Chargers are able to supply power to laptops and other Battery powered devices \nthrough their, traditional power providing, USB Ports.\nUSB Power Delivery enables Hubs (including Hubs embedded in other devices such as docks or monitors) to \nbecome the means to optimize power management across multiple peripherals by allowing each device to take \nonly the power it requires, and to get more power when required for a given application. Optionally the Hubs can \ncommunicate with the PC to enable even more intelligent and flexible management of power either automatically \nor with some level of user intervention.\nUSB Power Delivery allows low power cases such as headsets to Negotiate for only the power they require. This \nprovides a simple solution that enables USB devices to operate at their optimal power levels. \nThe Power Delivery Specification, in addition to providing mechanisms to Negotiate power also can be used as a \nside-band channel for standard and vendor defined messaging. The specification enables discovery of cable \nCapabilities such as supported speeds and current levels. Power Delivery enables alternative modes of operation \nby providing the mechanisms to discover, enter and exit Modes such as EPR Mode, USB4® Mode or Alternate \nModes.\n1.1\n  Overview\nThis specification defines how USB Devices can Negotiate for more current and/or higher or lower voltages over \nthe USB cable (using the USB Type-C® CC wire as the communications channel) than are defined in the [USB 2.0], \n[USB 3.2], [USB4], [USB Type-C 2.4] or [USBBC 1.2] specifications. It allows Devices with greater power \nrequirements than can be met with today's specification to get the power they require to operate from VBUS and \nNegotiate with external power sources (e.g., Chargers).\nIn addition, it allows a Source and Sink to swap Power Roles such that a USB Device could supply power to the USB \nHost. For example, a display could supply power to a laptop to operate or charge its Battery. This specification also \nadds a mechanism to swap the Data Roles such that the upstream facing Port becomes the downstream facing Port \nand vice versa. It also enables a swap of the end supplying VCONN to a powered cable.\nThe USB Power Delivery Specification is guided by the following principles:\n\nWorks seamlessly with legacy USB Devices.\n","image_count":0,"table_count":1}
{"page":35,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 35\n\nCompatible with existing spec-compliant USB cables.\n\nMinimizes potential damage from non-compliant cables (e.g., ‘Y’ cables etc.).\n\nOptimized for low-cost implementations.\nThis specification defines mechanisms to discover, enter and exit Alternate Modes defined either by a standard or \nby a particular vendor. These Alternate Modes can be supported either by the Port Partner or by a cable connecting \nthe two Port Partners.\nThe specification defines mechanisms to discover the Capabilities of cables which can communicate using Power \nDelivery.\nTo facilitate optimum charging, the specification defines two mechanisms a USB Charger can Advertise for the \ndevice to use:\n1)\nA list of Fixed Supply voltages each with a maximum current. The device selects a voltage and current \nfrom the list. This is the traditional model used by devices that use internal electronics to manage the \ncharging of their Battery including modifying the voltage and current actually supplied to the Battery. \nThe side-effect of this model is that the charging circuitry generates heat that can be problematic for \nsmall form factor devices.\n2)\nA list of programmable voltage ranges, in SPR PPS Mode, each with a maximum current. The device re-\nquests a voltage (in 20mV increments) that is within the Advertised range and a maximum current. The \nUSB PPS Charger delivers the requested voltage until the maximum current is reached at which time \nthe USB PPS Charger reduces its output voltage so as not to supply more than the requested maximum \ncurrent. During the high current portion of the charge cycle, the USB PPS Charger can be directly con-\nnected (through an appropriate safety device) to the Battery. This model is used by devices that want \nto minimize the thermal impact of their internal charging circuitry.\n3)\nA list of adjustable voltage ranges, in SPR AVS Mode or EPR AVS Mode, each with a maximum current. \nThe device requests a voltage (in 100mV increments) that is within the Advertised range and a maxi-\nmum current. The USB AVS Charger delivers the requested voltage.\n1.2\n  Purpose\nThe USB Power Delivery specification defines a power delivery system covering all elements of a USB system \nincluding USB Hosts, USB Devices, Hubs, Chargers and cable assemblies. This specification describes the \narchitecture, protocols, power supply behavior, connectors and cabling necessary for managing power delivery \nover USB at up to 100W in SPR Mode and 240W in EPR Mode. This specification is intended to be fully compatible \nwith and extend the existing USB infrastructure. It is intended that this specification will allow system OEMs, \npower supply and Peripheral developers adequate flexibility for product versatility and market differentiation \nwithout losing backwards compatibility.\nUSB Power Delivery is designed to operate independently of the existing USB bus defined mechanisms used to \nNegotiate power which are:\n\n[USB 2.0], [USB 3.2] in band requests for high power interfaces.\n\n[USBBC 1.2] mechanisms for supplying higher power (not mandated by this specification).\n\n[USB Type-C 2.4] mechanisms for supplying higher power.\nInitial operating conditions remain the USB Default Operation as defined in [USB 2.0], [USB 3.2], [USB Type-C 2.4] \nor [USBBC 1.2].\n\nThe DFP sources vSafe5V over VBUS.\n\nThe UFP consumes power from VBUS.\n","image_count":0,"table_count":1}
{"page":36,"text":"Page 36\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n1.2.1\n  Scope\nThis specification is intended as an extension to the existing [USB 2.0], [USB 3.2], [USB Type-C 2.4] and [USBBC \n1.2] specifications. It addresses only the elements required to implement USB Power Delivery. It is targeted at \npower supply vendors, manufacturers of [USB 2.0], [USB 3.2], [USB Type-C 2.4] and [USBBC 1.2] platforms, \ndevices and cable assemblies.\nNormative information is provided to allow interoperability of components designed to this specification. \nInformative information, when provided, illustrates possible design implementation.\n1.3\n  Section Overview\nThis specification contains the following sections:\nTable 1.1  Section Overview\nSection\nDescription\nSection 1, \"Introduction\"\nIntroduction, conventions used in the document, list of terms and abbreviations, \nreferences, and details of parameter usage.\nSection 2, \"Overview\"\nOverview of the document including a description of the operation of PD and the \narchitecture.\nSection 3, \"USB Type-A and USB Type-\nB Cable Assemblies and Connectors\"\nMechanical and electrical characteristics of the cables and connectors used by PD. \nSection Deprecated. See [USBPD 2.0] for legacy PD connector specification.\nSection 4, \"Electrical Requirements\"\nElectrical requirements for Dead Battery operation and cable detection.\nSection 5, \"Physical Layer\"\nDetails of the PD PHY Layer requirements\nSection 6, \"Protocol Layer\"\nProtocol Layer requirements including the Messages, timers, counters, and state \noperation.\nSection 7, \"Power Supply\"\nPower supply requirements for both Providers and Consumers.\nSection 8, \"Device Policy\"\nDevice Policy Manager requirements.\nPolicy Engine Atomic Message Sequence (AMS) diagrams and state diagrams\nSection 9, \"States and Status \nReporting\"\nPDUSB Device requirements including mapping of VBUS to USB states.\nSystem Policy Manager requirements including descriptors, events, and requests.\nSection 10, \"Power Rules\"\nPDP Rating definitions for PD.\nSection A, \"CRC calculation\"\nExample CRC calculations.\nSection B, \"Message Sequence \nExamples (Deprecated)\"\nScenarios illustrating Device Policy Manager operation. Deprecated\nSection C, \"VDM Command Examples\"\nExamples of Structured VDM usage.Section Deprecated.\nSection D, \"BMC Receiver Design \nExamples\"\nBMC Receiver Design Examples.\nSection E, \"FRS System Level Example\"\nFRS System Level Example.\n","image_count":0,"table_count":2}
{"page":37,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 37\n1.4\n  Conventions\n1.4.1\n  Precedence\nIf there is a conflict between text, figures, and tables, the precedence Shall be tables, figures, and then text.\nIn there is a conflict between a generic statement and a more specific statement, the more specific statement Shall \napply.\n1.4.2\n  Keywords\nThe following keywords differentiate between the levels of requirements and options.\nTable 1.2  Keywords\nKeyword\nDefinition\nConditional Normative\nConditional Normative is a keyword used to indicate a feature that is mandatory \nwhen another related feature has been implemented. Designers are mandated to \nimplement all such requirements, when the dependent features have been \nimplemented, to ensure interoperability with other compliant devices.\nDeprecated\nDeprecated is a keyword used to indicate a feature, supported in previous \nreleases of the specification, which is no longer supported.\nDiscard\nSee Discarded.\nDiscarded\nDiscard, Discards and Discarded are equivalent keywords indicating that a \nPacket when received Shall be thrown away by the PHY Layer and not passed to \nthe Protocol Layer for processing. No GoodCRC Message Shall be sent in response \nto the Packet.\nDiscards\nSee Discarded.\nIgnore\nSee Ignored.\nIgnored\nIgnore, Ignores and Ignored are equivalent keywords indicating Messages or \nMessage fields which, when received, Shall result in no special action by the \nreceiver. An Ignored Message Shall only result in returning a GoodCRC Message \nto acknowledge Message receipt. A Message with an Ignored field Shall be \nprocessed normally except for any actions relating to the Ignored field.\nIgnores\nSee Ignored.\nInformative\nInformative is a keyword indicating text with no specific requirements, \nprovided only to improve understanding.\nInvalid\nInvalid is a keyword when used in relation to a Packet indicates that the Packet’s \nusage or fields fall outside of the defined specification usage. When Invalid is \nused in relation to an Explicit Contract it indicates that a previously established \nExplicit Contract which can no longer be maintained by the Source. When Invalid \nis used in relation to individual K-codes or K-code sequences indicates that the \nreceived Signaling falls outside of the defined specification.\nMay\nMay is a keyword that indicates a choice with no implied preference.\nMay Not\nMay Not is a keyword that is the inverse of May. Indicates a choice to not \nimplement a given feature with no implied preference.\nN/A\nN/A is a keyword that indicates that a field or value is not applicable and has no \ndefined value and Shall Not be checked or used by the recipient.\nNormative\nSee Shall.\nOptional\nOptional, Optionally and Optional Normative are equivalent keywords that \ndescribe features not mandated by this specification. However, if an Optional \nfeature is implemented, the feature Shall be implemented as defined by this \nspecification.\nOptional Normative\nSee Optional.\nOptionally\nSee Optional.\n","image_count":0,"table_count":2}
{"page":38,"text":"Page 38\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n1.4.3\n  Numbering\nNumbers that are immediately followed by a lowercase “b” (e.g., 01b) are binary values. Numbers that are \nimmediately followed by an uppercase “B” are byte values. Numbers that are immediately followed by a lowercase \n“h” (e.g., 3Ah) or are preceded by “0x” (e.g., 0xFF00) are hexadecimal values. Numbers not immediately followed by \neither a “b”, “B”, or “h” are decimal values.\nReserved\nReserved is a keyword indicating bits, bytes, words, fields, and code values that \nare set-aside for future standardization. Their use and interpretation May be \nspecified by future extensions to this specification and Shall Not be utilized or \nadapted by vendor implementation. A Reserved bit, byte, word, or field Shall be \nset to zero by the sender and Shall be Ignored by the receiver. Reserved field \nvalues Shall Not be sent by the sender and Shall be Ignored by the receiver.\nShall\nShall and Normative are equivalent keywords indicating a mandatory \nrequirement. Designers are mandated to implement all such requirements to \nensure interoperability with other compliant devices.\nShall Not\nShall Not is a keyword that is the inverse of Shall indicating non-compliant \noperation.\nShould\nShould is a keyword indicating flexibility of choice with a preferred alternative; \nequivalent to the phrase “it is recommended that…”.\nShould Not\nShould Not is a keyword is the inverse of Should; equivalent to the phrase “it is \nrecommended that implementations do not…”.\nStatic\nStatic is a keyword indicating that a field that never changes.\nValid\nValid is a keyword that is the inverse of Invalid indicating either a Packet or \nSignaling that fall within the defined specification or an Explicit Contract that can \nbe maintained by the Source.\nTable 1.2  Keywords (Continued)\nKeyword\nDefinition\n","image_count":0,"table_count":2}
{"page":39,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 39\n1.5\n  Related Documents\nDocument references listed in Table 1.3, \"Document References\" are inclusive of all approved and published ECNs \nand Errata.\nTable 1.3  Document References\nBookmark Reference\nTitle\n[DPTC2.1]\nDisplayPortTM Alt Mode on USB Type-C Standard www.vesa.org.\n[IEC 60950-1]\nIEC 60950-1:2005 Information technology equipment – Safety – Part 1: General \nrequirements: Amendment 1:2009, Amendment 2:2013. www.iec.ch.\n[IEC 60958-1]\nIEC 60958-1:2021 Digital Audio Interface Part:1 General. www.iec.ch.\n[IEC 62368-1]\nIEC 62368-1:2018 Audio/Video, information, and communication technology \nequipment – Part 1: Safety requirements. www.iec.ch.\n[IEC 62368-3]\nIEC 62368-3:2017 Audio/video, information, and communication technology \nequipment - Part 3: Safety aspects for DC power transfer through communication cables \nand ports www.iec.ch.\n[IEC 63002]\nIEC 63002:2021 Interoperability specifications and communication method for external \npower supplies used with computing and consumer electronics devices www.iec.ch.\n[ISO 3166]\nISO 3166 international Standard for country codes and codes for their subdivisions. \nhttp://www.iso.org/iso/home/standards/country_codes.htm.\n[TBT3]\nsee [USB4] Chapter 13 for ThunderboltTM 3 device operation.\n[UCSI]\nUSB Type-C Connector System Software Interface (UCSI) Specification https://\nwww.usb.org/documents.\n[USB 2.0]\nUniversal Serial Bus 2.0 Specification, https://www.usb.org/documents.\n[USB 3.2]\nUniversal Serial Bus 3.2 Specification https://www.usb.org/documents.\n[USB Type-C 2.4]\nUniversal Serial Bus Type-C Cable and Connector Specification, https://www.usb.org/\ndocuments.\n[USB4]\nUniversal Serial Bus 4 Specification (USB4®), https://www.usb.org/documents.\n[USBBC 1.2]\nUniversal Serial Bus Battery Charging Specification plus Errata (referred to in this \ndocument as the Battery Charging specification). https://www.usb.org/documents.\n[USBPD 2.0]\nUniversal Serial Bus Power Delivery Specification, https://www.usb.org/documents.\n[USBPDCompliance]\nUSB Power Delivery Compliance Test Specification, https://www.usb.org/documents.\n[USBPDFirmwareUpdate 1.0]\nUniversal Serial Bus Power Delivery Firmware Update Specification, https://\nwww.usb.org/documents.\n[USBTypeCAuthentication 1.0]\nUniversal Serial Bus Type-C Authentication Specification, https://www.usb.org/\ndocuments.\n[USBTypeCBridge 1.1]\nUniversal Serial Bus Type-C Bridge Specification, https://www.usb.org/documents.\n","image_count":0,"table_count":2}
{"page":40,"text":"Page 40\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n1.6\n  Terms and Abbreviations\nThis section defines terms used throughout this document. For additional terms that pertain to the Universal Serial \nBus, see Chapter 2, “Terms and Abbreviations,” in [USB 2.0], [USB 3.2], [USB Type-C 2.4] and [USBBC 1.2].\nTable 1.4  Terms and Abbreviations\nTerm\nDescription\n(A)PDO\nRefers to both the PDO and APDO collectively.\nAC Supply\nAC Supplied\nRefers to the main AC power source typically provided to the wall AKA “mains”.\nActive Cable\nA cable with a USB Type-C plug on each end that incorporates data bus signal conditioning \ncircuits. The cable supports the Structured VDM Discover Identity Command to expose its \ncharacteristics in addition to other Structured VDM Commands (Electronically Marked Cable \nsee [USB Type-C 2.4]).\nActive Cable VDO\nVDO defining the Capabilities of an Active Cable.\nActive Mode\nA Mode which has been through the Mode Entry process but not the Mode Exit process.\nAdjustable Voltage Supply\nA power supply whose output voltage can be adjusted to an operating voltage within its \nAdvertised range. These Capabilities are exposed by the Adjustable Voltage Supply (AVS) APDO \n(see Section 6.4.1.2.4, \"Augmented Power Data Object (APDO)\").\nNote: Unlike the SPR PPS, the SPR AVS and EPR AVS do not support current limit.\nAdvertise\nAn offer made by a Source in the Source_Capabilities/EPR_Source_Capabilities Message (e.g., \nan APDO or PDO).\nAlternate Mode\nOperation defined by a Vendor or Standard’s organization, which is associated with a SVID. The \ndefinition of Alternate Modes is outside the scope of USB-IF specifications. Entry to and exit from \nthe Alternate Mode uses the Mode Entry and Mode Exit processes. As defined in [USB Type-C 2.4].\nAlternate Mode Adapter\nA PDUSB Device which supports Alternate Modes as defined in [USB Type-C 2.4].\nNote: Since an AMA is a PDUSB Device, it has a single UFP that is only addressable by SOP \nPackets.\nAlternate Mode Controller\nA DFP that supports connection to AMAs as defined in [USB Type-C 2.4]. A DFP that is an AMC \ncan also be a PDUSB Host.\nAMA\nSee Alternate Mode Adapter.\nAMC\nSee Alternate Mode Controller.\nAMS\nSee Atomic Message Sequence.\nAPDO\nSee Augmented Power Data Object.\nAssured Capacity Charger\nAs defined in [USB Type-C 2.4]. This maps to a Charger with one or more Guaranteed Capability \nPorts.\nAssured Capacity Group\nAs defined in [USB Type-C 2.4]. This maps to a group of Guaranteed Capability Ports.\nAtomic Message Sequence\nA fixed sequence of Messages as defined in Section 8.3.2, \"Atomic Message Sequence Diagrams\" \ntypically starting and ending in one of the following states: PE_SRC_Ready, PE_SNK_Ready or \nPE_CBL_Ready. An AMS is Non-interruptible.\nAttach\nMechanical joining of the Port Pair by a cable.\nAttached\nUSB Power Delivery Ports which are mechanically joined with USB cable.\nAttachment\nSee Attach.\nAugmented Power Data \nObject\nData Object used to expose a Source Port's or Sink Port's power Capabilities as part of a \nSource_Capabilities/EPR_Source_Capabilities or Sink_Capabilities/EPR_Sink_Capabilities \nMessage respectively. An SPR PPS Data Object, SPR AVS Data Object and EPR AVS Data Object are \ndefined.\nAVS\nSee Adjustable Voltage Supply.\nAVS Mode\nA power supply, currently operating as an AVS, is said to be operating in AVS Mode.\nBattery\nA power storage device residing behind a Port that can either be a Source or Sink of power.\n","image_count":0,"table_count":2}
{"page":41,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 41\nBattery Slot\nA physical location where a Hot Swappable Battery can be installed. A Battery Slot might or \nmight not have a Hot Swappable Battery present in a Battery Slot at any given time.\nBattery Supply\nA power supply that directly applies the output of a Battery to VBUS. This is exposed by the \nBattery Supply PDO (see Section 6.4.1.2.3, \"Battery Supply Power Data Object\").\nBDO\nSee BIST Data Object.\nBFSK\nSee Binary Frequency Shift Keying.\nBi-phase Mark Coding\nModification of Manchester coding where each zero has one transition and a one has two \ntransitions (see [IEC 60958-1]).\nBinary Frequency Shift \nKeying\nA Signaling Scheme now Deprecated in this specification. BFSK used a pair of discrete \nfrequencies to transmit binary (0s and 1s) information over VBUS. See [USBPD 2.0] for further \ndetails.\nBIST\nBuilt-In Self-Test - Power Delivery testing mechanism for the PHY Layer.\nBIST Data Object\nData Object used by BIST Messages.\nBIST Mode\nA BIST receiver or transmitter test mode enabled by a BIST Message.\nBIST Carrier Mode\nA BIST Mode in which the PHY Layer sends out a BMC encoded continuous string of \nalternating \"1\"s and \"0\"s.\nBIST Test Data Mode\nA BIST Mode in which the PHY Layer sends out a GoodCRC Message and then enters a test mode \nwhere it sends no further Messages, except  GoodCRC Messages, in response to received \nMessages.\nBIST Shared Capacity Test \nMode\nA BIST Mode applicable only to a Shared Capacity Group of Ports where the maximum Source \nCapabilities are always offered on every Port, regardless of the availability of shared power i.e., \nall shared power management is disabled.\nBMC\nSee Bi-phase Mark Coding.\nCable Capabilities\nCapabilities offered by a Cable Plug.\nCable Discovered\nUSB Power Delivery Ports that have exchanged a Message and a GoodCRC Message response \nwith a Cable Plug or a VPD using the USB Power Delivery protocol so that both the Port and the \nCable Plug know that each is PD Capable and which Revision they each support.\nCable Discovery\nSee Cable Discovered.\nCable Plug\nTerm used to describe a PD Capable element in a Multi-Drop system addressed by SOP’ Packets/\nSOP’’ Packets. Logically the Cable Plug is associated with a USB Type-C plug at one end of the \ncable. In a practical implementation, the electronics might reside anywhere in the cable.\nCable Reset\nThis is initiated by Cable Reset Signaling from the DFP. It restores the Cable Plugs to their \ndefault, power up condition and resets the PD communications engine in the cable to its default \nstate. It does not reset the Port Partners but does restore VCONN to its Attachment state.\nCable VDO\nVDO returned by the Cable Plug containing Cable Capabilities.\nCapabilities\nFeatures supported by a product. These can include, for example, power levels supplied/\nneeded, cable type, Battery support or [USB4] support.\nCapabilities Mismatch\nIndication from the Sink that the Source’s Advertised Capabilities don’t match the Sink’s needs.\nCC\nSee Configuration Channel.\nCert Stat VDO\nThe Cert Stat VDO contains the XID assigned by USB-IF to the product before certification in \nbinary format.\nCharge Through\nA mechanism for a VCONN Powered USB Device (VPD) to pass power and CC communication from \none Port to the other without any interference or re-regulation.\nCharge Through Port\nThe USB Type-C receptacle on a USB Device that is designed to allow a Source to be connected \nthrough the USB Device to charge a system to which it is Attached. Most common use is to allow \na single Port USB Host to support a USB Device while being charged.\nCharger\nProvider whose primary purpose is to supply power to a Consumer or Consumers in order to \ncharge their Battery.\nChunk\nA MaxExtendedMsgChunkLen (26 byte) or less portion of a Data Block. Data Blocks can be sent \neither as a single Message or as a series of Chunks.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":42,"text":"Page 42\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nChunked\nSee Chunking.\nChunked Extended Message\nExtended Message which has been broken up into Chunks.\nChunking\nThe process of breaking up a Data Block larger than MaxExtendedMsgLegacyLen (26-bytes) \ninto two or more Chunks.\nChunking Layer\nPart of the Protocol Layer responsible for Chunking.\nCL\nSee Current Limit.\nCold Socket\nA Port that does not apply vSafe5V on VBUS until a Sink is Attached.\nCollision Avoidance\nMechanisms to prevent simultaneous communication by the Source, Sink and Cable Plug on CC.\nCommand\nRequest and response pair defined as part of a Structured Vendor Defined Message (see Section \n6.4.4.2, \"Structured VDM\").\nConfiguration Channel\nSingle wire used by the BMC PHY Layer Signaling Scheme (see [USB Type-C 2.4]).\nConnect\nSee Connected.\nConnected\nUSB Power Delivery ports that have exchanged a Message and a GoodCRC Message response \nusing the USB Power Delivery protocol so that both Port Partners know that each is PD Capable.\nConstant Voltage\nA constant voltage feature of an SPR PPS Source. The SPR PPS Source output voltage remains \nconstant as the load changes up to its Current Limit.\nConsumer\nThe capability of a PD Port (typically a Device's UFP) to sink power from the power conductor \n(e.g., VBUS). This corresponds to a USB Type-C Port with Rd asserted on its CC wire.\nConsumer/Provider\nA Consumer with the additional capability to function as a Provider. This corresponds to a Dual-\nRole Power Port with Rd asserted on its CC wire.\nContinuous BIST Mode\nThe BIST Mode where the Port or Cable Plug being tested sends a continuous stream of test data.\nContract\nAn agreement on both power level and direction is reached between a Port Pair. A Contract \ncould be explicitly Negotiated between the Port Pair or could be an implicit power level defined \nby the current State. While operating in Power Delivery mode there will always be either an \nExplicit Contract or Implicit Contract in place. The Contract can only be altered in the case of a \nNegotiation/Re-negotiation, Power Role Swap,  Fast Role Swap, Hard Reset, Error Recovery or \nfailure of the Source.\nControl Message\nA Control Message is defined as a Message with the Number of Data Objects field in the Message \nHeader is set to zero. The Control Message consists only of a Message Header and a CRC.\nCRC\nCRC stands for Cyclic Redundancy Check. It is an error-detecting code used to determine if a \nblock of data has been corrupted.\nCT-VPD\nSee VCONN Powered USB Charge Through Device.\nCurrent Limit\nA current limiting feature of an SPR PPS Source. When a Sink operating in SPR PPS mode \nattempts to draw more current from the Source than the requested Current Limit value, the \nSource reduces its output voltage so the current it supplies remains at or below the requested \nvalue.\nNote: Current Limit is not supported by SPR AVS and EPR AVS Sources.\nCV\nSee Constant Voltage.\nData Block\nAn Extended Message Payload data unit. The size of each type of Data Block is specified as a series \nof bytes up to MaxExtendedMsgLen bytes in length. This is distinct from a Data Object used by \na Data Message which is always a 32-bit object.\nData Message\nA Data Message consists of a Message Header followed by one or more Data Objects. Data \nMessages are easily identifiable because the Number of Data Objects field in the Message \nHeader is always a non-zero value.\nData Object\nA Data Message Payload data unit. This 32-bit object contains information specific to different \ntypes of Data Message. For example Power, Request, BIST, and Vendor Data Objects are defined.\nData Reset\nProcess which resets USB Communication.\nData Role\nA Port Partner will be in one of two Data Roles; either DFP (USB Host) or UFP (USB Device).\nData Role Swap\nProcess of exchanging the Data Roles between Port Partners.\nDead Battery\nA device has a Dead Battery when the Battery in a device is unable to power its functions.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":43,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 43\nDefault Contract\nAn agreement on current at 5V is reached between a Port Pair based on USB Type-C current \n([USB Type-C 2.4]).\nDetach\nMechanical unjoining of the Port Pair by removal of the cable.\nDetached\nUSB Power Delivery Ports which are no longer mechanically joined with USB cable.\nDetaches\nSee Detach.\nDevice\nWhen lower cased (device), it refers to any USB product, either USB Device or USB Host. When \nin upper case refers to a USB Device (Peripheral or Hub).\nDevice Policy\nPolicy applied across multiple Ports in a Source or Sink.\nDevice Policy Manager\nModule running in a Source or Sink that applies Device Policy to each Port in the device, as Local \nPolicy, via the Policy Engine.\nDFP\nSee Downstream Facing Port.\nDFP VDO\nVDO returned by the DFP containing Capabilities.\nDifferential Non-Linearity\nThe difference between an ideal LSB step, and the real observable LSB step when the Power \nSource is operating in either PPS or AVS mode. A DNL of 0 indicates that the step is ideal. If DNL \nis positive the step is larger than the ideal LSB, and if it is negative then the step is smaller than \nideal.\nDiscovery Process\nCommand sequence using Structured Vendor Defined Messages resulting in identification of the \nPort Partner and Cable Plug, and their supported SVIDs and Alternate Modes.\nDNL\nSee Differential Non-Linearity.\nDownstream Facing Port\nIndicates the Port's position in the USB topology which typically corresponds to a USB Host root \nPort or Hub downstream Port as defined in [USB Type-C 2.4]. At connection, the Port defaults to \noperation as the Source and as a USB Host (when USB Communication is supported).\nDPM\nSee Device Policy Manager.\nDRD\nSee Dual-Role Data.\nDRP\nSee Dual-Role Power.\nDual-Role Data\nCapability of operating as either a DFP or UFP.\nDual-Role Data Port\nA Port capable of operating as DRD.\nDual-Role Power\nCapability of operating as either a Source or Sink.\nDual-Role Power Device\nA product containing one or more Dual-Role Power Ports that can operate as either a Source or \na Sink.\nDual-Role Power Port\nA Port capable of operating as a DRP.\nEM\nSee Extended Message.\nEnd of Packet\nK-code marker used to delineate the end of a Packet.\nEOP\nSee End of Packet.\nEPR\nSee Extended Power Range.\nEPR AVS\nA power supply operating in EPR Mode whose output voltage can be adjusted to an operating \nvoltage within its Advertised range. Unlike SPR PPS it does not support current limit. The AVS \nCapabilities are exposed by the Adjustable Voltage Supply APDO (see Section 6.4.1.2.4, \n\"Augmented Power Data Object (APDO)\"). \nEPR AVS Mode\nA EPR Source, currently operating in an EPR AVS Contract, is said to be operating in EPR AVS \nMode.\nEPR Cable\nA cable which is rated to operate in both SPR Mode and EPR Mode.\nEPR Capabilities\nThe EPR Capabilities Messages (EPR_Source_Capabilities and EPR_Sink_Capabilities) are \nExtended Messages with the first seven positions filled with the same SPR (A)PDOs returned by \nthe SPR Capabilities Messages (Source_Capabilities and Sink_Capabilities) followed by the EPR \n(A)PDOs starting in the eighth position.\nEPR Capable\nA product which has the ability to operate in EPR Mode.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":44,"text":"Page 44\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nEPR Mode\nA Power Delivery mode of operation where maximum allowable voltage is 48V. The Sink \ncomplies to the requirements of [IEC 62368-1] for operation with a PS3 Source. The Source \ncomplies to the requirements of [IEC 62368-1] for operation with a PS3 Sink. The cable complies \nwith [IEC 62368-1]. Entry into the EPR Mode requires that an EPR Source is Attached to an EPR \nSink with an EPR Cable. The EPR Source will only enter the EPR Mode when requested to do so \nby the Sink and it has determined it is Attached to an EPR Sink with an EPR Capable cable.\nOnly the EPR_Source_Capabilities and the EPR_Request Messages are allowed to Negotiate EPR \nExplicit Contracts. The SPR Mode Messages (Source_Capabilities and Request) are not allowed \nto be used while in EPR Mode.\nEPR (A)PDO\nFixed Supply PDO that offers either 28V, 36V or 48V.\nAdjustable Voltage Supply (AVS) APDO whose Maximum voltage is the highest Fixed Supply PDO \nvoltage in the EPR_Source_Capabilities Message and no more than 240W.\nEPR Sink\nA Sink that supports both SPR Mode and EPR Mode.\nEPR Sink Port\nA Port exposed on an EPR Sink.\nEPR Source\nA Source that supports both SPR Mode and EPR Mode.\nEPR Source Port\nA Port exposed on an EPR Source.\nError Recovery\nPort enters the ErrorRecovery State as defined in [USB Type-C 2.4].\nExplicit Contract\nAn agreement reached between a Port Pair as a result of the Power Delivery Negotiation \nprocess. An Explicit Contract is established (or continued) when a Source sends an Accept \nMessage in response to a Request Message sent by a Sink followed by a PS_RDY Message sent by \nthe Source to indicate that the power supply is ready. This corresponds to the PE_SRC_Ready \nState for a Source Policy Engine and the PE_SNK_Ready State for a Source Policy Engine. The \nExplicit Contract can be altered through the Re-negotiation process. \nExtended Capabilities\nAn Extended Message containing Capabilities information.\nExtended Control Message\nAn Extended Message containing control information only.\nExtended Message\nA Message containing Data Blocks. The Extended Message is defined by the Extended field in the \nMessage Header being set to one and contains an Extended Message Header immediately \nfollowing the Message Header.\nExtended Message Header\nEvery Extended Message contains a 16-bit Extended Message Header immediately following the \nMessage Header containing information about the Data Block and any Chunking being applied.\nExtended Power Range\nExtends the power range from a maximum of 100W (SPR) to a maximum of 240W (EPR). When \noperating in the EPR Mode, only EPR specific Messages (the EPR_Source_Capabilities Message \nand the EPR_Request Message) are used to Negotiate Explicit Contracts.\nExternal Supply\nPower supply external to the device. This could be powered from the wall or from any other \npower source.\nFast Role Swap\nProcess of exchanging the Source and Sink Power Roles between Port Partners rapidly due to the \ndisconnection of an external power supply.\nFast Role Swap Request\nAn indication from an Initial Source to the Initial Sink that a Fast Role Swap is needed. The Fast \nRole Swap Request is indicated by driving the CC line to ground for a short period; it is not a \nMessage or Signaling.\nFirst Explicit Contract\nThe Explicit Contract that immediately follows an Attach, power on Hard Reset, Power Role Swap \nor Fast Role Swap event.\nFixed Battery\nFixed Batteries\nA Battery that is not easily removed or replaced by an end user e.g., requires a special tool to \naccess or is soldered in.\nFixed Supply\nA well-regulated fixed voltage power supply. This is exposed by the Fixed Supply PDO (see \nSection 6.4.1.2.1, \"Fixed Supply Power Data Object\")\nFrame\nGeneric term referring to an atomic communication transmitted by PD such as a Packet, Test \nFrame or Signaling.\nFRS\nSee Fast Role Swap.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":45,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 45\nGuaranteed Capability Port\nA Guaranteed Capability Port is always capable of delivering its Port Maximum PDP and \nindicates this by setting its Port Present PDP to be the same as its Port Maximum PDP except \nwhen limited by the cable’s Capabilities. This is a Static capability.\nHard Reset\nThis is initiated by Hard Reset Signaling from either Port Partner. It restores VBUS to USB Default \nOperation and resets the PD communications engine to its default State in both Port Partners as \nwell as in any Attached Cable Plugs. It restores both Port Partners to their default Data Roles and \nreturns the VCONN Source to the Source Port. A DRP Source Port operating as a Source will \ncontinue to operate as a Source.\nHost\nSee USB Host.\nHot Swappable Battery\nA Battery that is easily accessible for a user to remove or change for another Battery.\nHub\nA USB Device that provides additional connections to the USB.\nID Header VDO\nThe VDO in a Discover Identity Command immediately following the VDM Header. The ID \nHeader VDO contains information corresponding to the Power Delivery Product.\nIdle\nCondition on CC where there are no signal transitions within a given time window. See Section \n5.8.6.1, \"Definition of Idle\".\nImplicit Contract\nAn agreement on power levels between a Port Pair which occurs, not because of the Power \nDelivery Negotiation process, but because of a Power Role Swap or Fast Role Swap. Implicit \nContracts are transitory since the Port Pair is required to immediately Negotiate an Explicit \nContract after the Power Role Swap. An Implicit Contract Shall be limited to USB Type-C current \n(see [USB Type-C 2.4]).\nInitial Sink\nSink at the start of a Power Role Swap or Fast Role Swap which transitions to being the New \nSource.\nInitial Source\nSource at the start of a Power Role Swap or Fast Role Swap which transitions to being the New \nSink.\nInitiator\nThe initial sender of a Command request in the form of a query.\nInvariant PDOs\nA Source Port that offers Invariant PDOs will always Advertise the same PDOs except when \nlimited by the cable.\nIoC\nThe Negotiated current value as defined in [IEC 63002].\nIR Drop\nThe voltage drop across the cable and connectors between the Source and the Sink as defined in \n[USB Type-C 2.4]. It is a function of the resistance of the ground and power wire in the cable plus \nthe contact resistance in the connectors times the current flowing over the path.\nK-code\nSpecial symbols provided by the 4b5b coding scheme. K-codes are used to signal Hard Reset and \nCable Reset and delineate Packet boundaries.\nLocal Policy\nEvery PD Capable device has its own Policy, called the Local Policy that is executed by its Policy \nEngine to control its power delivery behavior. The Local Policy at any given time might be the \ndefault policy, hard coded or modified by changes in operating parameters or one provided by \nthe system USB Host or some combination of these. The Local Policy Optionally can be changed \nby a System Policy Manager.\nLPS\nLimited Power Supply as defined in [IEC 62368-1].\nLSB\nAn abbreviation for Least Significant Bit.\nManaged Capability Port\nA Managed Capability Port can have its Port Present PDP set to a different value than its Port \nMaximum PDP. Its Port Present PDP value can be dynamic and change during normal \noperation.\nMessage\nThe Packet Payload consisting of a Message Header for Control Messages and a Message Header \nand data for Data Messages and Extended Messages as defined in Section 6.2, \"Messages\".\nMessage Header\nEvery Message starts with a 16-bit Message Header containing basic information about the \nMessage and the PD Port’s Capabilities.\nMessaging\nCommunication in the form of Messages as defined in Section 6, \"Protocol Layer\".\nModal Operation\nOperation where there are one or more Active Modes. Modal Operation ends when there are no \nlonger any Active Modes.\nMode\nMode is a general term used to describe a particular type of operation of a given device. \nExamples of modes are: Alternate Mode, EPR Mode, SPR Mode.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":46,"text":"Page 46\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nMode Entry\nProcess to start operation in a particular Mode.\nMode Exit\nProcess to end operation in a particular Mode.\nMulti-Drop\nPD is a Multi-Drop system sharing the Power Delivery communication channel between the Port \nPartners and the cable.\nNegotiate\nSee Negotiation.\nNegotiated\nSee Negotiation.\nNegotiation\nThis is the PD process whereby:\n1)\nThe Source Advertises its Capabilities.\n2)\nThe Sink requests one of the Advertised Capabilities.\n3)\nThe Source acknowledges the request, alters its output to satisfy the request and informs \nthe Sink.\nThe result of the Negotiation is a Contract for power delivery/consumption between the Port \nPair. \nNew Sink\nSink at the end of a Power Role Swap or Fast Role Swap which has transition from being the Initial \nSource.\nNew Source\nSource at the end of a Power Role Swap or Fast Role Swap which has transition from being the \nInitial Sink.\nNon-interruptible\nThere cannot be any unexpected Messages during an AMS; it is therefore Non-interruptible. An \nAMS starts when the first Message in the AMS has been sent (i.e., a GoodCRC Message has been \nreceived acknowledging the Message). See Section 8.3.2.1.3, \"Atomic Message Sequences\".\nOCP\nOver-Current Protection.\nOTP\nOver-Temperature Protection.\nOVP\nOver-Voltage Protection.\nPacket\nOne entire unit of PD communication including a Preamble, SOP*, Payload, CRC and EOP as \ndefined in Section 5.6, \"Packet Format\".\nPassive Cable\nCable with a USB plug on each end at least one of which is a Cable Plug supporting SOP’ that does \nnot incorporate data bus signal conditioning circuits. Supports the Structured VDM Discover \nIdentity to determine its characteristics (Electronically Marked Cable see [USB Type-C 2.4]).\nNote: This specification does not discuss Passive Cables that are not Electronically Marked.\nPassive Cable VDO\nVDO defining the Capabilities of a Passive Cable.\nPayload\nData content of a Packet, provided to/from the Protocol Layer.\nPD\nUSB Power Delivery\nPD Capable\nA Port that supports USB Power Delivery.\nPD Connection\nSee Connected.\nPD Power\nThe output power, in Watts, of a Source, as specified by the manufacturer and expressed in Fixed \nSupply PDOs as defined in Section 10, \"Power Rules\".\nPD SID\nSee USB-IF PD SID.\nPDO\nSee Power Data Object.\nPDP\nSee PD Power.\nPDP Rating\nThe PDP Rating is the same as the Manufacturer declared PDP for a Source Port except where \nthere is a fractional value, in which case the PDP Rating corresponds to the integer part of the \nManufacturer declared PDP Rating (see Section 6.4.11.2, \"Port Maximum PDP Field\").\nPDUSB\nUSB Device Port or USB Host Port that is both PD Capable and capable of USB Communication. See \nalso PDUSB Host, PDUSB Device and PDUSB Hub.\nPDUSB Device\nA USB Device with a PD Capable UFP. A PDUSB Device is only addressed by SOP Packets.\nPDUSB Host\nA USB Host which is PD Capable on at least one of its DFPs. A PDUSB Host is only addressed by \nSOP Packets.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":47,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 47\nPDUSB Hub\nA port expander USB Device with a UFP and one or more DFPs which is PD Capable on at least \none of its Ports. A PDUSB Hub is only addressed by SOP Packets.\nA self-powered PDUSB Hub is treated as a USB Type-C Multi-Port Charger.\nPDUSB Peripheral\nA USB Device with a PD Capable UFP which is not a PDUSB Hub. A PDUSB Peripheral is only \naddressed by SOP Packets.\nPE\nSee Policy Engine.\nPeripheral\nA physical entity that is Attached to a USB cable and is currently operating as a USB Device.\nPHY Layer\nThe Physical Layer responsible for sending and receiving Messages across the USB Type-C CC \nwire between a Port Pair.\nPolicy\nPolicy defines the behavior of PD Capable parts of the system and defines the Capabilities it \nAdvertises, requests made to (re)Negotiate power and the responses made to requests received.\nPolicy Engine\nThe Policy Engine interprets the Device Policy Manager’s input to implement Policy for a given \nPort and directs the Protocol Layer to send appropriate Messages.\nPort\nAn interface typically exposed through a receptacle, or via a plug on the end of a hard-wired \ncaptive cable. USB Power Delivery defines the interaction between a Port Pair. \nPort Pair\nTwo Attached PD Capable Ports.\nPort Partner\nA Contract is Negotiated between a Port Pair connected by a USB cable. These ports are known \nas Port Partners.\nPower Conductor\nThe wire that delivers power from the Source to Sink. For example, USB’s VBUS.\nPower Consumer\nSee Consumer.\nPower Data Object\nData Object used to expose a Source Port’s or Sink Port’s power Capabilities as part of a \nSource_Capabilities / EPR_Source_Capabilities or Sink_Capabilities / EPR_Sink_Capabilities \nMessage respectively. Fixed Supply, Variable Supply and Battery Supply Power Data Objects are \ndefined; SPR Mode uses all four while EPR Mode uses only Fixed Supply and AVS PDOs.\nPower Delivery Mode\nOperation after a Contract has initially been established between a Port Pair. This Mode persists \nduring normal Power Delivery operation, including after a Power Delivery Mode. Power Delivery \nMode can only be exited by Detaching the Ports, applying a Hard Reset or by the Source removing \npower (except when the Initial Source removes power from VBUS during the Power Role Swap \nprocedure).\nPower Provider\nSee Provider.\nPower Role\nA Port Partner will be in one of two Power Roles; either Source or Sink.\nPower Role Swap\nProcess of exchanging the Source and Sink Power Roles between Port Partners.\nPower Rules\nDefine voltages and current ranges that are offered by compliant USB Power Delivery Sources \nand used by a USB Power Delivery Sink for a given value of PDP Rating. See Section 10, \"Power \nRules\".\nPPS\nSee Programmable Power Supply.\nPPS Mode\nAn SPR Source, currently operating as an PPS, is said to be operating in PPS Mode.\nPreamble\nStart of a transmission which is used to enable the receiver to lock onto the carrier. The \nPreamble consists of a 64-bit sequence of alternating 0s and 1s starting with a \"0\" and ending \nwith a \"1\" which is not 4b5b encoded.\nProduct Type\nProduct categorization returned as part of the Discover Identity Command.\nProduct Type VDO\nVDO identifying a certain Product Type in the ID Header VDO of a Discover Identity Command.\nProduct VDO\nThe Product VDO contains identity information relating to the product. \nProgrammable Power \nSupply\nA power supply, operating in SPR Mode, whose output voltage can be programmatically adjusted \nin small increments over its Advertised range and has a programmable output current fold back \n(note that the SPR AVS and EPR AVS does not).The Capabilities are exposed by the SPR \nProgrammable Power Supply APDO (see Section 6.4.1.2.4, \"Augmented Power Data Object \n(APDO)\").\nProtocol Error\nAn unexpected Message during an Atomic Message Sequence. A Protocol Error during an AMS will \nresult in either a Soft Reset or a Hard Reset.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":48,"text":"Page 48\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nProtocol Layer\nThe entity that forms the Messages used to communicate information between Port Partners.\nProvider\nA PD Port (typically a USB Host, Hub, or Charger DFP) that can source power over the power \nconductor (e.g., VBUS). This corresponds to a USB Type-C Port with Rp asserted on its CC wire.\nProvider/Consumer\nA Provider with the additional capability to act as a Consumer. This corresponds to a Dual-Role \nPower Port with Rp asserted on its CC wire.\nPS1\nPS2\nPS3\nClassification of electrical power as defined in [IEC 62368-1].\nPSD\nSink which draws power but has no other USB or Alternate Mode communication function e.g., a \npower bank.\nRa\nPrior to application of VCONN, a powered cable applies a pull-down resistor Ra on its VCONN pin.\nRd\nPull-down resistor on the USB Type-C CC wire used to indicate that the Port is a Sink (see [USB \nType-C 2.4]).\nRDO\nSee Request Data Object.\nRe-attach\nAttach of the Port Pair by a cable after a previous Detach.\nRe-negotiate\nSee Re-negotiation.\nRe-negotiated\nSee Re-negotiation.\nRe-negotiation\nA process wherein one of the Port Partners wants to alter the Negotiated Contract.\nRequest\nMessage used by a Sink Port to Negotiate a Contract; refers to either a Request/EPR_Request \nMessage.\nRequest Data Object\nData Object used by a Sink Port to Negotiate a Contract as a part of a Request/EPR_Request \nMessage.\nResponder\nThe receiver of a Command request sent by an Initiator that replies with a Command response.\nRevision\nMajor release of the USB Power Delivery specification. Each Revision will have variousVersions \nassociated with it.\nRevision 1.0\nDeprecated major Revision of the USB Power Delivery Specification.\nRevision 2.0\nSuperseded major Revision of the USB Power Delivery Specification as defined in [USBPD 2.0], \nwith which this specification is compatible.\nRevision 3.x\nCurrent major Revisions of the USB Power Delivery Specification.\nRp\nPull-up resistor on the USB Type-C CC wire used to indicate that the Port is a Source (see [USB \nType-C 2.4]).\nSafe Operation\nSources must have the ability to tolerate vSafe5V applied by both Port Partners.\nShared Capacity Charger\nAs defined in [USB Type-C 2.4]. This maps to a Charger with multiple Managed Capability Ports.\nShared Capacity Group\nAs defined in [USB Type-C 2.4]. This maps to a group with Managed Capability Ports.\nSID\nSee Standard ID.\nSignaling\nA Preamble followed by an ordered set of four K-codes used to indicate a particular line symbol \ne.g., Hard Reset as defined in Section 5.4, \"Ordered Sets\".\nSignaling Scheme\nPhysical mechanism used to transmit bits. Only the BMC Signaling Scheme is defined in this \nspecification. \nNote: The BFSK Signaling Scheme supported in Revision 1.0 of this specification has been \nDeprecated.\nSingle-Role Port\nA Port that is only capable of operating either as a Source or Sink, but not both. E.g., the port is \nnot a DRP.\nSink\nThe Port consuming power from VBUS; most commonly a USB Device.\nSink Capabilities\nCapabilities wanted by a Sink.\nSink Directed Charge\nA charging scheme whereby the Sink connects the Source to its Battery through safety and other \ncircuitry. When the SPR PPS Current Limit feature is activated, the Source automatically controls \nits output current by adjusting its output voltage.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":49,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 49\nSink Port\nPort operating as a Sink.\nSink Standby\nDuring Sink Standby the Sink reduces its current draw to iSnkStdby\nSoft Reset\nA process that resets the PD communications engine to its default state.\nSOP\nK-code marker used for communication between Port Partners. See also Start of Packet.\nSOP Communication\nCommunication using SOP Packets also implies that an AMS is being followed.\nSOP Packet\nAny Power Delivery Packet which starts with an SOP.\nSOP’ Communication\nCommunication with a Cable Plug using SOP’ Packets, also implies that an AMS is being followed.\nSOP’ Packet\nAny Power Delivery Packet which starts with an SOP’ used to communicate with a Cable Plug.\nSOP’’ Communication\nCommunication with a Cable Plug using SOP’’ Packets, also implies that an AMS is being followed.\nSOP’’ Packet\nAny Power Delivery Packet which starts with an SOP’’ used to communicate with a Cable Plug \nwhen SOP’ Packets are being used to communicate with the other Cable Plug.\nSOP’\nSOP’’\nK-code marker used for communication between a Port and a Cable Plug. See also Start of Packet.\nSOP*\nUsed to generically refer to K-code markers: SOP, SOP’ and SOP’’. See also Start of Packet.\nSOP* Communication\nCommunication using SOP* Packets, also implies an AMS is being followed.\nSOP* Packet\nA term referring to any Power Delivery Packet starting with either SOP, SOP’, or SOP’’.\nSource\nThe Power Role a Port is operating in to supply power over VBUS; most commonly a USB Host or \nHub downstream port.\nSource Capabilities\nCapabilities offered by a Source.\nSource Port\nPort operating as a Source.\nSpecification Revision\nSee Revision.\nSPM\nSee System Policy Manager.\nSPR\nSee Standard Power Range.\nSPR AVS\nAn SPR Source whose output voltage can be adjusted to an operating voltage within its \nAdvertised range. Unlike SPR PPS, it does not support current limit. The SPR AVS Capabilities are \nexposed by the SPR AVS APDO (see Section 6.4.1.2.4.2, \"SPR Adjustable Voltage Supply APDO\").\nSPR AVS Mode\nA SPR Source, currently operating in an SPR AVS Contract, is said to be operating in SPR AVS \nMode.\nSPR Capabilities\nAn SPR Capabilities Message (Source_Capabilities Message or Sink_Capabilities Message) has at \nleast one Power Data Object for vSafe5V followed by up to 6 additional Power Data Objects.\nSPR Contract\nExplicit Contract Negotiated, in SPR Mode, based on SPR (A)PDOs.\nSPR Mode\nThe classic mode of PD operation where Explicit Contracts are Negotiated using SPR (A)PDOs.\nSPR (A)PDO\nFixed Supply PDO that offers up to 20V and no more than 100W.\nVariable Supply PDO whose Maximum voltage offers up to 21V and no more than 100W.\nBattery Supply PDO whose Maximum voltage offers up to 21V and no more than 100W.\nAdjustable Voltage Supply (AVS) APDO whose Maximum voltage is up to 20V and no more than \n100W.\nProgrammable Power Supply (PPS) APDO whose Maximum voltage is up to 21V and no more \nthan 100W.\nSPR PPS\nA power supply whose output voltage and output current can be programmatically adjusted in \nsmall increments over its Advertised range. It supports current limit unlike SPR AVS and EPR \nAVS. The Capabilities are exposed by the Programmable Power Supply APDOs (see Section \n6.4.1.2.4, \"Augmented Power Data Object (APDO)\").\nSPR PPS Mode\nA power supply, currently operating in an SPR PPS Contract, is said to be operating in SPR PPS \nMode.\nSPR Sink\nA Sink which only supports SPR Mode and does not support EPR Mode.\nSPR Sink Port\nA Port exposed on an SPR Sink.\nSPR Source\nA Source which only supports SPR Mode and does not support EPR Mode.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":50,"text":"Page 50\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSPR Source Port\nA Port exposed on an SPR Source.\nStandard ID\n16-bit unsigned value assigned by the USB-IF to a given industry standards organization’s \nspecification.\nStandard or Vendor ID\nGeneric term referring to either a VID or a SID. SVID is used in place of the phrase “Standard or \nVendor ID.”\nStandard Power Range\nOnly the Source_Capabilities and the Request Messages are allowed to Negotiate SPR Explicit \nContracts. The EPR Messages (the EPR_Source_Capabilities Message and the EPR_Request \nMessage) are not allowed to be used while in SPR Mode.\nStart of Packet\nK-code marker used to delineate the start of a Packet. \nState\nPD state machine state as defined in Section 6.12, \"State behavior\" and Section 8.3.3, \"State \nDiagrams\" state machines.\nStructured VDM\nSee Structured Vendor Defined Message.\nStructured VDM Header\nThe VDM Header for a Structured Vendor Defined Message. \nStructured Vendor Defined \nMessage\nA Vendor Defined Message where the contents and usage of bits 14...0 of the VDM Header are \ndefined by this specification.\nSVDM\nSee Structured Vendor Defined Message.\nSVID\nSee Standard or Vendor ID.\nSwap Standby\nDuring Swap Standby the Source does not drive VBUS and the Sink's current draw does not \nexceed iSnkSwapStdby.\nSystem Policy\nOverall system Policy generated by the system, broken up into the policies required by each Port \nPair to affect the System Policy. It is programmatically fed to the individual devices for \nconsumption by their Policy Engines.\nSystem Policy Manager\nModule running on the USB Host. It applies the System Policy through communication with PD \nCapable Consumers and Providers that are also connected to the USB Host via USB.\nTest Frame\nFrame consisting of a Preamble, SOP*, followed by test data (See Section 5.9, \"Built in Self-Test \n(BIST)\").\nTest Pattern\nContinuous stream of test data in a given sequence (See Section 5.9, \"Built in Self-Test (BIST)\"). \nTester\nThe Tester is assumed to be a piece of test equipment that manages the BIST testing process of \na PD UUT.\nUFP\nSee Upstream Facing Port.\nUFP VDO\nVDO returned by the UFP containing Capabilities.\nUI\nSee Unit Interval.\nUnchunked\nSee Unchunked Extended Message.\nUnchunked Extended \nMessage\nExtended Message that has been transmitted whole without using Chunking.\nUnexpected Message\nMessage that a Port supports but has been received in an incorrect State.\nUnit Interval\nThe time to transmit a single data bit on the wire.\nUnit Under Test\nThe PD device that is being tested by the Tester and responds to the initiation of a particular BIST \ntest sequence.\nUnrecognized Message\nMessage that a Port does not understand e.g., a Message using a Reserved Message type, a \nMessage defined by a higher specification Revision than the Revision this Port supports, or an \nUnstructured Vendor Defined Message for which the VID is not recognized.\nUnstructured VDM\nSee Unstructured Vendor Defined Message.\nUnstructured VDM Header\nThe VDM Header for an Unstructured Vendor Defined Message. \nUnstructured Vendor \nDefined Message\nA Vendor Defined Message where the contents of bits 14...0 of the VDM Header are undefined.\nUnsupported Message\nMessage that a Port recognizes but does not support. This is a Message defined by the \nspecification, but which is not supported by this Port.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":51,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 51\nUpstream Facing Port\nIndicates the Port’s position in the USB topology typically a Port on a Device as defined in [USB \nType-C 2.4]. At connection, the Port defaults to operation as a USB Device (when USB \nCommunication is supported) and Sink.\nUSB Attached State\nSynonymous with the [USB 2.0] and [USB 3.2] definition of the Attached state\nUSB Communication\nTransfer of USB data Packets as defined in [USB 2.0] and [USB 3.2].\nUSB Default Operation\nOperation of a Port at Attach or after a Hard Reset where the DFP Source applies vSafe5V on VBUS \nand the UFP Sink is operating at vSafe5V as defined in [USB 2.0], [USB 3.2], [USB Type-C 2.4] or \n[USBBC 1.2].\nUSB Device\nEither a Hub or a Peripheral device as defined in [USB 2.0], [USB 3.2] and [USB4].\nUSB Host\nThe computer system where the USB Host controller is installed as defined in [USB 2.0], [USB \n3.2] and [USB4].\nUSB Hub\nSee Hub.\nUSB Powered State\nSynonymous with the [USB 2.0] and [USB 3.2] definition of the powered state.\nUSB Safe State\nState of the USB Type-C connector when there are pins to be re-purposed (see [USB Type-C 2.4]) \nso they are not damaged by and do not cause damage to their Port Partner.\nUSB Type-A\nTerm used to refer to any A plug or receptacle including USB Micro-A plugs and USB Standard-\nA plugs and receptacles. USB Micro-AB receptacles are assumed to be a combination of USB \nType-A and USB Type-B.\nUSB Type-B\nTerms used to refer to any B-plug or receptacle including USB Micro-B plugs and USB Standard-\nB plugs and receptacles, including the PD and non-PD versions. USB Micro-AB receptacles are \nassumed to be a combination of USB Type-A and USB Type-B.\nUSB Type-C\nTerm used to refer to the USB Type-C connector plug, or receptacle as defined in [USB Type-C \n2.4].\nUSB Type-C Multi-Port \nCharger\nA product that exposes multiple USB Type-C Source Ports for the purpose of charging multiple \nconnected USB Devices as defined in [USB Type-C 2.4].\nUSB-C® Port Control\nModule in a PD Capable device which controls Attach/Detach and either detects or sets the Rp \nvalue.\nUSB-IF PD SID\nStandard ID allocated to this specification by the USB Implementer’s Forum.\nUSB4® Mode\nDevice is operating in a Mode as defined in [USB4].\nUUT\nSee Unit Under Test.\nVariable Supply\nA poorly regulated power supply that is not a Battery. This is exposed by the Variable Supply PDO \n(see Section 6.4.2, \"Request Message\").\nVBUS\nThe VBUS wire delivers power from a Source to a Sink.\nVCONN\nOnce the connection between USB Host and device is established, the CC pin (CC1 or CC2) in the \nreceptacle that is not connected via the CC wire through the standard cable is re-purposed to \nsource VCONN to power circuits in a Cable Plug, VCONN Powered Accessory or VCONN Powered USB \nDevice (see [USB Type-C 2.4]).\nVCONN Powered Accessory\nAn accessory that is powered from VCONN to operate in an Alternate Mode (see [USB Type-C \n2.4]).\nVCONN Powered USB Charge \nThrough Device\nA CT-VPD is a VPD with an additional port for connecting a Source (e.g., a Charger) as defined in \n[USB Type-C 2.4]. \nWhen no Charger is connected, a CT-VPD behaves as a VPD. \nWhen a Charger is connected, no PD communication to the CT-VPD itself is possible as CC is \nconnected to the Charger port. Hence all PD communication then is with the Charger and the \ncable with which it is connected.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":52,"text":"Page 52\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n1.7\n  Parameter Values\nThe parameters in this specification are expressed in terms of absolute values. For details of how each parameter \nis measured in compliance please see [USBPDCompliance].\n1.8\n  Changes from Revision 3.0 \nExtended Power Range (EPR) including Adjustable Voltage Supply (AVS) has been added.\n1.9\n  Compatibility with Revision 2.0\nThis Revision of the USB Power Delivery specification is designed to be fully inter-operable with [USBPD 2.0] \nsystems using BMC Signaling over the [USB Type-C 2.4] connector and to be compatible with Revision 2.0 \nhardware.\nPlease see Section 2.3, \"USB Power Delivery Capable Devices\" for more details of the mechanisms defined to enable \ncompatibility. \nVCONN Powered USB Device\nA captive cable USB Device that can be powered by either VCONN or VBUS as defined in [USB Type-\nC 2.4]. \nA VPD is a captive cable USB Device that can be powered by either VCONN or VBUS and only \nresponds to SOP’ Communication as defined in the Tables in Section 6.12, \"State behavior\"). It \nonly responds to Messages sent with a Specification Revision of at least Revision 3.x. A VPD is not \nallowed to support Alternate Modes.\nThe term VPD refers to either a VPD or a CT-VPD with no Charger connected.\nVCONN Source\nThe USB Type-C Port responsible for sourcing VCONN.\nVCONN Swap\nProcess of exchanging the VCONN Source between Port Partners.\nVDEM\nSee Vendor Defined Extended Message.\nVDM\nSee Vendor Defined Message.\nVDM Header\nThe first Data Object following the Message Header in a Vendor Defined Message. The VDM \nHeader contains the SVID relating to the VDM being sent and provides information relating to \nthe Command in the case of a Structured VDM (see Section 6.4.4, \"Vendor Defined Message\").\nVDO\nSee Vendor Data Object.\nVendor Data Object\nData Object used to send Vendor specific information as part of a Message.\nVendor Defined Extended \nMessage\nPD Extended Message defined for vendor/standards usage. A VDEM does not define any \nstructure and Messages can be created in any manner that the vendor chooses.\nVendor Defined Message\nPD Data Message defined for vendor/standards usage. These are further partitioned into \nStructured Vendor Defined Messages, where Commands are defined in this specification, and \nUnstructured Vendor Defined Messages which are entirely vendor defined (see Section 6.4.4, \n\"Vendor Defined Message\").\nVendor ID\n16-bit unsigned value assigned by the USB-IF to a given Vendor.\nVersion\nA minor release of the USB Power Delivery specification associated with a particular Revision.\nVersion numbers are also defined in VDMs.\nVI\nSame as power (i.e., voltage * current = power)\nVID\nSee Vendor ID.\nVPD\nSee VCONN Powered USB Device.\nTable 1.4  Terms and Abbreviations (Continued)\nTerm\nDescription\n","image_count":0,"table_count":2}
{"page":53,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 53\n2\n Overview\nThis section contains no Normative requirements. \n2.1\n  Introduction\nUSB Power Delivery (PD) defines the mechanisms for pairs of directly Attached Ports (also referred to as Port \nPartners or Port Pairs) to Negotiate voltage, current and/or direction of power flow over the USB cable. It uses the \nUSB Type-C® connector's CC wire as the communications channel. The PD mechanisms operate independently of \nand supersede other USB methods defined in [USB 2.0], [USB 3.2], [USBBC 1.2] and [USB Type-C 2.4].\nUSB Power Delivery also defines sideband mechanisms used for configuration management of USB Type-C devices \nand cables. Using Structured Vendor Defined Messages (Structured VDMs), PD facilitates discovery of device and \ncables features and performance. Structured VDMs are also used to enter/exit some Active Modes, either USB-based \n(e.g., USB4® Mode) or USB Type-C Alternate Modes. Alternate Modes are associated with Standard or Vendor IDs \n(SVIDs) and can be either standard (e.g., DisplayPort Alternate Mode) or proprietary (e.g., Intel Thunderbolt™ 3).\n2.1.1\n  Power Delivery Source Operational Contracts\nA PD Source will be in one of three Contracts:\n\nDefault Contract which it enters immediately following a Connect where the Source provides 5V and \nAdvertises the amount of current it can deliver using the Rp value as defined in [USB Type-C 2.4]. A \nSource in a Default Contract will remain in this Contract until the Sink is Detached or the Source and Sink \nNegotiate and enter an Explicit Contract.\n\nImplicit Contract which immediately follows a Power Role Swap or Fast Role Swap and is transitory. The \nPD Source provides 5V and Advertises the amount of current it can deliver using the Rp value as defined \nin [USB Type-C 2.4]. A Source in an Implicit Contract will immediately Negotiate with the Sink and enter \nan Explicit Contract.\n\nExplicit Contract is the state of the Source after any PD power Negotiation consisting of the Source \nsending a Source_Capabilities Message, the Sink responding with a Request Message, the Source \nacknowledging the request with an Accept Message and finally the Source sends a PS_RDY Message \nwhen the Source is ready to deliver the requested power. This is the normal operational state for PD. A \nSource in an Explicit Contract will remain in an Explicit Contract during and after a Re-negotiation of its \nContract and will exit the Explicit Contract when:\n\nDisconnected from the Sink where it will restart in a Default Contract when reconnected to the Sink.\n\nFollowing a Hard Reset where it will restart as if it were Detached then Attached to the Sink.\n\nFollowing a Power Role Swap or Fast Role Swap where it will enter an Implicit Contract.\n\nFollowing USB Type-C Error Recovery which is an electrical Detach/Re-attach (remove and assert \nRp).\n2.1.2\n  Power Delivery Contract Negotiation\nContracts Negotiated using the USB Power Delivery Specification supersede any and all previous power contracts \nestablished whether from standard [USB 2.0], [USB 3.2], [USBBC 1.2] or [USB Type-C 2.4] mechanisms. While \noperating in Power Delivery Mode there will be a Contract in place (either Explicit Contract or Implicit Contract) that \ndetermines the power level available and the direction of that power. The Port Pair will remain in Power Delivery \nMode until the Port Pair is Detached, there is a Hard Reset, or USB Type-C Error Recovery, or the Source removes \npower except as part of the Power Role Swap or Fast Role Swap processes.\nNote:\n[USB4] does not define a default power, rather relies on a PD power Contract. When first Attached the \n[USB4] device operates in [USB 3.2] Mode which is its USB Default Operation.\nAn Explicit Contract is Negotiated by the process of the Source sending a set of Capabilities, from which the Sink is \nrequired to request a particular capability and then the Source accepting this request. \n","image_count":0,"table_count":1}
{"page":54,"text":"Page 54\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nAn Implicit Contract is the specified level of power allowed in particular states (i.e., during and after a Power Role \nSwap or Fast Role Swap). Implicit Contracts are temporary; Port Pairs are required to immediately Negotiate an \nExplicit Contract.\nEach Provider has a Local Policy, governing power allocation to its Ports. Consumers also have their own Local Policy \ngoverning how they draw power. A System Policy can be enacted over USB that allows modification to this Local \nPolicy and hence management of overall power allocation in the system.\nWhen PD Capable devices are Attached to each other, the DFPs and UFPs initially default to standard USB Default \nOperation. The DFP supplies vSafe5V and the UFP draws current in accordance with the rules defined by [USB 2.0], \n[USB 3.2], [USB Type-C 2.4] or [USBBC 1.2] specifications. After Power Delivery Negotiation has taken place, \npower can be supplied at higher, or lower, voltages and higher currents than defined in these specifications. It is \nalso possible to:\n\nDo a Power Role Swap or Fast Role Swap to exchange the Power Roles such that the DFP receives power \nand the UFP supplies power. \n\nDo a Data Role Swap such that the DFP becomes the UFP and vice-versa.\n\nDo a VCONN Swap to change the Port supplying VCONN to the cable.\n\nEnter into EPR Mode.\n\nEnter into USB4® Mode.\n\nEnter into Alternate Modes.\n\nSend Vendor Defined Messages.\nPrior to the First Explicit Contract only the Source Port, which is also the VCONN Source, can communicate with the \nAttached cable assembly. This is important where 5A and EPR capability are marked as well as other details of the \ncable assembly such as the supported speed. \nCable Discovery, determining whether the cable can communicate, can occur on initial Attachment of a Port Pair \nbefore an Explicit Contract has been established. It is also possible to carry out Cable Discovery after a Power Role \nSwap or Fast Role Swap prior to re-establishing an Explicit Contract, where the UFP is the Source, and an Implicit \nContract is in place. Cable Discovery can be carried out after an Explicit Contract has been established, if the cable \nhas not yet been discovered.\n2.1.3\n  Other Uses for Power Delivery\nOnce an Explicit Contract is in place, PD can be used to manage the Ports and cables for non-power related \nfunctionality. \nPD is used to enter the USB4® Mode of operation. Ports and cables can support functionality beyond power. For \nexample, a cable can have active components that require VCONN power or a Port/cable can support a video display \nAlternate Mode such as DisplayPort. PD defines an infrastructure to discover these additional Capabilities and \nModes that include:\n\nDiscovering a Port or Cable Plug's Capabilities.\n\nDiscovery of the SVIDs a Port or Cable Plug supports.\n\nDiscovery of the Modes a Port or Cable Plug supports.\n\nEntry into a Mode supported by the Port and/or Cable Plug.\n\nExiting Modes supported by the Port and/or Cable Plug.\n2.2\n  Compatibility with Revision 2.0\nRevision 3.x of the USB Power Delivery specification is designed to be fully inter-operable with [USBPD 2.0] \nsystems using BMC Signaling over the [USB Type-C 2.4] connector and to be compatible with Revision 2.0 \nhardware. \n","image_count":0,"table_count":1}
{"page":55,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 55\nThis specification mandates that all Revision 3.x systems fully support Revision 2.0 operation. They must discover \nthe supported Revision used by their Port Partner and any connected Cable Plugs and revert to operation using the \nlowest common Revision number (see Section 6.2.1.1.5, \"Specification Revision\"). \nThis specification defines Extended Messages containing data of up to 260 bytes (see Section 6.2.1.2, \"Extended \nMessage Header\"). These Messages can be larger than expected by existing PHY HW. To accommodate Revision 2.0 \nbased systems a Chunking mechanism is mandated such that Messages are limited to Revision 2.0 sizes unless it is \ndiscovered that both systems support the longer Message lengths.\nThis specification includes changes to the Vendor Data Objects (VDO) used in the discovery of passive/active \nmarked cables and Alternate Mode Adapters (AMA) (see Section 6.4.4.2, \"Structured VDM\"). To enable systems to \ndetermine which VDO format is being used the Structured Vendor Defined Message (SVDM) Version number has \nbeen incremented to 2.x. Version numbers have also been incorporated into the VDOs themselves to facilitate \nfuture changes if these become necessary.\n2.3\n  USB Power Delivery Capable Devices\nSome examples of USB Power Delivery capable devices can be seen in Figure 2.1, \"Logical Structure of USB Power \nDelivery Capable Devices\" (a USB Host, a USB Device, a Hub, and a Charger). These are given for reference only and \nare not intended to limit the possible configurations of products that can be built using this specification.\nFigure 2.1 Logical Structure of USB Power Delivery Capable Devices\nEach USB Power Delivery capable device is assumed to be made up of at least one Port. Providers are assumed to \nhave a Source and Consumers a Sink. Each device contains one, or more, of the following components:\n\nUFPs that:\n\nSink Power.\n\nCommunicate using SOP Packets.\n\nOptionally Communicate using SOP’ Packets/SOP’’ Packets.\n\nOptionally source power (a Dual-Role Power Device).\n\nOptionally communicate via USB.\n\nOptionally support Alternate Modes.\n\nDFPs that:\nUSB Host  \nUFP\nUSB Device\nPower \nStorage\nExternal \npower\nUSB Hub\nDFP\nPower \nStorage\nExternal \npower\nUSB Charger\nUFP\nPower \nStorage\nExternal \npower\nExternal \npower\nPower \nStorage\nDFP\nDFP\nOptional\nPower input\nOptional\nFeature\nMultiple Power \ninputs/outputs\nMultiple Power \noutputs\nPower input\nLegend\n","image_count":0,"table_count":4}
{"page":56,"text":"Page 56\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nSource Power\n\nCommunicate using SOP Packets.\n\nOptionally Communicate using SOP* Packets.\n\nOptionally Sink power (a Dual-Role Power Device).\n\nOptionally communicate via USB.\n\nOptionally support Alternate Modes.\n\nA Source that can be:\n\nAn externally powered source (e.g., AC powered).\n\nPower Storage (e.g., Battery/Power Bank).\n\nDerived from another Port (e.g., bus-powered Hub).\n\nA Sink that can be:\n\nPower Storage (e.g., a Battery/Power Bank).\n\nUsed to power internal functions.\n\nUsed to power devices Attached to other devices (e.g., a bus-powered Hub).\n\nA VCONN Source that:\n\nCan be either Port Partner, either the DFP/UFP or Source/Sink.\n\nPowers the Cable Plug(s).\n\nPowers VPDs (VCONN Powered USB Devices).\n\nIs the only Port allowed to talk to the Cable Plug(s) at any given time.\n","image_count":0,"table_count":1}
{"page":57,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 57\n2.4\n  SOP* Communication\n2.4.1\n  Introduction\nThe Start of Packet (or SOP) is used as an addressing scheme to identify whether the communications were \nintended for one of the Port Partners (SOP Communication) or one of the Cable Plugs (SOP’ Communication/SOP’’ \nCommunication). SOP/SOP’ and SOP’’ are collectively referred to as SOP*. All SOP* Communications take place over \na single wire (CC). The term Cable Plug in the SOP’ Communication/SOP’’ Communication case is used to represent \na logical entity in the cable which is capable of PD Communication, and which might or might not be physically \nlocated in the plug.\nNote:\nThere are there are other SOPs defined for special operation such as debug which are not discussed here.\nThe following sections describe how this addressing scheme operates for Port-to-Port and Port to Cable Plug \ncommunication.\n2.4.2\n  SOP* Collision Avoidance\nFor all SOP* the Source co-ordinates communication to avoid bus collisions by allowing the Sink to initiate \nmessaging when it does not need to communicate itself. Once an Explicit Contract is in place, the Source \nmanipulates its Rp value (3A) to indicate to the Sink that it can initiate an Atomic Message Sequence (AMS). This AMS \ncan be communication with the Source or with one of the Cable Plugs. As soon as the Source itself needs to initiate \nan AMS, it will manipulate its Rp value (1.5A) to indicate this to the Sink. The Source then waits for any outstanding \nSink SOP* Communication to complete before initiating an AMS itself. In all cases, the Port initiating an AMS waits \nfor CC to be Idle before putting the Message on CC.\n2.4.3\n  SOP Communication\nSOP Communication is used for Port-to-Port communication between the Source and the Sink. SOP Communication \nis recognized by both Port Partners but not by any intervening Cable Plugs. SOP Communication takes priority over \nother SOP* Communications since it is critical to complete power related operations as soon as possible.\n2.4.4\n  SOP'/SOP'' Communication with Cable Plugs\nSOP’ Communication is recognized by electronics in one Cable Plug (see [USB Type-C 2.4]). SOP’’ Communication \ncan also be supported when SOP’ Communication is also supported. SOP’ and SOP’’ assignment in the cable \nassembly is fixed and does not change dynamically.\nSOP Communication between the Port Partners is not recognized by the Cable Plug. Figure 2.2, \"Example SOP' \nCommunication between VCONN Source and Cable Plug(s)\" outlines the usage of SOP* Communications between a \nVCONN Source (DFP/UFP) and the Cable Plugs.\nSince all SOP* Communications take place over a single wire (CC), the SOP* Communication periods must be \ncoordinated to prevent important communication from being blocked. For a product which does not recognize \nSOP/SOP’ or SOP’’ Packets, this will look like a non-Idle channel, leading to missed Packets and retries. \nCommunications between the Port Partners take precedence meaning that communications with the Cable Plug \ncan be interrupted but will not lead to a Soft Reset or Hard Reset.\nWhen a Default Contract or Implicit Contract is in place (e.g., at startup, after a Power Role Swap or Fast Role Swap) \nonly the Source Port that is supplying VCONN is allowed to send Packets to a Cable Plug (SOP’) and is allowed to \nrespond to Packets from the Cable Plug (SOP’) with a GoodCRC Message in order to discover the Cable Plug's \ncharacteristics (see Figure 2.2, \"Example SOP' Communication between VCONN Source and Cable Plug(s)\"). During \nthis phase, all communication with the Cable Plug is initiated and controlled by the VCONN Source which acts to \nprevent conflicts between SOP Packets and SOP’ Packets. The Sink does not communicate with the Cable Plug and \nDiscards any SOP’ Packets received.\nWhen an Explicit Contract is in place, only the VCONN Source (either the DFP or the UFP) can communicate with the \nCable Plug(s) using SOP’ Packets/SOP’’ Packets (see Figure 2.2, \"Example SOP' Communication between VCONN \nSource and Cable Plug(s)\"). During this phase, all communication with the Cable Plug is initiated and controlled by \nthe VCONN Source which acts to prevent conflicts between SOP* Packets. The Port that is not the VCONN Source is not \n","image_count":0,"table_count":1}
{"page":58,"text":"Page 58\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nallowed to communicate with the Cable Plug and does not recognize any SOP’ Packets/SOP’’ Packets received. Only \nthe DFP, when acting as a VCONN Source, is allowed to send SOP* Packets to control the entry and exiting of Modes \nand to manage Modal Operation.\nFigure 2.2 Example SOP' Communication between VCONN Source and Cable Plug(s)\nVCONN Source \n(DFP/UFP)\nSOP signaling\nSOP’\nsignaling\nSOP’’\nsignaling\nCable \nPlug1 \n(SOP’’)\nElectronically Marked \nCable\nCable \nPlug1 \n(SOP’)\nVCONN\n","image_count":0,"table_count":6}
{"page":59,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 59\n2.5\n  Operational Overview\nA USB Power Delivery Port supplying power is known as a Source and a Port consuming power is known as a Sink. \nThere is only one Source Port and one Sink Port in each PD Connection between the Port Partners. At Attach the \nSource Port (the Port with Rp asserted see [USB Type-C 2.4]) is also the DFP and VCONN Source. At Attach the Sink \nPort (the Port with Rd asserted) is also the UFP and is not the VCONN Source.\nThe original USB PD specification allowed Sources to deliver up to 100W. This classic Mode of operation is referred \nto as the Standard Power Range (SPR). The First Explicit Contract, the first Contract after a Default Contract or \nImplicit Contract, is always an SPR Contract. There is an Optional higher power Mode referred to as the Extended \nPower Range (EPR) where the Source is allowed to deliver up to 240W. The EPR Mode can only be entered from the \nSPR Mode. The entry process is designed to prevent accidental entry into this higher power Mode. It can be entered \nonly when an SPR Explicit Contract is in place and both the Source Port and Sink Port as well as the cable support \nEPR.\nThe Source/Sink Power Roles, DFP/UFP Data Roles and VCONN Source role can all subsequently be swapped \northogonally to each other. A Port that supports both Source and Sink Power Roles is called a Dual-Role Power Port \n(DRP). A Port that supports both DFP and UFP Data Roles is called a Dual-Role Data Port (DRD).\nWhen USB Communications capability is supported in the DFP Data Role then the Port will also be able to act as a \nUSB Host. Similarly, when USB Communications capability is supported in the UFP Data Role then the Port will also \nbe able to act as a USB Device.\nThe following sections describe the high-level operation of ports taking on the roles of DFP, UFP, Source and Sink.\nFor details of how PD maps to USB states in a PDUSB Device see Section 9.1.2, \"Mapping to USB Device States\".\n2.5.1\n  Source Operation\nThe Source operates differently depending on its Attachment status:\n\nAt Attach (no PD Connection or Contract):\n\nFor a Source-only Port the Source detects Sink Attachment.\n\nFor a DRP that toggles between Source and Sink operation, the Port becomes a Source Port on \nAttachment of a Sink\n\nThe Source then supplies vSafe5V.\n\nBefore PD Connection (no PD Connection or Contract):\n\nPrior to sending Source_Capabilities Messages the Source can detect the Cable Capabilities and \nAdvertises its Capabilities depending on the Cable Capabilities detected:\n\nThe default current carrying capability of a USB Type-C cable is 3A.\n\nThe Source can attempt to communicate with one of the Cable Plugs using SOP’ Packets. If the \nCable Plug responds, then communication takes place to discover the cable's Capabilities (e.g., 5A \ncapable).\n\nThe Source periodically Advertises its Capabilities by sending Source_Capabilities Messages every \ntTypeCSendSourceCap.\n\nEstablishing PD Connection (no PD Connection or Contract):\n\nPresence of a PD Capable Port Partner is detected either:\n\nBy receiving a GoodCRC Message in response to a Source_Capabilities Message.\n\nBy receiving Hard Reset Signaling.\n\nEstablishing the First Explicit Contract after an Attach, Hard Reset, USB Type-C Error Recovery or Implicit \nContract as a result of a Power Role Swap or Fast Role Swap:\n","image_count":0,"table_count":1}
{"page":60,"text":"Page 60\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe Source receives a Request Message from the Sink and, if this is a Valid request, responds with \nan Accept Message followed by a PS_RDY Message when its power supply is ready to source power \nat the agreed level. At this point an Explicit Contract has been agreed.\n\nA DFP that does not generate SOP’ Packets or SOP’’ Packets, is not required to detect SOP’ Packets or \nSOP’’ Packets and Discards them.\n\nWhen in an Explicit Contract (PE_SRC_Ready State):\n\nThe Source processes and responds (if a response is required) to all Messages received and sends \nappropriate Messages whenever its Local Policy requires:\n\nThe Source informs the Sink whenever its Capabilities change, by sending a Source_Capabilities \nMessage.\n\nThe Source responds to a Sink Request Message with the Capabilities mismatch bit set, by \nsending a Source_Capabilities Message with its maximum available power.\n\nThe Source will always have an Rp value asserted on its CC wire used for Collision Avoidance.\n\nWhen this Port is a DRP the Source can initiate or receive a request for the exchange of Power \nRoles. After the Power Role Swap this Port will be a Sink and in an Implicit Contract until an \nExplicit Contract is Negotiated immediately afterwards.\n\nWhen this Port is a DRD the Source can initiate or receive a request for an exchange of Data Roles. \nAfter a Data Role Swap the DFP (USB Host) becomes a UFP (USB Device). The Port remains a \nSource and the VCONN Source role remains unchanged.\n\nThe Source can initiate or receive a request for an exchange of VCONN Source role. During a VCONN \nSwap VCONN is applied by both Ports (make before break). The Port remains a Source and DFP/\nUFP Data Roles remain unchanged.\n\nThe Source when it is the VCONN Source can communicate with a Cable Plug using SOP’ \nCommunication or SOP’’ Communication at any time it is not engaged in any other SOP \nCommunication:\n\nIf SOP Packets are received by the Source, during SOP’ Communication or SOP’’ Communication, \nthe SOP’ Communication or SOP’’ Communication is immediately terminated (the Cable Plug \ntimes out and does not retry).\n\nIf the Source needs to initiate an SOP Communication during an ongoing SOP’ Communication or \nSOP’’ Communication (e.g., for a Capabilities change) then the SOP’ Communication or SOP’’ \nCommunications will be interrupted. \n\nWhen the Source Port is also a DFP:\n\nThe Source can control the entry and exiting of Modes in the Cable Plug(s) and control Modal \nOperation.\n\nThe Source can initiate Unstructured VDMs or Structured VDMs.\n\nThe Source can control the entry and exiting of Modes in the Sink and control Modal Operation \nusing Structured VDMs.\n\nDetach or communications failure:\n\nA Source detects plug Detach and takes VBUS down to vSafe5V within tSafe5V and vSafe0V within \ntSafe0V (i.e. using USB Type-C Detach detection via CC).\n\nWhen the Source detects the failure to receive a GoodCRC Message in response to a Message within \ntReceive:\n\nLeads to a Soft Reset, within tSoftReset of the CRCReceiveTimer expiring.\n","image_count":0,"table_count":1}
{"page":61,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 61\n\nIf the Soft Reset process cannot be completed a Hard Reset will be issued within tHardReset of \nthe CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s:\n\nWhen the Source is also the VCONN Source, VCONN will also be power cycled during the Hard \nReset.\n\nWhen the Source operating in SPR PPS Mode fails to receive periodic communication (e.g., a Request \nMessage) from the Sink within tPPSTimeout:\n\nSource issues a Hard Reset and takes VBUS to vSafe5V.\n\nWhen the Source operating in the EPR Mode fails to receive periodic communication (i.e., an \nEPR_KeepAlive Message or any other Message) from the Sink within tSourceEPRKeepAlive:\n\nSource issues a Hard Reset and takes VBUS to vSafe5V.\n\nReceiving no response to further attempts at communication is interpreted by the Source as an error \n(see Error handling).\n\nErrors during power transitions will automatically lead to a Hard Reset to restore power to default \nlevels.\n\nError handling:\n\nProtocol Errors are handled by a Soft_Reset Message issued by either Port Partner, that resets \ncounters, timers and states, but does not change the Negotiated voltage and current or the Port's \nrole (e.g., Source, DFP/UFP, VCONN Source) and does not cause an exit from Modal Operation.\n\nSerious errors are handled by Hard Reset Signaling issued by either Port Partner. A Hard Reset: \n\nResets protocol as for a Soft Reset but also returns the power supply to USB Default Operation \n(vSafe0V or vSafe5V output) in order to protect the Sink.\n\nRestores the Port's Data Role to DFP.\n\nRestores the Port's power to its USB default state.\n\nWhen the Sink is the VCONN Source it removes VCONN then the Source Port is restored as the VCONN \nSource.\n\nCauses all Active Modes to be exited such that the Source is no longer in Modal Operation.\n\nAfter a Hard Reset it is expected that the Port Partner will respond within tNoResponse. If this does \nnot occur then nHardResetCount further Hard Resets are carried out before the Source performs \nadditional Error Recovery steps, as defined in [USB Type-C 2.4], by entering the ErrorRecovery \nstate.\n","image_count":0,"table_count":1}
{"page":62,"text":"Page 62\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n2.5.2\n  Sink Operation\n\nAt Attach (no PD Connection or Contract):\n\nSink detects Source Attachment through the presence of vSafe5V.\n\nFor a DRP that toggles between Source and Sink operation, the Port becomes a Sink Port on \nAttachment of a Source.\n\nOnce the Sink detects the presence of vSafe5V on VBUS it waits for a Source_Capabilities Message \nindicating the presence of a PD Capable Source.\n\nIf the Sink does not receive a Source_Capabilities Message within tTypeCSinkWaitCap then it can \nissue Hard Reset Signaling in order to cause the Source Port to send a Source_Capabilities Message \nif the Source Port is PD Capable.\n\nThe Sink does not generate SOP’ Packets or SOP’’ Packets, is not required to detect SOP’ Packets or \nSOP’’ Packets and Discards them.\n\nEstablishing PD Connection (no PD Connection or Contract):\n\nThe Sink receives a Source_Capabilities Message and responds with a GoodCRC Message.\n\nThe Sink does not generate SOP’ Packets or SOP’’ Packets, is not required to detect SOP’ Packets or \nSOP’’ Packets and Discards them.\n\nEstablishing the First Explicit Contract after an Attach, Hard Reset or Implicit Contract as a result of a \nPower Role Swap or Fast Role Swap:\n\nThe Sink receives a Source_Capabilities Message from the Source and responds with a Request \nMessage. If this is a Valid request the Sink receives an Accept Message followed by a PS_RDY Message \nwhen the Source's power supply is ready to source power at the agreed level. At this point the Source \nand Sink have entered into an Explicit Contract:\n\nThe Sink Port can request one of the Capabilities offered by the Source, even if this is the vSafe5V \noutput offered by [USB 2.0], [USB 3.2], [USB Type-C 2.4] or [USBBC 1.2], in order to enable \nfuture power Negotiation:\n\nA Sink not requesting any Valid capability with a Request Message results in an error.\n\nA Sink unable to fully operate at the offered Capabilities requests the default capability but in-\ndicates that it would prefer another power level by setting the Capability Mismatch bit in the \nRequest Message and also providing a physical indication of the failure to the end user (e.g., \nusing an LED).\n\nThe Sink does not generate SOP’ Packets or SOP’’ Packets, is not required to detect SOP’ Packets or \nSOP’’ Packets and Discards them.\n\nDuring PD Connection (Explicit Contract - PE_SNK_Ready state):\n\nThe Sink processes and responds (if a response is required) to all Messages received and sends \nappropriate Messages whenever its Local Policy requires.\n\nA Sink whose power needs have changed indicates this to the Source with a new Request Message. \nThe Sink Port can request one of the Capabilities previously offered by the Source, even if this is the \nvSafe5V output offered by [USB 2.0], [USB 3.2], [USB Type-C 2.4] or [USBBC 1.2], in order to enable \nfuture power Negotiation:\n\nNot requesting any capability with a Request Message results in an error.\n\nA Sink unable to fully operate at the offered Capabilities requests an offered capability but \nindicates a Capabilities Mismatch i.e., that it would prefer another power level also providing a \nphysical indication of the failure to the end user (e.g., using an LED).\n","image_count":0,"table_count":1}
{"page":63,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 63\n\nA Sink operating in the SPR PPS Mode periodically sends Request Message within tPPSRequest even \nif its request is unchanged.\n\nA Sink operating in the EPR Mode periodically communicates with the Source (i.e., sends an \nEPR_KeepAlive Message or any other Message) within tSourceEPRKeepAlive.\n\nThe Sink will always have Rd asserted on its CC wire.\n\nWhen this Port is a DRP, the Sink can initiate or receive a request for the exchange of Power Roles. \nAfter the Power Role Swap this Port will be a Source and an Implicit Contract will be in place until an \nExplicit Contract is Negotiated immediately afterwards.\n\nWhen this Port is a DRD the Sink can initiate or receive a request for an exchange of Data Roles. After \na Data Role Swap the UFP (USB Device) becomes a DFP (USB Host). The Port remains a Sink and \nVCONN Source role (or not) remains unchanged.\n\nThe Sink can initiate or receive a request for an exchange of VCONN Source. During a VCONN Swap \nVCONN is applied by both ends (make before break). The Port remains a Sink and DFP/UFP Data Roles \nremain unchanged.\n\nThe Sink when it is the VCONN Source can communicate with a Cable Plug using SOP’ Communication \nor SOP’’ Communication at any time it is not engaged in any other SOP Communication:\n\nIf SOP Packets are received by the Sink, during SOP’ Communication or SOP’’ Communication, the \nSOP’ Communication or SOP’’ Communication is immediately terminated (the Cable Plug times \nout and does not retry)\n\nIf the Sink needs to initiate an SOP Communication during an ongoing SOP’ Communication or \nSOP’’ Communication (e.g., for a Capabilities change) then the SOP’ Communication or SOP’’ \nCommunications will be interrupted. \n\nWhen the Sink Port is also a DFP:\n\nThe Sink can initiate Unstructured VDMs or Structured VDMs.\n\nThe Sink can control the Mode Entry and Mode Exit of Modes in the Source and control Modal \nOperation (e.g. [USB4]).\n\nDetach or Communications Failure:\n\nA Sink detects the removal of VBUS and interprets this as the end of the PD Connection:\n\nThis is unless the vSafe0V is due to either a Hard Reset, Power Role Swap or Fast Role Swap.\n\nA Sink detects plug removal (i.e., absence of Rp or VBUS) and discharges VBUS.\n\nWhen the Sink detects the failure to receive a GoodCRC Message in response to a Message within \ntReceive:\n\nLeads to a Soft Reset, within tSoftReset of the CRCReceiveTimer expiring.\n\nIf the Soft Reset process cannot be completed a Hard Reset will be issued within tHardReset of \nthe CRCReceiveTimer to restore VBUS to USB Default Operation within ~1-1.5s.\n\nReceiving no response to further attempts at communication is interpreted by the Sink as an \nerror (see Error handling).\n\nWhen the Sink operating in the SPR PPS Mode fails to send periodic communication (i.e. a Request \nMessage) to the Source within tPPSRequest, the Source will issue a Hard Reset that results in VBUS \ngoing to vSafe5V.\n\nWhen the Sink operating in the EPR Mode fails to send periodic communication (i.e. an \nEPR_KeepAlive Message or any other Message) to the Source within tSourceEPRKeepAlive the \nSource will issue a Hard Reset that results in VBUS going to vSafe5V.\n","image_count":0,"table_count":1}
{"page":64,"text":"Page 64\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nErrors during power transitions will automatically lead to a Hard Reset to restore power to default \nlevels.\n\nError handling:\n\nProtocol Errors are handled by a Soft_Reset Message issued by either Port Partner, that resets \ncounters, timers and states, but does not change the Negotiate voltage and current or the Port's role \n(e.g., Sink, DFP/UFP, VCONN Source) and does not cause an exit from Modal Operation.\n\nSerious errors are handled by Hard Reset Signaling issued by either Port Partner. A Hard Reset: \n\nresets protocol as for a Soft Reset but also returns the power supply to USB Default Operation \n(vSafe0V or vSafe5V output) in order to protect the Sink.\n\nrestores the Port's Data Role to UFP.\n\nwhen the Sink is the VCONN Source it removes VCONN then the Source Port is restored as the VCONN \nSource.\n\ncauses all Active Modes to be exited such that the Source is no longer in Modal Operation.\n\nAfter a Hard Reset it is expected that the Port Partner will respond within tTypeCSinkWaitCap. If this \ndoes not occur, then two further Hard Resets are carried out before the UFP stays in the \nPE_SNK_Wait_for_Capabilities state. \n","image_count":0,"table_count":1}
{"page":65,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 65\n2.5.3\n  Cable Plugs\n\nCable Plugs are powered when VCONN is present but are not aware of the status of the Contract between \nthe ports the cable assembly is connecting.\n\nCable Plugs do not initiate AMSs and only respond to Messages sent to them.\n\nDetach or Communications Failure:\n\nCommunications can be interrupted at any time.\n\nThere is no communication timeout scheme between the DFP/UFP and Cable Plug. \n\nThe Cable Plug is ready to respond to potentially repeated requests.\n\nError handling:\n\nThe Cable Plug detects Hard Reset Signaling to determine that the Source and Sink have been reset \nand will need to reset itself (equivalent to a power cycle).\n\nThe Cable Plug cannot generate Hard Reset Signaling itself.\n\nThe Hard Reset process power cycles both VBUS and VCONN so this is expected to reset the Cable \nPlugs by itself.\n\nA Cable Plug detects Cable Reset Signaling to determine that it will need to reset itself (equivalent to a \npower cycle).\n","image_count":0,"table_count":1}
{"page":66,"text":"Page 66\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n2.6\n  Architectural Overview\nThis logical architecture is not intended to be taken as an implementation architecture. An implementation \narchitecture is, by definition, a part of product definition and is therefore outside of the scope of this specification.\nThis section outlines the high-level logical architecture of USB Power Delivery referenced throughout this \nspecification. In practice various implementation options are possible based on many different possible types of \nPD devices. PD devices can have many different configurations e.g., USB Communication or non-USB \nCommunication, single versus multiple Ports, dedicated power supplies versus supplies shared on multiple ports, \nhardware versus software-based implementations etc. The architecture outlined in this section is therefore \nprovided only for reference to indicate the high-level logical model used by the PD specification. This architecture \nis used to identify the key concepts and to indicate logical blocks and possible links between them.\nThe USB Power Delivery is a Port to Port architecture in which each PD Capable device is made up of several major \ncomponents.\n\nFigure 2.3, \"USB Power Delivery Communications Stack\" illustrates the relationship of the layers of the \ncommunications stack between a Port Pair.\nThe communications stack consists of:\n\nA Device Policy Manager (see Section 8.2, \"Device Policy Manager\") that exists in all devices and manages \nUSB Power Delivery resources within the device across one or more Ports based on the device's Local \nPolicy.\n\nA Policy Engine (see Section 8.3, \"Policy Engine\") that exists in each USB Power Delivery Port \nimplements the Local Policy for that Port.\n\nA Protocol Layer (see Section 6, \"Protocol Layer\") that enables Messages to be exchanged between a Source \nPort and a Sink Port.\n\nA PHY Layer (see Section 5, \"Physical Layer\") that handles transmission and reception of bits on the wire \nand handles data transmission\n","image_count":0,"table_count":1}
{"page":67,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 67\nFigure 2.3 USB Power Delivery Communications Stack\nAdditionally, USB Power Delivery devices which can operate as USB devices can communicate over USB (see Figure \n2.4, \"USB Power Delivery Communication Over USB\"). An Optional System Policy Manager (see Chapter 9 and [UCSI]) \nthat resides in the USB Host communicates with the PDUSB Device over USB, via the root Port and potentially \nmanages the individual Port to Port connections over a tree of USB Hubs. The Device Policy Manager interacts with \nthe USB interface in each device to provide and update PD related information in the USB domain. \nNote:\nA PD device is not required to have a USB device interface.\nProtocol\nPolicy Engine\nDevice Policy \nManager\nCC\nPhysical Layer\nPhysical Layer\nProtocol\nPolicy Engine\nDevice Policy \nManager\nProvider\nConsumer\n","image_count":0,"table_count":2}
{"page":68,"text":"Page 68\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 2.4 USB Power Delivery Communication Over USB\nFigure 2.5, \"High Level Architecture View\" shows the logical blocks between two Attached PD Ports (Port Pair). In \naddition to the communication stack described above there are also:\n\nFor a Provider or Dual-Role Power Device: one or more Sources providing power to one or more Ports.\n\nFor a Consumer or Dual-Role Power Device: A Sink consuming power.\n\nA USB-C® Port Control module (see Section4.4 \"Cable Type Detection\") that detects cable Attach/Detach \nas defined in [USB Type-C 2.4].\n\nUSB Power Delivery uses standard cabling as defined in [USB Type-C 2.4].\nSystem Policy\nManager\nPhysical Layer\nProtocol\nPolicy Engine\nDevice Policy \nManager\nCC\nPD USB \nDevice\nUSB Host\nUSB Root Hub\nUSB Interface  \nUSB Hub\nUSB Hub\nPhysical Layer\nProtocol\nPolicy Engine\nDevice Policy \nManager\nCC\nPD USB \nDevice\nUSB Interface  \n","image_count":0,"table_count":3}
{"page":69,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 69\nThe Device Policy Manager talks to the communication stack, Source/Sink, and the USB-C® Port Control block to \nmanage the resources in the Provider or Consumer.\nFigure 2.5, \"High Level Architecture View\" illustrates a Provider and a Consumer. Dual-Role Power Devices can be \nconstructed by combining the elements of both Provider and Consumer into a single device. Providers can also \ncontain multiple Source Ports each with their own communications stack and USB-C® Port Control.\nFigure 2.5 High Level Architecture View\n2.6.1\n  Policy\nThere are two levels of Policy:\n1)\nSystem Policy applied system wide by the System Policy Manager across multiple Providers or Consumers.\n3)\nLocal Policy enforced on a Provider or Consumer by the Device Policy Manager for a device.\nPolicy comprises several logical blocks:\n\nSystem Policy Manager (system wide).\n\nDevice Policy Manager (one per Provider or Consumer).\n\nPolicy Engine (one per Source Port or Sink Port).\n2.6.1.1\n  System Policy Manager\nSince the USB Power Delivery protocol is Port to Port, implementation of a System Policy requires communication \nby an additional data communication mechanism i.e., USB. [UCSI]has been created to define an interface for the \nSystem Policy Manager to communicate with the Device Policy Manager. When present, the System Policy Manager \nmonitors and controls System Policy between various Providers and Consumers connected via USB. The System \nPolicy Manager resides in the USB Host and communicates via USB with the Device Policy Manager in each \nconnected Device. Devices without USB Communication capability or are not data connected, will not be able to \nparticipate in System Policy.\nThe System Policy Manager is Optional so USB Power Delivery Providers and Consumers will operate without it \nbeing present. This includes systems where the USB Host does not provide a System Policy Manager and can also \ninclude \"headless\" systems without any USB Host. In those cases where a USB Host is not present, USB Power \nDelivery is useful for charging purposes, or the powering of devices since useful USB functionality is not possible. \nWhere there is a USB Host, but no System Policy Manager, Providers and Consumers can Negotiate power between \nPower \nSource(s)\nPhysical Layer\nProtocol\nSource Port\nDevice Policy Manager\nProvider\nPolicy Engine\nPower \nSink\nPhysical Layer\nProtocol\nSink Port\nDevice Policy Manager\nConsumer\nPolicy Engine\nUSB-C Port \nControl\nUSB-C Port \nControl\nVBUS\nUSB Port\nVBUS\nUSB Port\nCC\nCC\nBMC\nBMC\nCC\nVBUS\n","image_count":0,"table_count":4}
{"page":70,"text":"Page 70\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nthemselves, independently of USB power rules, but are more limited in terms of the options available for managing \npower.\n2.6.1.2\n  Device Policy Manager\nThe Device Policy Manager provides mechanisms to monitor and control the USB Power Delivery system within a \nparticular Consumer or Provider. The Device Policy Manager enables Local Policy to be enforced across the system \nby communication with the System Policy Manager. Local Policy is enacted on a per Port basis by the Device Policy \nManager's control of the Source Ports/Sink Ports and by communication with the Policy Engine and USB-C® Port \nControl for that Port. The Device Policy Manager is responsible for the sharing algorithm used in Shared Capacity \nChargers (see [USB Type-C 2.4])\n2.6.1.3\n  Policy Engine\nProviders and Consumers are free to implement their own Local Policy on their directly connected Source Ports or \nSink Ports. These will be supported by Negotiation and status mechanisms implemented by the Policy Engine for \nthat Port. The Policy Engine interacts directly with the Device Policy Manager to determine the present Local Policy \nto be enforced. The Device Policy Manager will also inform the Policy Engine whenever there is a change in Local \nPolicy (e.g., Capabilities change).\n2.6.2\n  Message Formation and Transmission\n2.6.2.1\n  Protocol Layer\nThe Protocol Layer forms the Messages used to communicate information between a Port Pair. It is responsible for \nforming Capabilities Messages, requests and acknowledgments. Additionally, it forms Messages used to swap roles \nand maintain presence. It receives inputs from the Policy Engine indicating which Messages to send and indicates \nthe responses back to the Policy Engine.\nThe basic protocol uses a push model where the Provider pushes its Capabilities to the Consumer that in turn \nresponds with a request based on the offering. However, the Consumer can asynchronously request the Provider's \npresent Capabilities and can select another voltage/current.\nExtended Messages of up to a Data Size of MaxExtendedMsgLen can be sent and received provided the Protocol \nLayer determines that both Port Partners support this capability. When one of both Port Partners do not support \nExtended Messages of Data Size greater than MaxExtendedMsgLegacyLen then the Protocol Layer supports a \nChunking mechanism to break larger Messages into smaller Chunks of size MaxExtendedMsgChunkLen. All Ports \nthat support Extended Messages longer than MaxExtendedMsgLegacyLen are required to support Chunking.\n2.6.2.2\n  PHY Layer\nThe PHY Layer is responsible for sending and receiving Messages across the USB Type-C CC wire and for managing \ndata. PD is a Multi-Drop system, sharing CC between the Port Partners and the Cable Plug(s) that implements \nCollision Avoidance and recovery mechanisms. The PHY Layer detects errors in the Messages using a CRC.\n2.6.3\n  Collision Avoidance\n2.6.3.1\n  Policy Engine\nThe Policy Engine in a Source will indicate to the Protocol Layer the start and end of each Atomic Message Sequence \n(AMS) that the Source initiates. The Policy Engine in a Sink will indicate to the Protocol Layer the start of each AMS \nthe Sink initiates. This enables co-ordination of AMS initiation between the Port Partners.\n2.6.3.2\n  Protocol Layer\nThe Protocol Layer in the Source will request the PHY to set the Rp value to SinkTxOK when it is not actively sending \nMessages. This indicates to the Sink that it can initiate an AMS by sending the first Message in the sequence. The \nProtocol Layer in the Source will request the PHY Layer to set the Rp value to SinkTxNG to indicate that the Sink \ncannot initiate an AMS since the Source is about to initiate an AMS.\n","image_count":0,"table_count":1}
{"page":71,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 71\nThe Protocol Layer in the Sink, when the Policy Engine indicates that an AMS is being initiated, will wait for the Rp \nvalue to be set to SinkTxOK before initiating the AMS by sending the first Message in the sequence.\n2.6.3.3\n  PHY Layer\nThe PHY Layer in the Source will set the Rp value to either SinkTxOK or SinkTxNG as directed by the Protocol Layer. \nThe PHY Layer in the Sink will detect the present Rp value and inform the Protocol Layer.\n2.6.4\n  Power supply\n2.6.4.1\n  Source\nEach Provider will contain one or more power sources that are shared between one or more Ports. These power \nsources are controlled by the Local Policy. Source Ports start up in USB Type-C Operation where the Port applies \nvSafe0V on VBUS and returns to this state on Detach or after a Hard Reset. When the Source detects Attach events it \ntransitions its output to vSafe5V.\n2.6.4.2\n  Sink\nConsumers are assumed to have one Sink connected to a Port. This Sink is controlled by Local Policy. Sinks start up \nin USB Default Operation where the Port can operate at vSafe5V with USB default specified current levels and \nreturn to this state on Detach or after a Hard Reset.\n2.6.4.3\n  Dual-Role Power Ports\nDual-Role Power Ports have the ability to operate as either a Source or a Sink and to swap between the two Power \nRoles using Power Role Swap or Fast Role Swap.\n2.6.4.4\n  Dead Battery or Lost Power Detection\n[USB Type-C 2.4] defines mechanisms intended to communicate with and to charge a Sink or DRP with a Dead \nBattery. \n2.6.4.5\n  VCONN Source\nThe Source Port at Attach, is also the VCONN Source. The responsibility for sourcing VCONN can be swapped between \nthe Source Ports and Sink Ports in a make before break fashion to ensure that the Cable Plugs are continuously \npowered. To ensure reliable communication with the Cable Plugs only the Port that is the VCONN Source is permitted \nto communicate with the Cable Plugs.\nNote:\nPrior to a Power Role Swap, Data Role Swap or Fast Role Swap each new Source Port needs to ensure that \nit is the VCONN Source if it needs to communicate with the Cable Plugs after the swap.\n2.6.5\n  DFP/UFP\n2.6.5.1\n  Downstream Facing Port (DFP)\nThe Downstream Facing Port or DFP is equivalent in the USB topology to the Port a USB Device is Attached to. The \nDFP will also correspond to the USB Host but only if USB Communication is supported while acting as a DFP. \nProducts such as Chargers can be a DFP while not having USB Communication capability. Only the DFP is allowed \nto control Alternate Mode operation.\n2.6.5.2\n  Upstream Facing Port (UFP)\nThe Upstream Facing Port or UFP is equivalent in the USB topology to the Port on a USB Device that is connected to \nthe USB Host or USB Hub's DFP. The UFP will also correspond to the USB Device but only if USB Communication is \nsupported while acting as a UFP. Products which charge can be a UFP while not having USB Communication \ncapability.\n","image_count":0,"table_count":1}
{"page":72,"text":"Page 72\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n2.6.5.3\n  Dual-Role Data Ports\nDual-Role Data Ports have the ability to operate as either a DFP or a UFP and to swap between the two Data Roles \nusing Data Role Swap. \nNote:\nProducts can be Dual-Role Data Ports without being Dual-Role Power Ports that is they can switch \nlogically between DFP and UFP Data Roles even if they are Source-only or Sink-only Ports.\n2.6.6\n  Cable and Connectors\nThe USB Power Delivery specification assumes certified USB cables and associated detection mechanisms as \ndefined in the [USB Type-C 2.4] specification.\n2.6.6.1\n  USB-C Port Control\nThe USB-C® Port Control block provides mechanisms to:\n\nInform the Device Policy Manager of cable Attach/Detach events.\n\nInform Sink's Device Policy Manager of the Rp value.\n\nAllow Source's Device Policy Manager to set the Rp value.\n2.6.7\n  Interactions between Non-PD, BC, and PD devices\nUSB Power Delivery only operates when two USB Power Delivery devices are directly connected. When a device \nfinds itself a mixed environment, where the other device does not support the USB Power Delivery Specification, \nthe existing rules on supplying vSafe5V as defined in the [USB 2.0], [USB 3.2], [USBBC 1.2] or [USB Type-C 2.4] \nspecifications are applied.\nThere are two primary cases to consider:\n\nThe USB Host (DFP/Source) is non-PD and as such will not send any Advertisements. An Attached PD \nCapable device will not see any Advertisements and operates using the rules defined in the [USB 2.0], \n[USB 3.2], [USBBC 1.2] or [USB Type-C 2.4] specifications.\n\nThe Device (UFP/Sink) is non-PD and as such will not see any Advertisements and therefore will not \nrespond. The USB Host (DFP/Source) will continue to supply vSafe5V to VBUS as specified in the [USB \n2.0], [USB 3.2], [USBBC 1.2] or [USB Type-C 2.4] specifications.\n2.6.8\n  Power Rules\nPower Rules define voltages and current ranges that are offered by compliant USB Power Delivery Sources and used \nby a USB Power Delivery Sink for a given value of PDP Rating. See Chapter 10 \"Power Rules\" for further details.\n","image_count":0,"table_count":1}
{"page":73,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 73\n2.7\n  Extended Power Range (EPR) Operation\nExtended Power Range is a Mode that provides for up to 240W which is considerably more power than the 100W \nthe original PD specification (SPR Mode) offered. It is a Mode of operation that can be entered only when an Explicit \nContract is in place and both the Ports and the Cable Plug(s) support EPR.\nEntry into EPR Mode follows a strict process; this assures that the higher voltages, at power levels above 100W, are \nonly transferred between known EPR Capable Sources and EPR Capable Sinks over EPR Capable cables. EPR Sources \nare capable of both Fixed Supply and Adjustable Voltage Supply (AVS) operation. Maintaining EPR Mode operation \nalso requires maintaining a regular cadence of USB PD communications; loss of communications between the EPR \nSource and EPR Sink will cause a Hard Reset to be initiated resulting in a return to SPR operation.\nThe EPR Mode entry, operational and exit process is summarized by the following steps:\n1)\nNegotiate and enter into an Explicit Contract in the Standard Power Range. During this step, EPR Capable \nSources and Sinks will declare their supported EPR Capabilities through PDO/APDO and RDO exchanges.\n2)\nAn EPR Sink, having discovered an EPR Source, can request EPR Mode entry.\n3)\nThe EPR Source, having already confirmed that the Attached cable assembly is EPR Capable during the \nFirst Explicit Contract Negotiation, will respond to the EPR Sink with an acknowledgment of the EPR \nMode entry request.\n4)\nWhile in EPR Mode:\na)\nThe EPR Source sends EPR Capabilities (Fixed Supply PDOs and an AVS APDO) to the EPR Sink which \nrequires the Sink to evaluate and respond as appropriate to adjust the Explicit Contract.\nb)\nThe EPR Sink maintains a regular cadence of communications with the EPR Source to allow EPR \nMode to continue.\n5)\nWhen either the EPR Source or EPR Sink no longer wants to remain in EPR Mode operation, a normal \nexit from EPR Mode will first require adjusting the Explicit Contract to a voltage of 20V or lower (SPR \n(A)PDO) followed by an explicit EPR Mode exit request.\na)\nSource initiated: EPR Source sends an EPR_Source_Capabilities Message that only includes SPR \nvoltages to force the EPR Sink to drop to 20V or below followed by the EPR Mode exit. Once EPR Mode \nis exited, a new SPR Contract is Negotiated to return to SPR Mode operation.\nb)\nSink initiated; EPR Sink requests a drop to 20V or below followed by the EPR Mode exit. Once EPR \nMode is exited, a new SPR Contract is Negotiated to return to SPR Mode operation.\nFigure 2.6, \"Example of a Normal EPR Mode Operational Flow\" illustrates an example of a normal EPR Mode \noperational flow. In this example, at some time during the EPR Mode operation, the Source decides that it needs to \nexit EPR Mode, so it resends the EPR Capabilities to the Sink with only SPR (A)PDOs to cause the Sink to Negotiate \nan SPR Contract of 20V or lower and then the Source follows with an EPR Mode exit Message. Once EPR Mode is \nexited, a new SPR Contract is Negotiated to return to SPR Mode operation.\n","image_count":0,"table_count":1}
{"page":74,"text":"Page 74\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 2.6 Example of a Normal EPR Mode Operational Flow\nNot illustrated in Figure 2.6, \"Example of a Normal EPR Mode Operational Flow\", while in EPR Mode operation, the \nSink might decide it wants to exit EPR Mode. In this case, the Sink must initiate the exit process by revising its \nExplicit Contract with the Source at 20V or less followed with an EPR_Mode exit Message. Once EPR Mode is exited, \na new SPR Contract is Negotiated to formalize the return to SPR Mode operation. Failure to revise the Explicit \nContract to one at 20V or less before attempting to exit EPR Mode will result in a Hard Reset.\nEPR Source\nEPR Cable\nEPR Sink\nEnter EPR \nMode?\nCable is EPR?\nExit EPR \nMode?\nEstablish SPR Contract\n(Source/Sink EPR Status)\nRequest EPR Mode\nAccept EPR Mode\nEstablish EPR Contract\nMaintain PD Repetitive Communications\nEstablish EPR Contract (20V or less)\nExit EPR Mode\nEstablish SPR Contract\n(Source/Sink EPR Status)\nEPR Mode\nEntry \nPhase\nEPR Mode\nOperation\nEPR Mode\nExit Phase\n","image_count":0,"table_count":11}
{"page":75,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 75\n2.8\n  Charging Models\nThis section provides a charging model overview for each of the primary power delivery methods: Fixed Supply, \nProgrammable Power Supply and Adjustable Voltage Supply.\n2.8.1\n  Fixed Supply Charging Models\nUSB Power Delivery supports Fixed Supply charging using a set of defined standard voltages with current available \nup to the limit of the Source's and cable's Advertised Capabilities. As summarized in Table 2.1, \"Fixed Supply Power \nRanges\", the standard voltages are available in either the Standard Power Range (SPR) and/or the Extended Power \nRange (EPR).\n2.8.2\n  Programmable Power Supply (PPS) Charging Models\nUSB Power Delivery includes support for Programmable Power Supply (PPS) charging using a set of defined \nstandard voltage ranges. With current up to the limit of the Source's and cable's Advertised Capabilities. \nAdditionally, when operating in SPR Mode the current is also limited by the Operating Current field value in the \nRequest Message. \nNote:\nPPS operation is not available in EPR Mode.\nThe standard voltage ranges available in the Standard Power Range (SPR) for PPS are summarized in Table 2.2, \n\"PPS Voltage Power Ranges\".\nTable 2.1  Fixed Supply Power Ranges\nPower Range\nAvailable Current and \nVoltages\nPDP Range\nNotes\nStandard Power Range (SPR)\n3A:\n5V, 9V, 15V, 20V\n5A1:\n20V\n15 – 60W\n>60 – 100W\nExtended Power Range (EPR)\n3A2: \n5V, 9V, 15V, 20V\n5A2:\n20V\n5A2:\n28V, 36V, 48V\n15 – 60W\n>60 – 100W\n>100 – 240W\nRequires entry into EPR Mode.\n1)\nRequires 5A cable.\n2)\nRequires EPR cable.\nTable 2.2  PPS Voltage Power Ranges\nAvailable Current\nProg\nMin Voltage (V)\nMax Voltage (V)\nPDP Range\n3A\n9V Prog\n5\n11\n16 – 60W\n15V Prog\n5\n16\n20V Prog\n5\n21\n5A1\n20V Prog\n5\n21\n61 – 100W\n1)\nRequires 5A cable.\n","image_count":0,"table_count":3}
{"page":76,"text":"Page 76\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n2.8.3\n  Adjustable Voltage Supply (AVS) Charging Models\nUSB Power Delivery operating in SPR Mode (when PDP is higher than 27W) and EPR Mode includes support for \nAdjustable Voltage Supply (AVS) charging using a set of defined standard voltage ranges based on the Source's PDP \nRating.\nThe standard voltage ranges available for AVS are summarized in Table 2.3, \"AVS Voltage Power Ranges\".\nTable 2.3  AVS Voltage Power Ranges\nPDP\nMinimum \nVoltage (V)\nMaximum \nVoltage (V)\nMaximum \nAvailable \nCurrent3\nMinimum \nVoltage (V)\nMaximum \nVoltage (V)\nMaximum \nAvailable \nCurrent\n>27…45W\n9\n15\n3A\nN/A\n>45…60W\n9\n20\n3A\n>60…100W\n9\n20\n5A1\n100…140W\n9\n20\n5A2\n15\n28\n5A2\n>140…180W\n9\n20\n5A2\n15\n36\n5A2\n>180…240W\n9\n20\n5A2\n15\n48\n5A2\n1)\nRequires 5A cable.\n2)\nRequires an EPR Cable.\n3)\nThe maximum available SPR AVS current is determined by the maximum available current in the \nFixed Supply 15V PDO in the 9 - 15V range and Fixed Supply 20V PDO in the 15 - 20V range.\n","image_count":0,"table_count":2}
{"page":77,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 77\n3\n USB Type-A and USB Type-B Cable Assemblies and \nConnectors\nThis section has been Deprecated. Please refer to [USBPD 2.0] for details of cables and connectors used in scenar-\nios utilizing the BFSK Signaling Scheme in conjunction with USB Type-A or USB Type-B connectors.\n","image_count":0,"table_count":1}
{"page":78,"text":"Page 78\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n4\n Electrical Requirements \nThis chapter covers the platform's electrical requirements for implementing USB Power Delivery. \n4.1\n  Interoperability with other USB Specifications\nUSB Power Delivery May be implemented alongside the [USB 2.0], [USB 3.2], [USB4], [USBBC 1.2] and [USB Type-\nC 2.4] (USB Type-C) specifications. In the case where a Device requests power via [USBBC 1.2] and then the USB \nPower Delivery Specification, it Shall follow the USB Power Delivery Specification until the Port Pair is Detached \nor there is a Hard Reset. If the USB Power Delivery connection is lost, the Port Shall return to its default state, see \nSection 6.8.3, \"Hard Reset\".\n4.2\n  Dead Battery Detection / Unpowered Port Detection\nDead Battery/unpowered operation is when a USB Device needs to provide power to a USB Host under the \ncircumstances where the USB Host:\n\nHas a Dead Battery that requires charging or\n\nHas lost its power source or\n\nDoes not have a power source or\n\nDoes not want to provide power.\nDead Battery charging operation for connections between USB Type-C connectors is defined in [USB Type-C 2.4].\n4.3\n  Cable IR Ground Drop (IR Drop)\nEvery PD Sink Port capable of USB Communication can be susceptible to unreliable USB Communication if the \nvoltage drop across ground falls outside of the acceptable common mode range for the USB Hi-Speed transceivers \ndata lines due to excessive current draw. Certified USB cabling is specified such that such errors don't typically \noccur (See [USB Type-C 2.4]).\n4.4\n  Cable Type Detection\nStandard USB Type-C® cable assemblies are rated for PD voltages higher than vSafe5V and current levels of at least \n3A (See [USB Type-C 2.4]). The Source Shall limit maximum Capabilities it offers so as not to exceed the Capabilities \nof the type of cabling detected.\nSources capable of offering more than 3A Shall detect the type of Attached cable and limit the Capabilities they offer \nbased on the current carrying capability of the cable determined by the Cable Capabilities determined using the \nDiscover Identity Command (see Section 6.4.4.3.1, \"Discover Identity\") sent using SOP’ Communication (see Section \n2.4, \"SOP* Communication\") to the Cable Plug. The Cable VDO returned as part of the Discover Identity Command \ndetails the maximum current and voltage values that Shall be Negotiated for a given cable as part of an Explicit \nContract.\nThe Cable Discovery process is usually run when the Source is powered up, after a Power Role Swap or Fast Role \nSwap or when power is applied to a Sink. The method used to detect these events Shall meet the following \nrequirements:\n\nSources Shall run the Cable Discovery process prior to the Source sending Source_Capabilities Messag-\nes offering currents in excess of 3A and/or voltages in excess of 20V.\n\nSinks with USB Type-C connectors Shall select Capabilities from the offered Source Capabilities assum-\ning that the Source has already determined the Capabilities of the cable.\n\nSinks with the Dual-Role Power bit set, Shall respond to a Get_Source_Cap Message by declaring their \nfull Source Capabilities, without limiting them based on the cable's Capabilities. \n","image_count":0,"table_count":1}
{"page":79,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 79\n5\n Physical Layer\n5.1\n  Physical Layer Overview\nThe Physical Layer (PHY Layer) defines the Signaling technology for USB Power Delivery. This chapter defines the \nelectrical requirements and parameters of the PHY Layer required for interoperability between PDUSB Devices.\n5.2\n  Physical Layer Functions\nThe USB PD PHY Layer consists of a pair of transmitters and receivers that communicate across a single signal wire \n(CC). All communication is half duplex. The PHY Layer practices Collision Avoidance to minimize communication \nerrors on the channel.\nThe transmitter performs the following functions:\n\nReceive Packet data from the Protocol Layer.\n\nCalculate and append a CRC.\n\nEncode the Packet data including the CRC (i.e., the Payload).\n\nTransmit the Packet (Preamble, SOP*, Payload, CRC and EOP) across the channel using Bi-phase Mark \nCoding (BMC) over CC.\nThe receiver performs the following functions:\n\nRecover the clock and lock onto the Packet from the Preamble.\n\nDetect the SOP*.\n\nDecode the received data including the CRC.\n\nDetect the EOP and validate the CRC:\n\nIf the CRC is Valid, deliver the Packet data to the Protocol Layer. \n\nIf the CRC is Invalid, flush the received data.\n","image_count":0,"table_count":1}
{"page":80,"text":"Page 80\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.3\n  Symbol Encoding\nExcept for the Preamble, all communications on the line Shall be encoded with a line code to ensure a reasonable \nlevel of DC-balance and a suitable number of transitions. This encoding makes receiver design less complicated and \nallows for more variations in the receiver design.\n4b5b line code Shall be used. This encodes 4-bit data to 5-bit symbols for transmission and decodes 5-bit symbols \nto 4-bit data for consumption by the receiver.\nThe 4b5b code provides data encoding along with special symbols. Special symbols are used to signal Hard Reset, \nand delineate Packet boundaries (see Table 5.1, \"4b5b Symbol Encoding\").\nTable 5.1  4b5b Symbol Encoding\nName\n4b\n5b Symbol\nDescription\n0\n0000\n11110\nhex data 0\n1\n0001\n01001\nhex data 1\n2\n0010\n10100\nhex data 2\n3\n0011\n10101\nhex data 3\n4\n0100\n01010\nhex data 4\n5\n0101\n01011\nhex data 5\n6\n0110\n01110\nhex data 6\n7\n0111\n01111\nhex data 7\n8\n1000\n10010\nhex data 8\n9\n1001\n10011\nhex data 9\nA\n1010\n10110\nhex data A\nB\n1011\n10111\nhex data B\nC\n1100\n11010\nhex data C\nD\n1101\n11011\nhex data D\nE\n1110\n11100\nhex data E\nF\n1111\n11101\nhex data F\nSync-1\nK-code\n11000\nStartsynch #1\nSync-2\nK-code\n10001\nStartsynch #2\nRST-1\nK-code\n00111\nHard Reset #1\nRST-2\nK-code\n11001\nHard Reset #2\nEOP\nK-code\n01101\nEOP End of Packet\nError\n00000\nShall Not be used\nError\n00001\nShall Not be used\nError\n00010\nShall Not be used\nError\n00011\nShall Not be used\nError\n00100\nShall Not be used\nError\n00101\nShall Not be used\nSync-3\nK-code\n00110\nStartsynch #3\nError\n01000\nShall Not be used\nError\n01100\nShall Not be used\nError\n10000\nShall Not be used\nError\n11111\nShall Not be used\n","image_count":0,"table_count":2}
{"page":81,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 81\n5.4\n  Ordered Sets\nOrdered sets Shall be interpreted according to Figure 5.1, \"Interpretation of ordered sets\".\nAn ordered set consists of 4 K-codes sent as shown in Figure 5.1, \"Interpretation of ordered sets\".\nFigure 5.1 Interpretation of ordered sets\nA list of the ordered sets used by USB Power Delivery can be seen in Table 5.2, \"Ordered Sets\". SOP* is a generic term \nused in place of SOP/SOP’/SOP’’.\nThe receiver Shall search for all four K-codes. When the receiver finds all four K-codes in the correct place, it Shall \ninterpret this as a Valid ordered set. When the receiver finds three out of four K-codes in the correct place, it May \nTable 5.2  Ordered Sets\nOrdered Set\nReference\nCable Reset\nSection 5.6.5, \"Cable Reset\" \nHard Reset\nSection 5.6.4, \"Hard Reset\" \nSOP\nSection 5.6.1.2.1, \"Start of Packet Sequence (SOP)\"\nSOP’\nSection 5.6.1.2.2, \"Start of Packet Sequence Prime (SOP')\"\nSOP’_Debug\nSection 5.6.1.2.4, \"Start of Packet Sequence Prime Debug (SOP'_Debug)\"\nSOP’’\nSection 5.6.1.2.3, \"Start of Packet Sequence Double Prime (SOP'')\"\nSOP’’_Debug\nSection 5.6.1.2.5, \"Start of Packet Sequence Double Prime Debug (SOP''_Debug)\"\nK-code 4\nK-code 3\nK-code 2\nK-code 1\nTransmit last\nTransmit first\nTransmit last\nTransmit first\nb4     b0\nBIT\n4\nBIT\n3\nBIT\n2\nBIT\n1\nBIT\n0\n","image_count":0,"table_count":2}
{"page":82,"text":"Page 82\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\ninterpret this as a Valid ordered set. The receiver Should ensure that all four K-codes are Valid to avoid ambiguity \nin detection (see Table 5.3, \"Validation of Ordered Sets\").\nTable 5.3  Validation of Ordered Sets\n1st code\n2nd code\n3rd code\n4th code\nValid1\nCorrupt\nK-code\nK-code\nK-code\nValid1\nK-code\nCorrupt\nK-code\nK-code\nValid1\nK-code\nK-code\nCorrupt\nK-code\nValid1\nK-code\nK-code\nK-code\nCorrupt\nValid2 (perfect)\nK-code\nK-code\nK-code\nK-code\nInvalid (example)\nK-code\nCorrupt\nK-code\nCorrupt\n1)\nMay be interpreted as a Valid ordered set.\n2)\nShall be interpreted as a Validordered set.\n","image_count":0,"table_count":2}
{"page":83,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 83\n5.5\n  Transmitted Bit Ordering\nThis section describes the order of bits on the wire that Shall be used when transmitting data of varying sizes. \nTable 5.4, \"Data Size\" shows the different data sizes that are possible. \nFigure 5.2, \"Transmit Order for Various Sizes of Data\" shows the transmission order that Shall be followed.\nFigure 5.2 Transmit Order for Various Sizes of Data\nTable 5.4  Data Size\nUnencoded\nEncoded\nByte\n8-bits\n10-bits\nWord\n16-bits\n20- bits\nDWord\n32-bits\n40-bits\nb31                                b0\nb31 Transmit last b16\nb15    Transmit first    b0\nb15                    b8\nb7                      b0\nb7       b4\nb3       b0\nb4              b0\n4b5b\nTransmit last\nTransmit first\nBIT\n3\nBIT\n2\nBIT\n1\nBIT\n0\nBIT\n4\n","image_count":0,"table_count":3}
{"page":84,"text":"Page 84\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.6\n  Packet Format \nThe Packet format Shall consist of a Preamble, an SOP*, (see Section 5.6.1.2, \"Start of Packet Sequences\"), Packet data \nincluding the Message Header, a CRC and an EOP (see Section 5.6.1.5, \"End of Packet (EOP)\"). The Packet format is \nshown in Figure 5.3, \"USB Power Delivery Packet Format\" and indicates which parts of the Packet Shall be 4b/5b \nencoded. Once 4b/5b encoded, the entire Packet Shall be transmitted using BMC over CC. \nNote:\nAll the bits in the Packet, including the Preamble, are BMC encoded. \nSee Section 6.2.1, \"Message Construction\" for more details of the Packet construction for Control Messages, Data \nMessages and Extended Messages.\nFigure 5.3 USB Power Delivery Packet Format\n5.6.1\n  Packet Framing\nThe transmission starts with a Preamble that is used to allow the receiver to lock onto the carrier. It is followed by \na SOP* (Start of Packet). The Packet is terminated with an EOP (End of Packet) K-code.\n5.6.1.1\n  Preamble\nThe Preamble is used to achieve lock in the receiver by presenting an alternating series of \"0s\" and \"1s\", so the \naverage frequency is the carrier frequency. Unlike the rest of the Packet, the Preamble Shall Not be 4b/5b encoded.\nThe Preamble Shall consist of a 64-bit sequence of alternating 0s and 1s. The Preamble Shall start with a \"0\" and \nShall end with a \"1\".\n5.6.1.2\n  Start of Packet Sequences\n5.6.1.2.1\n  Start of Packet Sequence (SOP)\nSOP is an ordered set. The SOP ordered set is defined as: three Sync-1 K-codes followed by one Sync-2 K-code (see \nTable 5.5, \"SOP Ordered Set\").\nA Power Delivery Capable Source or Sink Shall be able to detect and communicate with Packets using SOP. If a Valid \nSOP is not detected (see Table 5.3, \"Validation of Ordered Sets\") then the whole transmission Shall be Discarded.\nSending and receiving of SOP Packets Shall be limited to PD Capable Ports on PDUSB Hosts and PDUSB Devices. \nCable Plugs and VPDs Shall neither send nor receive SOP Packets.\nTable 5.5  SOP Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nSync-1\n2\nSync-1\n3\nSync-1\n4\nSync-2\nPreamble(training for receiver)\nSOP* (Start \nOf Packet)\nMessage \nHeader\nByte 0\nByte 1\n...\n...\nByte n-1\nByte n\nCRC\nEOP (End Of \nPacket)\nLEGEND:\nTraining sequence provided by the \nPhysical layer, not encoded with 4b5b\nProvided by the Physical \nlayer, encoded with 4b5b\nProvided by the Protocol \nlayer, encoded with 4b5b\n","image_count":27,"table_count":4}
{"page":85,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 85\nNote:\nPDUSB Devices, even if they have the physical form of a cable (e.g., AMAs), are still required to respond to \nSOP Packets.\n5.6.1.2.2\n  Start of Packet Sequence Prime (SOP')\nThe SOP’ ordered set is defined as: two Sync-1 K-codes followed by two Sync-3 K-codes (see Table 5.6, \"SOP’ \nOrdered Set\").\nA VPD Shall have SOP’ Communication capability. A VPD and a Cable Plug capable of SOP’ Communications Shall \nonly detect and communicate with Packets starting with SOP’.\nA Port needing to communicate with a Cable Plug capable of SOP’ Communications, Attached between a Port Pair \nwill be able to communicate using both Packets starting with SOP’ to communicate with the Cable Plug and starting \nwith SOP to communicate with its Port Partner.\nFor a VPD or a Cable Plug supporting SOP’ Communications, if a Valid SOP’ is not detected (see Table 5.3, \"Validation \nof Ordered Sets\") then the whole transmission Shall be Discarded. For a Port supporting SOP’ Communications if a \nValid SOP or SOP’ is not detected (see Table 5.3, \"Validation of Ordered Sets\") then the whole transmission Shall be \nDiscarded. When there is no Explicit Contract or an Implicit Contract in place a Sink Shall Not send SOP’ Packets \nand Shall Discard all Packets starting with SOP’.\n5.6.1.2.3\n  Start of Packet Sequence Double Prime (SOP'')\nThe SOP’’ ordered set is defined as the following sequence of K-codes: Sync-1, Sync-3, Sync-1, Sync-3 (see Table 5.7, \n\"SOP’’ Ordered Set\").\nA VPD Shall Not have SOP’’ Communication capability. A Cable Plug capable of SOP’’ Communication, Shall have a \nSOP’ Communication capability in the other Cable Plug. No cable Shall only support SOP’’ Communication. A Cable \nPlug to which SOP’’ Communication is assigned Shall only detect and communicate with Packets starting with SOP’’ \nand Shall Discard any other Packets.\nA Port needing to communicate with such a Cable Plug, Attached between a Port Pair will be able to communicate \nusing Packets starting with SOP’ and SOP’’ to communicate with the Cable Plugs and Packets starting with SOP to \ncommunicate with its Port Partner. A Port which supports SOP’’ Communication Shall also support SOP’ \nCommunication and Shall co-ordinate SOP* Communication so as to avoid collisions. \nFor the Cable Plug supporting SOP’’ Communication, if a Valid SOP’’ is not detected (see Table 5.3, \"Validation of \nOrdered Sets\") then the whole transmission Shall be Discarded. For the Port if a Valid SOP* is not detected (see \nTable 5.3, \"Validation of Ordered Sets\") then the whole transmission Shall be Discarded.\nTable 5.6  SOP’ Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nSync-1\n2\nSync-1\n3\nSync-3\n4\nSync-3\nTable 5.7  SOP’’ Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nSync-1\n2\nSync-3\n3\nSync-1\n4\nSync-3\n","image_count":0,"table_count":3}
{"page":86,"text":"Page 86\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.6.1.2.4\n  Start of Packet Sequence Prime Debug (SOP'_Debug)\nThe SOP’_Debug ordered set is defined as the following sequence of K-codes: Sync-1, RST-2, RST-2, Sync-3 (see \nTable 5.8, \"SOP’_Debug Ordered Set\"). The usage of this Ordered Set is presently undefined.\n5.6.1.2.5\n  Start of Packet Sequence Double Prime Debug (SOP''_Debug)\nThe SOP’’_Debug ordered set is defined as the following sequence of K-codes: Sync-1, RST-2, Sync-3, Sync-2 (see \nTable 5.9, \"SOP’’_Debug Ordered Set\"). The usage of this Ordered Set is presently undefined.\n5.6.1.3\n  Packet Payload\nThe Packet data is delivered from the Protocol Layer (see Section 6.2, \"Messages\") and Shall be encoded with the \nhex data codes from Table 5.1, \"4b5b Symbol Encoding\".\n5.6.1.4\n  CRC\nThe CRC Shall be inserted just after the Payload. It is described in Section 5.6.2, \"CRC\".\n5.6.1.5\n  End of Packet (EOP)\nThe end of Packet marker Shall be a single EOP K-code as defined in Figure 5.1, \"Interpretation of ordered sets\". This \nShall mark the end of the CRC. After the EOP, the CRC-residual Shall be checked. If the CRC is not good, the whole \ntransmission Shall be Discarded, if it is good, the Packet Shall be delivered to the Protocol Layer.\nNote:\nAn EOP May be used to prematurely terminate a Packet e.g., before sending Hard Reset Signaling.\n5.6.2\n  CRC\nThe Message Header and data Shall be protected by a 32-bit CRC. \n\nCRC-32 protects the data integrity of the data Payload. CRC-32 is defined as follows: \n\nThe CRC-32 polynomial Shall be = 04C1_1DB7h. \n\nThe CRC-32 Initial value Shall be = FFFF_FFFFh. \n\nCRC-32 Shall be calculated for all bytes of the Payload not inclusive of any Packet framing symbols (i.e., \nexcludes the Preamble, SOP*, EOP).\n\nCRC-32 calculation Shall begin at byte 0, bit 0 and continue to bit 7 of each of the bytes of the Packet.\n\nThe remainder of CRC-32 Shall be complemented.\n\nThe residual of CRC-32 Shall be C704 DD7Bh.\nTable 5.8  SOP’_Debug Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nSync-1\n2\nRST-2\n3\nRST-2\n4\nSync-3\nTable 5.9  SOP’’_Debug Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nSync-1\n2\nRST-2\n3\nSync-3\n4\nSync-2\n","image_count":0,"table_count":3}
{"page":87,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 87\nThis inversion of the CRC-32 remainder adds an offset of FFFF_FFFFh that will create a constant CRC-32 residual of \nC704_DD7Bh at the receiver side. \nNote:\nThe CRC implementation is identical to the one used in [USB 3.2].\nFigure 5.4, \"CRC-32 Generation\" is an illustration of CRC-32 generation. The output bit ordering Shall be as detailed \nin Table 5.10, \"CRC-32 Mapping\".\n","image_count":0,"table_count":1}
{"page":88,"text":"Page 88\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 5.4 CRC-32 Generation\nThe CRC-32 Shall be encoded before transmission.\nTable 5.10  CRC-32 Mapping\nCRC-32\nResult Bit Position in CRC-32 Field\n0\n31\n1\n30\n2\n29\n3\n28\n4\n27\n5\n26\n6\n25\n7\n24\n8\n23\n9\n22\n10\n21\n11\n20\n12\n19\n13\n18\n14\n17\n15\n16\n16\n15\n17\n14\n18\n13\n19\n12\n20\n11\n21\n10\n22\n9\n23\n8\n24\n7\n25\n6\n26\n5\n27\n4\n28\n3\n29\n2\n30\n1\n31\n0\n7 6 5 4 3 2 1 0\n15 14 13 12 11 10 9 8 23 22 21 20 19 18 17 16 31 30 29 28 27 26 25 24\n= Flip Flop\n7 6 5 4\n3 2 1 0\n23222120 19181716 15141312 1110 9 8\n31302928 27262524\nData Byte 2\nData Byte 1\nData Byte 0\n76543210\nByte Order\nBit\nOrder\nInput\n7\nB\nD\n1\n1\nC\n4\n0\n","image_count":0,"table_count":7}
{"page":89,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 89\n5.6.3\n  Packet Detection Errors\nCRC errors, or errors detected while decoding encoded symbols using the code table, Shall be treated the same \nway; the Message Shall be Discarded and a GoodCRC Message Shall Not be returned.\nWhile the receiver is processing a Packet, if at any time the CC-line becomes Idle the receiver Shall stop processing \nthe Packet and Discard it (no GoodCRC Message is returned). See Section 5.8.6.1, \"Definition of Idle\" for the \ndefinition of BMC Idle.\n5.6.4\n  Hard Reset\nHard Reset Signaling is an ordered set of bytes sent with the purpose to be recognized by the PHY Layer. The Hard \nReset Signaling ordered set is defined as: three RST-1 K-codes followed by one RST-2 K-code (see Table 5.11, \"Hard \nReset Ordered Set\").\nA device Shall perform a Hard Reset when it receives Hard Reset Signaling. After receiving the Hard Reset \nSignaling, the device Shall reset as described in Section 6.8.3, \"Hard Reset\". If a Valid Hard Reset is not detected (see \nTable 5.3, \"Validation of Ordered Sets\") then the whole transmission Shall be Discarded.\nA Cable Plug Shall perform a Hard Reset when it detects Hard Reset Signaling being sent between the Port Partners. \nAfter receiving the Hard Reset Signaling, the device Shall reset as described in Section 6.8.3, \"Hard Reset\".\nThe procedure for sending Hard Reset Signaling Shall be as follows:\n\nIf the PHY Layer is currently sending a Message, the Message Shall be interrupted by sending an EOP K-\ncode and the rest of the Message Discarded.\n\nIf CC is not Idle, wait for it to become Idle (see Section 5.8.6.1, \"Definition of Idle\").\n\nWait tInterFrameGap.\n\nIf CC is still Idle send the Preamble followed by the 4 K-codes for Hard Reset Signaling.\n\nDisable the channel (i.e., stop sending and receiving), reset the PHY Layer and inform the Protocol Layer \nthat the PHY Layer has been reset.\n\nRe-enable the channel when requested by the Protocol Layer.\nFigure 5.5, \"Line format of Hard Reset\" shows the line format of Hard Reset Signaling which is a Preamble followed \nby the Hard Reset Ordered Set.\nFigure 5.5 Line format of Hard Reset\nTable 5.11  Hard Reset Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nRST-1\n2\nRST-1\n3\nRST-1\n4\nRST-2\nPreamble(training for receiver)\nRST-1\nLEGEND:\nPreamble provided by the Physical layer, \nnot encoded with 4b5b\nProvided by the Physical \nlayer, encoded with 4b5b\nRST-1\nRST-1\nRST-2\n","image_count":24,"table_count":3}
{"page":90,"text":"Page 90\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.6.5\n  Cable Reset\nCable Reset Signaling is an ordered set of bytes sent with the purpose to be recognized by the PHY Layer. The Cable \nReset Signaling ordered set is defined as the following sequence of K-codes: RST-1, Sync-1, RST-1, Sync-3 (see \nTable 5.12, \"Cable Reset Ordered Set\").\nCable Reset Signaling Shall only be sent by the DFP. The Cable Reset Ordered Set is used to reset the Cable Plugs \nwithout the need to Hard Reset the Port Partners. The state of the Cable Plug after the Cable Reset Signaling Shall \nbe equivalent to power cycling the Cable Plug.\nFigure 5.6, \"Line format of Cable Reset\" shows the line format of Cable Reset Signaling which is a Preamble followed \nby the Cable Reset Ordered Set.\nFigure 5.6 Line format of Cable Reset\nTable 5.12  Cable Reset Ordered Set\nK-Code Number\nK-Code in Code \nTable\n1\nRST-1\n2\nSync-1\n3\nRST-1\n4\nSync-3\nPreamble(training for receiver)\nRST-1\nLEGEND:\nPreamble provided by the Physical layer, \nnot encoded with 4b5b\nProvided by the Physical \nlayer, encoded with 4b5b\nSync-1\nRST-1\nSync-3\n","image_count":24,"table_count":3}
{"page":91,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 91\n5.7\n  Collision Avoidance\nThe PHY Layer Shall monitor the channel for data transmission and only initiate transmissions when CC is Idle. If \nthe bus Idle condition is present, it Shall be considered safe to start a transmission provided the conditions detailed \nin Section 5.8.5.4, \"Inter-Frame Gap\" are met. The bus Idle condition Shall be checked immediately prior to \ntransmission. If transmission cannot be initiated, then the Packet Shall be Discarded. If the Packet is Discarded \nbecause CC is not Idle, the PHY Layer Shall signal to the Protocol Layer that it has Discarded the Message as soon \nas CC becomes Idle. See Section 5.8.6.1, \"Definition of Idle\" for the definition of Idle CC.\nIn addition, during an Explicit Contract, the PHY Layer Shall control the Rp resistor value to avoid collisions \nbetween Source and Sink transmissions. The Source Shall set an Rp value corresponding to a current of 3A \n(SinkTxOK) to indicate to the Sink that it May initiate an AMS. The Source Shall set an Rp value corresponding to a \ncurrent of 1.5A (SinkTxNG) this Shall indicate to the Sink that it Shall Not initiate an AMS and Shall only respond \nto Messages as part of an AMS. See [USB Type-C 2.4] (USB Type-C) for details of the corresponding Rp values. During \nthe Implicit Contract that precedes an Explicit Contract (including Power Role Swap and Fast Role Swap) the Rp \nresistor value is used to specify USB Type-C current and is not used for Collision Avoidance.\nTable 5.13, \"Rp values used for Collision Avoidance\" details the Rp values that Shall be used by the Source to control \nSink initiation of an AMS.\nSee also Section 6.6.16, \"Collision Avoidance Timers\" and Section 6.10, \"Collision Avoidance\".\nTable 5.13  Rp values used for Collision Avoidance\nSource Rp Parameter\nDescription\nSink Operation\nSource Operation\n1.5A@5V\nSinkTxNG\nSink Transmit “No Go,”\nThe Sink Shall Not initiate \nan AMS once tSinkDelay has \nelapsed after SinkTxNG is \nasserted.\nSource can initiate an AMS \ntSinkTx after setting Rp to \nthis value.\n3A@5V\nSinkTxOK\nSink Transmit “Ok”\nSink can initiate an AMS.\nSource cannot initiate an \nAMS while it has this value \nset.\n","image_count":0,"table_count":2}
{"page":92,"text":"Page 92\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8\n  Bi-phase Mark Coding (BMC) Signaling Scheme\nBi-phase Mark Coding (BMC) is the PHY Layer Signaling Scheme for carrying USB Power Delivery Messages. This \nencoding assumes a dedicated DC connection, over the CC wire, which is used for sending PD Messages.\nBi-phase Mark Coding is a version of Manchester coding (see [IEC 60958-1]). In BMC, there is a transition at the \nstart of every bit time (UI) and there is a second transition in the middle of the UI when a 1 is transmitted. BMC is \neffectively DC balanced, (each 1 is DC balanced and two successive zeros are DC balanced, regardless of the number \nof intervening 1's). It has bounded disparity (limited to 1 bit over an arbitrary Packet, so a very low DC level). \nFigure 5.7, \"BMC Example\" illustrates Bi-phase Mark Coding. This example shows the transition from a Preamble to \nthe Sync-1 K-codes of the SOP Ordered Set at the start of a Message. \nNote:\nOther K-codes can occur after the Preamble for Signaling such as Hard Reset and Cable Reset.\nFigure 5.7 BMC Example\n5.8.1\n  Encoding and signaling\nBMC uses DC coupled baseband Signaling on CC. Figure 5.8, \"BMC Transmitter Block Diagram\" shows a block \ndiagram for a Transmitter and Figure 5.9, \"BMC Receiver Block Diagram\" shows a block diagram for the \ncorresponding Receiver.\nFigure 5.8 BMC Transmitter Block Diagram\nPreamble\nSync-1\nSync-1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0\n0\n0\n0\n1\n1\nData In\nBMC\nto CC\nData\n4b5b\nEncoder\nCRC\nBMC \nEncoder\n","image_count":0,"table_count":1}
{"page":93,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 93\nFigure 5.9 BMC Receiver Block Diagram\nThe USB PD baseband signal Shall be driven on the CC wire with a tristate driver that Shall cause a vSwing swing \non CC. The tristate driver is slew rate limited (see min rise/fall time in Section 5.8.5, \"BMC Transmitter \nSpecifications\") to limit coupling to D+/D- and to other signal lines in the USB Type-C fully featured cables (see [USB \nType-C 2.4]). This slew rate limiting can be performed either with driver design or an RC filter on the driver output.\nWhen sending the Preamble, the transmitter Shall start by transmitting a low level. The receiver Shall tolerate the \nloss of the first edge. The transmitter May vary the start of the Preamble by tStartDrive min (see Figure 5.10, \"BMC \nEncoded Start of Preamble\").\nFigure 5.10 BMC Encoded Start of Preamble\nThe transmitter Shall terminate the final bit of the Frame by an edge (the “trailing edge”) to help ensure that the \nreceiver clocks the final bit. If the trailing edge results in the transmitter driving CC low (i.e., the final half-UI of the \nFrame is high, see Figure 5.11, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low \nLast Transition\" and Figure 5.12, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-\nLow Last Transition\"), then the transmitter:\n\nShall continue to drive CC low for tHoldLowBMC.\n\nShould release CC to high impedance as soon as possible after min tHoldLowBMC and Shall release CC \nby max tEndDriveBMC.\nFigure 5.11, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low Last Transition\" \nillustrates the end of a BMC encoded Frame with an encoded zero for which the final bit of the Frame is terminated \nby a high to low transition. Figure 5.12, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with \nHigh-to-Low Last Transition\" illustrates the end of a BMC Encoded Frame with an encoded one for which the final \nbit of the Frame is terminated by a high to low transition. Both figures also illustrate the tInterFrameGap timing \nrequirement before the start of the next Frame when the Port has either been transmitting or receiving the \nprevious Frame (see Section 5.8.5.4, \"Inter-Frame Gap\").\nData\nfrom CC\n5b4b\nDecoder\nCRC\nBMC \nDecoder\nSOP \nDetect\n1UI\n1UI\n1UI\n1UI\n1UI\n1UI\n0\n1\n0\n1\n0\n1\netc\nHigh Impedance\n(level set by Rp/Rd)\ntStartDrive\n","image_count":0,"table_count":7}
{"page":94,"text":"Page 94\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 5.11 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with High-to-Low Last \nTransition\nFigure 5.12 Transmitting or Receiving BMC Encoded Frame Terminated by One with High-to-Low Last \nTransition\nIf the trailing edge results in the transmitter driving CC high (i.e., the final half-UI of the Frame is low, see Figure \n5.13, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last Transition\" and \nFigure 5.14, \"Transmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last Transition\"), \nthen the transmitter:\n\nShall continue to drive CC high for 1 UI.\n\nThen Shall drive CC low for tHoldLowBMC.\n\nShould release CC to high impedance as soon as possible after min tHoldLowBMC and Shall release CC \nby max tEndDriveBMC.\nFigure 5.13, \"Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last Transition\" \nillustrates the ending of a BMC encoded Frame that ends with an encoded zero for which the final bit of the Frame \nis terminated by a low to high transition. Figure 5.14, \"Transmitting or Receiving BMC Encoded Frame Terminated \nby One with Low to High Last Transition\" illustrates the ending of a BMC encoded Frame that ends with an encoded \none for which the final bit of the Frame is terminated by a low to high transition. Both figures also illustrate the \ntInterFrameGap timing requirement before the start of the next Frame when the Port has either been transmitting \nor receiving the previous Frame (see Section 5.8.5.4, \"Inter-Frame Gap\").\n1UI\nmax tEndDriveBMC\ntInterFrameGap\nmin tHoldLowBMC\nfinal bit\nof frame\n0\npre-amable for \nnext frame\n0\ntrailing edge of \nfinal bit\nHigh Impedance \n(level set by Rp/Rd)\n1UI\nmax tEndDriveBMC\ntInterFrameGap\nmin tHoldLowBMC\nfinal bit\nof frame\n0\npre-amable for \nnext frame\n0\ntrailing edge of \nfinal bit\nHigh Impedance \n(level set by Rp/Rd)\n","image_count":0,"table_count":9}
{"page":95,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 95\nFigure 5.13 Transmitting or Receiving BMC Encoded Frame Terminated by Zero with Low to High Last \nTransition\nFigure 5.14 Transmitting or Receiving BMC Encoded Frame Terminated by One with Low to High Last \nTransition\nNote:\nThere is no requirement to maintain a timing phase relationship between back-to-back Packets.\n1UI\n1UI\nmax tEndDriveBMC\ntInterFrameGap\nmin tHoldLowBMC\nfinal bit\nof frame\n0\npre-amable for \nnext frame\n0\ntrailing edge of \nfinal bit\nHigh Impedance \n(level set by Rp/Rd)\n1UI\n1UI\nmax tEndDriveBMC\ntInterFrameGap\nmin tHoldLowBMC\nfinal bit\nof frame\n1\npre-amable for \nnext frame\n0\ntrailing edge of \nfinal bit\nHigh Impedance \n(level set by Rp/Rd)\n","image_count":0,"table_count":6}
{"page":96,"text":"Page 96\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.2\n  Transmit and Receive Masks\n5.8.2.1\n  Transmit Masks\nThe transmitted signal Shall Not violate the masks defined in Figure 5.15, \"BMC Tx 'ONE' Mask\", Figure 5.16, \"BMC \nTx 'ZERO' Mask\", Table 5.14, \"BMC Tx Mask Definition, X Values\" and Table 5.15, \"BMC Tx Mask Definition, Y Values\" \nat the output of a load equivalent to the cable model and receiver load model described in Section 5.8.3, \n\"Transmitter Load Model\". The masks apply to the full range of Rp/Rd values as defined in [USB Type-C 2.4].\nNote:\nThe measurement of the transmitter does not need to accommodate a change in signal offset due to the \nground offset when current is flowing in the cable.\nThe transmitted signal Shall have a rise time no faster than tRise. The transmitted signal Shall have a fall time no \nfaster than tFall. The maximum limits on the rise and fall times are enforced by the Tx inner masks.\nFigure 5.15 BMC Tx 'ONE' Mask\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6 X7 X8\n0.5UI\n1UI\nY6\nY7\nY8\nY9\nX9\nX10\nX11\nX12\nX13 X14\n","image_count":0,"table_count":3}
{"page":97,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 97\nFigure 5.16 BMC Tx 'ZERO' Mask\nTable 5.14  BMC Tx Mask Definition, X Values\nName\nDescription\nValue\nUnits\nX1Tx\nLeft Edge of Mask\n0.015\nUI\nX2Tx\nsee figure\n0.07\nUI\nX3Tx\nsee figure\n0.15\nUI\nX4Tx\nsee figure\n0.25\nUI\nX5Tx\nsee figure\n0.35\nUI\nX6Tx\nsee figure\n0.43\nUI\nX7Tx\nsee figure\n0.485\nUI\nX8Tx\nsee figure\n0.515\nUI\nX9Tx\nsee figure\n0.57\nUI\nX10Tx\nsee figure\n0.65\nUI\nX11Tx\nsee figure\n0.75\nUI\nX12Tx\nsee figure\n0.85\nUI\nX13Tx\nsee figure\n0.93\nUI\nX14Tx\nRight Edge of Mask\n0.985\nUI\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6 X7 X8\n0.5UI\n1UI\nY6\nY7\nY8\nY9\nX9\nX10\nX11\nX12\nX13 X14\n","image_count":0,"table_count":4}
{"page":98,"text":"Page 98\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.2.2\n  Receive Masks\nA Source using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask when \nsourcing power as defined in Figure 5.17, \"BMC Rx 'ONE' Mask when Sourcing Power\", Figure 5.18, \"BMC Rx 'ZERO' \nMask when Sourcing Power\" and Table 5.16, \"BMC Rx Mask Definition\". The Source Rx mask is bounded by sweeping \na Tx mask compliant signal, with added vNoiseActive between power neutral and Source offsets. \nA Consumer using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask \nwhen sinking power as defined in Figure 5.21, \"BMC Rx 'ONE' Mask when Sinking Power\", Figure 5.22, \"BMC Rx \n'ZERO' Mask when Sinking Power\" and Table 5.16, \"BMC Rx Mask Definition\". The Consumer Rx mask is bounded by \nsweeping a Tx mask compliant signal, with added vNoiseActive between power neutral and Consumer offsets. \nEvery product using the BMC Signaling Scheme Shall be capable of receiving a signal that complies with the mask \nwhen power neutral as defined in Figure 5.19, \"BMC Rx 'ONE' Mask when Power neutral\", FFigure 5.20, \"BMC Rx \n'ZERO' Mask when Power neutral\" and Table 5.16, \"BMC Rx Mask Definition\".\nDual-Role Power Devices Shall meet the receiver requirements for a Source when providing power during any \ntransmission using the BMC Signaling Scheme or a Sink when consuming power during any transmission using the \nBMC Signaling Scheme.\nCable Plugs Shall meet the receiver requirements for both a Source and a Sink during any transmission using the \nBMC Signaling Scheme.\nThe parameters used in the masks are specified to be appropriate to either edge triggered or oversampling \nreceiver implementations.\nThe masks are defined for 'ONE' and 'ZERO' separately as BMC enforces a transition at the midpoint of the unit \ninterval while a 'ONE' is transmitted.\nThe Rx masks are defined to bound the Rx noise after the Rx bandwidth limiting filter with the time constant \ntRxFilter has been applied.\nThe boundaries of Rx outer mask, Y1Rx and Y5Rx, are specified according to vSwing max and accommodate half \nof vNoiseActive from cable noise coupling and the signal offset vIRDropGNDC due to the ground offset when \ncurrent is flowing in the cable. \nThe vertical dimension of the Rx inner mask, Y4Rx - Y2Rx, for power neutral is derived by reducing the vertical \ndimension of the Tx inner mask, Y7Tx - Y3Tx, at time location X3Tx by vNoiseActive to account for cable noise \ncoupling. The received signal is composed of a waveform compliant to the Tx mask plus vNoiseActive.\nThe vertical dimension of the Rx inner mask for sourcing power is derived by reducing the vertical dimension of \nthe Tx inner mask by vNoiseActive and vIRDropGNDC to account for both cable noise coupling and signal DC offset. \nTable 5.15  BMC Tx Mask Definition, Y Values\nName\nDescription\nValue\nUnits\nY1Tx\nLower bound of Out-\ner mask\n-0.075\nV\nY2Tx\nLower bound of in-\nner mask\n0.075\nV\nY3Tx\nsee figure\n0.15\nV\nY4Tx\nsee figure\n0.325\nV\nY5Tx\nInner mask vertical \nmidpoint\n0.5625\nV\nY6Tx\nsee figure\n0.8\nV\nY7Tx\nsee figure\n0.975\nV\nY8Tx\nsee figure\n1.04\nV\nY9Tx\nUpper Bound of Out-\ner mask\n1.2\nV\n","image_count":0,"table_count":2}
{"page":99,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 99\nThe received signal is composed of a waveform compliant to the Tx mask plus the maximum value of vNoiseActive \nplus vIRDropGNDC where the vIRDropGNDC value transitions between the minimum and the maximum values as \nallowed in this spec. \nThe vertical dimension of the Rx inner mask for sinking power is derived by reducing the vertical dimension of the \nTx inner mask by vNoiseActive max and vIRDropGNDC max for account for both cable noise coupling and signal \nDC offset. The received signal is composed of a waveform compliant to the Tx mask plus the maximum value of \nvNoiseActive plus vIRDropGNDC where the vIRDropGNDC value transitions between the minimum and the \nmaximum values as allowed in this spec. \nThe center line of the Rx inner mask, Y3Rx, is at half of the nominal vSwing for power neutral, and is shifted up by \nhalf of vIRDropGNDC max for sourcing power and is shifted down by half of vIRDropGNDC max for sinking power.\nThe receiver sensitivity Shall be set such that the receiver does not treat noise on an undriven signal path as an \nincoming signal. Signal amplitudes below vNoiseIdle max Shall be treated as noise when BMC is Idle.\nFigure 5.17 BMC Rx 'ONE' Mask when Sourcing Power\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\n","image_count":0,"table_count":3}
{"page":100,"text":"Page 100\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 5.18 BMC Rx 'ZERO' Mask when Sourcing Power\nFigure 5.19 BMC Rx 'ONE' Mask when Power neutral\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\n","image_count":0,"table_count":5}
{"page":101,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 101\nFigure 5.20 BMC Rx 'ZERO' Mask when Power neutral\nFigure 5.21 BMC Rx 'ONE' Mask when Sinking Power\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\n","image_count":0,"table_count":5}
{"page":102,"text":"Page 102\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 5.22 BMC Rx 'ZERO' Mask when Sinking Power\nTable 5.16  BMC Rx Mask Definition\nName\nDescription\nValue\nUnits\nX1Rx\nLeft Edge of Mask\n0.07\nUI\nX2Rx\nTop Edge of Mask\n0.15\nUI\nX3Rx\nSee figure\n0.35\nUI\nX4Rx\nSee figure\n0.43\nUI\nX5Rx\nSee figure\n0.57\nUI\nX6Rx\nSee figure\n0.65\nUI\nX7Rx\nSee figure\n0.85\nUI\nX8Rx\nSee figure\n0.93\nUI\nY1Rx\nLower bound of Outer Mask\n-0.3325\nV\nY2Rx\nLower Bound of Inner Mask\nY3Rx – 0.205 when sourcing power1 or sinking power1.\nY3Rx – 0.33 when power neutral1.\nV\nY3Rx\nCenter line of Inner Mask\n0.6875 Sourcing Power1.\n0.5625 Power Neutral1.\n0.4375 Sinking Power1.\nV\nY4Rx\nUpper bound of Inner mask\nY3Rx + 0.205 when sourcing power1 or sinking power1.\nY3Rx + 0.33 when power neutral1.\nV\nY5Rx\nUpper bound of the Outer mask\n1.5325\nV\n1)\nThe position of the center line of the Inner Mask is dependent on whether the receiver is Sourcing or Sinking power \nor is Power Neutral (see earlier in this section).\nY5\nY4\nY3\nY2\nY1\nX1\nX2\nX3\nX4\nX5\nX6\nX7\nX8\n0.5UI\n1UI\n","image_count":0,"table_count":4}
{"page":103,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 103\n5.8.3\n  Transmitter Load Model\nThe transmitter load model Shall be equivalent to the circuit outlined in Figure 5.23, \"Transmitter Load Model for \nBMC Tx from a Source\" for a Source and Figure 5.24, \"Transmitter Load Model for BMC Tx from a Sink\" for a Sink. It \nis formed by the concatenation of a cable load model and a receiver load model. See [USB Type-C 2.4] for details of \nthe Rp and Rd resistors. \nNote:\nThe parameters zCable_CC, tCableDelay_CC and cCablePlug_CC are defined in [USB Type-C 2.4].\nFigure 5.23 Transmitter Load Model for BMC Tx from a Source\nFigure 5.24 Transmitter Load Model for BMC Tx from a Sink\nThe transmitter system components rOutput and cShunt are illustrated for Informative purposes, and do not form \npart of the transmitter load model. See Section 5.8.5, \"BMC Transmitter Specifications\" for a description of the \ntransmitter system design.\nThe value of the modeled cable inductance, La, (in nH) Shall be calculated from the following formula:\nLa= tCableDelay_CCmax* zCable_CCmin\ntCableDelay_CC is the modeled signal propagation delay through the cable, and zCable_CC is the modeled cable \nimpedance.\nThe modeled cable inductance is 640nH for a cable with zCable_CCmin = 32Ω and tCableDelay_CCmax = 20ns.\nThe value of the modeled cable capacitance, Ca, (in pF) Shall be calculated from the following formula:\nCa=tCableDelay_CCmax/zCable_CCmin \nThe modeled cable capacitance is Ca = 625pF for a cable with zCable_CCmin = 32Ω and tCableDelay_CCmax = 20ns. \nTherefore, Ca/2 = 312.5pF.\ncCablePlug_CC models the capacitance of the plug at each end of the cable. cReceiver models the capacitance of the \nreceiver. The maximum values Shall be used in each case.\ncCablePlug_CC\ncShunt\nConnector\nca\n2\nLa\ncReceiver\nReceiver \nLoad Model\nTransmitter Load \nModel Output\nCable Model\ncCablePlug_CC\nca\n2\nrOutput\nRp\nRd\ncCablePlug_CC\ncShunt\nConnector\nca\n2\nLa\ncReceiver\nReceiver \nLoad Model\nTransmitter Load \nModel Output\nCable Model\ncCablePlug_CC\nca\n2\nrOutput\nRp\nRd\n","image_count":0,"table_count":6}
{"page":104,"text":"Page 104\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nNote:\nThe transmitter load model assumes that there are no other return currents on the ground path.\n","image_count":0,"table_count":1}
{"page":105,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 105\n5.8.4\n  BMC Common specifications\nThis section defines the common receiver and transmitter requirements.\n5.8.4.1\n  BMC Common Parameters\nThe electrical requirements specified in Table 5.17, \"BMC Common Normative Requirements\" Shall apply to both \nthe transmitter and receiver.\nTable 5.17  BMC Common Normative Requirements\nName\nDescription\nMin\nNom\nMax\nUnits\nComment\nfBitRate\nBit rate\n270\n300\n330\nKbps\ntUnitInterval\nUnit Interval1\n3.03\n3.70\nµs\n1/fBitRate\n1)\nDenotes the time to transmit an unencoded data bit, not the shortest high or low times on the wire after encoding \nwith BMC. A single data bit cell has duration of 1UI, but a data bit cell with value 1 will contain a centrally placed \n01 or 10 transition in addition to the transition at the start of the cell.\n","image_count":0,"table_count":2}
{"page":106,"text":"Page 106\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.5\n  BMC Transmitter Specifications\nThe transmitter Shall meet the specifications defined in Table 5.18, \"BMC Transmitter Normative Requirements\".\nTable 5.18  BMC Transmitter Normative Requirements\nName\nDescription\nMin\nNom\nMax Units\nComment\npBitRate\nMaximum difference between the \nbit-rate during the part of the \nPacket following the Preamble \nand the reference bit-rate.\n0.25\n%\nThe reference bit rate is the \naverage bit rate of the last 32 bits \nof the Preamble.\nrFRSwapTx\nFast Role Swap Request transmit \ndriver resistance (excluding cable \nresistance)\n5\nΩ\nMaximum driver resistance of a \nFast Role Swap Request \ntransmitter. Assumes a worst case \ncable resistance of 15Ω as defined \nin [USB Type-C 2.4]. \nNote: Based on this value the \nmaximum combined \ndriver and cable resistance \nof a Fast Role Swap Request \ntransmitter is 20Ω.\ntEndDriveBMC\nTime to cease driving the line \nafter the end of the last bit of the \nFrame.\n23\nµs\nMin value is limited by \ntHoldLowBMC.\ntFall\nFall Time\n300\nns\n10% and 90% amplitude points, \nminimum is under an unloaded \ncondition.\ntHoldLowBMC\nTime to cease driving the line \nafter the final high-to-low \ntransition.\n1\nµs\nMax value is limited by \ntEndDriveBMC.\ntInterFrameGap\nTime from the end of last bit of a \nFrame until the start of the first \nbit of the next Preamble.\n25\nµs\ntFRSwapTx\nFast Role Swap Request transmit \nduration\n60\n120\nµs\nFast Role Swap Request is \nindicated from the Initial Source \nto the Initial Sink by driving CC \nlow for this time.\ntRise\nRise time\n300\nns\n10% and 90% amplitude points, \nminimum is under an unloaded \ncondition.\ntStartDrive\nTime before the start of the first \nbit of the Preamble when the \ntransmitter Shall start driving \nthe line.\n-1\n1\nµs\nvSwing\nVoltage Swing\n1.05\n1.125\n1.2\nV\nApplies to both no load condition \nand under the load condition \nspecified in Section 5.8.3, \n\"Transmitter Load Model\".\nzDriver\nTransmitter output impedance\n33\n75\nΩ\nSource output impedance at the \nNyquist frequency of [USB 2.0] \nlow speed (750 kHz) while the \nSource is driving the CC line.\n","image_count":0,"table_count":2}
{"page":107,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 107\n5.8.5.1\n  Capacitance when not transmitting\ncReceiver is the capacitance that a DFP or UFP Shall present on the CC line when the DFP or UFP's receiver is not \ntransmitting on the line. The transmitter May have more capacitance than cReceiver while driving the CC line, but \nShall meet the waveform mask requirements. Once transmission is complete, the transmitter Shall disengage \ncapacitance in excess of cReceiver from the CC wire within tInterFrameGap.\n5.8.5.2\n  Source Output Impedance\nSource output impedance zDriver is determined by the driver resistance and the shunt capacitance of the Source \nand is hence a frequency dependent term. zDriver impacts the noise ingression in the cable. It is specified such that \nthe noise at the Receiver is bounded.\nzDriver is defined by the following equation:\nzDriver=rOutput/(1+s*rOutput*cShunt)\nFigure 5.25 Transmitter diagram illustrating zDriver\ncShunt Shall Not cause a violation of cReceiver when not transmitting.\n5.8.5.3\n  Bit Rate Drift\nLimits on the drift in fBitRate are set to help low-complexity receiver implementations.\nfBitRate is the reciprocal of the average bit duration from the previous 32 bits at a given portion of the Packet. The \nchange in fBitRate during a Packet Shall be less than pBitRate. The reference bit rate (refBitRate) is the average \nfBitRate over the last 32 bits of the Preamble. fBitRate throughout the Packet, including the EOP, Shall be within \npBitRate of refBitRate. pBitRate is expressed as a percentage:\npBitRate = | fBitRate - refBitRate | / refBitRate x 100%\nThe transmitter Shall have the same pBitRate for all Packet types. The BIST Carrier Mode and Bit Stream signals \nare continuous signals without a Payload. When checking pBitRate any set of 1044 bits (20 bit SOP followed by \n1024 PRBS bits) within a continuous signal May be considered as the part of the Packet following the Preamble and \nthe 32 preceding bits considered to be the last 32 bits of the Preamble used to compute refBitRate.\nrOutput\ncShunt\nzDriver\n","image_count":0,"table_count":1}
{"page":108,"text":"Page 108\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.5.4\n  Inter-Frame Gap\nFigure 5.26, \"Inter-Frame Gap Timings\" illustrates the inter-Frame gap timings.\nFigure 5.26 Inter-Frame Gap Timings\nThe transmitter Shall drive the bus for no longer than tEndDriveBMC after transmitting the final bit of the Frame.\nBefore starting to transmit the next Frame's Preamble the transmitter of the next Frame Shall ensure that it waits \nfor tInterFrameGap after either:\n\nTransmitting the previous Frame, for example sending the next Message in an AMS immediately after \nhaving sent a GoodCRC Message, or \n\nReceiving the previous Frame, for example when responding to a received Message with a GoodCRC \nMessage, or \n\nObserving an Idle condition on CC (see Section 5.7, \"Collision Avoidance\"). In this case the Port is waiting \nto initiate an AMS observes Idle (see Section 5.8.6.1, \"Definition of Idle\") and then waits tInterFrameGap \nbefore transmitting the Frame. See also Section 5.7, \"Collision Avoidance\" for details on when an AMS can \nbe initiated.\nNote:\nThe transmitter is also required to verify a bus Idle condition immediately prior to starting transmission \nof the next Frame (see Section 5.8.6.1, \"Definition of Idle\").\nThe transmitter of the next Frame May vary the start of the Preamble by tStartDrive (see Section 5.8.1, \"Encoding \nand signaling\").\nSee also Section 5.8.1, \"Encoding and signaling\" for figures detailing the timings relating to transmitting, receiving, \nand observing Idle in relating to Frames.\n5.8.5.5\n  Shorting of Transmitter Output\nA Transmitter in a Port or Cable Plug Shall tolerate having its output be shorted to ground for tFRSwapTx max. \nThis is due to the potential for Fast Role Swap to be signaled while the Transmitter is in the process of transmitting \n(see Section 5.8.5.6, \"Fast Role Swap Transmission\").\nEnd of Frame\nPreamble\nBus driven after end \nof Frame\nBus driven before \nPreamble\ntEndDriveBMC\ntStartDrive\ntInterFrameGap\n","image_count":0,"table_count":3}
{"page":109,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 109\n5.8.5.6\n  Fast Role Swap Transmission\nThe Fast Role Swap process is intended for use by a PDUSB Hub that presently has an external supply and is \nproviding power both through its downstream Ports to USB Devices and upstream to a USB Host such as a laptop. \nOn removal of the external wall supply Fast Role Swap enables a VBUS supply to be maintained by allowing the USB \nHost to apply vSafe5V when it sees VBUS droop below vSafe5V after having detected Fast Role Swap Signaling. The \nFast Role Swap AMS is then used to correctly assign Source/Sink Power Roles and configure the Rp/Rd resistors (see \nSection 8.3.2.8, \"Fast Role Swap\").\nThe Initial Source Shall signal a Fast Role Swap Request by driving CC to ground with a resistance of less than \nrFRSwapTx for tFRSwapTx. The Initial Source Shall only send a Fast Role Swap Request when it has an Explicit \nContract. The Initial Source May send a Fast Role Swap Request even if it has not yet had its Sink Capabilities queried \nby the Initial Sink. On transmission of the Fast Role Swap Request any pending Messages Shall be Discarded (see \nSection 6.12.2.2.1, \"Common Protocol Layer Message Transmission State Diagram\").\nThe Fast Role Swap Signaling May override any active transmissions. \nSince the Initial Sink's response to the Fast Role Swap signal is to send an FR_Swap Message, the Initial Source Shall \nensure Rp is set to SinkTxOK once the Fast Role Swap Signaling is complete.\n","image_count":0,"table_count":1}
{"page":110,"text":"Page 110\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.6\n  BMC Receiver Specifications\nThe receiver Shall meet the specifications defined in Table 5.19, \"BMC Receiver Normative Requirements\".\n5.8.6.1\n  Definition of Idle\nBMC Collision Avoidance is performed by the detection of signal transitions at the receiver. Detection is active when \nnTransitionCount transitions occur at the receiver within a time window of tTransitionWindow. After waiting \ntTransitionWindow without detecting nTransitionCount transitions the bus Shall be declared Idle.\nRefer to Section 5.8.5.4, \"Inter-Frame Gap\" for details of when transmissions May start.\nTable 5.19  BMC Receiver Normative Requirements\nName\nDescription\nMin Nom\nMax\nUnits\nComment\ncReceiver\nCC receiver capacitance\n200\n600\npF\nThe DFP or UFP system Shall have ca-\npacitance within this range when not \ntransmitting on the line.\nnBER\nBit error rate, S/N = 25 dB\n10-6\nnTransitionCount\nTransitions for signal detect\n3\nNumber of transitions to be detected to \ndeclare bus non-Idle.\ntFRSwapRx\nFast Role Swap Request de-\ntection time\n30\n50\nµs\nA Fast Role Swap Request results in the \nreceiver detecting a signal low for at \nleast this amount of time.\ntRxFilter\nRx bandwidth limiting filter \n(digital or analog)\n100\nns\nTime constant of a single pole filter to \nlimit broad-band noise ingression1.\ntTransitionWindow\nTime window for detecting \nnon-Idle\n12\n20\nµs\nvFRSwapCableTx\nFast Role Swap Request volt-\nage detection threshold\n490\n520\n550\nmV\nThe Fast Role Swap Request must be be-\nlow this voltage threshold to be detect-\ned.\nvIRDropGNDC\nCable Ground IR Drop\n250\nmV\nAs specified in [USB Type-C 2.4].\nvNoiseActive\nNoise amplitude when BMC \nis active.\n165\nmV\nPeak-to-peak noise from VBUS, [USB \n2.0] and SBU lines after the Rx band-\nwidth limiting filter with the time con-\nstant tRxFilter has been applied.\nvNoiseIdle\nNoise amplitude when BMC \nis Idle.\n300\nmV\nPeak-to-peak noise from VBUS, [USB \n2.0] and SBU lines after the Rx band-\nwidth limiting filter with the time con-\nstant tRxFilter has been applied.\nzBmcRx\nReceiver Input Impedance\n1\nMΩ\n1)\nBroad-band noise ingression is due to coupling in the cable interconnect.\n","image_count":0,"table_count":2}
{"page":111,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 111\n5.8.6.2\n  Multi-Drop\nThe BMC Signaling Scheme is suitable for use in Multi-Drop configurations containing one or two BMC Multi-Drop \ntransceivers connected to the CC wire, where one or both ends of a cable contains a Multi-Drop transceiver. In this \nspecification the location of the Multi-Drop transceiver is referred to as the Cable Plug.\nFigure 5.27, \"Example Multi-Drop Configuration showing two DRPs\" below illustrates a typical Multi-Drop \nconfiguration with two DRPs.\nFigure 5.27 Example Multi-Drop Configuration showing two DRPs\nThe Multi-Drop transceiver Shall obey all the electrical characteristics specified in this section except for those \nrelating to capacitance. The maximum capacitance allowed for the Multi-Drop node when not driving the line is \ncCablePlug_CC defined in [USB Type-C 2.4]. There are no constraints as to the distance of the Multi-Drop \ntransceiver from the end of the plug. The Multi-Drop transceiver(s) May be located anywhere along the cable \nincluding the plugs. The Multi-Drop transceiver suffers less from ground offset compared to the transceivers in the \nUSB Host or USB Device and contributes no significant reflections.\nIt is possible to have a configuration at Attach where one Port can be a VCONN Source and the other Port is not able \nto be a VCONN Source, such that there is no switch in the second Port. An example of a DFP with a switch Attached \nto a UFP without a switch is outlined in Figure 5.28, \"Example Multi-Drop Configuration showing a DFP and UFP\". \nThe capacitance on the CC line for a Port not able to be a VCONN Source Shall still be within cReceiver except when \ntransmitting.\nFigure 5.28 Example Multi-Drop Configuration showing a DFP and UFP\ncReceiver\nSwitch\nVCONN\ncCablePlug\ncCablePlug\nConnector\nConnector\nCable\nDRP\nDRP\ncReceiver\nSwitch\nVCONN\ncReceiver\nSwitch\nVCONN\ncCablePlug\ncCablePlug\nConnector\nConnector\nCable\nDFP\nUFP\ncReceiver\n","image_count":0,"table_count":1}
{"page":112,"text":"Page 112\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n5.8.6.3\n  Fast Role Swap Detection\nAn Initial Sink prepares for a Fast Role Swap by ensuring that once it has detected the Fast Role Swap Request its \npower supply is ready to respond by applying vSafe5V according to the timing detailed in Section 7.1.13, \"Fast Role \nSwap\". The Initial Sink Shall only respond to the Fast Role Swap Request when all the following conditions have \nbeen met:\n\nAn Explicit Contract has been established and the Sink Capabilities of the Initial Source have been \nreceived by, and at the request of, the Initial Sink.\n\nThe Sink_Capabilities Message received from the Initial Source has at least one of the Fast Role Swap \nbits set in its 5V Fixed Supply PDO.\n\nThe Initial Sink is able and willing to source the current requested by the Initial Source in the Fast Role \nSwap bits of its Sink_Capabilities Message.\nOn detection of the Fast Role Swap Request any pending Messages Shall be Discarded (see Section 6.12.2.2.1, \n\"Common Protocol Layer Message Transmission State Diagram\").\nWhen the Initial Sink is prepared for a Fast Role Swap and the bus is idle the CC voltage averaged over tFRSwapRx \nmin remains above 0.7V (see [USB Type-C 2.4]) since the Source Rp is either 1.5A or 3.0A. However, vNoiseIdle \nnoise May cause the CC line voltage to reach 0.7V-vNoiseIdle/2 for short durations. When the Initial Sink is \nprepared for a Fast Role Swap while it is transmitting and the Initial Source is sending a Fast Role Swap Request, the \ntransmission will be attenuated such that the peak CC voltage will not exceed vFRSwapCableTx min. Therefore, \nwhen the Initial Sink is prepared for a Fast Role Swap, it Shall Not detect a Fast Role Swap Request when the CC \nvoltage, averaged over tFRSwapRx min, is above 0.7V. When the Initial Sink is prepared for a Fast Role Swap, it \nShall detect a CC voltage lower than vFRSwapCableTx min for tFRSwapRx as a Fast Role Swap Request.\nNote:\nThe Initial Sink is not required to average the CC voltage to meet these requirements.\nThe Initial Sink Shall initiate the Fast Role Swap AMS within tFRSwapInit of detecting the Fast Role Swap Request \nin order to assign the Rp/Rd resistors to the correct Ports and to re-synchronize the state machines (see Section \n6.3.19, \"FR_Swap Message\").\nThe Initial Sink Shall become the New Source and Shall start supplying vSafe5V at USB Type-C current (see [USB \nType-C 2.4]) no later than tSrcFRSwap after VBUS has dropped below vSafe5V. An Initial Sink Shall disable its VBUS \nDisconnect Threshold detection circuitry while Fast Role Swap detection is active.\nNote:\nWhile power is transitioning the VCONN Source to the Cable Plug(s) cannot be guaranteed.\n","image_count":0,"table_count":1}
{"page":113,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 113\n5.9\n  Built in Self-Test (BIST)\nThe following sections define BIST functionality which Shall be supported.\n5.9.1\n  BIST Carrier Mode\nIn BIST Carrier Mode, the PHY Layer Shall send out a BMC encoded continuous string of alternating \"1\"s and \"0\"s. \nThis enables the measurement of power supply noise and frequency drift. \nNote:\nThis transmission is a purely a sequence of alternating bits and Shall Not be formatted as a Packet. \nSee also Section 6.4.3, \"BIST Message\". \n5.9.2\n  BIST Test Data Mode\nA BIST Test Data Message is used by the Tester to send various Tester generated Test Patterns to the UUT in order \nto test the UUT's receiver. See also Section 6.4.3, \"BIST Message\".\nFigure 5.29, \"Test Frame\" shows the Test Frame which Shall be sent by the Tester to the UUT. The BIST Message, \nwith a BIST Test Data BIST Data Object consists of a Preamble, followed by SOP*, followed by the Message Header \nwith a data length of 7 Data Objects, followed a BIST Test Data BIST Data Object, followed by 6 Data Objects \ncontaining test data, followed by the CRC and then an EOP.\nFigure 5.29 Test Frame\nPreamble(training for receiver)\nSOP* (Start \nOf Packet)\nTest Data 192 bits ...\nLEGEND:\nPreamble, not encoded \nwith 4b5b\nProvided by the Physical \nlayer, encoded with 4b5b\nHeader\nData Objects = 7\nBIST Test Data \nBDO\nProvided by the Protocol \nlayer, encoded with 4b5b\nCRC\nEOP (End Of \nPacket)\n...\n","image_count":32,"table_count":3}
{"page":114,"text":"Page 114\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6\n Protocol Layer\n6.1\n  Overview\nThis chapter describes the requirements of the USB Power Delivery Specification's Protocol Layer including:\n\nDetails of how Messages are constructed and used.\n\nUse of timers and timeout values.\n\nUse of Message and retry counters.\n\nReset operation.\n\nError handling.\n\nState behavior.\nRefer to Section 2.6, \"Architectural Overview\" for an overview of the theory of operation of USB Power Delivery.\n","image_count":0,"table_count":1}
{"page":115,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 115\n6.2\n  Messages\nThis specification defines three types of Messages:\n\nControl Messages that are short and used to manage the Message flow between Port Partners or to \nexchange Messages that require no additional data. Control Messages are 16 bits in length.\n\nData Messages that are used to exchange information between a pair of Port Partners. Data Messages \nrange from 48 to 240 bits in length. \n\nSome examples of Data Messages are:\n\nThose used to expose Capabilities and Negotiate power.\n\nThose used for the BIST.\n\nThose that are Vendor Defined Messages.\n\nExtended Messages that are used to exchange information between a pair of Port Partners. Extended \nMessages are up to MaxExtendedMsgLen bytes.\n\nSome examples of Extended Messages are:\n\nThose used for Source and Battery information.\n\nThose used for Security.\n\nThose used for Firmware Update.\n\nThose that are Vendor Defined Extended Messages.\n6.2.1\n  Message Construction\nAll Messages Shall be composed of a Message Header and a variable length (including zero) data portion. A Message \neither originates in the Protocol Layer and is passed to the PHY Layer, or it is received by the PHY Layer and is \npassed to the Protocol Layer.\nFigure 6.1, \"USB Power Delivery Packet Format for a Control Message\" illustrates a Control Message as part of a \nPacket showing the parts are provided by the Protocol Layer and PHY Layer.\nFigure 6.1 USB Power Delivery Packet Format for a Control Message\nFigure 6.2, \"USB Power Delivery Packet Format including Data Message Payload\" illustrates a Data Message as part \nof a Packet showing the parts are provided by the Protocol Layer and PHY Layer.\nPreamble\nSOP* (Start \nOf Packet)\nCRC\nEOP (End Of \nPacket)\nMessage Header \n(16 bit)\nLegend:\nPHY Layer\nProtocol Layer\n","image_count":0,"table_count":2}
{"page":116,"text":"Page 116\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.2 USB Power Delivery Packet Format including Data Message Payload\nFigure 6.3, \"USB Power Delivery Packet Format including an Extended Message Header and Payload\" illustrates an \nExtended Message as part of a Packet showing the parts are provided by the Protocol Layer and PHY Layer.\nFigure 6.3 USB Power Delivery Packet Format including an Extended Message Header and Payload\n6.2.1.1\n  Message Header\nEvery Message Shall start with a Message Header as shown in:\n\nFigure 6.1, \"USB Power Delivery Packet Format for a Control Message\"\n\nFigure 6.2, \"USB Power Delivery Packet Format including Data Message Payload\"\n\nFigure 6.3, \"USB Power Delivery Packet Format including an Extended Message Header and Payload\"\nand as defined in Table 6.1, \"Message Header\". The Message Header contains basic information about the Message \nand the PD Port Capabilities.\nThe Message Header May be used standalone as a Control Message when the Number of Data Objects field is zero \nor as the first part of a Data Message when the Number of Data Objects field is non-zero.\n6.2.1.1.1\n  Extended\nThe 1-bit Extended field Shall be set to zero to indicate a Control Message or Data Message and set to one to indicate \nan Extended Message.\nTable 6.1  Message Header\nBit(s)\nStart of Packet\nField Name\nReference\n15\nSOP*\nExtended\nSection 6.2.1.1.1\n14…12\nSOP*\nNumber of Data Objects\nSection 6.2.1.1.2\n11…9\nSOP*\nMessageID\nSection 6.2.1.1.3\n8\nSOP only\nPort Power Role\nSection 6.2.1.1.4\nSOP’/SOP’’\nCable Plug\nSection 6.2.1.1.7\n7…6\nSOP*\nSpecification Revision\nSection 6.2.1.1.5\n5\nSOP only\nPort Data Role\nSection 6.2.1.1.6\nSOP’/SOP’’\nReserved\nSection 1.4.2\n4…0\nSOP*\nMessage Type\nSection 6.2.1.1.8\nPreamble\nSOP* (Start \nOf Packet)\nCRC\nEOP (End Of \nPacket)\nMessage Header \n(16 bit)\n0..7 Data Object(s)\nLegend:\nPHY Layer\nProtocol Layer\nPreamble\nSOP* (Start \nOf Packet)\nCRC\nEOP (End Of \nPacket)\nMessage Header\n(16 bit)\nData (0..260 bytes)\nLegend:\nPHY Layer\nProtocol Layer\nExtended Message Header\n(16 bit)\n","image_count":0,"table_count":4}
{"page":117,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 117\nThe Extended field Shall apply to all SOP* Packet types.\n6.2.1.1.2\n  Number of Data Objects\nWhen the Extended field is set to zero the 3-bit Number of Data Objects field Shall indicate the number of 32-bit \nData Objects that follow the Message Header. When this field is zero the Message is a Control Message and when it \nis non-zero, the Message is a Data Message.\nThe Number of Data Objects field Shall apply to all SOP* Packet types.\nWhen both the Extended bit and Chunked bit are set to one, the Number of Data Objects field Shall indicate the \nnumber of Data Objects in the Message padded to the 4-byte boundary including the Extended Message Header as \npart of the first Data Object. \nWhen the Extended bit is set to one and Chunked bit is set to zero, the Number of Data Objects field Shall be \nReserved.\nNote:\nIn this case, the Message length is determined solely by the Data Size field in the Extended Message \nHeader.\n6.2.1.1.3\n  MessageID\nThe 3-bit MessageID field is the value generated by a rolling counter maintained by the originator of the Message. \nThe MessageIDCounter Shall be initialized to zero at power-on as a result of a Soft Reset, or a Hard Reset. The \nMessageIDCounter Shall be incremented when a Message is successfully received as indicated by receipt of a \nGoodCRC Message.\nNote:\nThe usage of MessageID during testing with BIST Messages is defined in [USBPDCompliance].\nThe MessageID field Shall apply to all SOP* Packet types.\n6.2.1.1.4\n  Port Power Role\nThe 1-bit Port Power Role field Shall indicate the Port's present Power Role:\n\n0b Sink\n\n1b Source\nMessages, such as Get_Sink_Cap_Extended, that are only ever sent by a Source, Shall always have the Port Power \nRole field set to Source. Similarly, Messages such as the Request Message that are only ever sent by a Sink Shall \nalways have the Port Power Role field set to Sink.\nDuring the Power Role Swap AMS, for the Initial Source Port, the Port Power Role field Shall be set to Sink in the \nPS_RDY Message indicating that the Initial Source's power supply is turned off (see Table 8.60, \"Steps for a \nSuccessful Source Initiated Power Role Swap Sequence\" and Table 8.63, \"Steps for a Successful Sink Initiated Power \nRole Swap Sequence\").\nDuring the Power Role Swap AMS, for the Initial Sink, the Port Power Role field Shall be set to Source for Messages \ninitiated by the Policy Engine after receiving the PS_RDY Message from the Initial Source (see Table 8.60, \"Steps for \na Successful Source Initiated Power Role Swap Sequence\" and Table 8.63, \"Steps for a Successful Sink Initiated Power \nRole Swap Sequence\").\nDuring the Fast Role Swap AMS, for the Initial Source Port, the Port Power Role field Shall be set to Sink in the \nPS_RDY Message indicating that VBUS is not being driven by the Initial Source and is within vSafe5V (see Figure 8.39, \n\"Successful Fast Role Swap Sequence\").\nDuring the Fast Role Swap AMS, for the Initial Sink Port, the Port Power Role field Shall be set to Source for \nMessages initiated by the Policy Engine after receiving the PS_RDY Message from the Initial Source (see Figure 8.39, \n\"Successful Fast Role Swap Sequence\"). \nNote:\nThe GoodCRC Message sent by the Initial Sink in response to the PS_RDY Message from the Initial Source \nwill have its Port Power Role field set to Sink since this is initiated by the Protocol Layer. Subsequent \n","image_count":0,"table_count":1}
{"page":118,"text":"Page 118\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nMessages initiated by the Policy Engine, such as the PS_RDY Message sent to indicate that VBUS is ready, \nwill have the Port Power Role field set to Source.\nThe Port Power Role field of a received Message Shall Not be verified by the receiver and Shall Not lead to Soft \nReset, Hard Reset or Error Recovery if it is incorrect.\nThe Port Power Role field Shall only be defined for SOP Packets.\n6.2.1.1.5\n  Specification Revision\nThe Specification Revision field Shall be one of the following values (except 11b):\n\n00b - Revision 1.0 (Deprecated)\n\n01b - Revision 2.0\n\n10b - Revision 3.x\n\n11b - Reserved, Shall Not be used.\nTo ensure interoperability with existing PDUSB products, PDUSB products Shall support every PD Specification \nRevision starting from [USB 2.0] for SOP*; the only exception to this is a VPD which Shall Ignore Messages sent with \nPD Specification Revision 2.0 and earlier.\nAfter a physical or logical (USB Type-C® Error Recovery) Attach, a Port discovers the common Specification Revision \nlevel between itself and its Port Partner and/or the Cable Plug(s), and uses this Specification Revision level until a \nDetach, Hard Reset or Error Recovery happens.\nAfter detection of the Specification Revision to be used, all PD communications Shall comply completely with the \nrelevant Revision of the PD specification.\nThe 2-bit Specification Revision field of a GoodCRC Message does not carry any meaning and Shall be considered \nas don't care by the recipient of the Message. The sender of a GoodCRC Message Shall set the Specification Revision \nfield to 01b (Revision 2.0) when responding to a Message that contains 01b in the Specification Revision field of \nthe Message Header. The sender of a GoodCRC Message May set the Specification Revision field to 01b or 10b when \nresponding to a Message that contains 10b (Revision 3.x) in the Specification Revision field of the Message Header.\nThe Specification Revision field Shall apply to all SOP* Packet types. \nAn Attach event or a Hard Reset Shall cause the detection of the applicable Specification Revision to be performed \nfor both Ports and Cable Plugs according to the rules stated below:\nWhen the Source Port first communicates with the Sink Port the Specification Revision field Shall be used as \ndescribed by the following steps:\n1)\nThe Source Port sends a Source_Capabilities Message to the Sink Port setting the Specification \nRevision field to the highest Revision of the Power Delivery Specification the Source Port supports.\n2)\nThe Sink Port responds with a Request Message setting the Specification Revision field to the highest \nRevision of the Power Delivery Specification the Sink Port supports that is equal to or lower than the \nSpecification Revision received from the Source Port.\n3)\nThe Source and Sink Ports Shall use the Specification Revision in the Request Message from the Sink in \nstep 2 in all subsequent communications until a Detach, Hard Reset, or Error Recovery happens.\nPrior to entering the First Explicit Contract, the VCONN Source Shall use the following steps to establish a \nSpecification Revision level:\n1)\nThe VCONN Source sends a Discover Identity REQ to the Cable Plug (SOP’) setting the Specification \nRevision field in the Message to the highest Revision of the Power Delivery Specification the VCONN \nSource supports. After a VCONN Swap the required Soft_Reset / Accept Message exchange is used for the \nsame purpose (see Section 6.3.13, \"Soft Reset Message\").\n","image_count":0,"table_count":1}
{"page":119,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 119\n2)\nThe Cable Plug responds with a Discover Identity ACK setting the Specification Revision field in the \nMessage to the highest Revision of the Power Delivery Specification the VCONN Source supports that is \nequal to or lower than the Specification Revision it received from the Source Port.\n3)\nThe Cable Plug and VCONN Source Shall communicate using the lower of the two revisions until an \nExplicit Contract has been established.\n4)\nTable 6.2, \"Revision Interoperability during an Explicit Contract\" shows the Specification Revision that \nShall be used between the Port Partners and the Cable Plugs when the Specification Revision has been \ndiscovered and an Explicit Contract is in place.\nNotes:\n\nA VCONN Source that does not communicate with the Cable Plug(s) May skip the above procedure.\n\nWhen a Cable Plug does not respond to a Revision 3.x Discover Identity REQ with a Discover Identity \nACK or BUSY the VCONN Source May repeat steps 1-4 using a Revision 2.0 Discover Identity REQ in step \n1 before establishing that there is no Cable Plug to communicate with.\nA VCONN Source that supports Revision 3.x of the Power Delivery Specification May communicate with a Cable Plug \nalso supporting Revision 3.x using Revision 3.x Compliant Communications regardless of the Specification Revision \nof its Port Partner while no Explicit Contract exists. After an Explicit Contract has been established the Port Partners \nand Cable Plug(s) Shall use Table 6.2, \"Revision Interoperability during an Explicit Contract\" to determine the \nRevision to be used.\nAll data in all Messages Shall be consistent with the Specification Revision field in the Message Header for that \nparticular Message.\nA Cable Plug Shall Not save the state of the agreed Specification Revision. A Cable Plug Shall respond with the \nhighest Specification Revision it supports that is equal to or lower than the Specification Revision contained in the \nMessage received from the VCONN Source.\nCable Plugs Shall operate using the same Specification Revision for both SOP’ and SOP’’. Cable assemblies with two \nCable Plugs Shall operate using the same Specification Revision for both Cable Plugs.\nSee Table 6.2, \"Revision Interoperability during an Explicit Contract\" for details of how various Revisions Shall \ninter-operate.\n6.2.1.1.6\n  Port Data Role\nThe 1-bit Port Data Role field Shall indicate the Port's present Data Role:\n\n0b UFP\n\n1b DFP\nTable 6.2  Revision Interoperability during an Explicit Contract\nPort 1 Revision\nCable Plug Revision\nPort 2 Revision\nPort to Port \nOperating \nRevision\nPort to Cable \nPlug Operating \nRevision\n2\n2\n2\n2\n2\n2\n2\n3\n2\n2\n2\n3\n2\n2\n2\n2\n3\n3\n2\n2\n3\n2\n2\n2\n2\n3\n2\n3\n3\n2\n3\n3\n2\n2\n2\n3\n3\n3\n3\n3\n","image_count":0,"table_count":2}
{"page":120,"text":"Page 120\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Port Data Role field Shall only be defined for SOP Packets. For all other SOP* Packets the Port Data Role field \nis Reserved and Shall be set to zero.\nIf a USB Type-C Port receives a Message with the Port Data Role field set to the same Data Role as its current Data \nRole, except for the GoodCRC Message, USB Type-C Error Recovery actions as defined in [USB Type-C 2.4] Shall be \nperformed.\nFor a USB Type-C Port the Port Data Role field Shall be set to the default value at Attachment after a Hard Reset: 0b \nfor a Port with Rd asserted and 1b for a Port with Rp asserted.\nIn the case that a Port is not USB Communications capable, at Attachment a Source Port Shall default to DFP and a \nSink Port Shall default to UFP.\n6.2.1.1.7\n  Cable Plug\nThe 1-bit Cable Plug field Shall indicate whether this Message originated from a Cable Plug or VPD:\n\n0b Message originated from a DFP or UFP.\n\n1b Message originated from a Cable Plug or VPD\nThe Cable Plug field Shall only apply to SOP’ Packet and SOP’’ Packet types.\n6.2.1.1.8\n  Message Type\nThe 5-bit Message Type field Shall indicate the type of Message being sent. To fully decode the Message Type, the \nNumber of Data Objects field is first examined to determine whether the Message is a Control Message or a Data \nMessage. Then the specific Message Type can be found in Table 6.5, \"Control Message Types\" or Table 6.6, \"Data \nMessage Types\".\nThe Message Type field Shall apply to all SOP* Packet types.\n6.2.1.2\n  Extended Message Header\nExtended Messages (indicated by the Extended field being set in the Message Header) Shall contain an Extended \nMessage Header following the Message Header as shown in Figure 6.3, \"USB Power Delivery Packet Format including \nan Extended Message Header and Payload\" and defined in “Table 6.3, \"Extended Message Header\". \nExtended Messages contain Data Blocks of Data Size, defined in the Extended Message, that are either sent in a \nsingle Message or as a series of Chunks. When the Data Block is sent as a series of Chunks, each Chunk in the series, \nexcept for the last Chunk, Shall contain MaxExtendedMsgChunkLen bytes. The last Chunk in the series Shall \ncontain the remainder of the Data Block and so could be less than MaxExtendedMsgChunkLen bytes and Shall be \npadded to the next 4-byte Data Object boundary.\n6.2.1.2.1\n  Chunked\nThe Port Partners Shall use the Unchunked Extended Messages Supported field in the Source_Capabilities \nMessage and Unchunked Extended Messages Supported field in the Request Message to determine whether to \nsend Messages of Data Size > MaxExtendedMsgLegacyLen bytes in a single Unchunked Extended Message (see \nSection 6.4.1.2.1.6, \"Unchunked Extended Messages Supported\" and Section 6.4.2.6, \"Unchunked Extended Messages \nSupported\").\nTable 6.3  Extended Message Header\nBit(s)\nStart of Packet\nField Name\nReference\n15\nSOP*\nChunked\nSection 6.2.1.2.1\n14…11\nSOP*\nChunk Number\nSection 6.2.1.2.2\n10\nSOP*\nRequest Chunk\nSection 6.2.1.2.3\n9\nSOP*\nReserved\n8…0\nSOP*\nData Size\nSection 6.2.1.2.4\n","image_count":0,"table_count":2}
{"page":121,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 121\nWhen either Port Partner only supports Chunked Extended Messages:\n\nThe Chunked bit in every Extended Message Shall be set to one.\n\nEvery Extended Message of Data Size > MaxExtendedMsgLegacyLen Shall be transmitted between the \nPort Partners in Chunks \n\nThe Number of Data Objects in the Message Header Shall indicate the number of Data Objects in the \nMessage padded to the 4-byte boundary including the Extended Message Header as part of the first Data \nObject.\nThe conditions listed above Shall apply until the Port Pair is Detached, there is a Hard Reset, there is Error Recovery \nor the Source removes power (except during a Power Role Swap or Fast Role Swap when the Initial Source removes \npower in order to for the New Source to apply power).\nWhen both Port Partners support Unchunked Extended Messages:\n\nThe Chunked bit in every Extended Message Shall be set to zero.\n\nEvery Extended Message Shall be transmitted between the Port Partners Unchunked.\n\nThe Number of Data Objects in the Message Header is Reserved.\nThe conditions listed above Shall apply until the Port Pair is Detached, there is a Hard Reset, there is Error Recovery \nor the Source removes power (except during a Power Role Swap or Fast Role Swap when the Initial Source removes \npower in order to for the New Source to apply power).\nWhen sending Extended Messages to the Cable Plug the VCONN Source Shall only send Chunked Extended Messages. \nCable Plugs Shall always send Extended Messages of Data Size > MaxExtendedMsgLegacyLen Chunked and Shall \nset the Chunked bit in every Extended Message to one.\nWhen Extended Messages are supported Chunking Shall be supported.\n6.2.1.2.2\n  Chunk Number\nThe Chunk Number field Shall only be Valid in a Message if the Chunked flag is set to one. If the Chunked flag is \nset to zero the Chunk Number field Shall also be set to zero.\nThe Chunk Number field is used differently depending on whether the Message is a request for Data, or a requested \nData Block being returned:\n\nIn a request for data the Chunk Number field indicates the number of the Chunk being requested. The \nrequester Shall only set this field to the number of the next Chunk in the series (the next Chunk after the \nlast received Chunk).\n\nIn the requested Data Block the Chunk Number field indicates the number of the Chunk being returned. \nThe Chunk Number for each Chunk in the series Shall start at zero and Shall increment for each Chunk \nby one up to a maximum of 9 corresponding to 10 Chunks in total.\n6.2.1.2.3\n  Request Chunk\nThe Request Chunk bit Shall only be used for the Chunked transfer of an Extended Message when the Chunked bit \nis set to 1 (see Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\"). For Unchunked Extended \nMessage transfers, Messages Shall be sent and received without the request/response mechanism (see Figure 6.4, \n\"Example Security_Request sequence Unchunked (Chunked bit = 0)\").\nThe Request Chunk bit Shall be set to one to indicate that this is a request for a Chunk of a Data Block and Shall be \nset to zero to indicate that this is a Chunk response containing a Chunk. Except for Chunk zero, a requested Chunk \nof a Data Block Shall only be returned as a Chunk response to a corresponding request for that Chunk. Both the \nChunk request and the Chunk response Shall contain the same value in the Message Type field. When the Request \nChunk bit is set to one the Data Size field Shall be zero.\n","image_count":0,"table_count":1}
{"page":122,"text":"Page 122\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.2.1.2.4\n  Data Size\nThe Data Size field Shall indicate how many bytes of data in total are in Data Block being returned. The total \nnumber of data bytes in the Message Shall Not exceed MaxExtendedMsgLen.\nIf the Data Size field is less than MaxExtendedMsgLegacyLen and the Chunked bit is set then the Packet Payload \nShall be padded to the next 4-byte Data Object boundary with zeros (0x00). \nIf the Data Size field is greater than expected for a given Extended Message but less than or equal to \nMaxExtendedMsgLen then the expected fields in the Message Shall be processed appropriately and the additional \nfields Shall be Ignored.\n6.2.1.2.5\n  Extended Message Examples\nThe following examples illustrate the transmission of Extended Messages both Chunked (Chunked bit is one) and \nUnchunked (Chunked bit is zero). The examples use a Security_Request Message of Data Size 7 bytes which is \nresponded to by a Security_Response Message of Data Size 30 bytes. The sizes of these Messages are arbitrary and \nare used to illustrate Message transmission; they are not intended to correspond to genuine security related \nMessages.\nDuring Negotiation of the Explicit Contract after connection, the Port Partners use the Unchunked Extended \nMessages Supported field in the Source_Capabilities Message and Unchunked Extended Messages Supported \nfield in the Request Message to determine the value of the Chunked bit (see Table 6.4, \"Use of Unchunked Message \nSupported bit\"). When both Port Partners support Unchunked Extended Messages then the Chunked bit is zero \notherwise the Chunked bit is one.\nThe Chunked bit is used to determine whether:\n\nThe Chunk request/response mechanism is used.\n\nExtended Messages are Chunked.\n\nPadding is applied.\n\nThe Number of Data Objects field is used.\nThe following examples illustrate the expected usage in each case.\n6.2.1.2.5.1\n  Security_Request/Security_Response Unchunked Example\nFigure 6.4, \"Example Security_Request sequence Unchunked (Chunked bit = 0)\" illustrates a typical sequence for a \nSecurity_Request Message responded to by a Security_Response Message using Unchunked Extended Messages \n(Chunked bit is zero) between a USB Host and a Charger. The entire Data Block is returned in one Message. The \nChunk request/response mechanism is not used.\nTable 6.4  Use of Unchunked Message Supported bit\nSource: Source_Capabilities Message\n Unchunked Message \nSupported bit = 0\nUnchunked Message \nSupported bit = 1\nSink: Request Message\nUnchunked Message \nSupported bit = 0\nChunked bit = 1\nChunked bit = 1\nUnchunked Message \nSupported bit = 1\nChunked bit = 1\nChunked bit = 0\n","image_count":0,"table_count":2}
{"page":123,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 123\nFigure 6.4 Example Security_Request sequence Unchunked (Chunked bit = 0)\nFigure 6.5, \"Example byte transmission for Security_Request Message of Data Size 7 (Chunked bit is set to zero)\" \ndetails the Security_Request Message shown in Figure 6.4, \"Example Security_Request sequence Unchunked \n(Chunked bit = 0)\". The figure shows the byte ordering on the bus as well as the fact that there is no padding in this \ncase. The Number of Data Objects field has a value of 0 since it is Reserved when the Chunked bit is zero. The Data \nSize field indicates the length of the Extended Message when the Chunked bit is set to 0, which in this case is 7 bytes.\nFigure 6.5 Example byte transmission for Security_Request Message of Data Size 7 (Chunked bit is set to \nzero)\nFigure 6.6, \"Example byte transmission for Security_Response Message of Data Size 30 (Chunked bit is set to zero)\" \ndetails the Security_Response Message shown in Figure 6.4, \"Example Security_Request sequence Unchunked \n(Chunked bit = 0)\". The figure shows the byte ordering on the bus as well as the fact that there is no padding in this \ncase. The Number of Data Objects field has a value of 0 since it is Reserved when the Chunked bit is zero. The Data \nSize field indicates the length of the Extended Message when the Chunked bit is set to zero, which in this case is 30 \nbytes.\nHost\nCharger\nSecurity_Request \n(Data Size = 7, Chunked = 0)\nGoodCRC\nGoodCRC\nSecurity_Response \n(Data Size = 30, Chunked = 0)\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Request\nNumber of Data \nObjects = 0 (Reserved)\nData (7 bytes)\nExtended Message \nHeader\n(16 bit)\nChunked = 0\nData Size = 7\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nB0\nB1\nB2\nB3\nB4\nB5\nB6\n","image_count":0,"table_count":2}
{"page":124,"text":"Page 124\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.6 Example byte transmission for Security_Response Message of Data Size 30 (Chunked bit is set to \nzero)\n6.2.1.2.5.2\n  Security_Request/Security_Response Chunked Example\nFigure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" illustrates a typical sequence for a \nSecurity_Request Message responded to by a Security_Response Message using Chunked Extended Messages \n(Chunked bit is one) between a USB Host and a Charger.\nNote:\n Chunk Number zero in every Extended Message is sent without the need for a Chunk Request, but Chunk \nNumber one and following need to be requested with a Chunk request.\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Response\nNumber of Data \nObjects = 0 (Reserved)\nData (30 bytes)\nExtended Message \nHeader\n(16 bit)\nChunked = 0\nData Size = 30\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nB0\nB1\nB28\nB29\n","image_count":0,"table_count":3}
{"page":125,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 125\nFigure 6.7 Example Security_Request sequence Chunked (Chunked bit = 1)\nFigure 6.8, \"Example Security_Request Message of Data Size 7 (Chunked bit set to 1)\" shows the Security_Request \nMessage shown in Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" in more detail \nincluding the byte ordering on the bus and padding. Three bytes of padding have been added to the Message so that \nthe total number of bytes is a multiple of 32-bits, corresponding to 3 Data Objects. The Number of Data Objects \nfield is set to 3 to indicate the length of this Chunk. The Chunk Number is set to zero and the Data Size field is set \nto 7 to indicate the length of the whole Extended Message.\nHost\nCharger\nSecurity_Request \n(Number of Data Objects = 3,\nChunked = 1, Chunk Number = 0,\nRequest Chunk = 0, Data Size = 7)\nGoodCRC\nGoodCRC\nSecurity_Response \n(Number of Data Objects = 7,\nChunked = 1, Chunk Number = 0,\nRequest Chunk = 0, Data Size = 30)\nSecurity_Response “Chunk request”\n(Number of Data Objects = 1,\nChunked = 1, Chunk Number = 1,\nRequest Chunk = 1, Data Size = 0)\nGoodCRC\nGoodCRC\nSecurity_Response \n(Number of Data Objects = 2,\nChunked = 1, Chunk Number = 1,\nRequest Chunk = 0, Data Size = 30)\nSecurity_Request Chunk\nSecurity_Response\n","image_count":0,"table_count":3}
{"page":126,"text":"Page 126\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.8 Example Security_Request Message of Data Size 7 (Chunked bit set to 1)\nFigure 6.9, \"Example Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\" shows Chunk \nNumber zero of the Security_Response Message shown in Figure 6.7, \"Example Security_Request sequence Chunked \n(Chunked bit = 1)\" in more detail including the byte ordering on the bus and padding. No padding is need for this \nChunk since the full 26-byte Payload plus 2-byte Extended Message Header is a multiple of 32-bits, corresponding \nto 7 Data Objects. The Number of Data Objects field is set to 7 to indicate the length of this Chunk and the Data \nSize field is set to 30 to indicate the length of the whole Extended Message.\nFigure 6.9 Example Chunk 0 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\nFigure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\" shows an example of the Message \nformat, byte ordering and padding for the Security_Response Message Chunk request for Chunk Number one \nshown in Figure 6.7, \"Example Security_Request sequence Chunked (Chunked bit = 1)\". In the Chunk request the \nNumber of Data Objects field in the Message is set to 1 to indicate that the Payload is 32 bits equivalent to 1 data \nobject (see Figure 6.10, \"Example byte transmission for a Security_Response Message Chunk request (Chunked bit is \nset to 1)\"). Since the Chunked bit is set to 1 the Chunk request/Chunk response mechanism is used. The Message is \na Chunk request so the Request Chunk bit is set to one, and in this case Chunk one is being requested so Chunk \nNumber is set to one. Data Size is set to zero indicating the length of the Data Block being transferred. Two bytes \nof padding are added to ensure that the Payload is a multiple of 32 bits.\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Request\nNumber of Data \nObjects = 3\nData (7 bytes)\nExtended Message \nHeader\n(16 bit)\nChunked = 1\nChunk Number = 0\nRequest Chunk = 0\nData Size = 7\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nB0\nB1\nB2\nB3\nB4\nB5\nB6\nP0\n(0x00)\nP1\n(0x00)\nP2\n(0x00)\nPadding (3 bytes)\nData Object 0\nData Object 1\nData Object 2\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Response\nNumber of Data \nObjects = 7\nData (26 bytes)\nExtended Message \nHeader\n(16 bit)\nChunked = 1\nChunk Number = 0\nRequest Chunk = 0\nData Size = 30\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nB0\nB1\nB22\nB23\nData Object 0\nB24\nB25\nData Object 6\n","image_count":0,"table_count":4}
{"page":127,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 127\nFigure 6.10 Example byte transmission for a Security_Response Message Chunk request (Chunked bit is set \nto 1)\nFigure 6.11, \"Example Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\" shows Chunk \nNumber one of the Security_Response Message shown in Figure 6.7, \"Example Security_Request sequence Chunked \n(Chunked bit = 1)\" in more detail including the byte ordering on the bus and padding. Two bytes of padding are \nadded to ensure that the Payload is a multiple of 32 bits, corresponding to 2 Data Objects. The Number of Data \nObjects field is set to 2 to indicate the length of this Chunk and the Data Size field is set to 30 to indicate the length \nof the whole Extended Message.\nFigure 6.11 Example Chunk 1 of Security_Response Message of Data Size 30 (Chunked bit set to 1)\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Response\nNumber of Data \nObjects = 1\nExtended Message \nHeader\n(16 bit)\nChunked = 1\nChunk Number = 1\nRequest Chunk = 1\nData Size = 0\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nP0\n(0x00)\nP1\n(0x00)\nPadding (2 bytes)\nData Object 0\nMessage Header\n(16 bit)\nMessage Type = \nSecurity_Response\nNumber of Data \nObjects = 2\nData (4 bytes)\nExtended Message \nHeader\n(16 bit)\nChunked = 1\nChunk Number = 1\nRequest Chunk = 0\nData Size = 30\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nMessage \nHeader \nLSB\nMessage\nHeader \nMSB\nB0\nB1\nB2\nB3\nP0\n(0x00)\nP1\n(0x00)\nPadding (2 bytes)\nData Object 0\nData Object 1\n","image_count":0,"table_count":3}
{"page":128,"text":"Page 128\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.3\n  Control Message\nA Message is defined as a Control Message when the Number of Data Objects field in the Message Header is set to \nzero. The Control Message consists only of a Message Header and a CRC. The Protocol Layer originates the Control \nMessages (i.e., Accept Message, Reject Message etc.).\nThe Control Message types are specified in the Message Header's Message Type field (bits 4…0) and are \nsummarized in Table 6.5, \"Control Message Types\". The Sent by column indicates entities which May send the given \nMessage (Source, Sink or Cable Plug); entities not listed Shall Not issue the corresponding Message. The \"Valid Start \nof Packet\" column indicates the Messages which Shall only be issued in SOP Packets and the Messages which May \nbe issued in SOP* Packets.\nTable 6.5  Control Message Types\nBits 4…0\nMessage Type\nSent by\nDescription\nValid \nStart of \nPacket\n0_0000\nReserved\nN/A\nAll values not explicitly \ndefined are Reserved and \nShall Not be used.\n0_0001\nGoodCRC\nSource, Sink or Cable Plug\nSee Section 6.3.1.\nSOP*\n0_0010\nGotoMin (Deprecated)\nDeprecated\nSee Section 6.3.2.\nN/A\n0_0011\nAccept\nSource, Sink or Cable Plug\nSee Section 6.3.3.\nSOP*\n0_0100\nReject\nSource, Sink or Cable Plug\nSee Section 6.3.4.\nSOP*\n0_0101\nPing (Deprecated)\nDeprecated\nSee Section 6.3.5.\nSOP only\n0_0110\nPS_RDY\nSource or Sink\nSee Section 6.3.6.\nSOP only\n0_0111\nGet_Source_Cap\nSink or DRP\nSee Section 6.3.7.\nSOP only\n0_1000\nGet_Sink_Cap\nSource or DRP\nSee Section 6.3.8.\nSOP only\n0_1001\nDR_Swap\nSource or Sink \nSee Section 6.3.9.\nSOP only\n0_1010\nPR_Swap\nSource or Sink\nSee Section 6.3.10.\nSOP only\n0_1011\nVCONN_Swap\nSource or Sink\nSee Section 6.3.11.\nSOP only\n0_1100\nWait\nSource or Sink\nSee Section 6.3.12.\nSOP only\n0_1101\nSoft_Reset\nSource or Sink\nSee Section 6.3.13.\nSOP*\n0_1110\nData_Reset\nSource or Sink\nSee Section 6.3.14.\nSOP only\n0_1111\nData_Reset_Complete\nSource or Sink\nSee Section 6.3.15.\nSOP only\n1_0000\nNot_Supported\nSource, Sink or Cable Plug\nSee Section 6.3.16.\nSOP*\n1_0001\nGet_Source_Cap_Extended\nSink or DRP\nSee Section 6.3.17.\nSOP only\n1_0010\nGet_Status\nSource or Sink\nSee Section 6.3.18.\nSOP*\n1_0011\nFR_Swap\nSink1\nSee Section 6.3.19.\nSOP only\n1_0100\nGet_PPS_Status\nSink\nSee Section 6.3.20.\nSOP only\n1_0101\nGet_Country_Codes\nSource or Sink\nSee Section 6.3.21.\nSOP only\n1_0110\nGet_Sink_Cap_Extended\nSource or DRP\nSee Section 6.3.22.\nSOP only\n1_0111\nGet_Source_Info\nSink or DRP\nSee Section 6.3.23.\nSOP Only\n1_1000\nGet_Revision\nSource or Sink\nSee Section 6.3.24.\nSOP*\n1_1001…\n1_1111\nReserved\nN/A\nAll values not explicitly \ndefined are Reserved and \nShall Not be used.\n1)\nIn this case the Port is providing vSafe5V however it will have Rd asserted rather than Rp and sets the Port Power \nRole field to Sink, until the Fast Role Swap AMS has completed.\n","image_count":0,"table_count":2}
{"page":129,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 129\n6.3.1\n  GoodCRC Message\nThe GoodCRC Message Shall be sent by the receiver to acknowledge that the previous Message was correctly \nreceived (i.e., had a GoodCRC Message). The GoodCRC Message Shall return the Message's MessageID so the sender \ncan determine that the correct Message is being acknowledged. The first bit of the GoodCRC Message Shall be \nreturned within tTransmit after receipt of the last bit of the previous Message.\nBIST does not send the GoodCRC Message while in a Continuous BIST Mode (see Section 6.4.3, \"BIST Message\").\nThe retry mechanism is triggered when the Message sender fails to receive a GoodCRC Message before the \nCRCReceiveTimer expires. It is used by the Message sender to detect that the Message was not correctly received \nby the Message recipient due to noise or other disturbance on the Configuration Channel (CC). The retry mechanism \nShall Not be used for any other purpose such as a means of gaining time for processing the required response to \nthe received Message.\n6.3.2\n  GotoMin Message (Deprecated)\nThe GotoMin (Deprecated) Message has been Deprecated. The 0_0010 Message Type is no longer Valid and Shall \nbe responded to by a Not_Supported Message.\n6.3.3\n  Accept Message\nThe Accept Message is a Valid response in the following cases:\n\nIt Shall be sent by the Source, in SPR Mode, to signal the Sink that the Source is willing to meet the \nRequest Message.\n\nIt Shall be sent by the Source, in EPR Mode, to signal the Sink that the Source is willing to meet the \nEPR_Request Message.\n\nIt Shall be sent by the recipient of the PR_Swap Message to signal that it is willing to do a Power Role \nSwap and has begun the Power Role Swap AMS.\n\nIt Shall be sent by the recipient of the DR_Swap Message to signal that it is willing to do a Data Role Swap \nand has begun the Data Role Swap AMS.\n\nIt Shall be sent by the recipient of the VCONN_Swap Message to signal that it is willing to do a VCONN Swap \nand has begun the VCONN Swap AMS.\n\nIt Shall be sent by the recipient of the FR_Swap Message to indicate that it has begun the Fast Role Swap \nAMS.\n\nIt Shall be sent by the recipient of the Soft_Reset Message to indicate that it has completed its Soft Reset.\n\nIt Shall be sent by the recipient of the Enter_USB Message to indicate that it has begun the Enter USB \nAMS.\n\nIt Shall be sent by the recipient of the Data_Reset Message to indicate that it has begun the Data Reset \nAMS.\nThe Accept Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section \n6.6.2, \"SenderResponseTimer\").\n6.3.4\n  Reject Message\nThe Reject Message is a Valid response in the following cases:\n\nIt Shall be sent to signal the Sink, in SPR Mode, that the Source is unable to meet the Request Message. \nThis May be due an Invalid request or because the Source can no longer provide what it previously \nAdvertised.\n","image_count":0,"table_count":1}
{"page":130,"text":"Page 130\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nIt Shall be sent to signal the Sink, in EPR Mode, that the Source is unable to meet the EPR_Request \nMessage. This May be due an Invalid request or because the Source can no longer provide what it \npreviously Advertised.\n\nIt Shall be sent by the recipient of a PR_Swap Message to indicate it is unable to do a Power Role Swap.\n\nIt Shall be sent by the recipient of a PR_Swap Message while in EPR Mode.\n\nIt Shall be sent by the recipient of a DR_Swap Message to indicate it is unable to do a Data Role Swap.\n\nIt Shall be sent by the recipient of a VCONN_Swap Message that is not presently the VCONN Source, to \nindicate it is unable to do a VCONN Swap.\n\nIt Shall be sent by UFP on receiving an Enter_USB Message to indicate it is unable to enter the requested \nUSB Mode.\nThe sender of a Request, EPR_Request, PR_Swap, DR_Swap, VCONN_Swap, or Enter_USB Message, on receiving a \nReject Message response, Shall Not send this same Message to the recipient until one of the following has occurred:\n\nA New Explicit Contract Negotiation as a result of the Source sending a Source_Capabilities Message or \nEPR_Source_Capabilities Message. This can be triggered by:\n\nThe Source's Device Policy Manager.\n\nA Get_Source_Cap Message sent from the Sink to the Source in SPR Mode.\n\nAn EPR_Get_Source_Cap Message sent from the Sink to the Source in EPR Mode.\n\nA Power Role Swap.\n\nA Soft Reset.\n\nA Hard Reset.\n\nA Disconnect/Re-connect.\n\nA Data Role Swap.\n\nA Data Reset.\nThe Sink May send a different Request Message to the one which was rejected but Shall Not repeat the same \nRequest Message, using the same RDO, unless there has been a New Explicit Contract Negotiation, Data Role Swap \nor Data Reset as described above.\nThe Reject Message Shall be sent within tReceiverResponse of the receipt of the last bit of Message (see Section \n6.6.2, \"SenderResponseTimer\"). \nNote:\nThe Reject Message is not a Valid response when a Message is not supported. In this case the \nNot_Supported Message is returned (see Section 6.3.16, \"Not_Supported Message\").\n6.3.5\n  Ping Message\nThe Ping (Deprecated) Message has been deprecated. The 0_0101 Message Type is no longer Valid.\nA Port that receives a Ping (Deprecated) Message May respond with a Not_Supported Message or Ignore the Ping \n(Deprecated) Message. A Cable Plug that receives a Ping (Deprecated) Message Shall Ignore the Ping (Deprecated) \nMessage.\n6.3.6\n  PS_RDY Message\nThe PS_RDY Message Shall be sent by the Source (or by both the New Sink and New Source during the Power Role \nSwap AMS or Fast Role Swap AMS) to indicate its power supply has reached the desired operating condition (see \nSection 8.3.2.2, \"Power Negotiation\").\n","image_count":0,"table_count":1}
{"page":131,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 131\n6.3.7\n  Get_Source_Cap Message\nThe Get_Source_Cap (Get Source Capabilities) Message May be sent by a Port to request the Source Capabilities and \nDual-Role Power capability of its Port Partner (e.g., Dual-Role Power capable). The Port Shall respond by returning \na Source_Capabilities Message (see Section 6.4.1.5, \"SPR Source Capabilities Message\").\n6.3.8\n  Get_Sink_Cap Message\nThe Get_Sink_Cap (Get Sink Capabilities) Message May be sent by a Port to request the Sink Capabilities and Dual-\nRole Power capability of its Port Partner (e.g., Dual-Role Power capable). The Port Shall respond by returning a \nSink_Capabilities Message (see Section 6.4.1.6, \"SPR Sink Capabilities Message\").\n6.3.9\n  DR_Swap Message\nThe DR_Swap Message is used to exchange DFP and UFP operation between Port Partners while maintaining the \ndirection of power flow over VBUS. The Data Role Swap process can be used by Port Partners whether or not they \nsupport USB Communications capability. A DFP that supports USB Communication capability starts as the USB Host \non Attachment. A UFP that supports USB Communication capability starts as the USB Device on Attachment.\n[USB Type-C 2.4] Dual-Role Data (DRD) Ports Shall have the capability to perform a Data Role Swap from the \nPE_SRC_Ready or PE_SNK_Ready states. DFPs and UFPs May have the capability to perform a Data Role Swap from \nthe PE_SRC_Ready or PE_SNK_Ready states. A Data Role Swap Shall be regarded in the same way as a cable Detach/\nRe-attach in relation to any USB Communication which is ongoing between the Port Partners. If there are any Active \nModes between the Port Partners when a DR_Swap Message is a received, then a Hard Reset Shall be performed \n(see Section 6.4.4.3.4, \"Enter Mode Command\"). If the Cable Plug has any Active Modes then the DFP Shall Not issue \na DR_Swap Message and Shall cause all Active Modes in the Cable Plug to be exited before accepting a Data Role \nSwap request.\nThe source of VBUS and VCONN Source Shall remain unchanged as well as the Rp/Rd resistors on the CC wire during \nthe Data Role Swap process.\nThe DR_Swap Message May be sent by either Port Partner. The recipient of the DR_Swap Message Shall respond \nby sending an Accept Message, a Wait Message or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\").\n\nIf an Accept Message is sent, the Source and Sink Shall exchange Data Roles.\n\nIf a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a \nData Role Swap and no action Shall be taken.\n\nIf a Wait Message is sent, the requester is informed that a Data Role Swap might be possible in the future \nbut that no immediate action Shall be taken.\nBefore a Data Role Swap the initial DFP Shall have its Port Data Role bit set to DFP, and the initial UFP Shall have \nits Port Data Role bit set to UFP.\nAfter a successful Data Role Swap the DFP/Host Shall become the UFP/Device and vice-versa; the new DFP Shall \nhave its Port Data Role bit set to DFP, and the new UFP Shall have its Port Data Role bit set to UFP. Where USB \nCommunication is supported by both Port Partners a USB data connection Should be established according to the \nnew Data Roles.\nIf the Data Role Swap, after having been accepted by the Port Partner, is subsequently not successful, in order to \nattempt a re-establishment of the connection, USB Type-C Error Recovery actions, such as disconnect, as defined in \n[USB Type-C 2.4] will be necessary.\nSee Section 8.3.2.9, \"Data Role Swap\".\n6.3.10\n  PR_Swap Message\nThe PR_Swap Message May be sent by either Port Partner to request an exchange of Power Roles. The recipient of \nthe Message Shall respond by sending an Accept Message, a Wait Message or a Reject Message (see Section 6.9, \n\"Accept, Reject and Wait\").\n","image_count":0,"table_count":1}
{"page":132,"text":"Page 132\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nIf an Accept Message is sent, the Source and Sink Shall do a Power Role Swap.\n\nIf a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a \nPower Role Swap and no action Shall be taken.\n\nIf a Wait Message is sent, the requester is informed that a Power Role Swap might be possible in the \nfuture but that no immediate action Shall be taken.\nThe PR_Swap Message Shall Not be sent while in EPR Mode. While in EPR Mode if a Power Role Swap is required, \nan EPR Mode exit Shall be done first.\nAfter a successful Power Role Swap the Port Partners Shall reset their respective Protocol Layers (equivalent to a \nSoft Reset): resetting their MessageIDCounter, RetryCounter and Protocol Layer state machines before attempting \nto establish the First Explicit Contract. At this point the New Source Shall also reset its CapsCounter. \nThe New Source Shall have Rp asserted on the CC wire and the New Sink Shall have Rd asserted on the CC wire as \ndefined in [USB Type-C 2.4]. When performing a Power Role Swap from Source to Sink, the Port Shall change its CC \nwire resistor from Rp to Rd. When performing a Power Role Swap from Sink to Source, the Port Shall change its CC \nwire resistor from Rd to Rp. The DFP (Host), UFP (Device) Data Roles and VCONN Source Shall remain unchanged by \nthe Power Role Swap process.\nNote:\nDuring the Power Role Swap process the Initial Sink does not disconnect even though VBUS drops below \nvSafe5V.\nFor more information regarding the Power Role Swap, refer to:\n\nSection 7.3.2, \"Transitions Caused by Power Role Swap\"\n\nSection 8.3.2.5, \"Data Reset\".\n\nSection 8.3.3.19.3, \"Policy Engine in Source to Sink Power Role Swap State Diagram\".\n\nSection 8.3.3.19.4, \"Policy Engine in Sink to Source Power Role Swap State Diagram\".\n\nSection 9.1.2, \"Mapping to USB Device States\".\n6.3.11\n  VCONN_Swap Message\nThe VCONN_Swap Message Shall be supported by any Port that can operate as a VCONN Source.\nThe VCONN_Swap Message May be sent by either Port Partner to request an exchange of VCONN Source. The recipient \nof the Message Shall respond by sending an Accept Message, Reject Message, Wait Message (see Section 6.9, \n\"Accept, Reject and Wait\") or Not_Supported Message.\n\nIf an Accept Message is sent, the Port Partners Shall perform a VCONN Swap. The new VCONN Source Shall \nsend a PS_RDY Message within tVcONNSourceOn to indicate that it is now sourcing VCONN. The initial \nVCONN Source Shall cease sourcing VCONN within tVCONNSourceOff of receipt of the last bit of the EOP of \nthe PS_RDY Message.\n\nIf a Reject Message is sent, the requester is informed that the recipient is unable, or unwilling, to do a \nVCONN Swap and no action Shall be taken. A Reject Message Shall only be sent by the Port that is not \npresently the VCONN Source in response to a VCONN_Swap Message. The Port that is presently the VCONN \nSource Shall Not send a Reject Message in response to VCONN_Swap Message. \n\nIf a Wait Message is sent, the requester is informed that a VCONN Swap might be possible in the future \nbut that no immediate action Shall be taken.   A Port after losing the VCONN Source role due to incoming \nVCONN Swap request Shall Not initiate a VCONN Swap until at least tVCONNSwapDelayDFP/\ntVCONNSwapDelayUFP after completing the previous VCONN Swap AMS.\n\nIf a Not_Supported Message is sent, the requester is informed that VCONN Swap is not supported. The \nPort that is not presently the VCONN Source May turn on VCONN when a Not_Supported Message is \nreceived in response to a VCONN_Swap Message.\n","image_count":0,"table_count":1}
{"page":133,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 133\nThe DFP (Host), UFP (Device) Data Roles and Source of VBUS Shall remain unchanged as well as the Rp/Rd resistors \non the CC wire during the VCONN Swap process.\nVCONN Shall be continually sourced during the VCONN Swap process to maintain power to the Cable Plug(s) i.e., make \nbefore break.\nBefore communicating with a Cable Plug a Port Shall ensure that it is the VCONN Source and that the Cable Plugs are \npowered, by performing a VCONN Swap if necessary. Since it cannot be guaranteed that the present VCONN Source is \nsupplying VCONN, the only means to ensure that the Cable Plugs are powered is for a Port wishing to communicate \nwith a Cable Plug to become the VCONN Source. If a Not_Supported Message is returned in response to the \nVCONN_Swap Message, then the Port is allowed to become the VCONN Source until a Hard Reset or Detach.\nA VCONN Source that is also a Source can attempt to send a Discover Identity Command using SOP’ to a Cable Plug \nprior to the establishment of the First Explicit Contract.\nNote:\nEven when it is presently the VCONN Source, the Sink is not permitted to initiate an AMS with a Cable Plug \nunless Rp is set to SinkTxOK (see Section 6.9, \"Accept, Reject and Wait\").\n6.3.12\n  Wait Message\nThe Wait Message is a Valid response to one of the following Messages:\n\nIt Shall be sent to signal the Sink, in response to a Request Message in SPR Mode during Negotiation, to \nindicate that the Source is currently unable to meet the request.\n\nIt Shall be sent to signal the Sink, in response to a EPR_Request Message in EPR Mode during \nNegotiation, to indicate that the Source is currently unable to meet the request.\n\nIt Shall be sent by the recipient of a PR_Swap Message to indicate it is currently unable to do a Power \nRole Swap.\n\nIt Shall be sent by the recipient of a DR_Swap Message to indicate it is currently unable to do a Data Role \nSwap.\n\nIt Shall be sent by the recipient of a VCONN_Swap Message that is not presently the VCONN Source to \nindicate it is currently unable to do a VCONN Swap.\n\nIt Shall be sent by the recipient of an Enter_USB Message to indicate it is currently unable to enter the \nrequested USB Mode.\nThe Wait Message Shall be sent within tReceiverResponse of the receipt of the last bit of the Message (see Section \n6.9, \"Accept, Reject and Wait\").\n6.3.12.1\n  Wait in response to a Request Message\nThe Wait Message allows the Source time to recover the power it requires to meet the request, e.g., through Re-\nnegotiation with other Sinks or an upstream Source. A Source Should only send a Wait Message in response to a \nRequest Message when an Explicit Contract exists between the Port Partners.\nThe Sink is allowed to repeat the Request Message using the SinkRequestTimer and Shall ensure that there is \ntSinkRequest after receiving the Wait Message before sending another Request Message.\n6.3.12.2\n  Wait in response to a PR_Swap Message\nThe Wait Message is used when responding to a PR_Swap Message to indicate that a Power Role Swap might be \npossible in the future. This can occur in any case where the device receiving the PR_Swap Message needs to \nevaluate the request further e.g., by requesting Sink Capabilities from the originator of the PR_Swap Message. Once \nit has completed this evaluation one of the Port Partners Should initiate the Power Role Swap process again by \nsending a PR_Swap Message.\nThe Wait Message is also used where a Hub is operating in hybrid mode when a request cannot be satisfied (see \n[UCSI]). \n","image_count":0,"table_count":1}
{"page":134,"text":"Page 134\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nA Port that receives a Wait Message in response to a PR_Swap Message Shall wait tPRSwapWait after receiving \nthe Wait Message before sending another PR_Swap Message.\n6.3.12.3\n  Wait in response to a DR_Swap Message\nThe Wait Message is used when responding to a DR_Swap Message to indicate that a Data Role Swap might be \npossible in the future. This can occur in any case where the device receiving the DR_Swap Message needs to \nevaluate the request further. Once it has completed this evaluation one of the Port Partners Should initiate the Data \nRole Swap process again by sending a DR_Swap Message.\nA Port that receives a Wait Message in response to a DR_Swap Message Shall wait tDRSwapWait after receiving \nthe Wait Message before sending another DR_Swap Message.\n6.3.12.4\n  Wait in response to a VCONN_Swap Message\nThe Wait Message is used when responding to a VCONN_Swap Message to indicate that a VCONN_Swap might be \npossible in the future. This can occur in any case where the device receiving the VCONN_Swap Message needs to \nevaluate the request further. Once it has completed this evaluation one of the Port Partners Should initiate the \nVCONN Swap process again by sending a VCONN_Swap Message.\nA Port that receives a Wait Message in response to a VCONN_Swap Message Shall wait tVCONNSwapWait after \nreceiving the Wait Message before sending another VCONN_Swap Message.\nA Port that is currently the VCONN Source Shall respond with an Accept Message (rather than a Wait Message) if the \nPort Partner's Revision and Version, as reported in the Revision Message, is earlier than R3.2 V1.1. A Port Partner \nsupporting an earlier Revision and Version will not expect a Wait Message and will generate a Soft Reset in response.\n6.3.12.5\n  Wait in response to an Enter_USB Message\nThe Wait Message is used, by the UFP, when responding to an Enter_USB Message to indicate that entering the \nrequested USB Mode might be possible in the future. This can occur, for example, in any case where the UFP needs \nto Negotiate more power to enter the mode. Once the UFP has completed this the DFP Should initiate the Enter USB \nprocess again by sending an Enter_USB Message.\nA DFP that receives a Wait Message in response to an Enter_USB Message Shall wait tEnterUSBWait after receiving \nthe Wait Message before sending another Enter_USB Message.\n6.3.13\n  Soft Reset Message\nA Soft_Reset Message May be initiated by either the Source or Sink to its Port Partner requesting a Soft Reset. The \nSoft_Reset Message Shall cause a Soft Reset of the connected Port Pair (see Section 6.8.1, \"Soft Reset and Protocol \nError\"). If the Soft_Reset Message fails a Hard Reset Shall be initiated within tHardReset of the last \nCRCReceiveTimer expiring after nRetryCount retries have been completed.\nA Soft_Reset Message is used to recover from Protocol Layer errors; putting the Message counters to a known state \nto regain Message synchronization. The Soft_Reset Message has no effect on the Source or Sink; that is the \npreviously Negotiated direction. Voltage and current remain unchanged. Modal Operation is unaffected by Soft \nReset. However after a Soft Reset has completed, an Explicit Contract Negotiation occurs, in order to re-establish PD \nCommunication and to bring state operation for both Port Partners back to either the PE_SNK_Ready or \nPE_SRC_Ready states as appropriate (see Section 8.3.3.4, \"SOP Soft Reset and Protocol Error State Diagrams\").\nA Soft_Reset Message May be sent by either the Source or Sink when there is a Message synchronization error. If \nthe error is not corrected by the Soft Reset, Hard Reset Signaling Shall be issued (see Section 6.8.3, \"Hard Reset\").\nA Soft_Reset Message Shall be targeted at a specific entity depending on the type of SOP* Packet used. Soft_Reset \nMessages sent using SOP Packets Shall Soft Reset the Port Partner only. Soft_Reset Messages sent using SOP’ Packet/\nSOP’’ Packets Shall Soft Reset the corresponding Cable Plug only.\nAfter a VCONN Swap the VCONN Source needs to reset the Cable Plug's Protocol Layer to ensure MessageID \nsynchronization. If after a VCONN Swap the VCONN Source wants to communicate with a Cable Plug using SOP’ \nPackets, it Shall issue a Soft_Reset Message using a SOP’ Packet in order to reset the Cable Plug's Protocol Layer. If \n","image_count":0,"table_count":1}
{"page":135,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 135\nthe VCONN Source wants to communicate with a Cable Plug using SOP’’ Packets, it Shall issue a Soft_Reset Message \nusing a SOP’’ Packet in order to reset the Cable Plug's Protocol Layer.\n6.3.14\n  Data_Reset Message\nThe Data_Reset Message May be sent by either the DFP or UFP and Shall reset the USB data connection and exit all \nAlternate Modes with its Port Partner while preserving the power on VBUS. USB4® Mode capable ports Shall support \nthe Data_Reset Message and other ports May support the Data_Reset Message.\nThe Data_Reset Message Shall Not change the existing:\n\nPower Contract\n\nData Roles (i.e., which Port is the DFP or UFP)\nThe receiver of the Data_Reset Message Shall respond by sending an Accept Message and then follow the process \noutlined in the following steps. Neither the sender nor receiver Shall initiate a VCONN Swap until the Data Reset \nprocess is complete, and the Data_Reset_Complete Message has been sent. Following receipt of the Accept \nMessage, or GoodCRC following the Accept, depending which Port sends the Data_Reset Message: \n1)\nThe DFP Shall:\n\nDisconnect the Port's [USB 2.0] D+/D- signals.\n\nIf operating in [USB 3.2] remove the Port's Rx Terminations (see [USB 3.2]).\n\nIf operating in [USB4] drive the Port's SBTX to a logic low (see [USB4]).\n2)\nBoth the DFP and UFP Shall exit all Alternate Modes if any.\n3)\nReset the cable:\n\nIf the VCONN Source Port is also the UFP, then it Shall run the UFP VCONN Power Cycle process de-\nscribed in Section 7.1.15.1, \"UFP VCONN Power Cycle\".\n\nIf the VCONN Source Port is also the DFP, then it Shall run the DFP VCONN Power Cycle process de-\nscribed in Section 7.1.15.2, \"DFP VCONN Power Cycle\".\n\nThe DFP Shall exit the VCONN Power Cycle process as the VCONN Source and be sourcing VCONN.\n4)\nAfter tDataReset the DFP Shall:\n\nReconnect the [USB 2.0] D+/D- signals.\n\nIf the Port was operating in [USB 3.2] or [USB4] reapply the Port's Rx Terminations (see [USB 3.2]).\n5)\nThe Data Reset process is complete; the DFP Shall send a Data_Reset_Complete Message and enter the \nUSB4® Discovery and Entry Flow (See [USB Type-C 2.4]).\nIf the Initiator of the Data_Reset Message does not receive a Valid response within tSenderResponse it Shall enter \nthe ErrorRecovery State.\n6.3.15\n  Data_Reset_Complete Message\nThe Data_Reset_Complete Message Shall be sent by the DFP to the UFP to indicate the completion of the Data Reset \nprocess (see Section 6.3.14, \"Data_Reset Message\").\n6.3.16\n  Not_Supported Message\nThe Not_Supported Message Shall be sent by a Port or Cable Plug in response to any Message it does not support. \nReturning a Not_Supported Message is assumed in this specification and has not been called out explicitly except \nin Section 6.13, \"Message Applicability\" which defines cases where the Not_Supported Message is returned.\n","image_count":0,"table_count":1}
{"page":136,"text":"Page 136\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.3.17\n  Get_Source_Cap_Extended Message\nThe Get_Source_Cap_Extended Message is sent by a Port to request additional information about a Port's Source \nCapabilities. The Port Shall respond by returning a Source_Capabilities_Extended Message (see Section 6.5.1, \n\"Source_Capabilities_Extended Message\").\n6.3.18\n  Get_Status Message\nThe Get_Status Message is sent by a Port using SOP to request the Port Partner's present status. \nThe Port Partner Shall respond by returning a Status Message (see Section 6.5.2, \"Status Message\"). A Port that \nreceives an Alert Message (see Section 6.4.6, \"Alert Message\") indicates that the Source or Sink's Status has changed \nand Should be re-read using a Get_Status Message.\nThe Get_Status Message May also be sent to an Active Cable to get its present status using SOP’/SOP’’. \nThe Active Cable Shall respond by returning a Status Message (see Section 6.5.2, \"Status Message\"). \n6.3.19\n  FR_Swap Message\nThe FR_Swap Message Shall be sent by the New Source within tFRSwapInit after it has detected a Fast Role Swap \nsignal (see Section 5.8.6.3, \"Fast Role Swap Detection\" and Section 6.6.17.3, \"tFRSwapInit\"). The Fast Role Swap AMS \nis necessary to apply Rp to the New Source and Rd to the New Sink and to re-synchronize the state machines. The \ntFRSwapInit time Shall be measured from the time the Fast Role Swap Request has been sent for tFRSwapRx (max) \nuntil the last bit of the EOP of the FR_Swap Message has been transmitted by the PHY Layer.\nThe recipient of the FR_Swap Message Shall respond by sending an Accept Message.\nAfter a successful Fast Role Swap the Port Partners Shall reset their respective Protocol Layers (equivalent to a Soft \nReset): resetting their MessageIDCounter, RetryCounter and Protocol Layer state machines before attempting to \nestablish the First Explicit Contract. At this point the Source Shall also reset its CapsCounter. \nThis ensures that only the Cable Plug responds with a GoodCRC Message to the Discover Identity Command.\nPrior to the Fast Role Swap AMS, the New Source Shall have Rd asserted on the CC wire and the New Sink Shall have \nRp asserted on the CC wire.\nNote:\nThis is an incorrect assignment of Rp/Rd (since Rp follows the Source and Rd follows the Sink as defined \nin [USB Type-C 2.4]) that is corrected by the Fast Role Swap AMS.\nDuring the Fast Role Swap AMS, the New Source Shall change its CC wire resistor from Rd to Rp and the New Sink \nShall change its CC wire resistor from Rp to Rd. The DFP (Host), UFP (Device) Data Roles and VCONN Source Shall \nremain unchanged during the Fast Role Swap process.\nThe Initial Source Should avoid being the VCONN Source (by using the VCONN Swap process) whenever not actively \ncommunicating with the cable, since it is difficult for the Initial Source to maintain VCONN power during the Fast Role \nSwap process.\nNote:\nA Fast Role Swap is a \"best effort\" solution to a situation where a PDUSB Device has lost its external \npower. This process can occur at any time, even during an AMS in which case error handling such as Hard \nReset or [USB Type-C 2.4] Error Recovery will be triggered.\nNote:\nDuring the Fast Role Swap process the Initial Sink does not disconnect even though VBUS drops below \nvSafe5V.\nFor more information regarding the Fast Role Swap process, refer to:\n\nSection 7.1.13, \"Fast Role Swap\"\n\nSection 7.2.10, \"Fast Role Swap\"\n\nSection 8.3.3.19.5, \"Policy Engine in Source to Sink Fast Role Swap State Diagram\"\n\nSection 8.3.3.19.6, \"Policy Engine in Sink to Source Fast Role Swap State Diagram\"\n","image_count":0,"table_count":1}
{"page":137,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 137\n\nSection 9.1.2, \"Mapping to USB Device States\" for VBUS mapping to USB states.\n6.3.20\n  Get_PPS_Status\nThe Get_PPS_Status Message is sent by the Sink to request additional information about a Source's status. The Port \nShall respond by returning a PPS_Status Message (see Section 6.5.10, \"PPS_Status Message\").\n6.3.21\n  Get_Country_Codes\nThe Get_Country_Codes Message is sent by a Port to request the alpha-2 country codes its Port Partner supports as \ndefined in [ISO 3166]. The Port Partner Shall respond by returning a Country_Codes Message (see Section 6.5.11, \n\"Country_Codes Message\").\n6.3.22\n  Get_Sink_Cap_Extended Message\nThe Get_Sink_Cap_Extended (Get Sink Capabilities Extended) Message is sent by a Port to request additional \ninformation about a Port's Sink Capabilities. The Port Shall respond by returning a Sink_Capabilities_Extended \nMessage (see Section 6.5.13, \"Sink_Capabilities_Extended Message\").\n6.3.23\n  Get_Source_Info Message\nThe Get_Source_Info Message is sent by a Port to request the type, maximum Capabilities and present Capabilities \nof the Port when it is operating as a Source. The Port Shall respond by returning the Source_Info Message (See \nSection 6.4.11, \"Source_Info Message\").\n6.3.24\n  Get_Revision Message\nThe Get_Revision Message is sent by a Port using SOP to request the Revision and Version of the Power Delivery \nSpecification its Port Partner supports. \nThe Port Partner Shall respond by returning a Revision Message (See Section 6.4.12, \"Revision Message\").\nThe Get_Revision Message May also be sent to a Cable Plug to request the Revision and Version of the Power \nDelivery Specification it supports using SOP’/SOP’’. \nThe Active Cable Shall respond by returning a Revision Message (see Section 6.4.12, \"Revision Message\").\n","image_count":0,"table_count":1}
{"page":138,"text":"Page 138\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4\n  Data Message\nA Data Message Shall consist of a Message Header and be followed by one or more Data Objects. Data Messages are \neasily identifiable because the Number of Data Objects field in the Message Header is a non-zero value.\nThere are many types of Data Objects used to compose Data Messages. Some examples are:\n\nPower Data Object (PDO) used to expose a Source Port's power Capabilities or a Sink's power \nrequirements.\n\nRequest Data Object (RDO) used by a Sink Port to Negotiate an Explicit Contract.\n\nVendor Data Object (VDO) used to convey vendor specific information.\n\nBIST Data Object (BDO) used for PHY Layer compliance testing.\n\nBattery Status Data Object (BSDO) used to convey Battery status information.\n\nAlert Data Object (ADO) used to indicate events occurring on the Source or Sink.\nThe type of Data Object being used in a Data Message is defined by the Message Header's Message Type field and \nis summarized in Table 6.6, \"Data Message Types\". The Sent by column indicates entities which May send the given \nMessage (Source, Sink or Cable Plug); entities not listed Shall Not issue the corresponding Message. The \"Valid Start \nof Packet\" column indicates the Messages which Shall only be issued in SOP Packets and the Messages which May \nbe issued in SOP* Packets.\nTable 6.6  Data Message Types\nBits 4…0\nType\nSent by\nDescription\nValid Start of \nPacket\n0_0000\nReserved\nN/A\nAll values not explicitly defined are \nReserved and Shall Not be used.\nN/A\n0_0001\nSource_Capabilities\nSource or Dual-Role Power\nSee Section 6.4.1.5\nSOP only\n0_0010\nRequest\nSink only\nSee Section 6.4.2\nSOP only\n0_0011\nBIST\nTester, Source or Sink\nSee Section 6.4.3\nSOP*\n0_0100\nSink_Capabilities\nSink or Dual-Role Power\nSee Section 6.4.2\nSOP only\n0_0101\nBattery_Status\nSource or Sink\nSee Section 6.4.5\nSOP only\n0_0110\nAlert\nSource or Sink\nSee Section 6.4.6\nSOP only\n0_0111\nGet_Country_Info\nSource or Sink\nSee Section 6.4.7\nSOP only\n0_1000\nEnter_USB\nDFP\nSee Section 6.4.8\nSOP*\n0_1001\nEPR_Request\nSink\nSee Section 6.4.9\nSOP only\n0_1010\nEPR_Mode\nSource or Sink\nSee Section 6.4.10\nSOP only\n0_1011\nSource_Info\nSource\nSee Section 6.4.11\nSOP only\n0_1100\nRevision\nSource, Sink or Cable Plug\nSee Section 6.4.12\nSOP*\n0_1101…0\n_1110\nReserved\nN/A\nAll values not explicitly defined are \nReserved and Shall Not be used.\nN/A\n0 1111\nVendor_Defined\nSource, Sink or Cable Plug\nSee Section 6.4.4\nSOP*\n1_0000…1\n_1111\nReserved\nN/A\nAll values not explicitly defined are \nReserved and Shall Not be used.\nN/A\n","image_count":0,"table_count":2}
{"page":139,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 139\n6.4.1\n  Capabilities Message\nThere are two distinct Capabilities Messages: one used while in SPR Mode and another while in EPR Mode. This \nsection defines the Capabilities Messages specific to the SPR Mode and Section 6.5.15, \"EPR Capabilities Message\" \ndefines the Capabilities Messages specific to the EPR Mode.\n6.4.1.1\n  Power Data Objects\nSections Section 6.4.1.5, \"SPR Source Capabilities Message\" and Section 7.1.3, \"Types of Sources\" describes the Power \nData Objects (PDOs) used in the construction of a Capabilities Message for both SPR Mode and EPR Mode.\nThere are three types of Power Data Objects. They contain additional information beyond that encoded in the \nMessage Header to identify each of the three types of Power Data Objects:\n\nFixed Supply is used to expose well-regulated fixed voltage power supplies.\n\nVariable Supply is used to expose very poorly regulated power supplies. \n\nBattery Supply is used to expose batteries that can be directly connected to VBUS.\nThere are three types of Augmented Power Data Objects:\n\nSPR PPS is used to expose a power supply whose output voltage can be programmatically adjusted over \nthe Advertised voltage range and limited by the Source to a programmable current limit.\n\nSPR AVS and EPR AVS are used to expose a power supply whose output voltage can be adjusted over the \nAdvertised voltage range but otherwise is equivalent to a Fixed Supply (AVS does not support a \nprogrammable current limit).\nPower Data Objects are also used to expose additional Capabilities that May be utilized, such as in the case of a \nPower Role Swap.\nA list of one or more Power Data Objects Shall be sent by the Source to convey its Capabilities. The Sink May then \nrequest one of these Capabilities by returning a Request Data Object that contains an index to a Power Data Object, \nto Negotiate a mutually agreeable Explicit Contract.\nWhere Maximum and Minimum voltage and current values are given in PDOs these Shall be taken to be absolute \nvalues.\nThe Source and Sink Shall Not Negotiate a power level that would allow the current to exceed the maximum current \nsupported by their receptacles or the Attached plug (see [USB Type-C 2.4]). The Source Shall limit its offered \nCapabilities to the maximum current supported by its receptacle and Attached plug. A Sink Shall only make a \nrequest from any of the Capabilities offered by the Source. For further details see Section 4.4, \"Cable Type Detection\".\nSources expose their power Capabilities by sending a Source_Capabilities Message. Sinks expose their power \nrequirements by sending a Sink_Capabilities Message. Both are composed of several 32-bit Power Data Objects \n(see Table 6.7, \"Power Data Object\").\nTable 6.7  Power Data Object\nBit(s)\nDescription\nValue\nParameter\nB31…30\n00b\nFixed Supply (Vmin = Vmax)\n01b\nBattery\n10b\nVariable Supply (non-Battery)\n11b\nAugmented Power Data Object (APDO)\nB29…0\nSpecific Power Capabilities are described by the PDOs in the following sections.\n","image_count":0,"table_count":2}
{"page":140,"text":"Page 140\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Augmented Power Data Object (APDO) is defined to allow support for more than the four PDO types by \nextending the Power Data Object field from 2 to 4 bits when the B31…B30 are 11b. The generic APDO structure is \nshown in Table 6.8, \"Augmented Power Data Object\".\nTable 6.8  Augmented Power Data Object\nBit(s)\nDescription\nValue\nParameter\nB31…30\n11b\nAugmented Power Data Object (APDO)\nB29…28\n00b\nSPR PPS\n01b\nEPR AVS\n10b\nSPR AVS\n11b\nReserved\nB27…0\nSpecific Power Capabilities are described by the APDOs in the following sections.\n","image_count":0,"table_count":2}
{"page":141,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 141\n6.4.1.2\n  Source Power Data Objects\nThis section lists the types of PDOs a Source can use in an SPR Capabilities or EPR Capabilities Message.\n6.4.1.2.1\n  Fixed Supply Power Data Object \nTable 6.9, \"Fixed Supply PDO – Source\" describes the Fixed Supply (00b) PDO. See Section 7.1.3, \"Types of Sources\"for \nthe electrical requirements of the power supply.\nSince all USB Providers support vSafe5V, the required vSafe5V Fixed Supply Power Data Object is also used to \nconvey additional information that is returned in bits 29…23. All other Fixed Supply Power Data Objects Shall set \nbits 29…23 to zero.\nFor a Source offering no Capabilities, the Voltage field (B19…10) Shall be set to 5V and theMaximum Current field \nShall be set to 0mA. This is used in cases such as a Dual-Role Power device which offers no Capabilities in its default \nPower Role or when external power is required to offer power.\nWhen a Source wants a Sink, consuming power from VBUS, to go to its lowest power state, the Voltage field \n(B19…10) Shall be set to 5V and the Maximum Current field Shall be set to 0mA. This is used in cases where the \nSource wants the Sink to draw pSnkSusp.\n6.4.1.2.1.1\n  Dual-Role Power\nThe Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable i.e., supports the PR_Swap Message. \nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role. \nIf the Dual-Role Power bit is set to one in the Source_Capabilities Message the Dual-Role Power bit in the \nSink_Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the \nSource_Capabilities Message the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to zero.\n6.4.1.2.1.2\n  USB Suspend Supported\nPrior to an Explicit Contract or when the USB Communications Capable bit is set to zero, the USB Suspend \nSupported flag is undefined and Sinks Shall follow the rules for suspend as defined in [USB 2.0], [USB 3.2], [USB4], \n[USB Type-C 2.4] or [USBBC 1.2]. After an Explicit Contract has been Negotiated:\n\nIf the USB Suspend Supported flag is set, then the Sink Shall follow the [USB 2.0], [USB 3.2] or [USB4] \nrules for suspend and resume. A PDUSB Peripheral May draw up to pSnkSusp during suspend; a PDUSB \nHub May draw up to pHubSusp during suspend (see Section 7.2.3, \"Sink Standby\").\nTable 6.9  Fixed Supply PDO – Source\nBit(s)\nField\nDescription\nB31…30\nFixed Supply\n00b - Fixed Supply PDO\nB29\nDual-Role Power\nSet to ‘1’ for Dual-Role Power device.\nB28\nUSB Suspend Supported\nSet to ‘1’ if USB suspend is supported.\nB27\nUnconstrained Power\nSet to ‘1’ if unconstrained power is available.\nB26\nUSB Communications Capable\nSet to ‘1’ if capable of USB Communications capable\nB25\nDual-Role Data\nSet to ‘1’ for a Dual-Role Data device.\nB24\nUnchunked Extended Messages \nSupported\nSet to ‘1 if Unchunked Extended Messages are supported.\nB23\nEPR Capable\nSet to ‘1 if EPR Capable.\nB22\nReserved\nReserved – Shall be set to zero.\nB21…20\nPeak Current\nPeak Current value.\nB19…10\nVoltage\nVoltage in 50mV units\nB9…0\nMaximum Current\nMaximum current in 10mA units \n","image_count":0,"table_count":2}
{"page":142,"text":"Page 142\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nIf the USB Suspend Supported flag is cleared, then the Sink Shall Not apply the [USB 2.0], [USB 3.2] or \n[USB4] rules for suspend and May continue to draw the Negotiated power. \nNote:\nWhen USB is suspended, the USB device state is also suspended.\nSinks May indicate to the Source that they would prefer to have the USB Suspend Supported flag cleared by setting \nthe No USB Suspend flag in a Request Message (see Section 6.4.2.5, \"No USB Suspend\").\n6.4.1.2.1.3\n  Unconstrained Power\nThe Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to \nadequately power the system while charging external devices, or when the device's primary function is to charge \nexternal devices.\nTo set the Unconstrained Power bit because of an external source, the external source of power Should be either:\n\nAn AC Supply, e.g., a Charger, directly connected to the Sink.\n\nOr, in the case of a PDUSB Hub:\n\nA PD Source with its Unconstrained Power bit set.\n\nMultiple PD Sources all with their Unconstrained Power bits set.\n6.4.1.2.1.4\n  USB Communications Capable\nThe USB Communications Capable bit Shall only be set for Sources capable of communication over the USB data \nlines (e.g., D+/- or SS Tx/Rx).\n6.4.1.2.1.5\n  Dual-Role Data\nThe Dual-Role Data bit Shall be set when the Port is Dual-Role Data capable i.e., it supports the DR_Swap Message. \nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role \nor Data Role. If the Dual-Role Data bit is set to one in the Source_Capabilities Message the Dual-Role Data bit in \nthe Sink_Capabilities Message Shall also be set to one. If the Dual-Role Data bit is set to zero in the \nSource_Capabilities Message the Dual-Role Data bit in the Sink_Capabilities Message Shall also be set to zero.\n6.4.1.2.1.6\n  Unchunked Extended Messages Supported\nThe Unchunked Extended Messages Supported bit Shall be set when the Port can send and receive Extended \nMessages with Data Size > MaxExtendedMsgLegacyLen bytes in a single, Unchunked Extended Message.\n6.4.1.2.1.7\n  EPR Mode Capable\nThe EPR Capable bit is a Static bit that Shall be set if the Source is designed to supply more than 100W and operate \nin EPR Mode.\nWhen this bit is set, an EPR Source:\n\nOperating in SPR Mode Shall only send an EPR_Source_Capabilities Message in response to an \nEPR_Get_Source_Cap Message\n\nMay only enter EPR Mode when the Cable and the Sink also report that they are EPR Capable.\n6.4.1.2.1.8\n  Peak Current\nThe USB Power Delivery Fixed Supply is only required to deliver the amount of current requested in the Operating \nCurrent field (IoC) of an RDO. In some usages however, for example computer systems, where there are short \nbursts of activity, it might be desirable to overload the Source for short periods.\nFor example, when a computer system tries to maintain average power consumption, the higher the peak current, \nthe longer the low current (see Section 7.2.8, \"Sink Peak Current Operation\") period needed to maintain such \naverage power. The Peak Current field allows a Source to Advertise this additional capability. This capability is \nintended for direct Port to Port connections only and Shall Not be offered to downstream Sinks via a Hub.\n","image_count":0,"table_count":1}
{"page":143,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 143\nEvery Fixed Supply PDO Shall contain a Peak Current field. Supplies that want to offer a set of overload Capabilities \nShall Advertise this through the Peak Current field in the corresponding Fixed Supply PDO (see Table 6.10, \"Fixed \nPower Source Peak Current Capability\"). Supplies that do not support an overload capability Shall set these bits to \n00b in the corresponding Fixed Supply PDO. Supplies that support an extended overload capability specified in the \nPeakCurrent1…3 fields of the Source_Capabilities_Extended Message (see Section 6.5.1, \n\"Source_Capabilities_Extended Message\") Shall also set these bits to 00b. Sinks wishing to utilize these Extended \nCapabilities Shall first send the Get_Source_Cap_Extended Message to determine what Capabilities, if any are \nsupported by the Source.\n6.4.1.2.2\n  Variable Supply (non-Battery) Power Data Object\nTable 6.11, \"Variable Supply (non-Battery) PDO – Source\" describes a Variable Supply (non-Battery) (10b) PDO for \na Source. See Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall define the range that output voltage Shall fall within. This does not indicate the voltage that \nwill be supplied, except it Shall fall within that range. The absolute voltage, including any voltage variation, Shall \nNot fall below the Minimum Voltage field value and Shall Not exceed the Maximum Voltage field value. The \nMinimum Voltage field value Shall Not be less than 80% of the Maximum Voltage field value.\n6.4.1.2.3\n  Battery Supply Power Data Object \nTable 6.12, \"Battery Supply PDO – Source\" describes a Battery Supply (01b) PDO for a Source. See Section 7.1.3, \n\"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall represent the Battery's voltage range. The Battery Shall be capable of supplying the Power \nvalue over the entire voltage range. The absolute voltage, including any voltage variation, Shall Not fall below the \nMinimum Voltage field value and Shall Not exceed the Maximum Voltage field value.\nNote:\nThe Battery Supply PDO uses power instead of current.\nTable 6.10  Fixed Power Source Peak Current Capability\nBits 21…20\nDescription\n00\nPeak current equals IoC (default) or look at the Source_Capabilities_Extended Message (send \nGet_Source_Cap_Extended Message)\n01\nOverload Capabilities:\n1.\nPeak current equals 150% IoC for 1ms @ 5% duty cycle (low current equals 97% IoC for 19ms)\n2.\nPeak current equals 125% IoC for 2ms @ 10% duty cycle (low current equals 97% IoC for 18ms)\n3.\nPeak current equals 110% IoC for 10ms @ 50% duty cycle (low current equals 90% IoC for 10ms)\n10\nOverload Capabilities:\n1.\nPeak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2.\nPeak current equals 150% IoC for 2ms @ 10% duty cycle (low current equals 94% IoC for 18ms)\n3.\nPeak current equals 125% IoC for 10ms @ 50% duty cycle (low current equals 75% IoC for 10ms)\n11\nOverload Capabilities:\n1.\nPeak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2.\nPeak current equals 175% IoC for 2ms @ 10% duty cycle (low current equals 92% IoC for 18ms)\n3.\nPeak current equals 150% IoC for 10ms @ 50% duty cycle (low current equals 50% IoC for 10ms)\nTable 6.11  Variable Supply (non-Battery) PDO – Source\nBit(s)\nField\nDescription\nB31…30\nVariable Supply\n01b - Variable Supply (non-Battery) PDO\nB29…20\nMaximum Voltage\nMaximum voltage in 50mV units \nB19…10\nMinimum Voltage\nMinimum voltage in 50mV units\nB9…0\nMaximum Current\nMaximum current in 10mA units\n","image_count":0,"table_count":3}
{"page":144,"text":"Page 144\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Sink May monitor the Battery voltage.\nTable 6.12  Battery Supply PDO – Source\nBit(s)\nField\nDescription\nB31…30\nBattery Supply\n10b - Battery Supply PDO\nB29…20\nMaximum Voltage\nMaximum voltage in 50mV units\nB19…10\nMinimum Voltage\nMinimum voltage in 50mV units\nB9…0\nMaximum Allowable Power\nMaximum allowable power in 250mW units\n","image_count":0,"table_count":2}
{"page":145,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 145\n6.4.1.2.4\n  Augmented Power Data Object (APDO)\nThe voltage fields define the output voltage range over which the power supply Shall be adjustable in 20mV steps \nin SPR PPS Mode and 100mV steps in both SPR AVS Mode and EPR AVS Mode. The Maximum Current field contains \nthe current the Programmable Power Supply Shall be capable of delivering over the Advertised voltage range. See \nSection 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply. \n6.4.1.2.4.1\n  SPR Programmable Power Supply APDO\nTable 6.13, \"SPR Programmable Power Supply APDO – Source\" below describes the SPR PPS (1100b) APDO for a \nSource operating in SPR Mode and supplying 5V up to 21V.\nThe PPS APDO is used primarily for Sink Directed Charge Directed Charge of a Battery in the Sink. When applying a \ncurrent to the Battery greater than the cable supports, a high efficiency fixed voltage scaler May be used in the Sink \nto reduce the cable current.\n6.4.1.2.4.1.1\n  PPS Power Limited\nWhen the PPS Power Limited bit is set, the SPR PPS Source Shall operate in the same way as if the PPS Power \nLimited bit is clear (see Section 7.1.4.2, \"SPR Programmable Power Supply (PPS)\" with the below exception:\n\nMay supply power that exceeds the Source's rated PDP within the Optional operating area in Figure 7.7, \n\"SPR PPS Constant Power\".\nWhen the PPS Power Limited bit is cleared, the SPR PPS Source Shall deliver the Maximum Current field value up \nto the Maximum Voltage as Advertised in its APDO.\nThe SPR PPS Source Shall Not reject an RDO with an Operating Current field value that is less than or equal to the \nMaximum Current field value in the APDO even if the requested Operating Current field value is greater than the \nSource's PDP/requested Output voltage.\nTable 6.13  SPR Programmable Power Supply APDO – Source\nBit(s)\nField\nDescription\nB31…30\nAPDO\n11b – Augmented Power Data Object (APDO)\nB29…28\nSPR PPS\n00b – SPR PPS\nB27\nPPS Power Limited\nSet to ‘1’ when PPS Power Limited\nB26…25\nReserved\nReserved – Shall be set to zero.\nB24…17\nMaximum Voltage\nMaximum voltage in 100mV increments \nB16\nReserved\nReserved – Shall be set to zero.\nB15…8\nMinimum Voltage\nMinimum voltage in 100mV increments\nB7\nReserved\nReserved – Shall be set to zero.\nB6...0\nMaximum Current\nMaximum current in 50mA increments\n","image_count":0,"table_count":2}
{"page":146,"text":"Page 146\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.1.2.4.2\n  SPR Adjustable Voltage Supply APDO\nTable 6.14, \"SPR Adjustable Voltage Supply APDO – Source\" below describes the SPR AVS (1110b) APDO for a Source \noperating in SPR Mode and supplying 9V up to 20V. \n6.4.1.2.4.2.1\n  Peak Current\nThe Peak Current field follows the same definition as for the Peak Current field (see Section 6.4.1.2.1.8, \"Peak \nCurrent\" and Table 6.10, \"Fixed Power Source Peak Current Capability\".\n6.4.1.2.4.3\n  EPR Adjustable Voltage Supply APDO\nTable 6.15, \"EPR Adjustable Voltage Supply APDO – Source\" below describes the EPR AVS (1101b) APDO for a Source \noperating in EPR Mode and supplying 15V up to 48V. \n6.4.1.2.4.3.1\n  PDP\nThe PDP field Shall contain the AVS Port's PDP.\nSee Section 10.2.3.3, \"Optional Normative Extended Power Range (EPR)\" and Figure 10.6, \"Valid EPR AVS Operating \nRegion\" for more information regarding how PDP in the AVS APDO relates to maximum available current.\n6.4.1.2.4.3.2\n  Peak Current\nThe USB Power Delivery EPR AVS is only required to deliver the amount of current requested in the Operating \nCurrent field (IoC) of an AVS RDO. In some usages however, for example computer systems, where there are short \nbursts of activity, it might be desirable to overload the Source for short periods.\nFor example, when a computer system tries to maintain average power consumption, the higher the peak current, \nthe longer the low current period needed to maintain such average power (see Section 7.2.8, \"Sink Peak Current \nOperation\"). The Peak Current (Source EPR AVS) field allows a Source to Advertise this additional capability. This \nTable 6.14  SPR Adjustable Voltage Supply APDO – Source\nBit(s)\nField\nDescription\nB31…30 APDO\n11b – Augmented Power Data Object (APDO)\nB29…28 SPR AVS\n10b – SPR AVS\nB27…26\nPeak Current\nPeak Current (see Table 6.10, \"Fixed Power Source Peak Current \nCapability\"))\nB25…20 Reserved\nReserved – Shall be set to zero.\nB19…10\nMaximum Current 15V\nFor 9V – 15V range: Maximum current in 10mA units equal to the \nMaximum Current field of the 15V Fixed Supply PDO\nB9…0\nMaximum Current 20V\nFor 15V – 20V range: Maximum current in 10mA units equal to the \nMaximum Current field of the 20V Fixed Supply PDO, set to 0 if the \nmaximum voltage in the SPR AVS range is 15V.\nTable 6.15  EPR Adjustable Voltage Supply APDO – Source\nBit(s)\nField\nDescription\nB31…30\nAPDO\n11b – Augmented Power Data Object (APDO)\nB29…28\nEPR AVS\n01b – EPR AVS\nB27…26\nPeak Current (Source EPR AVS)\nPeak Current (see Table 6.16, \"EPR AVS Power Source Peak Current \nCapability\")\nB25…17\nMaximum Voltage\nMaximum voltage in 100mV increments \nB16\nReserved\nReserved – Shall be set to zero.\nB15…8\nMinimum Voltage\nMinimum voltage in 100mV increments\nB7…0\nPDP\nPDP in 1W increments\n","image_count":0,"table_count":3}
{"page":147,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 147\ncapability is intended for direct Port to Charger connections only and Shall Not be offered to downstream Sinks via \na Hub.\nEvery EPR AVS APDO Shall contain a Peak Current (Source EPR AVS) field. Supplies that want to offer a set of \noverload Capabilities Shall Advertise this through the Peak Current (Source EPR AVS) field in the corresponding \nEPR AVS APDO (see Table 6.16, \"EPR AVS Power Source Peak Current Capability\". Supplies that do not support an \noverload capability Shall set these bits to 00b in the corresponding EPR AVS APDO. Supplies that support an \nextended overload capability specified in the PeakCurrent1…3 fields of the Source_Capabilities_Extended \nMessage (see Section 6.5.1, \"Source_Capabilities_Extended Message\") Shall set these bits to 00b. Sinks wishing to \nutilize these Extended Capabilities Shall first send a Get_Source_Cap_Extended Message to determine what \nCapabilities, if any are supported by the Source.\nTable 6.16  EPR AVS Power Source Peak Current Capability\nBits 21…20\nDescription\n00\nPeak current equals IoC (default) or look at the Source_Capabilities_Extended Message (send \nGet_Source_Cap_Extended Message)\n01\nOverload Capabilities:\n1.\nPeak current equals 150% IoC for 1ms @ 5% duty cycle (low current equals 97% IoC for 19ms)\n2.\nPeak current equals 125% IoC for 2ms @ 10% duty cycle (low current equals 97% IoC for 18ms)\n3.\nPeak current equals 110% IoC for 10ms @ 50% duty cycle (low current equals 90% IoC for 10ms)\n10\nOverload Capabilities:\n1.\nPeak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2.\nPeak current equals 150% IoC for 2ms @ 10% duty cycle (low current equals 94% IoC for 18ms)\n3.\nPeak current equals 125% IoC for 10ms @ 50% duty cycle (low current equals 75% IoC for 10ms)\n11\nOverload Capabilities:\n1.\nPeak current equals 200% IoC for 1ms @ 5% duty cycle (low current equals 95% IoC for 19ms)\n2.\nPeak current equals 175% IoC for 2ms @ 10% duty cycle (low current equals 92% IoC for 18ms)\n3.\nPeak current equals 150% IoC for 10ms @ 50% duty cycle (low current equals 50% IoC for 10ms)\n","image_count":0,"table_count":2}
{"page":148,"text":"Page 148\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.1.3\n  Sink Power Data Objects\nThis section lists the types of PDOs a Sink can use in an SPR or EPR Capabilities Message.\n6.4.1.3.1\n  Sink Fixed Supply Power Data Object\nTable 6.17, \"Fixed Supply PDO – Sink\" describes the Sink Fixed Supply (00b) PDO. See Section 7.1.3, \"Types of Sources\" \nfor the electrical requirements of the power supply. The Sink Shall set the Voltage field to its required voltage and \nthe Operational Current field to its required operating current. Required operating current is defined as the \namount of current a given device needs to be functional. This value could be the maximum current the Sink will \never require or could be sufficient to operate the Sink in one of its modes of operation.\nSince all USB Consumers support vSafe5V, the required vSafe5V Fixed Supply Power Data Object is also used to \nconvey additional information that is returned in bits 29 through 20. All other Fixed Supply Power Data Objects \nShall set bits 29…20 to zero.\nFor a Sink requiring no power from the Source, the Voltage field Shall be set to 5V and the Operational Current \nfield Shall be set to 0mA.\n6.4.1.3.1.1\n  Dual-Role Power\nThe Dual-Role Power bit Shall be set when the Port is Dual-Role Power capable i.e., supports the PR_Swap Message. \nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role. \nIf the Dual-Role Power bit is set to one in the Source_Capabilities Message the Dual-Role Power bit in the \nSink_Capabilities Message Shall also be set to one. If the Dual-Role Power bit is set to zero in the \nSource_Capabilities Message the Dual-Role Power bit in the Sink_Capabilities Message Shall also be set to zero.\n6.4.1.3.1.2\n  Higher Capability\nIn the case that the Sink needs more than vSafe5V (e.g., 15V) to provide full functionality, then the Higher \nCapability bit Shall be set.\n6.4.1.3.1.3\n  Unconstrained Power\nThe Unconstrained Power bit Shall be set when an external source of power is available that is sufficient to \nadequately power the system while charging external devices, or when the device's primary function is to charge \nexternal devices.\nTable 6.17  Fixed Supply PDO – Sink\nBit(s)\nField\nDescription\nB31…30\nFixed Supply\n00b - Fixed Supply PDO\nB29\nDual-Role Power\nSet to ‘1’ if Dual-Role Power supported\nB28\nHigher Capability\nSet to ‘1’ if Higher Capability supported\nB27\nUnconstrained Power\nSet to ‘1’ if Unconstrained Power supported\nB26\nUSB Communications Capable\nSet to ‘1’ if USB Communications Capable\nB25\nDual-Role Data\nDual-Role Data\nB24...23\nFast Role Swap required USB Type-C \nCurrent\nFast Role Swap required USB Type-C current (see also [USB Type-C \n2.4]):\nValue\nDescription\n00b\nFast Role Swap not supported (default)\n01b\nDefault USB Port\n10b\n1.5A@5V\n11b\n3.0A@5V\nB22...20\nReserved\nReserved – Shall be set to zero.\nB19…10\nVoltage\nVoltage in 50mV units\nB9…0\nOperational Current\nOperational current in 10mA units \n","image_count":0,"table_count":2}
{"page":149,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 149\nTo set the Unconstrained Power bit because of an external source, the external source of power Should be either:\n\nAn AC Supply, e.g., a Charger, directly connected to the Sink.\n\nOr, in the case of a PDUSB Hub:\n\nA PD Source with its Unconstrained Power bit set.\n\nMultiple PD Sources all with their Unconstrained Power bits set.\n6.4.1.3.1.4\n  USB Communications Capable\nThe USB Communications Capable bit Shall only be set for Sinks capable of communication over the USB data \nlines (e.g., D+/- or SS Tx/Rx).\n6.4.1.3.1.5\n  Dual-Role Data\nThe Dual-Role Data bit Shall be set when the Port is Dual-Role Data capable i.e., it supports the DR_Swap Message. \nThis is a Static capability which Shall remain fixed for a given device regardless of the device's present Power Role \nor Data Role. If the Dual-Role Data bit is set to one in the Source_Capabilities Message the Dual-Role Data bit in \nthe Sink_Capabilities Message Shall also be set to one. If the Dual-Role Dataa bit is set to zero in the \nSource_Capabilities Message the Dual-Role Data bit in the Sink_Capabilities Message Shall also be set to zero.\n6.4.1.3.1.6\n  Fast Role Swap USB Type-C Current\nThe Fast Role Swap required USB Type-C Current field Shall indicate the current level the Sink will require after \na Fast Role Swap has been performed.\nThe Initial Source Shall Not transmit a Fast Role Swap Request if the Fast Role Swap required USB Type-C Current \nfield is set to zero.\nInitially when the New Source applies vSafe5V it will have Rd asserted but Shall provide the USB Type-C current \nindicated by the New Sink in this field. If the New Source is not able to supply this level of current, it Shall Not \nperform a Fast Role Swap. When Rp is asserted by the New Source during the Fast Role Swap AMS (see Section 6.3.19, \n\"FR_Swap Message\"), the value of USB Type-C current indicated by Rp Shall be the same or greater than that \nindicated in the Fast Role Swap required USB Type-C Current field.\n6.4.1.3.2\n  Variable Supply (non-Battery) Power Data Object\nTable 6.18, \"Variable Supply (non-Battery) PDO – Sink\" describes a Variable Supply (non-Battery) (10b) PDO used \nby a Sink. See Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational \nCurrent field Shall be set to the operational current that the Sink requires at the given voltage range. The absolute \nvoltage, including any voltage variation, Shall Not fall below the Minimum Voltage field value and Shall Not \nexceed the Maximum Voltage field value. Required operating current is defined as the amount of current a given \ndevice needs to be functional. This value could be the maximum current the Sink will ever require or could be \nsufficient to operate the Sink in one of its modes of operation.\n6.4.1.3.3\n  Battery Supply Power Data Object \nTable 6.19, \"Battery Supply PDO – Sink\" describes a Battery Supply (01b) PDO used by a Sink. See Section 7.1.3, \n\"Types of Sources\" for the electrical requirements of the power supply.\nTable 6.18  Variable Supply (non-Battery) PDO – Sink\nBit(s)\nField\nDescription\nB31…30\nVariable Supply\n01b - Variable Supply (non-Battery) PDO\nB29…20\nMaximum Voltage\nMaximum voltage in 50mV units \nB19…10\nMinimum Voltage\nMinimum voltage in 50mV units\nB9…0\nOperational Current\nOperational current in 10mA units\n","image_count":0,"table_count":2}
{"page":150,"text":"Page 150\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe voltage fields Shall be set to the output voltage range that the Sink requires to operate. The Operational Power \nfield Shall be set to the operational power that the Sink requires at the given voltage range. The absolute voltage, \nincluding any voltage variation, Shall Not fall below the Minimum Voltage field value and Shall Not exceed the \nMaximum Voltage field value. \nNote:\nOnly the Battery Supply PDO uses power instead of current. \nRequired operating power is defined as the amount of power a given device needs to be functional. This value could \nbe the maximum power the Sink will ever require or could be sufficient to operate the Sink in one of its modes of \noperation.\n6.4.1.3.4\n  Augmented Power Data Objects\nSee Section 7.1.3, \"Types of Sources\" for the electrical requirements of the power supply.\nThe Maximum and Minimum voltage fields Shall be set to the output voltage range that the Sink requires to \noperate.\n6.4.1.3.4.1\n  SPR Programmable Power Supply APDO\nTable 6.20, \"SPR Programmable Power Supply APDO – Sink\" below describes a SPR PPS APDO for a Sink operating in \nSPR Mode and consuming 21V or less. The Maximum Current field Shall be set to the maximum current the Sink \nrequires over the voltage range. The maximum current is defined as the maximum amount of current the device \nneeds to fully support its function (e.g., Sink Directed Charge).\nTable 6.19  Battery Supply PDO – Sink\nBit(s)\nField\nDescription\nB31…30\nBattery Supply\n10b - Battery Supply PDO\nB29…20\nMaximum Voltage\nMaximum voltage in 50mV units\nB19…10\nMinimum Voltage\nMinimum voltage in 50mV units\nB9…0\nOperational Power\nOperational Power in 250mW units\nTable 6.20  SPR Programmable Power Supply APDO – Sink\nBit(s)\nField\nDescription\nB31…30\nAPDO\n11b – Augmented Power Data Object (APDO)\nB29…28\nSPR PPS\n00b – SPR PPS\nB27…25\nReserved\nReserved – Shall be set to zero.\nB24…17\nMaximum Voltage\nMaximum voltage in 100mV increments \nB16\nReserved\nReserved – Shall be set to zero.\nB15…8\nMinimum Voltage\nMinimum voltage in 100mV increments\nB7\nReserved\nReserved – Shall be set to zero.\nB6...0\nMaximum Current\nMaximum current in 50mA increments\n","image_count":0,"table_count":3}
{"page":151,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 151\n6.4.1.3.4.2\n  SPR Adjustable Voltage Supply APDO\nTable 6.21, \"SPR Adjustable Voltage Supply APDO – Sink\" below describes the SPR AVS (1110b) APDO for a Sink \noperating in SPR AVS Mode. The Maximum Current 15V/Maximum Current 20V fields in the SPR AVS APDO for \nthe Sink is defined as the maximum current the device needs to fully support its function.\n6.4.1.3.4.3\n  EPR Adjustable Voltage Supply APDO\nTable 6.22, \"EPR Adjustable Voltage Supply APDO – Sink\" below describes a EPR AVS APDO for a Sink operating in \nEPR AVS Mode. The PDP field in the EPR AVS APDO for the Sink is defined as the PDP the device needs to fully \nsupport its function.\n6.4.1.4\n  SPR Capabilities Message Construction\nAn SPR Capabilities Message (Source_Capabilities Message or Sink_Capabilities Message) Shall have at least one \nPower Data Object for vSafe5V. The SPR Capabilities Message Shall also contain the sending Port's information \nfollowed by up to 6 additional Power Data Objects. Power Data Objects in an SPR Capabilities Message Shall be sent \nin the following order:\n1)\nThe vSafe5V Fixed Supply PDO Shall always be the first (A)PDO.\n2)\nThe remaining Fixed Supply PDOs, if present, Shall be sent in voltage order; lowest to highest.\n3)\nThe Battery Supply PDOs if present Shall be sent in Minimum voltage order; lowest to highest.\n4)\nThe Variable Supply (non-Battery) PDOs, if present, Shall be sent in Minimum voltage order; lowest to \nhighest.\n5)\nThe SPR AVS APDO, if present, Shall be sent.\n6)\nThe Programmable Power Supply APDOs, if present, Shall be sent in Maximum voltage order, lowest to \nhighest.\nNote:\nThe EPR Capabilities Message construction is defined in Section 6.5.15.1, \"EPR Capabilities Message \nConstruction\".\nTable 6.21  SPR Adjustable Voltage Supply APDO – Sink\nBit(s)\nField\nDescription\nB31…30 APDO\n11b – Augmented Power Data Object (APDO)\nB29…28 SPR AVS\n10b – SPR AVS\nB27…20 Reserved\nReserved – Shall be set to zero.\nB19…10\nMaximum Current 15V\nFor 9V – 15V range: Maximum current in 10mA units equal to the \nMaximum Current field of the 15V Fixed Supply PDO\nB9…0\nMaximum Current 20V\nFor 15V – 20V range: Maximum Current in 10mA units equal to the \nMaximum Current field of the 20V Fixed Supply PDO, set to 0 if the \nMaximum voltage in the SPR AVS range is 15V.\nTable 6.22  EPR Adjustable Voltage Supply APDO – Sink\nBit(s)\nField\nDescription\nB31…30\nAPDO\n11b – Augmented Power Data Object (APDO)\nB29…28\nEPR AVS\n01b – EPR AVS\nB27…26\nReserved\nReserved – Shall be set to zero.\nB25…17\nMaximum Voltage\nMaximum voltage in 100mV increments \nB16\nReserved\nReserved – Shall be set to zero.\nB15…8\nMinimum Voltage\nMinimum voltage in 100mV increments\nB7…0\nPDP\nPDP in 1W increments\n","image_count":0,"table_count":3}
{"page":152,"text":"Page 152\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.12, \"SPR Capabilities Message Construction\" describes the construction of an SPR Capabilities Message. The \nMessage will always have at least one Fixed Supply 5V PDO and may have up to six more PDOs depending on the \nSource Capabilities.\nFigure 6.12 SPR Capabilities Message Construction\nFigure 6.13 Example Capabilities Message with 2 Power Data Objects\nIn the 27W Source as shown in Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\", the Number \nof Data Objects field is 2: vSafe5V plus one other voltage.\nPower Data Objects (PDO) and Augmented Power Data Objects (APDO) are identified by the Message Header's \nMessage Type field. They are used to form SPR Capabilities Messages.\n6.4.1.5\n  SPR Source Capabilities Message\nSources send a Source_Capabilities Message either as part of advertising Port Capabilities, or in response to a \nGet_Source_Cap Message. See Section 6.5.15.2, \"EPR_Source_Capabilities Message\" for information about EPR Source \nCapabilities Messages.\nFollowing a Hard Reset, a power-on event or plug insertion event, a Source Port Shall send a Source_Capabilities \nMessage after every SourceCapabilityTimer timeout as an Advertisements that Shall be interpreted by the Sink \nPort on Attachment. The Source Shall continue sending a minimum of nCapsCount Source_Capabilities Messages \nuntil a GoodCRC Message is received.\nAdditionally, a Source_Capabilities Message Shall only be sent by a Port in the following cases:\n\nBy the Source Port from the PE_SRC_Ready state upon a change in its ability to supply power to this \nPort.\n\nBy a Source Port or Dual-Role Power Port in response to a Get_Source_Cap Message.\n\nOptionally by a Source Port from the PE_SRC_Ready state when available power in a multi-Port system \nchanges, even if the Source Capabilities for this Port have not changed.\nA Source Port Shall report its Capabilities in a series of 32-bit Power Data Objects (see Table 6.7, \"Power Data \nObject\") as part of a Source_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power \nData Objects\"). Power Data Objects are used to convey a Source Port's Capabilities to provide power including Dual-\nRole Power ports presently operating as a Sink.\nEach Power Data Object Shall describe a specific Source capability such as a Battery (e.g., 2.8-4.1V) or a Fixed Supply \n(e.g., 15V) at a maximum allowable current. The Number of Data Objects field in the Message Header Shall define \nthe number of Power Data Objects that follow the Message Header in a Data Message. All Sources Shall minimally \noffer one Power Data Object that reports vSafe5V. A Source Shall Not offer multiple Power Data Objects of the same \ntype (Fixed Supply, Variable Supply, Battery Supply) and the same voltage but Shall instead offer one Power Data \nObject with the highest available current for that Source capability and voltage. \nHeader\n2 bytes\nPDO\n1\nPDO\n2\nPDO\n3\nPDO\n4\nPDO\n5\nPDO\n6\nPDO\n7\n001b\n010b\n011b\n100b\n101b\n110b\n111b\nHeader\nNo. of Data Objects = 2\nFixed 5V \nPDO\nFixed 9V \nPDO\n","image_count":9,"table_count":3}
{"page":153,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 153\nSinks with Accessory Support do not source VBUS (see [USB Type-C 2.4]). Sinks with Accessory Support are still \nconsidered Sources when sourcing VCONN to an Accessory even though VBUS is not applied; in this case they Shall \nAdvertise vSafe5V with the Maximum Current field set to 0mA in the first Power Data Object. The main purpose of \nthis is to enable the Sink with Accessory Support to get into the PE_SRC_Ready State to enter an Alternate Mode.\nA Sink in SPR Mode Shall evaluate every Source_Capabilities Message it receives and Shall respond with a Request \nMessage. If its power consumption exceeds the Source Capabilities it Shall Re-negotiate so as not to exceed the \nSource's most recently Advertised Capabilities.\nA Sink, in SPR Mode, in an Explicit Contract with a PPS APDO, Shall periodically re-request the PPS APDO at least \nevery tPPSRequest until either:\n\nThe Sink requests something other than PPS APDO.\n\nThere is a Power Role Swap.\n\nThere is a Hard Reset.\n\nThere is Error Recovery.\nA Sink in EPR Mode that receives a Source_Capabilities Message in response to a Get_Source_Cap Message Shall \nNot respond with a Request Message. If a Sink in EPR Mode receives a Source_Capabilities Message, not in response \nto a Get_Source_Cap Message, the Sink Shall initiate a Hard Reset.\nA Source that has accepted a Request Message with a Programmable RDO Shall issue Hard Reset Signaling if it has \nnot received a Request Message with a Programmable RDO within tPPSTimeout. The Source Shall discontinue this \nbehavior after:\n\nReceiving a Request Message with a Fixed Supply, Variable Supply or Battery Supply RDO.\n\nThere is a Power Role Swap.\n\nThere is a Hard Reset.\n\nThere is Error Recovery.\n6.4.1.6\n  SPR Sink Capabilities Message\nSinks send a Sink_Capabilities Message (see Section 6.4.2, \"Request Message\") in response to a Get_Sink_Cap \nMessage. See Section 6.5.15.3, \"EPR_Sink_Capabilities Message\" for more information about the Capabilities Message.\nA USB Power Delivery capable Sink, upon detecting vSafe5V on VBUS and after a SinkWaitCapTimer timeout \nwithout seeing a Source_Capabilities Message, Shall send a Hard Reset. If the Attached Source is USB Power \nDelivery capable, it responds by sending Source_Capabilities Messages thus allowing power Negotiations to begin.\nA Sink Port Shall report power levels it is able to operate at in a series of 32-bit Power Data Objects (see Section \nTable 6.7, \"Power Data Object\"). These are returned as part of a Sink_Capabilities Message in response to a \nGet_Sink_Cap Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\"). This is similar \nto that used for Source Port Capabilities with equivalent Power Data Objects for Fixed Supply, Variable Supply and \nBattery Supply as defined in this section. Power Data Objects are used to convey the Sink Port's operational power \nrequirements including Dual-Role Power Ports presently operating as a Source.\nEach Power Data Object Shall describe a specific Sink operational power level, such as a Battery Supply (e.g., 2.8-\n4.1V) or a Fixed Supply (e.g., 15V). The Number of Data Objects field in the Message Header Shall define the \nnumber of Power Data Objects that follow the Message Header in a Data Message.\nAll Sinks Shall minimally offer one Power Data Object with a power level at which the Sink can operate. A Sink Shall \nNot offer multiple Power Data Objects of the same type (Fixed Supply, Variable Supply, Battery Supply) and the same \nvoltage but Shall instead offer one Power Data Object with the highest available current for that Sink capability and \nvoltage.\nAll Sinks Shall include one Power Data Object that reports vSafe5V even if they require additional power to operate \nfully. In the case where additional power is required for full operation the Higher Capability bit Shall be set.\n","image_count":0,"table_count":1}
{"page":154,"text":"Page 154\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.1.6.1\n  Use by Dual-Role Power devices\nDual-Role Power devices send a Source_Capabilities Message (see Section 6.4.1.5, \"SPR Source Capabilities \nMessage\") as part of advertising Port Capabilities when operating in Source role. Dual-Role Power devices send a \nSource_Capabilities Message in response to a Get_Source_Cap Message regardless of their present operating role. \nSimilarly Dual-Role Power devices send a Sink_Capabilities Message (see Section 6.4.1.6, \"SPR Sink Capabilities \nMessage\") in response to a Get_Sink_Cap Message regardless of their present operating role.\n6.4.1.6.2\n  Management of the Power Reserve\nThis section has been removed. Refer to Section 8.2.5, \"Managing Power Requirements\".\n","image_count":0,"table_count":1}
{"page":155,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 155\n6.4.2\n  Request Message\nA Request Message Shall be sent by a Sink to request power during the request phase of an SPR power Negotiation. \nThe Request Data Object Shall be returned by the Sink making a request for power. It Shall be sent in response to \nthe most recent Source_Capabilities Message (see Section 8.3.2.2, \"Power Negotiation\") when in SPR Mode. A \nRequest Message Shall return one and only one Sink Request Data Object that Shall identify the Power Data Object \nbeing requested.\nThe Source Shall respond to a Request Message with an Accept Message, a Wait Message or a Reject Message (see \nSection 6.9, \"Accept, Reject and Wait\").\nThe Request Message includes the requested power level. For example, if the Source_Capabilities Message \nincludes a Fixed Supply PDO that offers 9V @ 1.5A and if the Sink only wants 9V @ 0.5A, it will set the Operating \nCurrent field to 50 (i.e., 10mA * 50 = 0.5A).\nThe request uses a different format depending on the kind of power requested.\n\nThe Fixed Supply Power Data Object and Variable Supply Power Data Object share a common format \nshown in Table 6.23, \"Fixed and Variable Request Data Object\".\n\nThe Battery Supply Power Data Object uses the format shown in Table 6.24, \"Battery Request Data \nObject\".\n\nThe PPS Request Data Object's format is shown in Table 6.25, \"PPS Request Data Object\".\n\nThe AVS Request Data Object's format is shown in Table 6.26, \"AVS Request Data Object\".\nThe Request Data Objects are also used by the EPR_Request Message when operating in EPR Mode. See Section 6.4.9, \n\"EPR_Request Message\" for information about the use of the EPR_Request Message.\nA Source operating in EPR Mode that receives a Request Message Shall initiate a Hard Reset.\nTable 6.23  Fixed and Variable Request Data Object\nBit(s)\nField\nDescription\nB31…28\nObject Position\nObject position (0000b and 1110b…1111b are \nReserved and Shall Not be used)\nB27\nGiveback\nGiveBack flag = 0 - Deprecated and Shall be set to zero.\nB26\nCapability Mismatch\nSet to ‘1’ for a Capabilities Mismatch\nB25\nUSB Communications Capable\nSet to ‘1’ if USB Communications Capable\nB24\nNo USB Suspend\nSet to ‘1’ if requesting No USB Suspend\nB23\nUnchunked Extended Messages Supported\nSet to ‘1’ if Unchunked Extended Messages Supported\nB22\nEPR Capable\nSet to ‘1’ if EPR Capable\nB21…20\nReserved\nReserved – Shall be set to zero.\nB19…10\nOperating Current\nOperating current in 10mA units\nB9…0\nMaximum Operating Current\nMaximum Operating current 10mA units\n","image_count":0,"table_count":2}
{"page":156,"text":"Page 156\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 6.24  Battery Request Data Object\nBit(s)\nField\nDescription\nB31…28\nObject Position\nObject position (0000b and 1110b…1111b are \nReserved and Shall Not be used)\nB27\nGiveback\nGiveBack flag = 0- Deprecated and Shall be set to zero.\nB26\nCapability Mismatch\nSet to ‘1’ for a Capabilities Mismatch\nB25\nUSB Communications Capable\nSet to ‘1’ if USB Communications Capable\nB24\nNo USB Suspend\nSet to ‘1’ if requesting No USB Suspend\nB23\nUnchunked Extended Messages Supported\nSet to ‘1’ if Unchunked Extended Messages Supported\nB22\nEPR Capable\nSet to ‘1’ if EPR Capable\nB21…20\nReserved\nReserved – Shall be set to zero.\nB19…10\nOperating Power\nOperating Power in 250mW units\nB9…0\nMaximum Operating Power\nMaximum Operating Power in 250mW units\nTable 6.25  PPS Request Data Object\nBit(s)\nField\nDescription\nB31…28\nObject Position\nObject position (0000b and 1110b…1111b are \nReserved and Shall Not be used)\nB27\nReserved\nReserved – Shall be set to zero.\nB26\nCapability Mismatch\nSet to ‘1’ for a Capabilities Mismatch\nB25\nUSB Communications Capable\nSet to ‘1’ if USB Communications Capable\nB24\nNo USB Suspend\nSet to ‘1’ if requesting No USB Suspend\nB23\nUnchunked Extended Messages Supported\nSet to ‘1’ if Unchunked Extended Messages \nSupported\nB22\nEPR Capable\nSet to ‘1’ if EPR Capable\nB21\nReserved\nReserved – Shall be set to zero.\nB20...9\nOutput Voltage\nOutput voltage in 20mV units.\nB8...7\nReserved\nReserved – Shall be set to zero.\nB6...0\nOperating Current\nOperating current 50mA units.\nTable 6.26  AVS Request Data Object\nBit(s)\nField\nDescription\nB31…28\nObject Position\nObject position (0000b and 1110b…1111b are \nReserved and Shall Not be used)\nB27\nReserved\nReserved – Shall be set to zero.\nB26\nCapability Mismatch\nSet to ‘1’ for a Capabilities Mismatch\nB25\nUSB Communications Capable\nSet to ‘1’ if USB Communications Capable\nB24\nNo USB Suspend\nSet to ‘1’ if requesting No USB Suspend\nB23\nUnchunked Extended Messages Supported\nSet to ‘1’ if Unchunked Extended Messages \nSupported\nB22\nEPR Capable\nSet to ‘1’ if EPR Capable\nB21\nReserved\nReserved – Shall be set to zero.\nB20...9\nOutput Voltage\nOutput voltage in 25mV units, the least two \nsignificant bits Shall be set to zero making the \neffective voltage step size 100mV.\nB8...7\nReserved\nReserved – Shall be set to zero.\nB6...0\nOperating Current\nOperating current 50mA units.\n","image_count":0,"table_count":4}
{"page":157,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 157\n6.4.2.1\n  Object Position\nThe value in the Object Position field Shall indicate which object in the Source_Capabilities Message or \nEPR_Source_Capabilities Message the RDO refers to. The value 0001b always indicates the 5V Fixed Supply PDO as \nit is the first object following the Source_Capabilities Message’s Message Header or EPR_Source_Capabilities \nMessage’s Extended Message Header. The number 0010b refers to the next PDO and so forth.\nThe Object Position field values 0001b…0111b Shall only be used to refer to SPR (A)PDOs. SPR (A)PDOs May be \nrequested by either a Request or an EPR_Request Message. Object positions 1000b…1011b Shall only be used to \nrefer to EPR (A)PDOs. EPR (A)PDOs Shall only be requested by an EPR_Request Message. If the Object Position field \nin a Request Message contains a value greater than 0111b, the Source Shall send Hard Reset Signaling.\n6.4.2.2\n  GiveBack Flag (Deprecated)\nThe Giveback flag has been Deprecated and Shall be set to zero.\n6.4.2.3\n  Capability Mismatch\nA Capabilities Mismatch occurs when the Source cannot satisfy the Sink's power requirements based on the Source \nCapabilities it has offered. In this case the Sink Shall make a Valid request from the offered Source Capabilities and \nShall set the Capability Mismatch bit (see Section 8.2.5.2, \"Power Capability Mismatch\"). When a Capabilities \nMismatch condition does not exist, the Sink Shall Not set the Capability Mismatch bit.\nWhen a Sink returns a Request Data Object with the Capability Mismatch bit set in response to a Source Capabilities \nMessage, it indicates that it wants more power than the Source is currently offering. This can be due to either a \nspecific voltage that is not being offered or there is not sufficient current for the voltages that are being offered.\nSources whose Port Reported PDP is less than their Port Present PDP (see Section 6.4.11, \"Source_Info Message\") \nShall respond to the Requests with the Capability Mismatch bit set as follows. The Source within \ntCapabilitiesMismatchResponse of the PS_RDY Message Shall send a new Source Capabilities Message that offers \neither:\n1)\nThe set of Source Capabilities to minimally satisfy the Sink's requirements based on what it actually \nrequires for full operation by evaluating the:\na)\nSink_Capabilities_Extended Message(if supported by the Sink) and/or\nb)\nSink_Capabilities or EPR_Sink_Capabilities Message.\n2)\nThe set of Source Capabilities the Source can supply at this time based on the Port Present PDP.\nTo prevent looping, Sources Should Not send a new Source Capabilities Message in response to subsequent Request \nMessage with the Capability Mismatch flag set until its Port Present PDP changes.\nOnce a Guaranteed Capability Source that has responded to a Capability Mismatch, it Shall Not subsequently send \nout another Source Capabilities Message at a lower PDP unless the power required by the Sink (as indicated in its \nSink Capabilities Message or Sink_Capabilities_Extended Message) has also been reduced. Sources wishing to \nmanage their power May periodically check the Sink Capabilities Message or Sink_Capabilities_Extended Message \nto determine whether these have changed.\nNote:\nA Source Capabilities Message refers to a Source_Capabilities Message or an EPR_Source_Capabilities \nMessage, and a Sink Capabilities Message refers to a Sink_Capabilities Message or EPR_Sink_Capabilities \nMessage, Request refers to a Request Message or EPR_Request depending on operating mode.\nIn this context a Valid Request Message means the following:\n\nThe Object Position field Shall contain a reference to an object that was present in the last received \nSource Capabilities Message.\n\nThe Operating Current/Operating Power field Shall contain a value which is less than or equal to the \nmaximum current/power offered by the selected (A)PDO the Source Capabilities Message.\n","image_count":0,"table_count":1}
{"page":158,"text":"Page 158\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.2.4\n  USB Communications Capable\nThe USB Communications Capable flag Shall be set to one when the Sink has USB data lines and is capable of \ncommunicating using either [USB 2.0], [USB 3.2] or [USB4] protocols. The USB Communications Capable flag \nShall be set to zero when the Sink does not have USB data lines or is otherwise incapable of communicating using \neither [USB 2.0], [USB 3.2] or [USB4] protocols. This is used by the Source to determine operation in certain cases \nsuch as USB suspend. If the USB Communications Capable flag has been set to zero by a Sink, then the Source needs \nto be aware that USB Suspend rules cannot be observed by the Sink.\n6.4.2.5\n  No USB Suspend\nThe No USB Suspend flag May be set by the Sink to indicate to the Source that this device is requesting to continue \nits Explicit Contract during USB Suspend. Sinks setting this flag typically have functionality that can use power for \npurposes other than USB Communication e.g., for charging a Battery.\nThe Source uses this flag to evaluate whether it Should re-issue the Source_Capabilities Message with the USB \nSuspend Supported flag cleared.\n6.4.2.6\n  Unchunked Extended Messages Supported\nThe Unchunked Extended Messages Supported bit Shall be set when the Port can send and receive Extended \nMessages with Data Size > MaxExtendedMsgLegacyLen bytes in a single, Unchunked Extended Message.\n6.4.2.7\n  EPR Mode Capable\nThe EPR Capable bit Shall indicate whether or not the Sink is capable of operating in EPR Mode. When the Sink's \nability to operate in EPR Mode changes, it Shall send a new Request Message with the updated EPR Capable bit set \nin the RDO.\n6.4.2.8\n  Operating Current \nThe Operating Current field in the Request Data Object Shall be set to the highest current the Sink will draw during \nthe Explicit Contract. A new Request Message or EPR_Request Message, with an updated Operating Current value, \nShall be issued whenever the Sink's power needs change. \nThe Operating Current field in the SPR Programmable Request Data Object is used in addition by the Sink to \nrequest the Source for the Current Limit level it needs. When the request is accepted the Source's output current \nsupplied into any load Shall be less than or equal to the Operating Current value. When the Sink attempts to \nconsume more current, the Source Shall reduce the output voltage so as not to exceed the Operating Current \nvalue.\nThe Operating Current field in the AVS Request Data Object Shall be set to the highest current the Sink will draw \nduring the Explicit Contract. \nNote:\nA Source in AVS Mode, unlike the SPR Source in PPS Mode, does not support current limit; the Sink is \nresponsible not to take more current than it requested. \nA new Request / EPR_Request Message, with an updated Operating Current value, Shall be issued whenever the \nSink's power needs change.\nThe value in the Operating Current field Shall Not exceed the value in the Maximum Current field of the \nSource_Capabilities Message. For EPR AVS, the Operating Current field Shall Not exceed the PDP / Output voltage \nrounded down to the nearest 50 mA.\nThis field Shall apply to the Fixed Supply, Variable Supply, Programmable and AVS RDOs.\n6.4.2.9\n  Maximum Operating Current \nThe Maximum Operating Current field has been functionally Deprecated. In order to maintain backward \ncompatibility with Sources that may try to interpret the Maximum Operating Current field in the Request Message \nor EPR_Request Message, the field Shall be set equal to the value of the Operating Current field. To ensure \nbackward compatibility, the Source Should Ignore this field.\n","image_count":0,"table_count":1}
{"page":159,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 159\nThis field Shall apply to the Fixed Supply and Variable Supply RDO in SPR Mode and the Fixed Supply RDO in EPR \nCapable.\n6.4.2.10\n  Operating Power\nThe Operating Power field in the Request Data Object Shall be set to the highest power the Sink will draw \nthroughout the Explicit Contract.\nThis field Shall apply to the Battery Supply RDO.\n6.4.2.11\n  Maximum Operating Power\nThe Maximum Operating Power field has been functionally Deprecated. In order to maintain backward \ncompatibility with Sources that may try to interpret the Maximum Operating Power field in the Request Message, \nthe field Shall be set equal to the value of the Operating Power field. To ensure backward compatibility, the Source \nShould Ignore this field.\nThis field Shall apply to the Battery Supply RDO.\n6.4.2.12\n  Output Voltage \nThe Output Voltage field in the Programmable and AVS Request Data Objects Shall be set by the Sink to the voltage \nthe Sink requires as measured at the Source's output connector. The Output Voltage field Shall be greater than or \nequal to the Minimum Voltage field and less than or equal to the Maximum Voltage field in the Programmable \nPower Supply and AVS APDOs, respectively.\nThis field Shall apply to the Programmable RDO and AVS RDO.\n6.4.3\n  BIST Message\nThe BIST Message is sent to request the Port to enter a PHY Layer test mode (see Section 5.9, \"Built in Self-Test \n(BIST)\") that performs one of the following functions:\n\nEnter a Continuous BIST Mode to send a continuous stream of test data to the Tester.\n\nEnter and leave a Shared Capacity Group test mode.\nThe Message format is as shown in Figure 6.14, \"BIST Message\".\nFigure 6.14 BIST Message\nAll Ports Shall be able to be a Unit Under Test (UUT) only when operating at vSafe5V. All of the following BIST \nModes Shall be supported:\n\nProcess reception of a BIST Carrier Mode BIST Data Object that Shall result in the generation of the \nappropriate carrier signal.\n\nProcess reception of a BIST Test Data BIST Data Object that Shall result in the Message being Ignored.\nUUTs with Ports constituting a Shared Capacity Group (see [USB Type-C 2.4]) Shall support the following BIST \nMode:\n\nProcess reception of a BIST Shared Test Mode Entry BIST Data Object that Shall cause the UUT to enter \nBIST Shared Capacity Test Mode; a mode in which the UUT offers its full Source Capabilities on every Port \nin the Shared Capacity Group. \nHeader\nNo. of Data Objects = 1 or 7\nBIST Data Object\n","image_count":9,"table_count":2}
{"page":160,"text":"Page 160\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nProcess reception of a BIST Shared Test Mode Exit BIST Data Object that Shall cause the UUT to exit \nthe BIST Shared Capacity Test Mode.\nWhen a Port receives a BIST Message BIST Data Object for a BIST Mode when not operating at vSafe5V, the BIST \nMessage Shall be Ignored.\nWhen a Port receives a BIST Message BIST Data Object for a BIST Mode it does not support the BIST Message Shall \nbe Ignored.\nWhen a Port or Cable Plug receives a BIST Message BIST Data Object for a Continuous BIST Mode the Port or Cable \nPlug enters the requested BIST Mode and Shall remain in that BIST Mode for tBISTContMode and then Shall return \nto normal operation (see Section 6.6.7.2, \"BISTContModeTimer\").\nThe usage model of the PHY Layer BIST Modes generally assumes that some controlling agent will request a test of \nits Port Partner.\nIn Section 8.3.2.15, \"Built in Self-Test (BIST)\" there is a sequence description of the test sequences used for \ncompliance testing.\nThe fields in the BIST Data Object are defined in the Table 6.27, \"BIST Data Object\".\n6.4.3.1\n  BIST Carrier Mode\nUpon receipt of a BIST Message, with a BIST Carrier Mode BIST Data Object, the UUT Shall send out a continuous \nstring of BMC encoded alternating \"1\"s and \"0\"s.\nThe UUT Shall exit the Continuous BIST Mode within tBISTContMode of this Continuous BIST Mode being enabled \n(see Section 6.6.7.2, \"BISTContModeTimer\").\n6.4.3.2\n  BIST Test Data Mode\nUpon receipt of a BIST Message, with a BIST Test Data BIST Data Object, the UUT Shall return a GoodCRC Message \nand Shall enter BIST Test Data Mode in which it sends no further Messages except for GoodCRC Messages in \nresponse to received Messages. See Section 5.9.2, \"BIST Test Data Mode\" for the definition of the Test Frame.\nThe test Shall be ended by sending Hard Reset Signaling to reset the UUT.\nTable 6.27  BIST Data Object\nBit(s)\nValue\nParameter\nDescription\nReference\nApplicability\nB31…28\n0000b…0100b\nReserved\nShall Not be used\nSection 1.4.2 \n-\n0101b\nBIST Carrier Mode\nRequest \nTransmitter to enter \nBIST Carrier Mode\nSection 6.4.3.1\nMandatory\n0110b…0111b\nReserved\nShall Not be used\nSection 1.4.2 \n-\n1000b\nBIST Test Data\nSends a Test Frame.\nSection 6.4.3.2\nMandatory\n1001b\nBIST Shared Test Mode Entry\nRequests UUT to \nenter BIST Shared \nCapacity Test Mode.\nSection 6.4.3.3.1\nMandatory for UUTs \nwith shared capacity\n1010b\nBIST Shared Test Mode Exit\nRequests UUT to exit \nBIST Shared \nCapacity Test Mode.\nSection 6.4.3.3.2\nMandatory for UUTs \nwith shared capacity\n1011b…1111b\nReserved\nShall Not be used\nSection 1.4.2 \n-\nB27…0\nReserved\nShall be set to zero.\nSection 1.4.2 \n-\n","image_count":0,"table_count":2}
{"page":161,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 161\n6.4.3.3\n  BIST Shared Capacity Test Mode\nA Shared Capacity Group of Ports share a common power source that is not capable of simultaneously powering all \nthe ports to their full Source Capabilities (see [USB Type-C 2.4]). The BIST Shared Capacity Test Mode Shall only be \nimplemented by ports in a Shared Capacity Group.\nThe UUT Shared Capacity Group of Ports Shall contain one or more Ports, designated as Master Ports, that \nrecognize both the BIST Shared Test Mode Entry BIST Data Object and the BIST Shared Test Mode Exit BIST Data \nObject.\n6.4.3.3.1\n  BIST Shared Test Mode Entry\nWhen any master Port in a Shared Capacity Group receives a BIST Message with a BIST Shared Test Mode Entry \nBIST Data Object, while in the PE_SRC_Ready State, the UUT Shall enter a compliance test mode where the \nmaximum Source Capabilities are always offered on every Port, regardless of the availability of shared power i.e., \nall shared power management is disabled. \nPorts in the Shared Capacity Group that are not Master Ports Shall Not enter compliance mode on receiving the \nBIST Shared Test Mode Entry BIST Data Object.\nUpon receipt of a BIST Message, with a BIST Shared Test Mode Entry BIST Data Object, the UUT Shall return a \nGoodCRC Message and Shall enter the BIST Shared Capacity Test Mode. \nOn entering this mode, the UUT Shall send a new Source_Capabilities Message from each Port in the Shared \nCapacity Group within tBISTSharedTestMode. The Tester will not exceed the shared capacity during this mode.\n6.4.3.3.2\n  BIST Shared Test Mode Exit\nUpon receipt of a BIST Message, with a BIST Shared Test Mode Exit BIST Data Object, the UUT Shall return a \nGoodCRC Message and Shall exit the BIST Shared Capacity Test Mode. If any other Message, aside from a BIST \nMessage, with a BIST Shared Test Mode Exit BIST Data Object, is received while in BIST Shared Capacity Test Mode \nthis Shall Not cause the UUT to exit the BIST Shared Capacity Test Mode\nOn exiting the mode, the UUT May send a new Source_Capabilities Message to each Port in the Shared Capacity \nGroup or the UUT May perform ErrorRecovery on each Port. \nPorts in the Shared Capacity Group that are not Master Ports Shall Not exit compliance mode on receiving the BIST \nShared Test Mode Entry BIST Data Object.\nPorts in the Shared Capacity Group that are not Master Ports Should Not exit compliance mode on receiving the \nBIST Shared Test Mode Exit BIST Data Object.\n\nThe UUT Shall exit BIST Shared Capacity Test Mode when It is powered off.\n\nThe UUT Shall remain in BIST Shared Capacity Test Mode for any PD event (except when a BIST Shared \nTest Mode Exit BIST Data Object, is received); specifically the UUT Shall remain in BIST Shared Capacity \nTest Mode when any of the following PD events occurs: \n\nHard Reset\n\nCable Reset\n\nSoft Reset\n\nData Role Swap\n\nPower Role Swap\n\nFast Role Swap\n\nVCONN Swap.\n\nThe UUT May leave BIST Shared Capacity Test Mode if the Tester makes a request that exceeds the \nCapabilities of the UUT.\n","image_count":0,"table_count":1}
{"page":162,"text":"Page 162\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4\n  Vendor Defined Message\nThe Vendor_Defined Message (VDM) is provided to allow vendors to exchange information outside of that defined \nby this specification.\nA Vendor_Defined Message Shall consist of at least one Vendor Data Object (VDO), the VDM Header, and May \ncontain up to a maximum of six additional VDOs.\nTo ensure vendor uniqueness of Vendor_Defined Messages, all Vendor_Defined Messages Shall contain a Valid \nUSB Standard or Vendor ID (SVID) allocated by USB-IF in the VDM Header.\nTwo types of Vendor_Defined Messages are defined: Structured VDMs and Unstructured VDMs. A Structured VDM \ndefines an extensible structure designed to support Modal Operation. An Unstructured VDM does not define any \nstructure and Messages May be created in any manner that the vendor chooses.\nVendor_Defined Messages Shall Not be used for direct power Negotiation. They May however be used to alter \nLocal Policy, affecting what is offered or consumed via the normal PD Messages.\nThe Message format Shall be as shown in Figure 6.15, \"Vendor Defined Message\".\nFigure 6.15 Vendor Defined Message\nThe VDM Header Shall be the first 4-byte object in a Vendor Defined Message. The VDM Header provides Command \nspace to allow vendors to customize Messages for their own purposes. Additionally, vendors May make use of the \nCommands in a Structured VDM.\nThe fields in the VDM Header for an Unstructured VDM, when the VDM Type Bit is set to zero, Shall be as defined \nin Table 6.28, \"Unstructured VDM Header\". The fields in the VDM Header for a Structured VDM, when the VDM Type \nBit is set to one Shall be as defined in Table 6.29, \"Structured VDM Header\".\nBoth Unstructured VDMs and Structured VDMs Shall only be sent and received after an Explicit Contract has been \nestablished. The only exception to this is the Discover Identity Command which May be sent by Source when a \nDefault Contract or an Implicit Contract (in place after Attach, a Power Role Swap or Fast Role Swap) is in place in \norder to discover Cable Capabilities (see SSection 8.3.3.25.3, \"Source Startup Structured VDM Discover Identity of a \nCable Plug State Diagram\").\n6.4.4.1\n  Unstructured VDM\nThe Unstructured VDM does not define the contents of bits B14…0 in the VDM Header. Their definition and use are \nthe sole responsibility of the vendor indicated by the VID. The Port Partners and Cable Plugs Shall exit any states \nentered using an Unstructured VDM when a Hard Reset appears on PD.\nThe following rules apply to the use of Unstructured VDM Messages:\n\nUnstructured VDMs Shall only be used when an Explicit Contract is in place.\n\nPrior to establishing an Explicit Contract Unstructured VDMs Shall Not be sent and Shall be Ignored if \nreceived.\n\nOnly the DFP Shall be an Initiator of Unstructured VDMs.\n\nOnly the UFP or a Cable Plug Shall be a Responder to Unstructured VDM.\n\nUnstructured VDMs Shall Not be initiated or responded to under any other circumstances.\nHeader\nNo. of Data Objects = 1-7\nVDM Header\n0-6 VDOs\n","image_count":21,"table_count":2}
{"page":163,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 163\n\nUnstructured VDMs Shall only be used during Modal Operation in the context of an Active Mode i.e., only \nafter the UFP has Ack'ed the Enter Mode Command can Unstructured VDMs be sent or received. The \nActive Mode and the associated Unstructured VDMs Shall use the same SVID.\n\nUnstructured VDMs May be used with SOP* Packets.\n\nWhen a DFP or UFP does not support Unstructured VDMs or does not recognize the VID it Shall return \na Not_Supported Message.\nTable 6.28, \"Unstructured VDM Header\" illustrates the VDM Header bits.\n6.4.4.1.1\n  USB Vendor ID\nThe Vendor ID (VID) field Shall contain the 16-bit Vendor ID value assigned to the vendor by the USB-IF (VID). No \nother value Shall be present in this field.\n6.4.4.1.2\n  VDM Type\nThe VDM Type field Shall be set to zero indicating that this is an Unstructured VDM.\n6.4.4.2\n  Structured VDM\nSetting the VDM Type field to 1 (Structured VDM) defines the use of bits B14…0 in the Structured VDM Header. The \nfields in the Structured VDM Header are defined in Table 6.29, \"Structured VDM Header\".\nThe following rules apply to the use of Structured VDM Messages:\n\nStructured VDMs Shall only be used when an Explicit Contract is in place with the following exception:\n\nPrior to establishing the First Explicit Contract, a Source May issue Discover Identity Messages, to a \nCable Plug using SOP’ Packets, as an Initiator (see Section 8.3.3.25.3, \"Source Startup Structured VDM \nDiscover Identity of a Cable Plug State Diagram\").\n\nEither Port May be an Initiator of Structured VDMs except for the Enter Mode and Exit Mode Commands \nwhich Shall only be initiated by the DFP.\n\nA Cable Plug Shall only be a Responder to Structured VDMs.\n\nStructured VDMs Shall Not be initiated or responded to under any other circumstances.\n\nWhen a DFP or UFP does not support Structured VDMs any Structured VDMs received Shall return a \nNot_Supported Message.\n\nWhen using any of the SVID Specific Commands in the Structured VDM Header (VDM Header b4…0 - \nvalue 16 - 31) the Responder Shall NAK Messages where the SVID in the VDM Header is not recognized \nas an SVID that uses SVID Specific Commands or the use of SVID Specific Commands is not supported for \nthe SVID.\n\nWhen a Cable Plug does not support Structured VDMs any Structured VDMs received Shall be Ignored.\nTable 6.28  Unstructured VDM Header\nBit(s)\nParameter\nDescription\nB31…16\nVendor ID (VID)\nUnique 16-bit unsigned integer. Assigned by the USB-IF to the Vendor.\nB15\nVDM Type\n0 = Unstructured VDM\nB14…0\nAvailable for Vendor Use\nContent of this field is defined by the vendor.\n","image_count":0,"table_count":2}
{"page":164,"text":"Page 164\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nA DFP, UFP or Cable Plug which supports Structured VDMs and receiving a Structured VDM for a SVID that it does \nnot recognize Shall reply with a NAK Command.\nTable 6.29  Structured VDM Header\nBit(s)\nField\nDescription\nB31…16\nStandard or Vendor ID (SVID)\nUnique 16-bit unsigned integer, assigned by the USB-IF\nB15\nVDM Type\n1 = Structured VDM\nB14…13\nStructured VDM Version \n(Major)\nVersion Number (Major) of the Structured VDM (not this specification \nVersion):\n\nVersion 1.0 = 00b (Deprecated and Shall Not be used)\n\nVersion 2.x = 01b\n\nValues 2-3 are Reserved and Shall Not be used\nB12…11\nStructured VDM Version \n(Minor)\nFor Commands 0…15 Version Number (Minor) of the Structured VDM\n\nVersion 2.0 = 00b (Used for ports implemented prior to USB PD \nRevision 3.1, Version 1.6)\n\nVersion 2.1 = 01b (Used for ports implemented starting with USB \nPD Revision 3.1, Version 1.6) \n\nAll other Values are Reserved and Shall Not be used\n\nSVID Specific Commands (16…31) defined by the SVID.\nB10…8\nObject Position\nFor the Enter Mode, Exit Mode, and Attention Commands (Requests/\nResponses):\n\n000b = Reserved and Shall Not be used.\n\n001b…110b = Index into the list of VDOs to identify the desired \nAlternate Mode VDO\n\n111b = Exit all Active Modes (equivalent of a power on reset). Shall\n\n only be used with the Command.\nCommands 0…3, 7…15:\n\n000b\n\n001b…111b = Reserved and Shall Not be used.\nSVID Specific Commands (16…31) defined by the SVID.\nB7…6\nCommand Type\n00b = \nREQ\n(Request from Initiator Port)\n01b = \nACK\n(Acknowledge Response from Responder Port)\n10b = \nNAK\n(Negative Acknowledge Response from Responder Port)\n11b = \nBUSY\n(Busy Response from Responder Port)\nB5\nReserved\n Shall be set to zero and Shall be Ignored\nB4…01\nCommand\n0 = \nReserved and Shall Not be used.\n1 = \nDiscover Identity\n2 = \nDiscover SVIDs\n3 = \nDiscover Modes\n4 = \nEnter Mode\n5 = \nExit Mode\n6 = \nAttention\n7-15 = \nReserved and Shall Not be used.\n16…31 = SVID Specific Commands\n1)\nIn the case where a SID is used the modes are defined by a standard. When a VID is used the modes are defined by the \nVendor.\n","image_count":0,"table_count":2}
{"page":165,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 165\nSection Table 6.30, \"Structured VDM Commands\" shows the Commands, which SVID to use with each Command and \nthe SOP* values which Shall be used.\n6.4.4.2.1\n  SVID\nThe Standard or Vendor ID (SVID) field Shall contain either a 16-bit USB Standard ID value (SID) or the 16-bit \nassigned to the vendor by the USB-IF (VID). No other value Shall be present in this field.\nSection Table 6.31, \"SVID Values\" lists specific SVID values referenced by this specification.\n6.4.4.2.2\n  VDM Type\nThe VDM Type field Shall be set to one indicating that this is a Structured VDM.\n6.4.4.2.3\n  Structured VDM Version\nThe Structured VDM Version (Major)/Structured VDM Version (Minor) fields indicate the level of functionality \nsupported in the Structured VDM part of the specification. This is not the same Version as the Version of this \nspecification. The Structured VDM Version (Major) Shall be set to 01b to indicate Version 2.x with the Structured \nVDM Version (Minor) field set as appropriate based on whether the Port is implemented to USB PD Revision 3.1, \nVersion 1.6 (or newer) or a prior Version.\nTo ensure interoperability with existing PDUSB products, PDUSB products Shall support every Structured VDM \nVersion number starting from Version 1.0.\nOn receipt of a VDM Header with a higher Version number than it supports, a Port or Cable Plug Shall respond using \nthe highest Version number it supports. On receipt of a VDM Header with a lower Version number than it supports, \na Port or Cable Plug Shall respond using the same Version number it received.\nThe Structured VDM Version (Major)/Structured VDM Version (Minor) fields of the Discover Identity Command \nsent and received during the Discovery Process Shall be used to determine the lowest common Structured VDM \nVersion supported by the Port Partners or Cable Plug and Shall continue to operate using this Specification Revision \nuntil they are Detached. After discovering the Structured VDM Version, the Structured VDM Version (Major)/\nStructured VDM Version (Minor) fields Shall match the agreed common Structured VDM Version.\nTable 6.30  Structured VDM Commands\nCommand\nVDM Header SVID \nField\nSOP* used\nDiscover Identity\nShall only use the PD SID.\n Shall only use SOP/SOP’.\nDiscover SVIDs\nShall only use the PD SID.\n Shall only use SOP/SOP’.\nDiscover Modes\nValid with any SVID.\nShall only use SOP/SOP’.\nEnter Mode\nValid with any SVID.\nValid with SOP*.\nExit Mode\nValid with any SVID.\nValid with SOP*.\nAttention\nValid with any SVID.\nValid with SOP*.\nSVID Specific Commands\nValid with any SVID.\nValid with SOP* (defined by SVID).\nTable 6.31  SVID Values\nParameter\nValue\nDescription\nPD SID\n0xFF00\nStandard ID allocated to this specification by USB-IF.\nDPTC SID\n0xFF01\nStandard ID allocated to [DPTC2.1] by USB-IF.\n","image_count":0,"table_count":3}
{"page":166,"text":"Page 166\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.2.4\n  Object Position\nThe Object Position field Shall be used by the Enter Mode and Exit Mode Commands. The Discover Modes \nCommand returns a list of zero to six VDOs, each of which describes an Alternate Mode. The value in Object Position \nfield is an index into that list that indicates which VDO (e.g., Alternate Mode) in the list the Enter Mode and Exit \nMode Command refers to. The Object Position Shall start with one for the first Alternate Mode in the list. If the SVID \nis a VID, the content of the VDO for the Alternate Mode Shall be defined by the vendor. If the Standard or Vendor \nID (SVID) is a SID, the value Shall be assigned, by the USB-IF, to the given Standard. The VDO's content May be as \nsimple as a numeric value or as complex as bit mapped description of Capabilities of the Alternate Mode. In all cases, \nthe Responder is responsible for deciphering the contents to know whether or not it supports the Alternate Mode \nat the Object Position.\nThis field Shall be set to zero in the Request or Response (REQ, ACK, NAK or BUSY) when not required by the \nspecification of the individual Command.\n6.4.4.2.5\n  Command Type\n6.4.4.2.5.1\n  Commands other than Attention\nThis Command Type field Shall be used to indicate the type of Command request/response being sent.\nAn Initiator Shall set the Command Type field to REQ to indicate that this is a Command request from an Initiator.\nIf Structured VDMs are supported, then the responses are as follows:\n\n\"Responder ACK\" is the normal return and Shall be sent to indicate that the Command request was \nreceived and handled normally. \n\n\"Responder NAK\" Shall be returned when the Command request:\n\nHas an Invalid parameter (e.g., Invalid SVID or Alternate Mode).\n\nCannot be acted upon because the configuration is not correct (e.g., an Alternate Mode which has a \ndependency on another Alternate Mode or a request to exit an Alternate Mode which is not anActive \nMode).\n\nIs an Unrecognized Message.\n\nThe handling of \"Responder NAK\" is left up to the Initiator.\n\n\"Responder BUSY\" Shall be sent in the response to a VDM when the Responder is unable to respond to \nthe Command request immediately, but the Command request May be retried. The Initiator Shall wait \ntVDMBusy after a \"Responder BUSY\" response is received before retrying the Command request.\n6.4.4.2.5.2\n  Attention Command\nThis Command Type field Shall be used to indicate the type of Command request being sent. An Initiator Shall set \nthe field to REQ to indicate that this is a Command request from an Initiator. If Structured VDMs are supported, then \nno response Shall be made to an Attention Command.\n6.4.4.2.6\n  Command\n6.4.4.2.6.1\n  Commands other than Attention\nThe Command field contains the value for the VDM Command being sent. The Commands explicitly listed in the \nCommand field are used to identify devices and manage their operational Modes. There is a further range of \nCommand values left for the vendor to use to manage additional extensions.\nA Structured VDM Command consists of a Command request and a Command response (ACK, NAK or BUSY). A \nStructured VDM Command is deemed to be completed (and if applicable, the transition to the requested \nfunctionality is made) when the GoodCRC Message has been successfully received by the Responder in reply to its \nCommand response.\n","image_count":0,"table_count":1}
{"page":167,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 167\nIf Structured VDMs are supported, but the Structured VDM Command request is an Unrecognized Message, it Shall \nbe NAKed (see Table 6.32, \"Commands and Responses\").\n6.4.4.2.6.2\n  Attention Command\nThe Command field contains the value for the VDM Command being sent (Attention). The Attention Command \nMay be used by the Initiator to notify the Responder that it requires service. \nA Structured VDM Attention Command consists of a Command request but no Command response. A Structured \nVDM Attention Command is deemed to be completed when the GoodCRC Message has been successfully received \nby the Initiator in reply to its Attention Command request.\nIf Structured VDMs are supported, but the Structured VDM Attention Command request is an Unrecognized Message \nit Shall be Ignored (see Table 6.32, \"Commands and Responses\").\n6.4.4.3\n  Use of Commands\nThe VDM Header for a Structured VDM Message defines Commands used to retrieve a list of SVIDs the device \nsupports, to discover the Modes associated with each SVID, and to enter/exit the Modes. The Commands include:\n\nDiscover Identity\n\nDiscover SVIDs\n\nDiscover Modes\n\nEnter Mode\n\nExit Mode\n\nAttention\nAdditional Command space is also Reserved for Standard and Vendor use and for future extensions. \nThe Command AMSs use the terms Initiator and Responder to identify messaging roles the ports are taking on \nrelative to each other. This role is independent of the Port's power capability (Provider, Consumer etc.) or its \npresent Power Role (Source or Sink). The Initiator is the Port sending the initial Command request and the \nResponder is the Port replying with the Command response. See Section 6.4.4.4, \"Command Processes\".\nAll Ports that support Modes Shall support the Discover Identity, Discover SVIDs, the Discover Modes, the Enter \nMode and Exit Mode Commands.\nTable 6.32, \"Commands and Responses\" details the responses a Responder May issue to each Command request. \nResponses not listed for a given Command Shall Not be sent by a Responder. A NAK response Should be taken as \nan indication not to retry that particular Command.\nExamples of Command usage can be found in Appendix C, \"VDM Command Examples\".\nTable 6.32  Commands and Responses\nCommand\nAllowed Response\nReference\nDiscover Identity\nACK, NAK, BUSY\nSection 6.4.4.3.1\nDiscover SVIDs\nACK, NAK, BUSY\nSection 6.4.4.3.2\nDiscover Modes\nACK, NAK, BUSY\nSection 6.4.4.3.3\nEnter Mode\nACK, NAK\nSection 6.4.4.3.4\nExit Mode\nACK, NAK\nSection 6.4.4.3.5\nAttention\nNone\nSection 6.4.4.3.6\n","image_count":0,"table_count":2}
{"page":168,"text":"Page 168\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1\n  Discover Identity\nThe Discover Identity Command is provided to enable an Initiator to identify its Port Partner and for an Initiator \n(VCONN Source) to identify the Responder (Cable Plug or VPD). The Discover Identity Command is also used to \ndetermine whether a Cable Plug or VPD is PD-Capable by looking for a GoodCRC Message Response.\nThe Discover Identity Command Shall only be sent to SOP when there is an Explicit Contract.\nThe Discover Identity Command Shall be used to determine whether a given Cable Plug or VPD is PD Capable (see \nSection 8.3.3.21.1, \"Initiator Structured VDM Discover Identity State Diagram\" and Section 8.3.3.25.3, \"Source Startup \nStructured VDM Discover Identity of a Cable Plug State Diagram\"). In this case a Discover Identity Command request \nsent to SOP’ Shall Not cause a Soft Reset if a GoodCRC Message response is not returned since this can indicate a \nnon-PD Capable cable or VPD.\nNote:\nA Cable Plug or VPD will not be ready for PD Communication until tVCONNStable after VCONN has been \napplied (see [USB Type-C 2.4]). \nDuring Cable Plug or VPD discovery, when there is an Explicit Contract, Discover Identity Commands are sent at a \nrate defined by the DiscoverIdentityTimer (see Section 6.6.15, \"DiscoverIdentityTimer\") up to a maximum of \nnDiscoverIdentityCount times (see Section 6.7.5, \"Discover Identity Counter\").\nA PD-Capable Cable Plug or VPD Shall return a Discover Identity Command ACK in response to a Discover Identity \nCommand request sent to SOP’.\nThe Discover Identity Command Shall be used to determine the identity and/or Capabilities of the Port Partner. \nThe following products Shall return a Discover Identity Command ACK in response to a Discover Identity \nCommand request sent to SOP:\n\nA PD-Capable UFP that supports Modal Operation.\n\nA PD-Capable product that has multiple DFPs.\n\nA PD-Capable [USB4] product.\nThe SVID in the Discover Identity Command request Shall be set to the PD SID (see Section Table 6.31, \"SVID \nValues\").\nThe Number of Data Objects field in the Message Header in the Discover Identity Command request Shall be set \nto 1 since the Discover Identity Command request Shall Not contain any VDOs. \nThe Discover Identity Command ACK sent back by the Responder Shall contain an ID Header VDO, a Cert Stat VDO, \na Product VDO and the Product Type VDOs defined by the Product Type as shown in Figure 6.16, \"Discover Identity \nCommand response\". This specification defines the following Product Type VDOs:\n\nPassive Cable VDO (see Section 6.4.4.3.1.6, \"Passive Cable VDO\")\n\nActive Cable VDOs (see Section 6.4.4.3.1.7, \"Active Cable VDOs\")\n\nVCONN Powered USB Device (VPD) VDO (see Section 6.4.4.3.1.9, \"VCONN Powered USB Device VDO\")\n\nUFP VDO (see Section 6.4.4.3.1.4, \"UFP VDO\")\n\nDFP VDO (see Section 6.4.4.3.1.5, \"DFP VDO\")\nNo VDOs other than those defined in this specification Shall be sent as part of the Discover Identity Command \nresponse. Where there is no Product Type VDO defined for a specific Product Type, no VDOs Shall be sent as part of \nthe Discover Identity Command response. Any additional VDOs received by the Initiator Shall be Ignored.\n","image_count":0,"table_count":1}
{"page":169,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 169\nFigure 6.16 Discover Identity Command response\nThe Number of Data Objects field in the Message Header in the Discover Identity Command NAK and BUSY \nresponses Shall be set to 1 since they Shall Not contain any VDOs.\nIf the product is a DRD both a Product Type (UFP) and a Product Type (DFP) are declared in the ID Header. These \nproducts Shall return Product Type VDOs for both UFP and DFP beginning with the UFP VDO, then by a 32-bit Pad \nObject (defined as all '0's), followed by the DFP VDO as shown in Figure 6.17, \"Discover Identity Command response \nfor a DRD\".\nFigure 6.17 Discover Identity Command response for a DRD\n6.4.4.3.1.1\n  ID Header VDO\nThe ID Header VDO contains information corresponding to the Power Delivery Product. The fields in the ID Header \nVDO Shall be as defined in Section Table 6.33, \"ID Header VDO\".\nTable 6.33  ID Header VDO\nBit(s)\nDescription\nReference\nB31\nUSB Communications Capable as USB Host\nSection 6.4.4.3.1.1.1\n\nShall be set to one if the product is capable of enumerating USB Devices.\n\nShall be set to zero otherwise.\nB30\nUSB Communications Capable as a USB Device\nSection 6.4.4.3.1.1.2\n\nShall be set to one if the product is capable of being enumerated as a \nUSB Device.\n\nShall be set to zero otherwise\nB29…27\nSOP Product Type (UFP)\nSection 6.4.4.3.1.1.3\n\n000b – Not a UFP\n\n001b – PDUSB Hub\n\n010b – PDUSB Peripheral\n\n011b – PSD\n\n100b…111b – Reserved, Shall Not be used.\nSOP’ Product Type (Cable Plug/VPD)\n\n000b – Not a Cable Plug/VPD\n\n001b…010b – Reserved, Shall Not be used.\n\n011b – Passive Cable\n\n100b – Active Cable\n\n101b – Reserved, Shall Not be used.\n\n110b – VCONN Powered USB Device (VPD) \n\n111b – Reserved, Shall Not be used.\nHeader\nNo. of Data Objects = 4-71\nVDM Header\nID Header VDO\nCert Stat VDO\n0..32 Product Type VDO(s)\nProduct VDO\n1.\nOnly Data objects defined in this specification can be sent as part of the Discover Identity Command.\n2.\nThe following sections define the number and content of the VDOs for each Product Type.\nHeader\nNo. of Data Objects = 7\nVDM Header\nID Header VDO\nCert Stat VDO\nProduct VDO\nProduct Type VDO(s)\nyp\n( )\nUFP        Pad         DFP\n","image_count":105,"table_count":4}
{"page":170,"text":"Page 170\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1.1.1\n  USB Communications Capable as a USB Host\nThe USB Communications Capable as USB Host field is used to indicate whether or not the Port has a USB Host \nCapability.\n6.4.4.3.1.1.2\n  USB Communications Capable as a USB Device\nThe USB Communications Capable as a USB Device field is used to indicate whether or not the Port has a USB Device \nCapability.\n6.4.4.3.1.1.3\n  Product Type (UFP)\nThe SOP Product Type (UFP) field indicates the type of Product when in UFP Data Role, whether a VDO will be \nreturned and if so the type of VDO to be returned. The Product Type indicated in the SOP Product Type (UFP) field \nShall be the closest categorization of the main functionality of the Product in UFP Data Role or \"Undefined\" when \nthere is no suitable category for the product. For DRD Products this field Shall always indicate the Product Type \nwhen in UFP role regardless of the present Data Role. Table 6.34, \"Product Types (UFP)\" defines the Product Type \nVDOs which Shall be returned.\nB26\nModal Operation Supported\nSection 6.4.4.3.1.1.4\n\nShall be set to one if the product (UFP/Cable Plug) is capable of \nsupporting Modal Operation (Alternate Modes).\n\nShall be set to zero otherwise.\nB25…23\nSOP - Product Type (DFP)\nSection 6.4.4.3.1.1.6\n\n000b – Not a DFP\n\n001b – PDUSB Hub\n\n010b – PDUSB Host\n\n011b – Power Brick\n\n100b…111b – Reserved, Shall Not be used.\nSOP’: Reserved, Shall Not be used.\nB22…21\nConnector Type\nSection 6.4.4.3.1.1.7\n\n00b – Reserved, for compatibility with legacy systems.\n\n01b – Reserved, Shall Not be used.\n\n10b – USB Type-C Receptacle\n\n11b – USB Type-C Plug\nB20…16\nReserved, Shall Not be used.\nB15…0\nUSB Vendor ID\nSection 6.4.4.3.1.1.8\n[USB 2.0]/[USB 3.2]/[USB4]\nTable 6.34  Product Types (UFP)\nProduct Type\nDescription\nProduct Type \nVDO\nReference\nUndefined\n Shall be used when this is not a UFP.\nNone\nPDUSB Hub\n Shall be used when the Product is a PDUSB Hub.\nUFP VDO\nSection 6.4.4.3.1.4\nPDUSB Peripheral\n Shall be used when the Product is a PDUSB \nDevice other than a PDUSB Hub.\nUFP VDO\nSection 6.4.4.3.1.4\nPSD\n Shall be used when the Product is a PSD, e.g., \npower bank. \nNone\nTable 6.33  ID Header VDO (Continued)\nBit(s)\nDescription\nReference\n","image_count":0,"table_count":3}
{"page":171,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 171\n6.4.4.3.1.1.4\n  Product Type (Cable Plug)\nThe SOP’ Product Type (Cable Plug/VPD) field indicates the type of Product when the Product is a Cable Plug or VPD, \nwhether a VDO will be returned and if so the type of VDO to be returned. Table 6.35, \"Product Types (Cable Plug/\nVPD)\" defines the Product Type VDOs which Shall be returned.\n6.4.4.3.1.1.5\n  Modal Operation Supported\nThe Modal Operation Supported bit is used to indicate whether or not the Product (either a Cable Plug or a device \nthat can operate in the UFP role) is capable of supporting Modes. The Modal Operation Supported bit does not \ndescribe a DFP's Alternate Mode Controller functionality.\nA product that supports Modal Operation Shall respond to the Discover SVIDs Command with a list of SVIDs for all \nof the Modes it is capable of supporting whether or not those Modes can currently be entered.\n6.4.4.3.1.1.6\n  Product Type (DFP)\nThe SOP - Product Type (DFP) field indicates the type of Product when in DFP Data Role, whether a VDO will be \nreturned and if so the type of VDO to be returned. The Product Type indicated in the SOP - Product Type (DFP) field \nShall be the closest categorization of the main functionality of the Product in DFP Data Role or \"Undefined\" when \nthere is no suitable category for the product. For DRD Products this field Shall always indicate the Product Type \nwhen in DFP role regardless of the present Data Role. Table 6.36, \"Product Types (DFP)\" defines the Product Type \nVDOs which Shall be returned.\nIn SOP’ Communication (Cable Plugs and VPDs) this bit field is Reserved and Shall be set to zero.\n6.4.4.3.1.1.7\n  Connector Type Field\nThe Connector Type field (B22…21) Shall contain a value identifying it as either a USB Type-C receptacle or a USB \nType-C plug.\nTable 6.35  Product Types (Cable Plug/VPD)\nProduct Type\nDescription\nProduct Type \nVDO\nReference\nUndefined\nShall be used where no other Product Type value \nis appropriate.\nNone\nActive Cable\nShall be used when the Product is a cable that \nincorporates signal conditioning circuits.\nActive Cable VDO\nSection 6.4.4.3.1.7\nPassive Cable\nShall be used when the Product is a cable that \ndoes not incorporate signal conditioning circuits.\nPassive Cable VDO\nSection 6.4.4.3.1.6\nVCONN Powered USB \nDevice\nShall be used when the Product is a PDUSB \nVCONN Powered USB Device.\nVPD VDO\nSection 6.4.4.3.1.9\nTable 6.36  Product Types (DFP)\nProduct Type\nDescription\nProduct Type \nVDO\nReference\nUndefined\nShall be used where no other Product Type value \nis appropriate.\nNone\nPDUSB Hub\nShall be used when the Product is a PDUSB Hub.\nDFP VDO\nSection 6.4.4.3.1.7\nPDUSB Host\nShall be used when the Product is a PDUSB Host \nor a PDUSB host that supports one or more \nAlternate Modes as an AMC.\nDFP VDO\nSection 6.4.4.3.1.6\nCharger\nShall be used when the Product is a Charger.\nDFP VDO\nSection 6.4.4.3.1.9\n","image_count":0,"table_count":3}
{"page":172,"text":"Page 172\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1.1.8\n  Vendor ID\nManufacturers Shall set the USB Vendor ID field to the value of the Vendor ID assigned to them by USB-IF. For USB \nDevices or Hubs which support USB Communications the USB Vendor ID field Shall be identical to the Vendor ID \nfield defined in the product's USB Device Descriptor (see [USB 2.0] and [USB 3.2]).\n6.4.4.3.1.2\n  Cert Stat VDO\nThe Cert Stat VDO Shall contain the XID assigned by USB-IF to the product before certification in binary format. \nThe fields in the Cert Stat VDO Shall be as defined in Table 6.37, \"Cert Stat VDO\".\n6.4.4.3.1.3\n  Product VDO\nThe Product VDO contains identity information relating to the product. The fields in the Product VDO Shall be as \ndefined in Table 6.38, \"Product VDO\".\nManufacturers Should set the USB Product ID field to a unique value identifying the product and Should set the \nbcdDevice field to a version number relevant to the release version of the product.\n6.4.4.3.1.4\n  UFP VDO\nThe UFP VDO defined in this section Shall be returned by Ports capable of operating as a UFP including traditional \nUSB peripherals, USB Hub's upstream Port and DRD capable host Ports. The UFP VDO defined in this section Shall \nbe sent when the Product Type (UFP) field in the ID Header VDO is given as a PDUSB Peripheral or PDUSB Hub. \nTable 6.39, \"UFP VDO\" defines the UFP VDO that Shall be sent based on the Product Type.\nA [USB4] UFP Shall support the Structured VDM Discover Identity Command.\nTable 6.37  Cert Stat VDO\nBit(s)\nDescription\nReference\nB31...0\n32-bit unsigned integer, XID\nAssigned by USB-IF\nTable 6.38  Product VDO\nBit(s)\nDescription\nReference\nB31...16\n16-bit unsigned integer, USB Product ID\n[USB 2.0]/[USB 3.2]\nB15...0\n16-bit unsigned integer, bcdDevice\n[USB 2.0]/[USB 3.2]\nTable 6.39  UFP VDO\nBit(s)\nDescription\nReference\nB31…29\nUFP VDO Version\nVersion Number of the VDO (not this specification Version):\n\nVersion 1.3 = 011b\nValues 100b…111b are Reserved, Shall Not be used.\nB28\nReserved\nShall be set to zero.\nB27…24\nDevice Capability\nBit\nDescription\n0\n[USB 2.0] Device Capable\n1\n[USB 2.0] Device Capable (Billboard only)\n2\n[USB 3.2] Device Capable\n3\n[USB4] Device Capable\nB23…22\nConnector Type (Legacy)\nDeprecated, Shall be set to 00b.\nB21…11\nReserved\nShall be set to zero.\n","image_count":0,"table_count":4}
{"page":173,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 173\n6.4.4.3.1.4.1\n  VDO Version Field\nThe UFP VDO Version field contains a VDO Version for this VDM Version number. This field indicates the expected \ncontent for the UFP VDOs.\n6.4.4.3.1.4.2\n  Device Capability Field\nThe Device Capability bit-field describes the UFP's Capabilities when operating as either a PDUSB Device or PDUSB \nHub.\nB10…8\nVCONN Power\nWhen the VCONN Required field is set to “Yes” the VCONN \nPower Field indicates the VCONN power needed by the AMA for \nfull functionality:\n\n000b = 1W\n\n001b = 1.5W\n\n010b = 2W\n\n011b = 3W\n\n100b = 4W\n\n101b = 5W\n\n110b = 6W\n111b = Reserved, Shall Not be used.\nWhen the VCONN Required field is set to “No” the VCONN Power \nfield is Reserved and Shall be set to zero.\nB7\nVCONN Required\nIndicates whether the AMA requires VCONN in order to \nfunction.\n\n0 = No\n\n1 = Yes\nWhen the Alternate Modes field indicates no modes are \nsupported, the VCONN Required field is Reserved and Shall be \nset to zero.\nB6\nVBUS Required\nIndicates whether the AMA requires VBUS in order to function.\n\n0 = Yes\n\n1 = No\nWhen the Alternate Modes field indicates no modes are \nsupported, the VBUS Required field is Reserved and Shall be \nset to zero.\nB5…3\nAlternate Modes\nBit\nDescription\n0\nSupports [TBT3] Alternate Mode\n1\nSupports Alternate Modes that reconfigure the \nsignals on the [USB Type-C 2.4] connector – \nexcept for [TBT3].\n2\nSupports Alternate Modes that do not reconfigure \nthe signals on the [USB Type-C 2.4] connector.\nB2…0\nUSB Highest Speed\n\n000b = [USB 2.0] only, no SuperSpeed support\n\n001b = [USB 3.2] Gen1\n\n010b = [USB 3.2]/[USB4] Gen2\n\n011b = [USB4] Gen3\n\n100b =[USB4] Gen4\n\n101b…111b = Reserved and Shall be set to zero.\nTable 6.39  UFP VDO (Continued)\nBit(s)\nDescription\nReference\n","image_count":0,"table_count":2}
{"page":174,"text":"Page 174\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe bits in the bit-field Shall be non-zero when the corresponding USB Device speed is supported and Shall be set \nto zero when the corresponding USB Device speed is not supported.\n[USB 2.0] \"Device capable\" and \"Device capable Billboard only\" (bits 0 and 1) Shall Not be simultaneously set.\n6.4.4.3.1.4.3\n  Connector Type Field\nTh Connector Type (Legacy) field was previously used for the UFP VDO's Connector Type. Shall be set to 00b by \nthe Cable Plug and Shall be Ignored by the receiver. The receiver can find this information in the Connector Type \nfield in the ID Header VDO (Section 6.4.4.3.1.1.7, \"Connector Type Field\").\n6.4.4.3.1.4.4\n  VCONN Power Field\nWhen the VCONN Required field indicates that VCONN is required the VCONN Power field Shall indicate how much \npower an AMA needs in order to fully operate. When the VCONN Required field is set to \"No\" the VCONN Power field \nis Reserved and Shall be set to zero.\n6.4.4.3.1.4.5\n  VCONN Required Field\nThe VCONN Required field Shall indicate whether VCONN is needed for the AMA to operate. The VCONN Required field \nShall only be used if the Alternate Modes field indicates that an Alternate Mode is supported. If no Alternate Modes \nare supported, this field is Reserved and Shall be set to zero.\n6.4.4.3.1.4.6\n  VBUS Required Field\nThe VBUS Required field Shall indicate whether VBUS is needed for the AMA to operate. The VBUS required field \nShall only be used if the Alternate Modes field indicates that an Alternate Mode is supported. If no Alternate Modes \nare supported, this field is Reserved and Shall be set to zero.\n6.4.4.3.1.4.7\n  Alternate Modes Field\nThe Alternate Modes field Shall be used to identify all the types of Alternate Modes, if any, a device supports.\n6.4.4.3.1.4.8\n  USB Highest Speed Field\nThe USB Highest Speed field Shall indicate the Port's highest speed capability. The DFP Shall consider all values \nindicated in this field that are higher than the highest value that the DFP recognizes as being Valid and functionally \ncompatible with the highest speed that the DFP supports.\n","image_count":0,"table_count":1}
{"page":175,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 175\n6.4.4.3.1.5\n  DFP VDO\nThe DFP VDO Shall be returned by Ports capable of operating as a DFP; including those implemented by Hosts, Hubs \nand Power Bricks. The DFP VDO Shall be returned when the Product Type (DFP) field in the ID Header VDO is given \nas Power Brick, PDUSB Host or PDUSB Hub. Table 6.40, \"DFP VDO\" defines the DFP VDO that Shall be sent.\n6.4.4.3.1.5.1\n  VDO Version Field\nThe DFP VDO Version field Shall contain a VDO Version for this VDM Version number. This field indicates the \nexpected content for the DFP VDO.\n6.4.4.3.1.5.2\n  Host Capability Field\nThe Host Capability bit-field Shall describe whether the DFP can operate as a PDUSB Host and the DFP's \nCapabilities when operating as a PDUSB Host.\nPower Bricks and PDUSB Hubs Shall set the Host Capability bits to zero.\n6.4.4.3.1.5.3\n  Connector Type Field\nThe Connector Type (Legacy) field was previously used for the UFP VDO's Connector Type. Shall be set to 00b by \nthe Cable Plug and Shall be Ignored by the receiver. The receiver can find this information in the Connector Type \nfield in the ID Header VDO (Section 6.4.4.3.1.1.7, \"Connector Type Field\").\n6.4.4.3.1.5.4\n  Port Number Field\nThe Port Number field Shall be a Static unique number that unambiguously identifies each [USB Type-C 2.4] DFP, \nincluding DRPs, on the device.\nNote:\nThis number is independent of the USB Port number.\nTable 6.40  DFP VDO\nBit(s)\nField\nDescription\nB31…29\nDFP VDO Version\nVersion Number of the VDO (not this specification Version):\n\nVersion 1.2 = 010b\nValues 011b…111b are Reserved and Shall Not be used\nB28…27\nReserved\nShall be set to zero.\nB26…24\nHost Capability\nBit\nDescription\n0\n[USB 2.0] Host Capable\n1\n[USB 3.2] Host Capable\n2\n[USB4] Host Capable\nB23…22\nConnector Type \n(Legacy)\nShall be set to 00b.\nB21…5\nReserved\nShall be set to zero.\nB4…0\nPort Number\nUnique Port number to identify a specific Port on a multi-Port device.\n","image_count":0,"table_count":2}
{"page":176,"text":"Page 176\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1.6\n  Passive Cable VDO\nThe Passive Cable VDO defined in this section Shall be sent when the Product Type is given as Passive Cable. \nTable 6.41, \"Passive Cable VDO\" defines the Cable VDO which Shall be sent.\nA Passive Cable has a USB Plug on each end at least one of which is a Cable Plug supporting SOP’ Communication. A \nPassive Cable Shall Not incorporate data bus signal conditioning circuits and hence has no concept of Super Speed \nDirectionality. A Passive Cable Shall include a VBUS wire and Shall only respond to SOP’ Communication. Passive \nCables Shall support the Structured VDM Discover Identity Command and Shall return the Passive Cable VDO in a \nDiscover Identity Command ACK as shown in Table 6.41, \"Passive Cable VDO\".\nTable 6.41  Passive Cable VDO\nBit(s)\nField\nDescription\nB31…28\nHW Version\n0000b…1111b assigned by the VID owner\nB27…24\nFirmware Version\n0000b…1111b assigned by the VID owner\nB23…21\nVDO Version\nVersion Number of the VDO (not this specification Version):\n\nVersion 1.0 = 000b\nValues 001b…111b are Reserved and Shall Not be used.\nB20\nReserved\nShall be set to zero.\nB19…18\nUSB Type-C plug to USB \nType-C/Captive \n(Passive Cable)\n\n00b = Reserved and Shall Not be used\n\n01b = Reserved and Shall Not be used\n\n10b = USB Type-C\n\n11b = Captive\nB17\nEPR Capable (Passive \nCable)\n\n0b – Cable is not EPR Capable\n\n1b = Cable is EPR Capable\nB16…13\nCable Latency (Passive \nCable)\n\n0000b – Reserved and Shall Not be used\n\n0001b – <10ns (~1m)\n\n0010b – 10ns to 20ns (~2m)\n\n0011b – 20ns to 30ns (~3m)\n\n0100b – 30ns to 40ns (~4m)\n\n0101b – 40ns to 50ns (~5m)\n\n0110b – 50ns to 60ns (~6m)\n\n0111b – 60ns to 70ns (~7m)\n\n1000b – > 70ns (>~7m)\nNote: 1001b ….1111b Reserved and Shall Not be used\nB12…11\nCable Termination Type \n(Passive Cable)\n\n00b = VCONN not required. Cable Plugs that only support Discover Identity \nCommands Shall set these bits to 00b.\n\n01b = VCONN required\n\n10b…11b = Reserved and Shall Not be used\nB10…9\nMaximum VBUS Voltage \n(Passive Cable)\nMaximum Cable VBUS Voltage2:\n\n00b – 20V\n\n01b – 30V1 (Deprecated)\n\n10b – 40V1 (Deprecated)\n\n11b – 50V\nB8…7\nReserved\nShall be set to zero.\n1)\nValues no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2)\nEPR Sinks with a captive cable Shall report 50V.\n","image_count":0,"table_count":2}
{"page":177,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 177\n6.4.4.3.1.6.1\n  HW Version Field\nThe HW Version (B31…28) contains a HW version assigned by the VID owner.\n6.4.4.3.1.6.2\n  FW Version Field\nThe Firmware Version field (B27…24) contains a FW version assigned by the VID owner.\n6.4.4.3.1.6.3\n  VDO Version Field\nThe VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the \nexpected content for this VDO.\n6.4.4.3.1.6.4\n  USB Type-C plug to USB Type-C/Captive Field\nThe USB Type-C plug to USB Type-C/Captive (Passive Cable) field (B19…18) Shall contain a value indicating \nwhether the opposite end from the USB Type-C plug is another USB Type-C plug (i.e., a detachable Standard USB \nType-C Cable Assembly) or is a Captive Cable Assembly.\n6.4.4.3.1.6.5\n  EPR Mode Capable\nThe EPR Capable (Passive Cable) bit is a Static bit which Shall only be set when the cable is specifically designed \nfor safe operation when carrying up to 48 volts at 5 amps.\n6.4.4.3.1.6.6\n  Cable Latency Field\nThe Cable Latency (Passive Cable) field (B16…13) Shall contain a value corresponding to the signal latency \nthrough the cable which can be used as an approximation for its length.\n6.4.4.3.1.6.7\n  Cable Termination Type Field\nThe Cable Termination Type (Passive Cable) field (B12…11) Shall contain a value indicating whether the Passive \nCable needs VCONN only initially in order to support the Discover Identity Command, after which it can be removed, \nor the Passive Cable needs VCONN to be continuously applied in order to power some feature of the Cable Plug.\n6.4.4.3.1.6.8\n  Maximum VBUS Voltage Field\nThe Maximum VBUS Voltage (Passive Cable) field (B10…9) Shall contain the maximum voltage that Shall be \nNegotiated using a Fixed Supply over the cable as part of an Explicit Contract where the maximum voltage that Shall \nbe applied to the cable is vSrcNew max + vSrcValid max. For example, when the Maximum VBUS Voltage (Passive \nCable) field is 20V, a Fixed Supply of 20V can be Negotiated as part of an Explicit Contract where the absolute \nmaximum voltage that can be applied to the cable is 21.55V. Similarly, when the Maximum VBUS Voltage (Passive \nB6…5\nVBUS Current Handling \nCapability (Passive \nCable)\n\n00b = Reserved and Shall Not be used\n\n01b = 3A\n\n10b = 5A\n\n11b = Reserved and Shall Not be used\nB4…3\nReserved\nShall be set to zero.\nB2…0\nUSB Highest Speed \n(Passive Cable)\n\n000b = [USB 2.0] only, no SuperSpeed support \n\n001b = [USB 3.2] Gen1\n\n010b = [USB 3.2]/[USB4] Gen2\n\n011b = [USB4] Gen3\n\n100b = [USB4] Gen4\n\n101b…111b = Reserved and Shall Not be used\nTable 6.41  Passive Cable VDO (Continued)\nBit(s)\nField\nDescription\n1)\nValues no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2)\nEPR Sinks with a captive cable Shall report 50V.\n","image_count":0,"table_count":2}
{"page":178,"text":"Page 178\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nCable) field is 50V, a Fixed Supply of 48V can be Negotiated as part of an Explicit Contract where the absolute \nmaximum voltage that can be applied to the cable is 50.9V. Maximum VBUS Voltage (Passive Cable) field values of \n01b and 10b (formerly 30V and 40V) Shall be treated if they were 00b (20V).\n6.4.4.3.1.6.9\n  VBUS Current Handling Capability Field\nThe VBUS Current Handling Capability (Passive Cable) field (B6…5) Shall indicate whether the cable is capable \nof carrying 3A or 5A.\n6.4.4.3.1.6.10\n  USB Highest Speed Field\nThe USB Highest Speed (Passive Cable) field (B2…0) Shall indicate the highest rate the cable supports. The DFP \nShall consider all values indicated in this field that are higher than the highest value that the DFP recognizes as \nbeing Valid and functionally compatible with the highest speed that the DFP supports.\n","image_count":0,"table_count":1}
{"page":179,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 179\n6.4.4.3.1.7\n  Active Cable VDOs\nAn Active Cable has a USB Plug on each end at least one of which is a Cable Plug supporting SOP’ Communication. \nAn Active Cable Shall incorporate data bus signal conditioning circuits and May have a concept of Super Speed \nDirectionality on its Super Speed wires. An Active Cable May include a VBUS wire.\nAn Active Cable:\n\nShall respond to SOP’ Communication.\n\nMay respond to SOP’’ Communication.\n\nShall support the Structured VDM Discover Identity Command.\n\nIn the Discover Identity Command ACK:\n\nShall set the Product Type in the ID Header VDO to Active Cable.\n\nShall return the Active Cable VDOs defined in Table 6.42, \"Active Cable VDO1\" and Table 6.43, \"Active \nCable VDO2\"..\nTable 6.42  Active Cable VDO1\nBit(s)\nField\nDescription\nB31…28\nHW Version\n0000b…1111b assigned by the VID owner\nB27…24\nFirmware Version\n0000b…1111b assigned by the VID owner\nB23…21\nVDO Version\nVersion Number of the VDO (not this specification Version):\n\nVersion 1.0 = 000b\nValues 001b…111b are Reserved and Shall Not be used.\nB20\nReserved\nShall be set to zero.\nB19…18\nUSB Type-C plug to USB \nType-C/Captive\n\n00b = Reserved and Shall Not be used\n\n01b = Reserved and Shall Not be used\n\n10b = USB Type-C\n\n11b = Captive\nB17\nEPR Capable (Active \nCable)\n\n0b – Cable is not EPR Capable\n\n1b = Cable is EPR Capable\nB16…13\nCable Latency\n\n0000b – Reserved and Shall Not be used\n\n0001b – <10ns (~1m)\n\n0010b – 10ns to 20ns (~2m)\n\n0011b – 20ns to 30ns (~3m)\n\n0100b – 30ns to 40ns (~4m)\n\n0101b – 40ns to 50ns (~5m)\n\n0110b – 50ns to 60ns (~6m)\n\n0111b – 60ns to 70ns (~7m)\n\n1000b –1000ns (~100m)\n\n1001b –2000ns (~200m)\n\n1010b – 3000ns (~300m)\n\n1001b ….1111b Reserved and Shall Not be used\nNote: Includes latency of electronics in Active Cable.\nB12…11\nCable Termination Type \n(Active Cable)\n\n00b…01b = Reserved and Shall Not be used\n\n10b = One end Active, one end passive, VCONN required \n\n11b = Both ends Active, VCONN required\n1)\nValues no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2)\nEPR Sinks with a captive cable Shall report 50V.\n","image_count":0,"table_count":2}
{"page":180,"text":"Page 180\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nB10…9\nMaximum VBUS Voltage \n(Active Cable)\nMaximum Cable VBUS voltage2:\n\n00b – 20V\n\n01b – 30V1 (Deprecated)\n\n10b – 40V1 (Deprecated)\n\n11b – 50V\nB8…7\nReserved\nShall be set to zero.\nB8\nSBU Supported\n\n0 = SBU connections supported\n\n1 = SBU connections are not supported\nB7\nSBU Type\nWhen SBU Supported = 1 this bit Shall be Ignored \nWhen SBU Supported = 0:\n\n0 = SBU is passive\n\n1 = SBU is active\nB6…5\nVBUS Current Handling \nCapability (Active \nCable)\nWhen VBUS Through Cable is “No”, this field Shall be Ignored. \nWhen VBUS Through Cable is “Yes”:\n\n00b = Reserved and Shall Not be used\n\n01b = 3A\n\n10b = 5A\n\n11b = Reserved and Shall Not be used\nB4\nVBUS Through Cable\n\n0 = No\n\n1 = Yes\nB3\nSOP’’ Controller Present\n\n0 = No SOP’’ controller present\n\n1 = SOP’’ controller present\nB2…0\nUSB Highest Speed \n(Active Cable)\n\n000b = [USB 2.0] only, no SuperSpeed support \n\n001b = [USB 3.2] Gen1\n\n010b = [USB 3.2]/[USB4] Gen2\n\n011b = [USB4] Gen3\n\n100b = [USB4] Gen4\n\n101b…111b = Reserved and Shall Not be used\nTable 6.43  Active Cable VDO2\nBit(s)\nField\nDescription\nB31…24\nMaximum Operating \nTemperature\nThe maximum internal operating temperature in °C. It might or might not reflect the \nplug’s skin temperature.\nB23…16\nShutdown Temperature\nThe temperature, in °C, at which the cable will go into thermal shutdown so as not to \nexceed the allowable plug skin temperature. \nB15\nReserved\nShall be set to zero.\nB14…12\nU3/CLd Power\n\n000b: >10mW\n\n001b: 5-10mW\n\n010b: 1-5mW\n\n011b: 0.5-1mW\n\n100b: 0.2-0.5mW\n\n101b: 50-200µW\n\n110b: <50µW\n\n111b: Reserved and Shall Not be used\nTable 6.42  Active Cable VDO1 (Continued)\nBit(s)\nField\nDescription\n1)\nValues no longer allowed. When present the field Shall be interpreted as if it was 00b.\n2)\nEPR Sinks with a captive cable Shall report 50V.\n","image_count":0,"table_count":3}
{"page":181,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 181\n6.4.4.3.1.7.1\n  HW Version Field\nThe HW Version field (B31…28) contains a HW version assigned by the VID owner.\n6.4.4.3.1.7.2\n  FW Version Field\nThe Firmware Version field (B27…24) contains a FW version assigned by the VID owner.\n6.4.4.3.1.7.3\n  VDO Version Field\nThe VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the \nexpected content for the Active Cable VDOs.\n6.4.4.3.1.7.4\n  Connector Type Field\nThe USB Type-C plug to USB Type-C/Captive field (B19…18) Shall contain a value indicating whether the opposite \nend from the USB Type-C plug is another USB Type-C plug (i.e., a detachable Standard USB Type-C Cable Assembly) \nor is a Captive Cable Assembly.\n6.4.4.3.1.7.5\n  EPR Mode Capable\nThe EPR Capable (Active Cable) is a Static bit which Shall only be set when the cable is specifically designed for \nsafe operation when carrying up to 48 volts at 5 amps.\n6.4.4.3.1.7.6\n  Cable Latency Field\nThe Cable Latency field (B16…13) Shall contain a value corresponding to the signal latency through the cable \nwhich can be used as an approximation for its length.\nB11\nU3 to U0 transition \nmode\n\n0b: U3 to U0 direct\n\n1b: U3 to U0 through U3S\nB10\nPhysical connection\n\n0b = Copper\n\n1b = Optical\nB9\nActive element\n\n0b = Active Re-driver\n\n1b = Active Re-timer\nB8\nUSB4 Supported\n\n0b = [USB4] supported\n\n1b = [USB4]not supported\nB7…6\nUSB 2.0 Hub Hops \nConsumed\nNumber of [USB 2.0] ‘hub hops’ cable consumes.\nShall be set to zero if USB 2.0 not supported.\nB5\nUSB 2.0 Supported\n\n0b = [USB 2.0] supported\n\n1b = [USB 2.0] not supported\nB4\nUSB 3.2 Supported\n\n0b = [USB 3.2] SuperSpeed supported\n\n1b = [USB 3.2] SuperSpeed not supported\nB3\nUSB Lanes Supported\n\n0b = One lane\n\n1b = Two lanes\nB2\nOptically Isolated \nActive Cable\n\n0b = No\n\n1b = Yes\nB1\nUSB4 Asymmetric Mode \nSupported\n\n0b = No\n\n1b = Yes\nShall be set to zero if asymmetry is not supported.\nB0\nUSB Gen\n\n0b = Gen 1\n\n1b = Gen 2 or higher\nNote: See VDO1 USB Highest Speed for details of Gen supported.\nTable 6.43  Active Cable VDO2 (Continued)\nBit(s)\nField\nDescription\n","image_count":0,"table_count":2}
{"page":182,"text":"Page 182\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1.7.7\n  Cable Termination Type Field\nThe Cable Termination Type (Active Cable) field (B12…11) Shall contain a value corresponding to whether the \nActive Cable has one or two Cable Plugs requiring power from VCONN.\n6.4.4.3.1.7.8\n  Maximum VBUS Voltage Field\nThe Maximum VBUS Voltage (Active Cable) field (B10…9) Shall contain the maximum voltage that Shall be \nNegotiated as part of an Explicit Contract where the maximum voltage that Shall be applied to the cable is vSrcNew \nmax + vSrcValid max. When this field is set to 20V, the cable will safely carry a Programmable Power Supply APDO \nof 20V where the absolute maximum voltage that can be applied to the cable is 21.55V. Similarly, when the \nMaximum VBUS Voltage (Active Cable) field is 50V, a Fixed Supply of 48V can be Negotiated as part of an Explicit \nContract where the absolute maximum voltage that can be applied to the cable is 50.9V. Maximum VBUS Voltage \n(Active Cable) field values of 01b and 10b (formerly 30V and 40V) Shall be treated if they were 00b (20V).\n6.4.4.3.1.7.9\n  SBU Supported Field\nThe SBU Supported field (B8) Shall indicate whether the cable supports the SBUs in the cable.\n6.4.4.3.1.7.10\n  SBU Type Field\nThe SBU Type field (B7) Shall indicate whether the SBUs are passive or active (e.g., digital).\n6.4.4.3.1.7.11\n  VBUS Current Handling Capability Field\nThe VBUS Current Handling Capability (Active Cable) field (B6…5) Shall indicate whether the cable is capable of \ncarrying 3A or 5A. The VBUS Current Handling Capability (Active Cable) field Shall only be Valid when the VBUS \nCurrent Handling Capability (Active Cable) field indicates an end-to-end VBUS wire.\n6.4.4.3.1.7.12\n   VBUS Through Cable Field\nThe VBUS Through Cable field (B4) Shall indicate whether the cable contains an end-to-end VBUS wire.\n6.4.4.3.1.7.13\n  SOP'' Controller Present Field\nThe SOP’’ Controller Present field (B3) Shall indicate whether one of the Cable Plugs is capable of SOP’’ \nCommunication in addition to the Normative SOP’ Communication.\n6.4.4.3.1.7.14\n  USB Highest Speed Field\nThe USB Highest Speed (Active Cable) field (B2…0) Shall indicate the highest rate the cable supports. The DFP \nShall consider all values indicated in this field that are higher than the highest value that the DFP recognizes as \nbeing Valid and functionally compatible with the highest speed that the DFP supports.\n6.4.4.3.1.7.15\n  Maximum Operating Temperature Field\nMaximum Operating Temperature field (B31…24) Shall report the maximum allowable operating temperature \ninside the plug in °C.\n6.4.4.3.1.7.16\n  Shutdown Temperature Field\nShutdown Temperature field (B23…16) Shall indicate the temperature inside the plug, in °C, at which the plug \nwill shut down its active signaling components. When this temperature is reached, it will be reported in the Active \nCable Status Message through the Thermal Shutdown bit. \n6.4.4.3.1.7.17\n  U3/CLd Power Field\nThe U3/CLd Power field (B14…12) Shall indicate the power the cable consumes while in [USB 3.2] U3 or [USB4] \nCLd.\n6.4.4.3.1.7.18\n  U3 to U0 Transition Mode Field\nThe U3 to U0 transition mode field (B11) Shall indicate which U3 to U0 mode the cable supports. This does not \ninclude the power in U3S if supported.\n","image_count":0,"table_count":1}
{"page":183,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 183\n6.4.4.3.1.7.19\n  Physical Connection Field\nThe Physical connection field (B10) Shall indicate the cable's construction, whether the connection between the \nactive elements is copper or optical.\n6.4.4.3.1.7.20\n  Active element Field\nThe Active element field (B9) Shall indicate the cable's active element, whether the active element is a re-timer or \na re-driver.\n6.4.4.3.1.7.21\n  USB4 Supported Field\nThe USB4 Supported field (B8) Shall indicate whether or not the cable supports [USB4] operation.\n6.4.4.3.1.7.22\n  USB 2.0 Hub Hops Consumed field\nThe USB 2.0 Hub Hops Consumed field (B7…6) Shall indicate the number of USB 2.0 'hub hops' that are lost due \nto the transmission time of the cable. \n6.4.4.3.1.7.23\n  USB 2.0 Supported Field\nThe USB 2.0 Supported field (B5) Shall indicate whether or not the cable supports [USB 2.0] only signaling. \n6.4.4.3.1.7.24\n  USB 3.2 Supported Field\nThe USB 3.2 Supported field (B4) Shall, indicate whether or not the cable supports [USB 3.2] SuperSpeed \nsignaling. \n6.4.4.3.1.7.25\n  USB Lanes Supported Field\nThe USB Lanes Supported field (B3) Shall indicate whether the cable supports one or two lanes of [USB 3.2] \nSuperSpeed signaling. \n6.4.4.3.1.7.26\n  Optically Isolated Active Cable Field\nThe Optically Isolated Active Cable field (B2) Shall indicate whether this cable is an optically isolated Active Cable \nor not (as defined in [USB Type-C 2.4]). Optically Isolated Active Cables Shall have a re-timer or linear re-driver \n(LRD) as the active element and do not support [USB 2.0] or carry VBUS.\n6.4.4.3.1.7.27\n  USB4 Asymmetric Mode Supported Field\nThe USB4 Asymmetric Mode Supported field (B1) Shall indicate that the Active Cable supports asymmetric mode \nas defined in [USB4] and [USB Type-C 2.4].\n6.4.4.3.1.7.28\n  USB Gen Field\nThe USB Gen field (B0) Shall indicate the signaling Gen the cable supports. Gen 1 Shall only be used by [USB 3.2] \ncables as indicated by the USB 3.2 Supported field. Gen 2 or higher May be used by either [USB 3.2] or [USB4] \ncables as indicated by their respective supported fields. When Gen 2 or higher is indicated the USB Highest Speed \n(Active Cable) field in VDO1 Shall indicate the actual Gen supported.\n6.4.4.3.1.8\n  Alternate Mode Adapter VDO\nThe Alternate Mode Adapter (AMA) VDO has been Deprecated. PDUSB Devices which support one or more Alternate \nModes Shall set an appropriate Product Type (UFP), and Shall set the Modal Operation Supported bit to '1'.\n","image_count":0,"table_count":1}
{"page":184,"text":"Page 184\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.1.9\n  VCONN Powered USB Device VDO\nThe VCONN Powered USB Device (VPD) VDO defined in this section Shall be sent when the Product Type is given as \nVCONN Powered USB Device. Table 6.44, \"VPD VDO\" defines the VPD VDO which Shall be sent.\n6.4.4.3.1.9.1\n  HW Version Field\nThe HW Version field (B31…28) contains a HW version assigned by the VID owner.\n6.4.4.3.1.9.2\n  FW Version Field\nThe Firmware Version field (B27…24) contains a FW version assigned by the VID owner.\n6.4.4.3.1.9.3\n  VDO Version Field\nThe VDO Version field (B23…20) contains a VDO Version for this VDM Version number. This field indicates the \nexpected content for this VDO.\n6.4.4.3.1.9.4\n  Maximum VBUS Voltage Field\nThe Maximum VBUS Voltage field (B16…15) Shall contain the maximum voltage that a Sink Shall Negotiate \nthrough the VPD Charge Through Port as part of an Explicit Contract.\nNote:\nThe maximum voltage that will be applied to the cable is vSrcNew max + vSrcValid max. For example, \nwhen the Maximum VBUS Voltage field is 20V, a Fixed Supply of 20V can be Negotiated as part of an \nTable 6.44  VPD VDO\nBit(s)\nField\nDescription\nB31…28\nHW Version\n0000b…1111b assigned by the VID owner\nB27…24\nFirmware Version\n0000b…1111b assigned by the VID owner\nB23…21\nVDO Version\nVersion Number of the VDO (not this specification Version):\n\nVersion 1.0 = 000b\n\nValues 001b…111b are Reserved and Shall Not be used.\nB20...17\nReserved\nShall be set to zero.\nB16…15\nMaximum VBUS Voltage\nMaximum VPD VBUS Voltage:\n\n00b – 20V\n\n01b – 30V1 (Deprecated)\n\n10b – 40V1 (Deprecated)\n\n11b – 50V1 (Deprecated)\nB14\nCharge Through \nCurrent Support\nCharge Through Current Support bit=1b:\n\n0b - 3A capable. \n\n1b - 5A capable\nCharge Through Current Support bit = 0b:\n\nReserved and Shall be set to zero.\nB13\nReserved\nShall be set to zero.\nB12…7\nVBUS Impedance\nCharge Through Current Support bit = 1b: VBUS impedance through the VPD in 2 \nmΩ increments. Values less than 10 mΩ are Reserved and Shall Not be used.\nCharge Through Current Support bit = 0b: Reserved and Shall be set to zero.\nB6…1\nGround Impedance\nCharge Through Current Support bit = 1b: Ground impedance through the VPD in \n1 mΩ increments. Values less than 10 mΩ are Reserved and Shall Not be used.\nCharge Through Current Support bit = 0b: Shall be set to zero.\nB0\nCharge Through \nSupport\n\n1b – the VPD supports Charge Through\n\n0b – the VPD does not support Charge Through\n1)\nValues no longer allowed. When present the field Shall be interpreted as if it was 00b.\n","image_count":0,"table_count":2}
{"page":185,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 185\nExplicit Contract where the absolute maximum voltage that can be applied to the cable is 21.55V. \nMaximum VBUS Voltage field values of 01b and 10b (formerly 30V and 40V) Shall be treated if they were \n00b (20V).\n6.4.4.3.1.9.5\n  VBUS Impedance Field\nThe VBUS Impedance field (B12…7) Shall contain the impedance the VPD adds in series between the Source and the \nSink. The Sink Shall take this value into account when requesting current so as to not to exceed the VBUS IR Drop \nlimit of 0.5V between the Source and itself. If the Sink can tolerate a larger IR Drop on VBUS it May do so. \n6.4.4.3.1.9.6\n  Ground Impedance Field\nThe Ground Impedance field (B6…1) Shall contain the impedance the VPD adds in series between the Source and \nthe Sink. The Sink Shall take this value into account when requesting current so as to not to exceed the Ground IR \nDrop limit of 0.25V between the Source and itself.\n6.4.4.3.1.9.7\n  Charge Through Field\nThe Firmware Version field (B0) Shall be set to 1b when the VPD supports Charge Through and 0b otherwise.\n","image_count":0,"table_count":1}
{"page":186,"text":"Page 186\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.2\n  Discover SVIDs\nThe Discover SVIDs Command is used by an Initiator to determine the SVIDs for which a Responder has Modes. The \nDiscover SVIDs Command is used in conjunction with the Discover Modes Command in the Discovery Process to \ndetermine which Modes a device supports. The list of SVIDs is always terminated with one or two 0x0000 SVIDs.\nThe SVID in the Discover SVIDs Command Shall be set to the PD SID (see \"Table 6.31, \"SVID Values\") by both the \nInitiator and the Responder for this Command. \nThe Number of Data Objects field in the Message Header in the Discover SVIDs Command request Shall be set to \n1 since the Discover SVIDs Command request Shall Not contain any VDOs. \nThe Discover SVIDs Command ACK sent back by the Responder Shall contain one or more SVIDs. The SVIDs are \nreturned 2 per VDO (see Table 6.45, \"Discover SVIDs Responder VDO\"). If there are an odd number of supported \nSVIDs, the Discover SVIDs Command is returned ending with a SVID value of 0x0000 in the last part of the last VDO. \nIf there are an even number of supported SVIDs, the Discover SVIDs Command is returned ending with an \nadditional VDO containing two SVIDs with values of 0x0000. A Responder Shall only return SVIDs for which a \nDiscover Modes Command request for that SVID will return at least one Alternate Mode. \nA Responder that does not support any SVIDs Shall return a NAK.\nThe Number of Data Objects field in the Message Header in the Discover SVIDs Command NAK and BUSY \nresponses Shall be set to 1 since they Shall Not contain any VDOs.\nIf the Responder supports 12 or more SVIDs then the Discover SVIDs Command Shall be executed multiple times \nuntil a Discover SVIDs VDO is returned ending either with a SVID value of 0x0000 in the last part of the last VDO \nor with a VDO containing two SVIDs with values of 0x0000. Each Discover SVID ACK Message, other than the one \ncontaining the terminating 0x0000 SVID, Shall convey 12 SVIDs. The Responder Shall restart the list of SVIDs each \ntime a Discover Identity Command request is received from the Initiator.\nNote:\nSince a Cable Plug does not retry Messages if the GoodCRC Message from the Initiator becomes corrupted \nthe Cable Plug will consider the Discover SVIDs Command ACK unsent and will send the same list of \nSVIDs again.\nFigure 6.18, \"Example Discover SVIDs response with 3 SVIDs\" shows an example response to the Discover SVIDs \nCommand request with two VDOs containing three SVIDs. Figure 6.19, \"Example Discover SVIDs response with 4 \nSVIDs\" shows an example response with two VDOs containing four SVIDs followed by an empty VDO to terminate \nthe response. Figure 6.20, \"Example Discover SVIDs response with 12 SVIDs followed by an empty response\" shows an \nexample response with six VDOs containing twelve SVIDs followed by an additional request that returns an empty \nVDO indicating there are no more SVIDs to return.\nFigure 6.18 Example Discover SVIDs response with 3 SVIDs\nTable 6.45  Discover SVIDs Responder VDO\nBit(s)\nField\nDescription\nB31…16\nSVID n\n16-bit unsigned integer, assigned by the USB-IF or 0x0000 if this is the \nlast VDO and the Responder supports an even number of SVIDs.\nB15…0\nSVID n+1\n16-bit unsigned integer, assigned by the USB-IF or 0x0000 if this is the \nlast VDO and the Responder supports an odd or even number of SVIDs.\nHeader\nNo. of Data Objects = 3\nVDM Header\nVDO 1\nSVID 0 \n(B31..16)\nSVID 1 \n(B15..0)\nVDO 2\nSVID 2 \n(B31..16)\n0x0000 \n(B15..0)\n","image_count":10,"table_count":3}
{"page":187,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 187\nFigure 6.19 Example Discover SVIDs response with 4 SVIDs\nFigure 6.20 Example Discover SVIDs response with 12 SVIDs followed by an empty response\nHeader\nNo. of Data Objects = 4\nVDM Header\nVDO 1\nSVID 0 \n(B31..16)\nSVID 1 \n(B15..0)\nVDO 2\nSVID 2 \n(B31..16)\nSVID 3 \n(B15..0)\nVDO 3\n0x0000 \n(B31..16)\n0x0000\n(B15..0)\nHeader\nNo. of Data Objects = 7\nVDM Header\nVDO 1\nSVID 0 \n(B31..16)\nSVID 1 \n(B15..0)\nVDO 2\nSVID 2 \n(B31..16)\nSVID 3 \n(B15..0)\nVDO 3\nSVID 4 \n(B31..16)\nSVID 5 \n(B15..0)\nVDO 4\nSVID 6 \n(B31..16)\nSVID 7 \n(B15..0)\nVDO 5\nSVID 8 \n(B31..16)\nSVID 9 \n(B15..0)\nHeader\nNo. of Data Objects = 2\nVDM Header\nVDO 1\n0x0000 \n(B31..16)\n0x0000 \n(B15..0)\nVDO 6\nSVID 10 \n(B31..16)\nSVID 11 \n(B15..0)\n","image_count":16,"table_count":4}
{"page":188,"text":"Page 188\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.4.3.3\n  Discover Modes\nThe Discover Modes Command is used by an Initiator to determine the Modes a Responder supports for a given \nSVID. \nThe SVID in the Discover Modes Command Shall be set to the SVID for which Modes are being requested by both \nthe Initiator and the Responder for this Command. \nThe Number of Data Objects field in the Message Header in the Discover Modes Command request Shall be set to \n1 since the Discover Modes Command request Shall Not contain any VDOs. \nThe Discover Modes Command ACK sent back by the Responder Shall contain one or more Modes. The Discover \nModes Command ACK Shall contain a Message Header with the Number of Data Objects field set to a value of 2 to \n7 (the actual value is the number of Alternate Mode objects plus one). If the ID is a VID, the structure and content \nof the VDO is left to the Vendor. If the ID is a SID, the structure and content of the VDO is defined by the relevant \nstandard’s body. \nA Responder that does not support any Modes Shall return a NAK. \nThe Number of Data Objects field in the Message Header in the Discover Modes Command NAK and BUSY \nresponses Shall be set to 1 since they Shall Not contain any VDOs.\nFigure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\" shows an example of a Discover \nModes Command response from a Responder which supports three Modes for a given SVID.\nFigure 6.21 Example Discover Modes response for a given SVID with 3 Modes\n6.4.4.3.4\n  Enter Mode Command\nThe Enter Mode Command is used by an Initiator (DFP) to command a Responder (UFP or Cable Plug) to enter a \nspecified Alternate Mode of operation. Only a DFP Shall initiate the Enter Mode Process which it starts after it has \nsuccessfully completed the Discovery Process.\nThe value in the Object Position field in the VDM Header Shall indicate to which Alternate Mode in the Discover \nModes Command the VDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3 \nModes\"). The value 1 always indicates the first Alternate Mode as it is the first object following the VDM Header. The \nvalue 2 refers to the next Alternate Mode and so forth.\nThe Number of Data Objects field in the Message Header in the Command request Shall be set to either 1 or 2 since \nthe Enter Mode Command request Shall Not contain more than 1 VDO. When a VDO is included in an Enter Mode \nCommand request the contents of the 32-bit VDO is defined by the Alternate Mode.\nThe Number of Data Objects field in the Command response Shall be set to 1 since an Enter Mode Command \nresponse (ACK, NAK) Shall Not contain any VDOs.\nBefore entering a Alternate Mode, by sending the Enter Mode Command request that requires the reconfiguring of \nany pins on entry to that Alternate Mode, the Initiator Shall ensure that those pins being reconfigured are placed \ninto the USB Safe State. Before entering an Alternate Mode that requires the reconfiguring of any pins, the \nResponder Shall ensure that those pins being reconfigured are placed into either USB operation or the USB Safe \nState.\nA device May support multiple Modes with one or more active at any point in time. Any interactions between them \nare the responsibility of the Standard or Vendor. Where there are multiple Active Modes at the same time Modal \nOperation Shall start on entry to the first Alternate Mode.\nHeader\nNo. of Data Objects = 4\nVDM Header\nMode 1\nMode 2\nMode 3\n","image_count":9,"table_count":2}
{"page":189,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 189\nOn receiving an Enter Mode Command requests the Responder Shall respond with either an ACK or a NAK \nresponse. The Responder is not allowed to return a BUSY response. The value in the Object Position field of the \nEnter Mode Command response Shall contain the same value as the received Enter Mode Command request.\nIf the Responder responds to the Enter Mode Command request with an ACK, the Responder Shall enter the \nAlternate Mode before sending the ACK. The Initiator Shall enter the Alternate Mode on reception of the ACK. \nSuccessful transmission of the Message confirms to the Responder that the Initiator will enter an Active Mode.\nSee Figure 8.111, \"DFP to UFP Enter Mode\" for more details.\nIf the Responder responds to the Enter Mode Command request with a NAK, the Alternate Mode is not entered. If \nnot presently in Modal Operation the Initiator Shall return to USB operation. If not presently in Modal Operation \nthe Responder Shall remain in either USB operation or the USB Safe State.\nIf the Initiator fails to receive a response within tVDMWaitModeEntry it Shall Not enter the Alternate Mode but \nreturn to USB operation.\nFigure 6.22, \"Successful Enter Mode sequence\" shows the sequence of events during the transition between USB \noperation and entering an Alternate Mode. It illustrates when the Responder's Alternate Mode changes and when \nthe Initiator's Alternate Mode changes. Figure 6.23, \"Unsuccessful Enter Mode sequence due to NAK\" illustrates that \nwhen the Responder returns a NAK the transition to an Alternate Mode do not take place and the Responder and \nInitiator remain in their default USB roles.\nFigure 6.22 Successful Enter Mode sequence\nDFP (Initiator)\nUFP (Responder)\nEnter Mode\nGoodCRC\nGoodCRC\nACK\nUSB Safe State\nUSB\nUSB or USB Safe State\nNew \nMode\nNew \nMode\n","image_count":0,"table_count":5}
{"page":190,"text":"Page 190\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.23 Unsuccessful Enter Mode sequence due to NAK\nOnce the Alternate Mode is entered, the device Shall remain in that Active Mode until the Exit Mode Command is \nsuccessful (see Section 6.4.4.3.5, \"Exit Mode Command\").\nThe following events Shall also cause the Port Partners and Cable Plug(s) to exit all Active Modes:\n\nA PD Hard Reset.\n\nError Recovery.\n\nThe Port Partners or Cable Plug(s) are Detached.\n\nA Cable Reset (only exits the Cable Plug's Active Modes).\n\nA Data Reset (removing power briefly resets all the Active Modes in the Cable Plug).\nThe Initiator Shall return to USB Operation within tVDMExitMode of a disconnect, of Hard Reset Signaling being \ndetected or Error Recovery.\nThe Responder Shall return to either USB operation or USB Safe State within tVDMExitMode of a disconnect, of \nHard Reset Signaling being detected or Error Recovery.\nA DR_Swap Message Shall Not be sent during Modal Operation between the Port Partners (see Section 6.3.9, \n\"DR_Swap Message\").\n6.4.4.3.5\n  Exit Mode Command\nThe Exit Mode Command is used by an Initiator (DFP) to command a Responder (UFP or Cable Plug) to exit its Active \nMode and return to normal USB operation. Only the DFP Shall initiate the Exit Mode Process.\nThe value in the Object Position field Shall indicate to which Alternate Mode in the Discover Modes Command the \nVDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\") and Shall have been \nused previously in an Enter Mode Command request for an Active Mode. The value 1 always indicates the first \nDFP (Initiator)\nUFP (Responder)\nEnter Mode\nGoodCRC\nGoodCRC\nNAK\nUSB Safe State\nUSB\nUSB or USB Safe State\nUSB\n","image_count":0,"table_count":4}
{"page":191,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 191\nAlternate Mode as it is the first object following the VDM Header. The value 2 refers to the next Alternate Mode and \nso forth. A value of 111b in the Object Position field Shall indicate that all Active Modes Shall be exited.\nThe Number of Data Objects field in both the Command request and Command response (ACK, NAK) Shall be set \nto 1 since an Exit Mode Command Shall Not contain any VDOs.\nThe Responder Shall exit its Active Mode before sending the response Message. The Initiator Shall exit its Active \nMode when it receives the ACK. The Responder Shall Not return a BUSY acknowledgment and Shall only return a \nNAK acknowledgment to a request not containing an Active Mode (i.e., Invalid object position). An Initiator which \nfails to receive an ACK within tVDMWaitModeExit or receives a NAK or BUSY response Shall exit its Active Mode.\nSee Figure 8.112, \"DFP to UFP Exit Mode\" for more details.\nFigure 6.24, \"Exit Mode sequence\" shows the sequence of events during the transition between exiting an Active \nMode and USB operation. It illustrates when the Responder's Alternate Mode changes and when the Initiator's \nAlternate Mode changes.\nFigure 6.24 Exit Mode sequence\n6.4.4.3.6\n  Attention\nThe Attention Command May be used by the Initiator to notify the Responder that it requires service.\nThe value in the Object Position field Shall indicate to which Alternate Mode in the Discover Modes Command the \nVDO refers (see Figure 6.21, \"Example Discover Modes response for a given SVID with 3 Modes\") and Shall have been \nused previously in an Enter Mode Command request for an Active Mode. The value 1 always indicates the first \nAlternate Mode as it is the first object following the VDM Header. The value 2 refers to the next Alternate Mode and \nso forth. A value of 000b or 111b in the Object Position field Shall Not be used by the Attention Command.\nDFP (Initiator)\nUFP (Responder)\nExit Mode\nGoodCRC\nGoodCRC\nACK\nUSB Safe State\nUSB or USB Safe\nState\nMode\nMode\nUSB\n","image_count":0,"table_count":5}
{"page":192,"text":"Page 192\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Number of Data Objects field in the Message Header Shall be set to 1 or 2 since the Attention Command Shall \nNot contain more than 1 VDO. When a VDO is included in an Attention Command the contents of the 32-bit VDO is \ndefined by the Alternate Mode.\nFigure 6.24, \"Exit Mode sequence\" shows the sequence of events when an Attention Command is received.\nFigure 6.25 Attention Command request/response sequence\n6.4.4.4\n  Command Processes\nThe Message flow of Commands during a Process is a query followed by a response. Every Command request sent \nhas to be responded to with a GoodCRC Message. The GoodCRC Message only indicates the Command request was \nreceived correctly; it does not mean that the Responder understood or even supports a particular SVID. Figure 6.26, \n\"Command request/response sequence\" shows the request/response sequence including the GoodCRC Messages.\nInitiator\nResponder\nGoodCRC\nCommand (Attention)\nCommand Complete\n","image_count":0,"table_count":1}
{"page":193,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 193\nFigure 6.26 Command request/response sequence\nIn order for the Initiator to know that the Command request was actually consumed, it needs an acknowledgment \nfrom the Responder. There are three responses that indicate the Responder received and processed the Command \nrequest:\n\nACK\n\nNAK\n\nBUSY\nThe Responder Shall complete:\n\nEnter Mode requests within tVDMEnterMode.\n\nExit Mode requests within tVDMExitMode.\n\nOther requests within tVDMReceiverResponse.\nAn Initiator not receiving a response within the following times Shall timeout and return to either the \nPE_SRC_Ready or PE_SNK_Ready state (as appropriate):\n\nEnter Mode requests within tVDMWaitModeEntry.\n\nExit Mode requests within tVDMWaitModeExit.\n\nOther requests within tVDMSenderResponse.\nThe Responder Shall respond with:\n\nACK if it recognizes the SVID and can process it at this time. \n\nNAK:\n\nif it recognizes the SVID but cannot process the Command request\nInitiator\nResponder\nCommand (request)\nGoodCRC\nGoodCRC\nCommand (response)\nCommand Complete\n","image_count":0,"table_count":1}
{"page":194,"text":"Page 194\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nor if it does not recognize the SVID \n\nor if it does not support the Command\n\nor if a VDO contains a field which is Invalid.\n\nBUSY if it recognizes the SVID and the Command but cannot process the Command request at this time.\nThe ACK, NAK or BUSY response Shall contain the same SVID as the Command request.\n6.4.4.4.1\n  Discovery Process\nThe Initiator (usually the DFP) always begins the Discovery Process. The Discovery Process has two phases. In the \nfirst phase, the Discover SVIDs Command request is sent by the Initiator to get the list of SVIDs the Responder \nsupports. In the second phase, the Initiator sends a Discover Modes Command request for each SVID supported by \nboth the Initiator and Responder.\n6.4.4.4.2\n  Enter Vendor Mode / Exit Vendor Mode Processes\nThe result of the Discovery Process is that both the Initiator and Responder identify the Modes they mutually \nsupport. The Initiator (DFP), upon finding a suitable Alternate Mode, uses the Enter Mode Command to enable the \nAlternate Mode.\nThe Responder (UFP or Cable Plug) and Initiator continue using the Active Mode until the Active Mode is exited.\nIn a managed termination, using the Exit Mode Command, the Active Mode Shall be exited in a controlled manner \nas described in Section 6.4.4.3.5, \"Exit Mode Command\".\nIn an unmanaged termination, triggered by:\n\nA Power Delivery Hard Reset (i.e. Hard Reset Signaling sent by either Port Partner) or \n\nBy cable Detach (device unplugged) or\n\nBy Error Recovery\nthe Active Mode Shall still be exited but there Shall Not be a transition through the USB Safe State.\nIn both the managed and unmanaged terminations, the Initiator and Responder return to USB operation as defined \nin [USB Type-C 2.4] following an exit from an Alternate Mode.\nThe overall Message flow is illustrated in Figure 6.27, \"Enter/Exit Mode Process\".\n","image_count":0,"table_count":1}
{"page":195,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 195\nFigure 6.27 Enter/Exit Mode Process\n6.4.4.5\n  VDM Message Timing and Normal PD Messages\nThe timing and interspersing of VDMs between regular PD Messages Shall be done without perturbing the PD \nAMSs. This requirement Shall apply to both Unstructured VDMs and Structured VDMs.\nInitiator (DFP)\nResponder (UFP or Cable Plug)\nDiscover SVIDs  \nList of SVIDs  \nFor every DFP supported SVID  \nModes Supported?\nN  \nStay in USB mode\nY  \nEnter Mode  \nACK (Responder switched to Mode)      \nInitiator and Responder operate using Mode\nReturn to USB mode\nEstablish PD Contract\nExit Mode or PD Hard Reset or cable \nunplugged or power removed?\nY  \nN  \nUSB\nUSB or USB Safe \nState\nUSB Safe State\nUSB\nAlternate Mode\nUSB or USB Safe \nState\nAlternate Mode\nUSB\nDiscover Modes (SVID)  \nModes for SVID    \n","image_count":0,"table_count":8}
{"page":196,"text":"Page 196\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe use of Structured VDMs by an Initiator Shall Not interfere with the normal PD Message timing requirements \nnor Shall either the Initiator or Responder interrupt a PD AMS (e.g., Negotiation, Power Role Swap, Data Role Swap \netc.). The use of Unstructured VDMs Shall Not interfere with normal PD Message timing.\n6.4.5\n  Battery_Status Message\nThe Battery_Status Message Shall be sent in response to a Get_Battery_Status Message. The Battery_Status \nMessage contains one Battery Status Data Object (BSDO) for one of the Batteries it supports as reported by Number \nof Batteries/Battery Slots field in the Source_Capabilities_Extended Message. The returned BSDO Shall \ncorrespond to the Battery requested in the Battery Status Ref field contained in the Get_Battery_Status Message.\nThe Battery_Status Message returns a BSDO whose format Shall be as shown in Figure 6.28, \"Battery_Status \nMessage\" and Table 6.46, \"Battery Status Data Object (BSDO)\". The Number of Data Objects field in the \nBattery_Status Message Shall be set to 1.\nFigure 6.28 Battery_Status Message\n6.4.5.1\n  Battery Present Capacity\nThe Battery Present Capacity field Shall return either the Battery's State of Charge (SoC) in tenths of WH or \nindicate that the Battery's present State of Charge (SOC) is unknown.\nTable 6.46  Battery Status Data Object (BSDO)\nBit(s)\nField\nDescription\nB31…16\nBattery Present \nCapacity\nBattery’s State of Charge (SoC) in 0.1 WH increments\nNote: 0xFFFF = Battery’s SOC unknown\nB15…8\nBattery Info\nBit\nDescription\n0\nInvalid Battery Reference\n Invalid Battery reference\n1\nBattery Present\nBattery is present when set\n3…2\nBattery Charging Status\nWhen Battery Present is ‘1’ Shall contain the Battery charging status:\n\n00b: Battery is Charging.\n\n01b: Battery is Discharging.\n\n10b: Battery is Idle.\n\n11b: Reserved, Shall Not be used.\nWhen Battery Present is ‘0’:\n\n11b…00b: Reserved, Shall Not be used.\n7…4\nReserved, Shall Not be used.\nB7…0\nReserved\nShall be set to zero\nHeader\nNo. of Data Objects = 1\nBSDO\n","image_count":12,"table_count":3}
{"page":197,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 197\n6.4.5.2\n  Battery Info\nThe Battery Info field Shall be used to report additional information about the Battery's present status. The \nBattery Info field's bits Shall reflect the present conditions under which the Battery is operating in the systems. \n6.4.5.2.1\n  Invalid Battery Reference\nThe Invalid Battery Reference bit Shall be set when the Get_Battery_Status Message contains a reference to a \nBattery or Battery Slot (see Section 6.5.1.13, \"Number of Batteries/Battery Slots Field\") that does not exist.\n6.4.5.2.2\n  Battery Present\nThe Battery Present bit Shall be set whenever the Battery is present. It Shall always be set for Batteries that are \nnot Hot Swappable Batteries. For Hot Swappable Batteries, the Battery Present bit Shall indicate whether the \nBattery is Attached or Detached.\n6.4.5.2.3\n  Battery Charging Status\nThe Battery Charging Status bits indicate whether the Battery is being charged, discharged or is idle (neither \ncharging nor discharging). These bits Shall be set when the Battery Present bit is set. Otherwise, when the Battery \nPresent bit is zero the Battery Charging Status bits Shall also be zero.\n","image_count":0,"table_count":1}
{"page":198,"text":"Page 198\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.6\n  Alert Message\nThe Alert Message is provided to allow Port Partners to inform each other when there is a status change event. \nSome of the events are critical such as OCP, OVP and OTP, while others are informational such as change in a \nBattery's status from charging to neither charging nor discharging. \nThe Alert Message Shall only be sent when the Source or Sink detects a status change. \nThe Alert Message Shall contain exactly one Alert Data Object (ADO) and the format Shall be as shown in Figure \n6.29, \"Alert Message\" and Table 6.47, \"Alert Data Object (ADO)\".\nFigure 6.29 Alert Message\nTable 6.47  Alert Data Object (ADO)\nBit(s)\nField\nDescription\nB31…24\nType of Alert\nBit\nDescription\n0\nReserved and Shall be set to zero.\n1\nBattery Status Change Event\nBattery Status Change Event (Attach/Detach/charging/discharging/\nidle)\n2\nOCP Event\nOCP event when set (Source only, for Sink Reserved and Shall be set to \nzero).\n3\nOTP Event\nOTP event when set\n4\nOperating Condition Change\nOperating Condition Change when set\n5\nSource Input Change Event\nSource Input Change Event when set\n6\nOVP Event\nOVP event when set\n7\nExtended Alert Event\nExtended Alert Event when set\nB23…20\nFixed Batteries\nWhen Battery Status Change Event bit set indicates which Fixed Batteries have had \na status change. B20 corresponds to Battery 0 and B23 corresponds to Battery 3.\nB19…16\nHot Swappable \nBatteries\nWhen Battery Status Change Event bit set indicates which Hot Swappable \nBatteries have had a status change. B16 corresponds to Battery 4 and B19 \ncorresponds to Battery 7.\nHeader\nNo. of Data Objects = 1\nADO\n","image_count":12,"table_count":3}
{"page":199,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 199\n6.4.6.1\n  Type of Alert\nThe Type of Alert field Shall be used to report Source or Sink status changes. Only one Alert Message Shall be \ngenerated for each Event or Change; however multiple Type of Alert bits May be set in one Alert Message. Once the \nAlert Message has been sent the Type of Alert field Shall be cleared.\nA Get_Battery_Status Message Should be sent in response to a Battery status change in an Alert Message to get the \ndetails of the change.\nA Get_Status Message Should be sent in response to a non-Battery status change in an Alert Message from to get \nthe details of the change.\n6.4.6.1.1\n  Battery Status Change\nThe Battery Status Change Event bit Shall be set when any Battery's power state changes between charging, \ndischarging, neither. For Hot Swappable Batteries, it Shall also be set when a Battery is Attached or Detached.\n6.4.6.1.2\n  Over-Current Protection Event\nThe OCP Event bit Shall be set when a Source detects its output current exceeds its limits triggering its protection \ncircuitry. This bit is Reserved for a Sink.\n6.4.6.1.3\n  Over-Temperature Protection Event\nThe OTP Event bit Shall be set when a Source or Sink shuts down due to over-temperature triggering its protection \ncircuitry.\n6.4.6.1.4\n  Operating Condition Change\nThe Operating Condition Change bit Shall be set when a Source or Sink detects its Operating Condition enters or \nexits either the 'warning' or 'over temperature' temperature states.\nThe Operating Condition Change bit Shall be set when the Source operating in the Programmable Power Supply \nmode detects it has changed its operating condition between Constant Voltage (CV) and Current Limit (CL).\n6.4.6.1.5\n  Source Input Change Event\nThe Source Input Change Event bit Shall be set when the Source/Sink's input changes. For example, when the AC \ninput is removed, and the Source/Sink continues to be powered from one or more of its batteries or when AC \nreturns and the Source/Sink transitions from Battery to AC operation or when the Source/Sink changes operation \nfrom one (or more) Battery to another (or more) Battery. \nB15…4\nReserved\nShall be set to zero\nB3…0\nExtended Alert Event \nType\nWhen the Extended Alert Event bit in the Type of Alert field equals ‘1’, then the \nExtended Alert Event Type field indicates the event which has occurred:\n\n0 = Reserved.\n\n1 = Power state change (DFP only)\n\n2 = Power button press (UFP only)\n\n3 = Power button release (UFP only)\n\n4 = Controller initiated wake e.g., Wake on LAN (UFP only)\n\n5-15 = Reserved\nWhen the Extended Alert Event bit in the Type of Alert field equals ‘0’, then the \nExtended Alert Event Type field is Reserved and Shall be set to zero.\nTable 6.47  Alert Data Object (ADO) (Continued)\nBit(s)\nField\nDescription\n","image_count":0,"table_count":2}
{"page":200,"text":"Page 200\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.6.1.6\n  Over-Voltage Protection Event\nThe OVP Event bit Shall be set when the Sink detects its output voltage exceeds its limits triggering its protection \ncircuitry. \nThe OVP Event bit May be set when the Source detects its output voltage exceeds its limits triggering its protection \ncircuitry. \n6.4.6.1.7\n  Extended Alert Event\nThe Extended Alert Event bit Shall be set when the event is defined as an Extended Alert Type.\n6.4.6.2\n  Fixed Batteries\nThe Fixed Batteries field indicates which Fixed Batteries have had a status change. B20 corresponds to Battery 0 \nand B23 corresponds to Battery 3.\nOnce the Alert Message has been sent the Fixed Batteries field Shall be cleared.\n6.4.6.3\n  Hot Swappable Batteries\nThe Hot Swappable Batteries field indicates which Hot Swappable Batteries have had a status change. B16 \ncorresponds to Battery 0 and B19 corresponds to Battery 3.\nOnce the Alert Message has been sent the Hot Swappable Batteries field Shall be cleared.\n6.4.6.4\n  Extended Alert Event Types\nThe Extended Alert Event Type field provides extensions to the available types for the Alert Message. If the \nExtended Alert Event Type bit is not set, then the Extended Alert Event Type is Reserved and Shall be set to zero.\n6.4.6.4.1\n  Power State Change\nThe Power state change event value May be set when the DFP transitions into a new power state. The new power \nstate Shall be communicated via the Power state change byte in the Status Message. This Message Should be sent \nby the host in response to any system power state change.\n6.4.6.4.2\n  Power Button Press\nThe Power button press event value May be set when the power button on the UFP is pressed. The press and \nrelease events are separated into two different events so that devices that respond differently to a long button \npress will see a long button press. On the host-side, the power button press event typically initiates the same \nbehavior as a power button press of the host's power button.\n6.4.6.4.3\n  Power Button Release\nIf a Power button press event was sent, then the Power button release event value Shall be sent by the UFP \nfollowing the Power button press event. If a physical power button press initiated the Power button press event, \nthen the Power button release event Should be sent when the physical button is released.\n6.4.6.4.4\n  Controller Initiated Wake\nThe Controller initiated wake is used to communicate a wake event from the UFP to the DPF such as Wake on LAN \nfrom a NIC or another controller. This event doesn't need the press/release form of the Power button press, \nbecause it only needs to communicate the presence of the event, and not the timing.\n","image_count":0,"table_count":1}
{"page":201,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 201\n6.4.7\n  Get_Country_Info Message\nThe Get_Country_Info Message Shall be sent by a Port to get country specific information from its Port Partner \nusing the country's Alpha-2 Country Code defined by [ISO 3166]. The Port Partner responds with a Country_Info \nMessage that contains the country specific information. The Get_Country_Info Message Shall be as shown in Figure \n6.30, \"Get_Country_Info Message\" and Table 6.48, \"Country Code Data Object (CCDO)\".\nFor example, if the request is for China information, then the Country Code Data Object (CCDO) would be CCDO \n[31:0] = 434E0000h for \"CN\" country code.\nFigure 6.30 Get_Country_Info Message\nTable 6.48  Country Code Data Object (CCDO)\nBit(s)\nDescription\nB31…24 First character of the Alpha-2 Country Code defined by [ISO 3166]\nB23…16 Second character of the Alpha-2 Country Code defined by [ISO 3166]\nB15…0\nReserved, Shall be set to zero.\nHeader\nNo. of Data Objects = 1\nCCDO\n","image_count":9,"table_count":3}
{"page":202,"text":"Page 202\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.8\n  Enter_USB Message\nThe Enter_USB Message Shall be sent by the DFP to its UFP Port Partner and to the Cable Plug(s) of an Active Cable, \nwhen in an Explicit Contract, to enter a specified USB Mode of operation. The recipient of the Message Shall respond \nby sending an Accept Message, a Wait Message or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\").\nWhen entering [USB4] operation, the Enter_USB Message Shall be sent by a [USB4] PDUSB Hub's DFP(s) or [USB4] \nPDUSB Host's DFP(s) within tEnterUSB:\n\nfollowing a PD Connection.\n\nafter a Data Reset to enter [USB4] operation is completed.\n\nafter a Data Role Swap is completed.\nThe Enter_USB Message May be sent by a PDUSB Hub's DFP(s) or PDUSB Host's DFP(s) within tEnterUSB following \na PD Connection or after a Data Reset to enter [USB 3.2] or [USB 2.0] operation.\nThe Enter_USB Message Shall be used by a PDUSB Hub's DFP(s) to speculatively train the USB links or enter \n[DPTC2.1] or [TBT3] Alternate Modes prior to the presence of a host. In this case, the Host Present bit Shall be \ncleared. When the Host is Connected the Enter_USB Message Shall be resent with the Host Present bit set. The \nEnter_USB Message's Enter USB Data Object (EUDO), received from the Root Hub when the USB Host is connected, \nShall be propagated down through the Hub tree.\nSee [USB Type-C 2.4] USB4® Hub Connection Requirements.\nThe Enter_USB Message Shall be as shown in Figure 6.31, \"Enter_USB Message\" and Table 6.49, \"Enter_USB Data \nObject (EUDO)\".\n","image_count":0,"table_count":1}
{"page":203,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 203\nFigure 6.31 Enter_USB Message\nTable 6.49  Enter_USB Data Object (EUDO)\nBit(s)\nField\nDescription\nB31\nReserved\nShall be set to zero.\nB30…28\nUSB Mode 1\n\n000b: \n\n001b: \n\n010b: \n\n111b…011b: Reserved, Shall Not be used.\nB27\nReserved\nShall be set to zero.\nB26\nUSB4 DRD 2\n\n0b: Not capable of operating as a [USB4] Device\n\n1b: Capable of operating as a [USB4] Device\nB25\nUSB3 DRD 2\n\n0b: Not capable of operating as a [USB 3.2] Device\n\n1b: Capable of operating as a [USB 3.2] Device\nB24\nReserved\nShall be set to zero.\nB23…21\nCable Speed 2,3\n\n000b: [USB 2.0]only, no SuperSpeed support\n\n001b: [USB 3.2] Gen1\n\n010b: [USB 3.2]Gen2 and [USB4] Gen2\n\n011b: [USB4] Gen3\n\n100b: [USB4] Gen4\n\n101b…111b: Reserved, Shall Not be used.\nB20…19\nCable Type 2,3\n\n00b: Passive\n\n01b: Active Re-timer\n\n10b: Active Re-driver\n\n11b: Optically Isolated\nB18…17\nCable Current 2\n\n00b = VBUS is not supported \n\n01b = Reserved\n\n10b = 3A\n\n11b = 5A\nB16\nPCIe Support 2\n[USB4] PCIe tunneling supported by the host\nB15\nDP Support 2\n[USB4] DP tunneling supported by the host\nB14\nTBT Support 2\n[TBT3] is supported by the host’s USB4® Connection Manager\nB13\nHost Present 2\nA Host is present at the top of the USB tree. \nWhen this bit is set PCIe Support, DP Support and TBT Support \nrepresent the Host’s Capabilities that Shall be propagated down the Hub \ntree.\nB12…0\nReserved\nShall be set to zero.\n1)\nEntry into [USB 3.2] and [USB4] include entry into [USB 2.0].\n2)\n Shall be Ignored when received by a Cable Plug (e.g., SOP’ or SOP’’).\n3)\nThe DFP Shall interpret the Cable Plug’s reported capability as defined in [USB Type-C 2.4] in the USB4 \nDiscovery and Entry Section.\nHeader\nNo. of Data Objects = 1\nEUDO\n","image_count":12,"table_count":3}
{"page":204,"text":"Page 204\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.8.1\n  USB Mode Field\nThe USB Mode field Shall be used by the DFP to direct the USB Mode the Port Partner is to enter.\n6.4.8.2\n  USB4® DRD Field\nThe USB4 DRD field Shall be set when the Host DFP is capable of operating as a [USB4] Device. A [USB4] Host DFP \nthat sets the USB4 DRD field Shall also be capable of operating as a [USB 2.0] Device.\n6.4.8.3\n  USB3 DRD Field\nThe USB3 DRD field Shall be set when the Host DFP is capable of operating as a [USB 3.2] Device. A [USB 3.2] Host \nDFP that sets the USB3 DRD field Shall also be capable of operating as a [USB 2.0] Device.\n6.4.8.4\n  Cable Speed Field\nThe Cable Speed field Shall be used to indicate the cable's maximum speed. The value is read from the Cable Plug \nand interpreted by the DFP as defined by [USB Type-C 2.4] in the USB4 Discovery and Entry Section.\n6.4.8.5\n  Cable Type Field\nThe Cable Type field Shall be used to indicate whether the cable is passive or active. Further if the cable is active, \nit indicates the type of active circuits in the cable and if the cable is optically isolated. The value is read from the \nCable Plug and interpreted by the DFP as defined by [USB Type-C 2.4] in the USB4 Discovery and Entry Section.\n6.4.8.6\n  Cable Current Field\nThe Cable Current field Shall be used to indicate the cable's current carrying capability. The value is reported by \nthe Cable Plug in the VBUS Current Handling Capability (Passive Cable)/VBUS Current Handling Capability \n(Active Cable) field.\n6.4.8.7\n  PCIe Support Field\nThe PCIe Support field Shall be set when the Host DFP is capable of tunneling PCIe over [USB4].\nThe PCIe Support field May be set speculatively when the Hub's DFP is capable of tunneling PCIe over [USB4].\n6.4.8.8\n  DP Support Field\nThe DP Support field Shall be set when the Host DFP is capable of tunneling DP over [USB4].\nThe DP Support field May be set speculatively when the Hub's DFP is capable of tunneling DP over [USB4].\n6.4.8.9\n  TBT Support Field\nThe TBT Support field Shall be set when the Host DFP is capable of tunneling ThunderboltTM over [USB4] and that \nthe Connection Manager (CM) supports discovery and configuration of Thunderbolt 3 devices connected to the \nDFP of [USB4] Hubs.\nThe TBT Support field May be set speculatively when the Hub's DFP is capable of tunneling Thunderbolt over \n[USB4].\n6.4.8.10\n  Host Present Field\nThe Host Present field Shall be set to indicate that a Host is present upstream.\n","image_count":0,"table_count":1}
{"page":205,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 205\n6.4.9\n  EPR_Request Message\nAn EPR_Request Message Shall be sent by a Sink, operating in EPR Mode, to request power, typically during the \nrequest phase of a power Negotiation. The EPR_Request Message Shall be sent in response to the most recent \nEPR_Source_Capabilities Message. The EPR_Request Message Shall return a Sink Request Data Object (RDO) that \nShall identify the Power Data Object being requested followed by a copy of the Power Data Object being requested.\nNote:\nThe requested Power Data Object May be either an EPR (A)PDO or SPR (A)PDO.\nThe EPR_Request Message Shall be as shown in Figure 6.32, \"EPR_Request Message\".\nFigure 6.32 EPR_Request Message\nThe Source Shall verify the PDO in the EPR_Request Message exactly matches the PDO in the latest \nEPR_Source_Capabilities Message pointed to by the Object Position field in the RDO. \nThe Source Shall respond to an EPR_Request Message in the same manner as it responds to a Request Message with \nan Accept Message, or a Reject Message (see Section 6.9, \"Accept, Reject and Wait\"). The Explicit Contract \nNegotiation process for EPR is the same as the process for SPR Mode except that the Source_Capabilities Message \nis replaced by the EPR_Source_Capabilities and the Request Message is replaced by the EPR_Request Message.\nAn EPR Source operating in SPR Mode that receives a EPR_Request Message Shall initiate a Hard Reset.\nThe RDO takes a different form depending on the kind of power requested. The PDO and APDO formats are detailed \nin Section 6.4.2, \"Request Message\".\nHeader\nNo. of Data Objects = 2\nRDO\nCopy of PDO\n","image_count":0,"table_count":2}
{"page":206,"text":"Page 206\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.10\n  EPR_Mode Message\nThe EPR_Mode Message is used to enter, acknowledge, and exit the EPR Mode. The Action field is used to describe \nthe action that is to be taken by the recipient of the EPR_Mode Message. The Data field provides additional \ninformation for the Message recipient in the EPR Mode Data Object (ERMDO).\nThe EPR_Mode Message Shall be as shown in Figure 6.33, \"EPR Mode DO Message\" and Table 6.50, \"EPR Mode Data \nObject (EPRMDO)\".\nFigure 6.33 EPR Mode DO Message\n6.4.10.1\n  Process to enter EPR Mode\nAn EPR Source Shall enter EPR Mode upon request by an EPR Sink connected with an EPR Cable when able to offer \nthe Source Capabilities as defined in the Power Rules (See Table 10.12, \"EPR Source Capabilities based on the Port \nMaximum PDP and using an EPR Capable Cable\" and Table 10.13, \"EPR Source Capabilities when Port Present PDP is \nless than Port Maximum PDP and using an EPR-capable cable\").\nFor Port Partners to successfully enter EPR Mode, the following conditions must be met:\n\nThe Sink Shall request entry into the EPR Mode.\nTable 6.50  EPR Mode Data Object (EPRMDO)\nBit(s)\nField\nDescription\nB31…24\nAction\nValue\nAction\nSent By\n0x00\nReserved and Shall Not be used.\n0x01\nEnter\nSink only\n0x02\nEnter Acknowledged\nSource only\n0x03\nEnter Succeeded\nSource only\n0x04\nEnter Failed\nSource only\n0x05\nExit\nSink or Source\n0x06…0xFF\nReserved and Shall Not be used.\nB23...16\nData\nAction Field\nData Field Value\nEnter\nShall be set to the EPR Sink Operational PDP\nEnter Acknowledged Shall be set to zero\nEnter Succeeded\nShall be set to zero\nEnter Failed\nShall be one of the following values:\n\n0x00 - Unknown cause\n\n0x01 - Cable not EPR Capable\n\n0x02 –Source failed to become VCONN Source.\n\n0x03 – EPR Capable bit not set in RDO.\n\n0x04 – Source unable to enter EPR Mode1.\n\n0x05 - EPR Capable bit not set in PDO. \nAll other values are Reserved and Shall Not be used\nExit\nShall be set to zero\nB15...0\nReserved\nShall be set to zero\n1)\nThe Sink May retry entering EPR Mode after receiving this Enter Failed response.\nHeader\nNo. of Data Objects = 1\nEPRMDO\n","image_count":12,"table_count":3}
{"page":207,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 207\n\nThe Source Shall verify the cable is EPR Capable.\n\nA Sink Shall Not be Connected to the Source through a Charge Through VPD (CT-VPD).\n\nThe Source and Sink Shall already be in an SPR Explicit Contract.\n\nThe EPR Capable bit Shall be set in the Fixed Supply 5V PDO.\n\nThe EPR Capable bit Shall have been set in the RDO in the last Request Message received by the Source.\nTo verify the cable is EPR Capable, the EPR Source Shall have already done the following (see Section 6.6.21.4, \n\"tEPRSourceCableDiscovery\"):\n\nDiscover the cable prior to entering its First Explicit Contract\n\nAlternatively, within tEPRSourceCableDiscovery of entry into the First Explicit Contract\n\nIf it is the VCONN Source, discover the cable. \n\nIf not the VCONN Source, do a VCONN Swap then discover the cable.\n and can verify the cable is EPR Capable by completing steps 5 and 6 in the entry process in Figure 6.34, \"Illustration \nof process to enter EPR Mode\".\nThe EPR Mode entry process is a Non-interruptible multi-Message AMS. An illustration of this AMS is shown in \nFigure 6.34, \"Illustration of process to enter EPR Mode\". \nNote:\nFigure 6.34, \"Illustration of process to enter EPR Mode\" is not Normative but is Informative only.\n","image_count":0,"table_count":1}
{"page":208,"text":"Page 208\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.34 Illustration of process to enter EPR Mode\nThe entry process Shall follow these steps in order:\n1)\nThe Sink Shall send the EPR_Mode Message with the Action field set to 1 (Enter) and the Data field set \nto its Operational PDP. If the EPR Source receives an EPR_Mode Message with the Action field not set to \nEnter it Shall initiate a Soft Reset.\n2)\nThe Source Shall do the following:\nEPR_Mode\nEnter\n#1\nStart\nSPR Mode\nEPR Mode\nSink\nSource\nCable\nEPR Entry process\nSPR contract in place\n#2.a\nSink EPR Capable?\nAbort EPR Entry\nSend Entry Failed \n– Sink not EPR \nCapable\n#2.b\nSource EPR \nCapable?\nAbort EPR Entry\nSend Entry Failed \n– Source not EPR \nCapable\n#2.c\nSource EPR \nCapable Now?\nAbort EPR Entry \nSend Entry Failed \n– Source unable \nto enter EPR\n#2.d\nSend EPR Ack\n#3\nReceived EPR \nAck?\n#4\nKnown Cable?\n#7\nSend Enter \nSucceeded\nN\nN\nN\nN\nN\n#5\nIs VCONN Source?\n#8\nReceived Enter \nsuccessful?\nN\nError\nSend \nSoft Reset\n#6.a-d\nEPR Cable?\nAbort EPR Entry \nSend Entry Failed \n– Source not \nVCONN Source\nN\nY\nY\nY\nY\nEPR_MODE\nEnter Succeeded\nY\nY\nY\n#5\nIs VCONN Source?\nN\n#5 VCONN Swap\nN\nAbort EPR Entry \nSend Entry Failed \n– Not EPR Cable\nY\nY\n#4\nEPR Capable?\nY\nN\n","image_count":0,"table_count":5}
{"page":209,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 209\na)\nVerify the EPR Capable bit was set in the most recent RDO. If not set, the Source Shall do the \nfollowing:\ni)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and the Data field set to \n3 (\"EPR Mode Capable bit not set in the RDO\").\nii)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract.\nb)\nVerify the EPR Capable bit was set in the most recent 5V Fixed Supply PDO. If not set, the Source \nShall do the following:\ni)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and the Data field set to \n5 (\"EPR Mode Capable bit not set in the Fixed Supply 5V PDO\").\nii)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract.\nc)\nVerify the Source is still able to support EPR Mode. If not, the Source Shall do the following:\ni)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and Data field set to 4 \n(\"Unable at this time\").\nii)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract. The Sink May \nat some time in the future send another request to enter EPR Mode.\nd)\nSend an EPR_Mode Message with the Action field set to 2 (Enter Acknowledged).\n3)\nIf the Sink receives any Message, other than an EPR_Mode Message with the Action Field set to 2, the \nSink Shall initiate a Soft Reset.\n4)\nWhen the EPR Source has used the Discover Identity Command to determine and remembers the Cable \nCapabilities or the EPR Source is connected with a captive cable: \na)\nIf the cable is EPR Capable it Should go directly to Step 7, but May continue to Step 5.\nb)\nIf the cable is not EPR Capable it Shall do the following:\nc)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and the Data field set to \n1 (\"Cable not EPR capable\").\nd)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract.\n5)\nIf the Source is not the VCONN Source, it Shall send a VCONN_Swap Message\na)\nIf the Source fails to become the VCONN Source, it Shall:\ni)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and the Data field set to \n2 (not VCONN Source).\nii)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract.\n6)\nThe Source Shall use the Discover Identity Command to read the cable's e-Marker and verify the \nfollowing:\na)\nCable VDO - Maximum VBUS Voltage (Passive Cable)/Maximum VBUS Voltage (Active Cable) \nfield is 11b (50V)\nb)\nCable VDO - VBUS Current Handling Capability (Passive Cable)/VBUS Current Handling \nCapability (Active Cable) field is 10b (5A)\nc)\nCable VDO - EPR Capable (Passive Cable)/EPR Capable (Active Cable) field is 1b (EPR Capable)\nd)\nIf the cable fails to respond to the Discover Identity Command or is not EPR Capable, the Source \nShall do the following:\ni)\nSend an EPR_Mode Message with the Action field set to 4 (Enter Failed) and the Data field to1 \n(\"Cable not EPR capable\").\n","image_count":0,"table_count":1}
{"page":210,"text":"Page 210\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nii)\nAbort the EPR Mode entry process and remain in the existing SPR Explicit Contract.\n7)\nThe Source Shall send the EPR_Mode Message with the Action field set to 3 (Enter Succeeded) and Shall \nenter EPR Mode.\n8)\nIf the Sink receives an EPR_Mode Message with the Action field set to 3 (Enter Succeeded) it Shall enter \nEPR Mode, otherwise it Shall initiate a Soft Reset.\nIf the EPR Mode entry process successfully completes within tEnterEPR of the last bit of the GoodCRC Message sent \nin response to the EPR_Mode Message with the Action field set to 1 (Enter), the Source Shall send an \nEPR_Source_Capabilities Message within tFirstSourceCap. \nIf the EPR Mode entry process has not been aborted or does not complete within tEnterEPR of the last bit of the \nGoodCRC Message sent in response to the EPR_Mode Message with the Action field set to 1 (Enter), the Sink Shall \ninitiate a Soft Reset. \n6.4.10.2\n  Operation in EPR Mode\nWhile operating in EPR Mode, the Source Shall only send EPR_Source_Capabilities Messages to Advertise its power \nCapabilities and the Sink Shall only respond with EPR_Request Messages to Negotiate Explicit Contracts. The \nEPR_Request Message May be for either an SPR or EPR (A)PDO.\nIf the Source sends a Source_Capabilities Message, that is not in response to a Sink Get_Source_Cap Message, the \nSink Shall initiate a Hard Reset. If the Sink sends a Request Message, the Source Shall initiate a Hard Reset.\nThe Source Shall monitor the CC communications path to ensure that there is periodic traffic. The Sink Shall send \nan EPR_KeepAlive Message when it has not sent any Messages for more than tSinkEPRKeepAlive to ensure there \nis timely periodic traffic. If there is no traffic for more than tSourceEPRKeepAlive, the Source Shall initiate a Hard \nReset.\n6.4.10.3\n  Exiting EPR Mode\n6.4.10.3.1\n  Commanded Exit\nWhile in EPR Mode, either the Source or Sink May exit EPR Mode by sending an EPR_Mode Message with the Action \nfield set to 5 (Exit).\nThe ports Shall be in an Explicit Contract with an SPR (A)PDO prior to the EPR Mode exit process by either:\n\nThe Source sending an EPR_Source_Capabilities Message with no EPR (A)PDO s (e.g., only SPR (A)PDO \ns) or\n\nThe Sink negotiating a new Explicit Contract with bit 31 in the RDO set to zero (e.g., only SPR (A)PDO s)).\nThe process to exit EPR Mode is a Non-interruptible multi-Message AMS and Shall follow these steps in order:\n1)\nThe Port Partners Shall be in an Explicit Contract with an SPR (A)PDO.\n2)\nEither the Source or Sink Shall send an EPR_Mode Message with the Action field set to 5 (Exit) to exit \nthe EPR Mode \n3)\nThe Source Shall send a Source_Capabilities Message within tFirstSourceCap of the GoodCRC Message \nin response to the EPR_Mode Message with the Action field set to 5 (Exit).\n4)\nIf the Sink does not receive a Source_Capabilities Message within tTypeCSinkWaitCap of the last bit of \nthe GoodCRC Message in response to the EPR_Mode Message with the Action field set to 5 (Exit), Sink \nShall initiate a Hard Reset.\n6.4.10.3.2\n  Implicit Exit\nEPR Mode Shall be exited as the side-effect of the Power Role Swap and Fast Role Swap processes. This is because \nat the end of these processes VBUS will be at vSafe5V and the Ports will be in an Implicit Contract. The New Source \nwill then send a Source_Capabilities Message (not an EPR_Source_Capabilities Message) to begin the process of \n","image_count":0,"table_count":1}
{"page":211,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 211\nnegotiating an SPR Explicit Contract. Once an SPR Explicit Contract is entered, the Source and Sink can then enter \nEPR Mode if needed.\n6.4.10.3.3\n  Exits due to errors\nOther critical errors can occur while in EPR Mode; these errors Shall result in Hard Reset being initiated by the Port \nthat detects the error. Some of these errors include:\n\nAn EPR_Mode Message with the Action field set to 5 (Exit) to exit EPR Mode is received by a Port in an \nExplicit Contract with an EPR (A)PDO.\n\nThe Sink receives an EPR_Source_Capabilities Message with an EPR (A)PDO in any of the first seven \nobject positions.\n\nThe (A)PDO in the EPR_Request Message does not match the (A)PDO in the latest \nEPR_Source_Capabilities Message pointed to by the Object Position field in the RDO.\n\nThe Source receives a Request Message.\n\nThe Sink receives a Source_Capabilities Message not in response to a Get_Source_Cap Message.\n","image_count":0,"table_count":1}
{"page":212,"text":"Page 212\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.11\n  Source_Info Message\nThe Source_Info Message Shall be sent in response to a Get_Source_Info Message. The Source_Info Message \ncontains one Source Information Data Object (SIDO).\nThe Source_Info Message returns a SIDO whose format Shall be as shown in Figure 6.35, \"Source_Info Message\" and \nTable 6.51, \"Source_Info Data Object (SIDO)\". The Number of Data Objects field in the Source_Info Message Shall \nbe set to 1.\nThe Port Maximum PDP, Port Present PDP, Port Reported PDP and the Port Type are used to identify Capabilities \nof a Source Port.\nFigure 6.35 Source_Info Message\n6.4.11.1\n  Port Type Field\nPort Type is a Static field that Shall be used to indicate whether the amount of power the Port can provide is fixed \nor can change dynamically.\nFor Ports that are part of a Shared Capacity Group, the Port Type field Shall be set to Managed Capability Port.\nFor Ports not part of a Shared Capacity Group, the Port Type field May be set to either Managed Capability Port or \nGuaranteed Capability Port.\n6.4.11.2\n  Port Maximum PDP Field\nPort Maximum PDP is a Static field that Shall report the integer portion of the PDP Rating of the Port. A \nGuaranteed Capability Port (as indicated by the Port Type field being set to '1') Shall always be capable of \nsupplying this amount of power. A Managed Capability Port (as indicated by the Port Type field being set to '0') \nShall be able to offer this amount of power at some time.\nThe Port Maximum PDP Shall be the same as the larger of the SPR Source PDP Rating and the EPR Source PDP \nRating in the Source_Capabilities_Extended Message.\n6.4.11.3\n  Port Present PDP Field\nThe Port Present PDP field Shall indicate the integer part of the amount of power the Port is presently capable of \nsupplying including limitations due to Cable Capabilities or abnormal operating conditions (e.g., elevated \ntemperature, low input voltage, etc.).\nA Guaranteed Capability Port Shall always set its Port Present PDP to be the same as its Port Maximum PDP or \nthe highest possible value when limited.\nTable 6.51  Source_Info Data Object (SIDO)\nBit(s)\nField\nDescription\nB31\nPort Type\n\n0 = Managed Capability Port\n\n1 = Guaranteed Capability Port\nB30…24\nReserved\nShall be set to zero\nB23...16\nPort Maximum PDP\nPower the Port is designed to supply\nB15…8\nPort Present PDP\nPower the Port is presently capable of supplying\nB7…0\nPort Reported PDP\nPower the Port is actually advertising\nHeader\nNo. of Data Objects = 1\nSIDO\n","image_count":12,"table_count":3}
{"page":213,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 213\nA Managed Capability Port that is part of a Shared Capacity Group Shall set its Port Present PDP to Shared Port \nPower Available as defined in [USB Type-C 2.4] or to a lower value when limited.\nA Managed Capability Port that is part of an Assured Capacity Group Shall set its Port Present PDP to the Port \nMaximum PDP or the highest value possible when limited.\n6.4.11.4\n  Port Reported PDP Field\nThe Port Reported PDP field Shall track the amount of power the Port is offering in its Source_Capabilities \nMessage or EPR_Source_Capabilities Message. The Port Reported PDP field May be dynamic or Static depending \non the Port's other characteristics such as Managed/Guaranteed Capability, SPR/EPR Mode, its power policy etc.\nNote:\nThe Port Reported PDP field is computed as the integer part of, the largest of the products of the voltage \ntimes current of the Fixed Supply PDOs returned in the Source_Capabilities Message or \nEPR_Source_Capabilities Messages.\n","image_count":0,"table_count":1}
{"page":214,"text":"Page 214\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.4.12\n  Revision Message\nThe Revision Message Shall be sent in response to the Get_Revision Message sent by the Port Partner. This Message \nis used to identify the highest Revision the Port is capable of operating at. The Revision Message contains one \nRevision Message Data Object (RMDO).\nThe Revision Message returns an RMDO whose format Shall be as shown in Figure 6.36, \"Revision Message Data \nObject\"and Table 6.52, \"Revision Message Data Object (RMDO)\". The Number of Data Objects field in the Revision \nMessage Shall be set to 1.\nFigure 6.36 Revision Message Data Object\nE.g., for Revision 3.2, Version 1.1 the fields would be the following:\n\nRevision.major = 0011b\n\nRevision.minor = 0010b\n\nVersion.major = 0001b\n\nVersion.minor = 0001b\nTable 6.52  Revision Message Data Object (RMDO)\nBit(s)\nDescription\nB31…28\nRevision.major\nB27…24\nRevision.minor\nB23...20\nVersion.major\nB19...16\nVersion.minor\nB15...0\nReserved, Shall be set to zero.\nHeader\nNo. of Data Objects = 1\nRMDO\n","image_count":9,"table_count":3}
{"page":215,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 215\n6.5\n  Extended Message\nAn Extended Message Shall contain an Extended Message Header (indicated by the Extended field in the Message \nHeader being set) and be followed by zero or more data bytes. Additional bytes that might be added to existing \nMessages in future Revision of this specification Shall be Ignored.\nThe format of the Extended Message is defined by the Message Header's Message Type field and is summarized in \nTable 6.53, \"Extended Message Types\". The Sent by column indicates entities which May send the given Message \n(Source, Sink or Cable Plug); entities not listed Shall Not issue the corresponding Message. The \"Valid Start of \nPacket\" column indicates the Messages which Shall only be issued in SOP Packets and the Messages which May be \nissued in SOP* Packets.\nTable 6.53  Extended Message Types\nBits \n4…0\nType\nSent by\nDescription\nValid \nStart of \nPacket\n0 0000\nReserved\nAll values not explicitly defined are \nReserved and Shall Not be used.\n0 0001\nSource_Capabilities_Extended\nSource or Dual-Role Power\nSee Section 6.5.1\nSOP only\n0 0010\nStatus\nSource, Sink or Cable Plug\nSee Section 6.5.2\nSOP*\n0 0011\nGet_Battery_Cap\nSource or Sink\nSee Section 6.5.3\nSOP only\n0 0100\nGet_Battery_Status\nSource or Sink\nSee Section 6.5.4\n0 0101\nBattery_Capabilities\nSource or Sink\nSee Section 6.5.5\nSOP only\n0 0110\nGet_Manufacturer_Info\nSource or Sink\nSee Section 6.5.6\nSOP*\n0 0111\nManufacturer_Info\nSource, Sink or Cable Plug\nSee Section 6.5.7\nSOP*\n0 1000\nSecurity_Request\nSource or Sink\nSee Section 6.5.8.1\nSOP*\n0 1001\nSecurity_Response\nSource, Sink or Cable Plug\nSee Section 6.5.8.2\nSOP*\n0 1010\nFirmware_Update_Request\nSource or Sink\nSee Section 6.5.9.1\nSOP*\n0 1011\nFirmware_Update_Response\nSource, Sink or Cable Plug\nSee Section 6.5.9.2\nSOP*\n0 1100\nPPS_Status\nSource\nSee Section 6.5.10\nSOP only\n0 1101\nCountry_Info\nSource or Sink\nSee Section 6.5.12\nSOP only\n0 1110\nCountry_Codes\nSource or Sink\nSee Section 6.5.11\nSOP only\n0 1111\nSink_Capabilities_Extended\nSink or Dual-Role Power\nSee Section 6.5.13\nSOP only\n1 0000\nExtended_Control\nSource or Sink\nSee Section 6.5.14\nSOP only\n1 0001\nEPR_Source_Capabilities\nSource or Dual-Role Power\nSee Section 6.5.15.2\nSOP only\n1 0010\nEPR_Sink_Capabilities\nSink or Dual-Role Power\nSee Section 6.5.15.3\nSOP only\n1 0011...\n1 1101\nReserved\nAll values not explicitly defined are \nReserved and Shall Not be used.\n1 1110\nVendor_Defined_Extended\nSource, Sink or Cable Plug\nSee Section 6.5.16\nSOP*\n1 1111\nReserved\nAll values not explicitly defined are \nReserved and Shall Not be used.\n","image_count":0,"table_count":2}
{"page":216,"text":"Page 216\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.1\n  Source_Capabilities_Extended Message\nThe Source_Capabilities_Extended Message Should be sent in response to a Get_Source_Cap_Extended Message. \nThe Source_Capabilities_Extended Message enables a Source or a DRP to inform the Sink about its Capabilities as a \nSource.\nThe Source_Capabilities_Extended Message Shall return a 25-byte Source Capabilities Extended Data Block \n(SCEDB) whose format Shall be as shown in Figure 6.37, \"Source_Capabilities_Extended Message\" andTable 6.54, \n\"Source Capabilities Extended Data Block (SCEDB)\".\nFigure 6.37 Source_Capabilities_Extended Message\nTable 6.54  Source Capabilities Extended Data Block (SCEDB)\nOffset\nField\nDescription\n0\nVID\nVendor ID (assigned by the USB-IF)\n2\nPID\nProduct ID (assigned by the manufacturer)\n4\nXID\nValue provided by the USB-IF assigned to the product\n8\nFW Version\nFirmware version number \n9\nHW Version\nHardware version number \n10\nVoltage Regulation\nBit\nDescription\n1…0\n\n00b: 150mA/µs Load Step (default)\n\n01b: 500mA/µs Load Step\n\n11b…10b: Reserved and Shall Not be used.\n2\n\n0b: 25% IoC (default)\n\n1b: 90% IoC\n3…7\nReserved and Shall Not be used\n11\nHoldup Time\nOutput will stay with regulated limits for this number of milliseconds after removal of \nthe AC from the input.\n\n0x00 = feature not supported\nNote: A value of at least 3ms Should be used (see Section 7.1.12.2, \"Holdup Time Field\").\n12\nCompliance\nCompliance in SPR Mode:\nBit\nDescription\n0\nLPS compliant when set\n1\nPS1 compliant when set\n2\nPS2 compliant when set\n3…7\nReserved and Shall Not be used\n13\nTouch Current\nBit\nDescription\n0\nLow touch current EPS when set\n1\nGround pin supported when set\n2\nGround pin intended for protective earth when set\n3...7\nReserved and Shall Not be used\nExtended Header\nData Size = 25\nSCEDB\n(25-byte Data Block)\n","image_count":12,"table_count":3}
{"page":217,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 217\n6.5.1.1\n  Vendor ID (VID) Field\nThe VID field Shall contain the 16-bit Vendor ID (VID) assigned to the Source's vendor by the USB-IF. If the vendor \ndoes not have a VID, the VID field Shall be set to 0xFFFF. Devices that have a USB data interface Shall report the \nsame VID as the idVendor in the Standard Device Descriptor (see [USB 2.0] and [USB 3.2]).\n14\nPeak Current1\nBit\nDescription\n0...4\nPercent overload in 10% increments Values higher than 25 (11001b) are \nclipped to 250%.\n5...10\nOverload period in 20ms\n11...14\nDuty cycle in 5% increments\n15\nVBUS voltage droop\n16\nPeak Current2\nBit\nDescription\n0...4\nPercent overload in 10% increments Values higher than 25 (11001b) are \nclipped to 250%.\n5...10\nOverload period in 20ms\n11...14\nDuty cycle in 5% increments\n15\nVBUS voltage droop\n18\nPeak Current3\nBit\nDescription\n0...4\nPercent overload in 10% increments Values higher than 25 (11001b) are \nclipped to 250%.\n5...10\nOverload period in 20ms\n11...14\nDuty cycle in 5% increments\n15\nVBUS voltage droop\n20\nTouch Temp\nTemperature conforms to:\n\n0 = [IEC 60950-1] (default)\n\n1 = [IEC 62368-1] TS1\n\n2 = [IEC 62368-1] TS2\nNote: All other values Reserved and Shall Not be used.\n21\nSource Inputs\nBit\nDescription\n0\n\n0b: No external supply\n\n1b: External supply present\n1\nIf bit 0 is set:\n\n0b: External supply is constrained.\n\n1b: External supply is unconstrained.\nIf bit 0 is not set Reserved and Shall be set to zero\n2\n\n0b: No internal Battery\n\n1b: Internal Battery present\n3...7\nReserved and Shall be set to zero\n22\nNumber of Batteries/\nBattery Slots\nUpper Nibble = Number of Hot Swappable Battery Slots (0…4)\nLower Nibble = Number of Fixed Batteries (0…4)\n23\nSPR Source PDP \nRating\n0…6: Source PDP Rating (EPR Source’s PDP Rating when operating in SPR Mode.\n7: Reserved and Shall be set to zero\n24\nEPR Source PDP \nRating\n0…7: EPR Source PDP Rating\nTable 6.54  Source Capabilities Extended Data Block (SCEDB) (Continued)\nOffset\nField\nDescription\n","image_count":0,"table_count":2}
{"page":218,"text":"Page 218\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.1.2\n  Product ID (PID) Field\nThe PID field Shall contain the 16-bit Product ID (PID) assigned by the Source's vendor. Devices that have a USB \ndata interface Shall report the same PID as the idProduct in the Standard Device Descriptor (see [USB 2.0] and \n[USB 3.2]).\n6.5.1.3\n  XID Field\nThe XID field Shall contain the 32-bit XID provided by the USB-IF to the vendor who in turns assigns it to a product. \nIf the vendor does not have an XID, then it Shall return zero in this field (see [USB 2.0] and [USB 3.2]).\n6.5.1.4\n  Firmware Version Field\nThe FW Version field Shall contain an 8-bit firmware version number assigned to the device by the vendor. \n6.5.1.5\n  Hardware Version Field\nThe HW Version field Shall contain an 8-bit hardware version number assigned to the device by the vendor. \n6.5.1.6\n  Voltage Regulation Field\nThe Voltage Regulation field contains bits covering Load Step Slew Rate and Magnitude. \nSee Section 7.1.12.1, \"Voltage Regulation Field\" for further details.\n6.5.1.6.1\n  Load Step Slew Rate \nThe Source Shall report its load step response capability in bits 0…1 of the Voltage Regulation bit field. \n6.5.1.6.2\n  Load Step Magnitude\nThe Source Shall report its load step magnitude rate as a percentage of IoC in bit 2 of the Voltage Regulation field.\n6.5.1.7\n  Holdup Time Field\nThe Holdup Time field Shall contain the Source's holdup time (see Section 7.1.12.2, \"Holdup Time Field\").\n6.5.1.8\n  Compliance Field\nThe Compliance is Static and Shall contain the standards the Source is compliant with in SPR (see Section 7.1.12.3, \n\"Compliance Field\").\n6.5.1.9\n  Touch Current Field\nThe Touch Current field reports whether the Source meets certain leakage current levels and if it has a ground pin.\nA Source Shall set the Touch Current bit (bit 0) when their leakage current is less than 65µA rms when Source's \nmaximum capability is less than or equal to 30W, or when their leakage current is less than 100 µA rms when its \npower capability is between 30W and 100W. The total combined leakage current Shall be measured in accordance \nwith [IEC 60950-1] when tested at 250VAC rms at 50 Hz. \nA Source with a ground pin Shall set the Ground pin bit (bit 1). \nA Source whose Ground pin is intended to be connected to a protective earth Shall set both bit1 and bit 2.\n6.5.1.10\n  Peak Current Field\nThe Peak Current1/Peak Current2/Peak Current3 fields Shall contain the combinations of Peak Current that the \nSource supports (see Section 7.1.12.4, \"Peak Current\").\nPeak Current provides a means for Source report its ability to provide current in excess of the Negotiated amount \nfor short periods. The Peak Current descriptor defines up to three combinations of% overload, duration and duty \n","image_count":0,"table_count":1}
{"page":219,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 219\ncycle defined as Peak Current1, Peak Current2 and Peak Current3 that the Source supports. A Source May offer \nno Peak Current capability. A Source Shall populate unused Peak Current bit fields with zero.\nThe Bit Fields within Peak Current1, Peak Current2 and Peak Current3 contain the following subfields:\n\nPercentage Overload\n\nShall be the maximum peak current reported in 10% increments as a percentage of the Negotiated \noperating current (IoC) offered by the Source. Values higher than 25 (11001b) are clipped to 250%.\n\nOverload Period\n\nShall be the minimum rolling average time window in 20ms increments, where a value of 20ms is \nrecommended.\n\nDuty Cycle\n\nShall be the maximum percentage of overload period reported in 5% increments. The values \nShould be 5%, 10% and 50% for PeakCurrent1, PeakCurrent2, and PeakCurrent3, respectively.\n\nVBUS Droop\n\nShall be set to one to indicate there is an additional 5% voltage droop on VBUS when the overload \nconditions occur as defined by vSrcPeak. However, it is recommended that the Source Should pro-\nvide VBUS in the range of vSrcNew when overload conditions occur and set this bit to zero.\n6.5.1.11\n  Touch Temp Field\nThe Touch Temp field Shall report the IEC standard used to determine the surface temperature of the Source's \nenclosure. Safety limits for the Source's touch temperature are set in applicable product safety standards (e.g., [IEC \n60950-1] or [IEC 62368-1]). The Source May report when its touch temperature performance conforms to the TS1 \nor TS2 limits described in [IEC 62368-1].\n6.5.1.12\n  Source Inputs Field\nThe Source Inputs field Shall identify the possible inputs that provide power to the Source:\n\nWhen bit 0 is set, the Source can be sourced by an external power supply.\n\nWhen bits 0 and 1 are set, the Source can be sourced by an external power supply which is assumed to \nbe effectively \"infinite\" i.e., it won't run down over time.\n\nWhen bit 2 is set the Source can be sourced by an internal Battery.\nNote:\nSome Sources are only powered by a Battery (e.g., an automobile) rather than the more common AC \nSupply. \nNote:\nBit 2 May be set independently of bits 0 and 1.\n6.5.1.13\n  Number of Batteries/Battery Slots Field\nThe Number of Batteries/Battery Slots field Shall report the number of Fixed Batteries and Hot Swappable \nBattery Slots the Source supports. This field Shall independently report the number of Battery Slots and the \nnumber of Fixed Batteries.\nA Source Shall have no more than 4 Fixed Batteries and no more than 4 Battery Slots. \nFixed Batteries Shall be numbered consecutively from 0 to 3. The number assigned to a given Fixed Battery Shall \nNot change between Attach and Detach. \nBattery Slots Shall be numbered consecutively from 4 to 7. The number assigned to a given Battery Slot Shall Not \nchange between Attach and Detach.\n","image_count":0,"table_count":1}
{"page":220,"text":"Page 220\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.1.14\n  SPR Source PDP Rating Field\nFor an SPR Source the SPR Source PDP Rating field Shall report the integer portion of the PDP Rating of the Port.\nFor an EPR Source, the SPR Source PDP Rating field Shall report the integer portion of the maximum amount of \npower that the Port is designed to deliver in SPR Mode.\nThe SPR Source PDP Rating field that is reported Shall be Static.\n6.5.1.15\n  EPR Source PDP Rating Field\nFor an EPR Source the EPR Source PDP Rating field Shall report the integer portion of the PDP Rating of the Port.\nFor an SPR Source this field Shall be set to zero.\nThe EPR Source PDP Rating field that is reported Shall be Static.\n","image_count":0,"table_count":1}
{"page":221,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 221\n6.5.2\n  Status Message\nThe Status Message Shall be sent in response to a Get_Status Message. The content of the Status Message depends \non the target of the Get_Status Message. When sent to SOP the Status Message returns the status of the Port's Port \nPartner. When sent to SOP’ or SOP’’ the Status Message returns the status of one of the Active Cable's Cable Plugs.\n6.5.2.1\n  SOP Status Message\nA Status Message, sent in response to Get_Status Message to SOP, enables a Port to inform its Port Partner about \nthe present status of the Source or Sink. Typically, a Get_Status Message will be sent by the Port after receipt of an \nAlert Message. Some of the reported events are critical such as OCP, OVP and OTP, while others are informational \nsuch as change in a Battery's status from charging to neither charging nor discharging. \nThe Status Message returns a 7-byte Status Data Block (SDB) whose format Shall be as shown in Figure 6.38, \"SOP \nStatus Message\" and Table 6.55, \"SOP Status Data Block (SDB)\".\nFigure 6.38 SOP Status Message\nTable 6.55  SOP Status Data Block (SDB)\nOffset (Byte)\nField\nDescription\n0\nInternal Temp\nSource or Sink’s internal temperature in °C\n\n0 = feature not supported\n\n1 = temperature is less than 2°C. \n\n2-255 = temperature in °C.\n1\nPresent Input\nBit\nDescription\n0\nReserved and Shall be set to zero\n1\nExternal Power when set\n2\nExternal Power AC/DC (Valid when Bit 1 set)\n\n0: DC\n\n1: AC \nReserved when Bit 1 is zero\n3\nInternal Power from Battery when set\n4\nInternal Power from non-Battery power source when set\n5...7\nReserved and Shall be set to zero\n2\nPresent Battery \nInput\nWhen Present Input field bit 3 set Shall contain the bit corresponding \nto the Battery or Batteries providing power:\n\nUpper nibble = Hot Swappable Battery (b7…4)\n\nLower nibble = Fixed Battery (b3…0)\nWhen Present Input field bit 3 is not set this field is Reserved and \nShall be set to zero.\nExtended Header\nData Size = 7\nSDB\n(7-byte block)\n","image_count":12,"table_count":3}
{"page":222,"text":"Page 222\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n3\nEvent Flags\nBit\nFlag\nDescription\n0\nReserved and Shall be set to zero\n1\nOCP Event\nOCP event when set\n2\nOTP Event\nOTP event when set\n3\nOVP Event\nOVP event when set\n4\nCL/CV Mode\nIn PPS Mode only: CL mode when set, CV \nmode when cleared\n5...7\nReserved and Shall be set to zero\n4\nTemperature \nStatus\nBit\nDescription\n0\nReserved and Shall be set to zero\n1...2\n\n00 – Not Supported. \n\n01 – Normal \n\n10 – Warning \n\n11 – Over temperature\n3...7\nReserved and Shall be set to zero\n5\nPower Status\nBit\nDescription\n0\nReserved and Shall be set to zero\n1\nSource power limited due to cable supported current\n2\nSource power limited due to insufficient power available \nwhile sourcing other ports\n3\nSource power limited due to insufficient external power\n4\nSource power limited due to Event Flags in place (Event \nFlags must also be set)\n5\nSource power limited due to temperature\n6...7\nReserved and Shall be set to zero\nTable 6.55  SOP Status Data Block (SDB) (Continued)\nOffset (Byte)\nField\nDescription\n","image_count":0,"table_count":2}
{"page":223,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 223\n6.5.2.1.1\n  Internal Temp Field\nThe Internal Temp field reports the instantaneous temperature of a portion of the Source or Sink.\n6.5.2.1.2\n  Present Input Field\nThe Present Input field indicates which supplies are presently powering the Source or Sink.\nThe following bits are defined:\n\nBit 1: indicates that an external power source is present.\n\nBit 2: indicates whether the external unconstrained power source is AC or DC.\n\nBit 3: indicates that power is being provided from Battery.\n\nBit4: indicates an alternative internal source of power that is not a Battery.\n6.5.2.1.3\n  Present Battery Input Field\nThe Present Battery Input field indicates which Battery or Batteries are presently supplying power to the Source \nor Sink. The Present Battery Input field is only Valid when the Present Input field indicates that there is Internal \nPower from Battery.\nThe upper nibble of the field indicates which Hot Swappable Battery/Batteries are supplying power with bit 4 in \nupper nibble corresponding to Battery 4 and bit 7 in the upper nibble corresponding to Battery 7 (see Section 6.5.3, \n\"Get_Battery_Cap Message\" and Section 6.5.4, \"Get_Battery_Status Message\").\nThe lower nibble of the field indicates which Fixed Battery/Batteries are supplying power with bit 0 in lower nibble \ncorresponding to Battery 0 and bit 3 in the lower nibble corresponding to Battery 3 (see Section 6.5.3, \n\"Get_Battery_Cap Message\" and Section 6.5.4, \"Get_Battery_Status Message\").\n6\nPower State \nChange\nBit\nDescription\n0...2\nNew Power State\nValue\nDescription\n0\nStatus not supported\n1\nS0\n2\nModern Standby\n3\nS3\n4\nS4\n5\nS5 (Off with battery, wake events \nsupported)\n6\nG3 (Off with no battery, wake events not \nsupported)\n7\nReserved and Shall be set to zero\n3...5\nNew Power State indicator\nValue\nDescription\n0\nOff LED\n1\nOn LED\n2\nBlinking LED\n3\nBreathing LED\n4...7\nReserved and Shall be set to zero\n6...7\nReserved and Shall be set to zero\nTable 6.55  SOP Status Data Block (SDB) (Continued)\nOffset (Byte)\nField\nDescription\n","image_count":0,"table_count":2}
{"page":224,"text":"Page 224\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.2.1.4\n  Event Flags Field\nThe Event Flags field returns event flags. The OTP, OVP and OCP event flags Shall be set when there is an event and \nShall only be cleared when read with the Get_Status Message.\nWhen the OTP Event flag is set the Temperature Status field Shall also be set to over temperature.\nThe CL/CV Mode flag is only Valid when operating as a Programmable Power Supply and Shall be Ignored \notherwise. When the Source is operating as a Programmable Power Supply the CL/CV Mode flag Shall be set when \noperating in Current Limit mode (CL) and Shall be cleared when operating in Constant Voltage mode (CV).\n6.5.2.1.5\n  Temperature Status Field\nThe Temperature Status field returns the current temperature status of the device either: normal, warning or \nover temperature. When the Temperature Status field is set to over temperature the OTP Event flag Shall also be \nset.\n6.5.2.1.6\n  Power Status Field\nThe Power Status field indicates the current status of a Source. A non-zero return of the field indicates Advertised \nSource power is being reduced for either:\n\nThe cable does not support the full Source current.\n\nThe Source is supplying power to other ports and is unable to provide its full power.\n\nThe external power to the Source is insufficient to support full power.\n\nAn Event has occurred that is causing the Source to reduce its Advertised power.\nA Sink Shall set this field to zero.\n","image_count":0,"table_count":1}
{"page":225,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 225\n6.5.2.1.7\n  Power state change\nThe Power State Change field contains two status bytes; the New Power State and New Power State indicator status \nbytes.\n6.5.2.1.7.1\n  New power state\nThe New Power State status byte indicates a power state change to one of the specified power states. Any device \nthat supports the ACPI standard system power states Shall use the ACPI states. For devices that do not support the \nACPI power states, the following mapping Should be used:\n\nHigh power (on) state \n-> S0\n\nSleep state \n-> S3\n\nLow power (off) state \n-> S5 or G3\n6.5.2.1.7.2\n  New power state indicator\nThe New Power State indicator status byte defines the host's desired indicator for the specified power state. This \nindicator allows several possibilities for predefined behaviors that the host can specify to indicate its system \npower state to the user via the downstream device. The New Power State indicator is a \"best effort\" indicator. If \nthe device cannot provide the requested indicator, then it provides the best indicator that it can. If a Breathing \nindicator cannot be provided, then a Blinking indicator Should be provided. If a Blinking indicator cannot be \nprovided, then a constant on indicator Should be provided.\nNew Power State indicators in decreasing precedence:\n\nBreathing\n\nBlinking\n\nConstant on\n\nNo indicator\n","image_count":0,"table_count":1}
{"page":226,"text":"Page 226\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.2.2\n  SOP'/SOP'' Status Message\nA Status Message, sent in response to a Get_Status Message to SOP’ or SOP’’, enables a Source or Sink to get the \npresent status of the Cable's Cable Plug(s). Typically, a Get_Status Message will be used by the USB Host and/or USB \nDevice to manage the Cable's Cable Plug(s) temperature. The Status Message returns a 2-byte Status Data Block \n(SDB) whose format Shall be as shown in Figure 6.39, \"SOP'/SOP'' Status Message\" and Table 6.56, \"“SOP’/SOP’’ \nStatus Data Block (SPDB)”\".\nPassive Cable Plugs Shall Not indicate Thermal Shutdown.\nFigure 6.39 SOP'/SOP'' Status Message\n6.5.2.2.1\n  Internal Temp Field\nThe Internal Temp field reports the instantaneous temperature of the plug in °C. The internal temperature Shall \nbe monotonic. The Cable Plug Shall report its internal temperature every tACTempUpdate.\n6.5.2.2.2\n  Thermal Shutdown Field\nThe Flags flag Shall also be set when the plug's internal temperature exceeds the Internal Maximum Temperature \nreported in the Active Cable VDO. Once this bit has been set, it Shall remain set and the plug Shall remain in \nThermal Shutdown until there is a Hard Reset or the Active Cable's power is removed. The Thermal Shutdown flag \nShall Not be cleared by a Cable Reset.\nTable 6.56   “SOP’/SOP’’ Status Data Block (SPDB)”\nOffset (Byte)\nField\n Value\nDescription\n0\nInternal \nTemp\nUnsigned Int\nCable Plug’s internal temperature in °C.\n\n0 = feature not supported\n\n1 = temperature is less than 2°C.\n\n2…255 = temperature in °C.\n1\nFlags\nBit Field\nBit\nDescription\n0\nThermal Shutdown\n1...7\nReserved and Shall be set to zero\nExtended Header\nData Size = 2\nSPDB\n(2-byte block)\n","image_count":12,"table_count":3}
{"page":227,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 227\n6.5.3\n  Get_Battery_Cap Message\nThe Get_Battery_Cap (Get Battery Capabilities) Message is used to request the capability of a Battery present in its \nPort Partner. The Port Shall respond by returning a Battery_Capabilities Message (see Section 6.5.5, \n\"Battery_Capabilities Message\") containing a Battery Capabilities Data Block (BCDB) for the targeted Battery.\nThe Get_Battery_Cap Message contains a 1-byte Get Battery Cap Data Block (GBCDB), whose format Shall be as \nshown in Figure 6.40, \"Get_Battery_Cap Message\" and Table 6.57, \"Get Battery Cap Data Block (GBCDB)\". This block \ndefines for which Battery the request is being made.\nThe Data Size field in the Get_Battery_Cap Message Shall be set to 1.\nFigure 6.40 Get_Battery_Cap Message\n6.5.4\n  Get_Battery_Status Message\nThe Get_Battery_Status (Get Battery Status) Message is used to request the status of a Battery present in its Port \nPartner. The Port Shall respond by returning a Battery_Status Message (see Section 6.4.5, \"Battery_Status \nMessage\") containing a Battery Status Data Object (BSDO) for the targeted Battery.\nThe Get_Battery_Status Message contains a 1-byte Get Battery Status Data Block (GBSDB) whose format Shall be \nas shown in Figure 6.41, \"Get_Battery_Status Message\" and Table 6.58, \"Get Battery Status Data Block (GBSDB)\". This \nblock contains details of the requested Battery. The Data Size field in the Get_Battery_Status Message Shall be set \nto 1.\nFigure 6.41 Get_Battery_Status Message\nTable 6.57  Get Battery Cap Data Block (GBCDB)\nOffset\nField\nDescription\n0\nBattery Cap Ref\nNumber of the Battery indexed from zero:\n\nValues 0…3 represent the Fixed Batteries.\n\nValues 4…7 represent the Hot Swappable Batteries.\n\nValues 8…255 are Reserved and Shall Not be used.\nTable 6.58  Get Battery Status Data Block (GBSDB)\nOffset\nField\nDescription\n0\nBattery Status Ref\nNumber of the Battery indexed from zero:\n\nValues 0…3 represent the Fixed Batteries.\n\nValues 4…7 represent the Hot Swappable Batteries.\n\nValues 8…255 are Reserved and Shall Not be used.\nExtended Header\nData Size = 1\nGBCDB\nExtended Header\nData Size = 1\nGBSDB\n","image_count":12,"table_count":5}
{"page":228,"text":"Page 228\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.5\n  Battery_Capabilities Message\nThe Battery_Capabilities Message is sent in response to a Get_Battery_Cap Message. The Battery_Capabilities \nMessage contains one Battery Capability Data Block (BCDB) for one of the Batteries its supports as reported by \nNumber of Batteries/Battery Slots field in the Source_Capabilities_Extended Message. The returned BCDB Shall \ncorrespond to the Battery requested in the Battery Cap Ref field contained in the Get_Battery_Cap Message.\nThe Battery_Capabilities Message returns a 9-byte BCDB whose format Shall be as shown in Figure 6.42, \n\"Battery_Capabilities Message\" and Table 6.59, \"Battery Capability Data Block (BCDB)”\".\nFigure 6.42 Battery_Capabilities Message\n6.5.5.1\n  Vendor ID (VID)\nThe VID field Shall contain the manufacturer VID associated with the Battery, as assigned by the USB-IF, or 0xFFFF \nin the case that no such VID exists.\nIf the Battery Cap Ref field in the Get_Battery_Cap Message is Invalid, the VID field Shall be 0xFFFF.\n6.5.5.2\n  Product ID (PID)\nThe following rules apply to the PID field. When the VID:\nTable 6.59   Battery Capability Data Block (BCDB)”\nOffset \n(Byte)\nField\nDescription\n0\nVID\nVendor ID (assigned by the USB-IF)\n2\nPID\nProduct ID (assigned by the manufacturer)\n4\nBattery Design Capacity\nBattery’s design capacity in 0.1 WH\nNote: \n\n0x0000 = Battery not present\n\n0xFFFF = design capacity unknown\n6\nBattery Last Full Charge Capacity\nBattery’s last full charge capacity in 0.1 WH\nNote: \n\n0x0000 = Battery not present\n\n0xFFFF = last full charge capacity unknown\n8\nBattery Type\nBit\nField\nDescription\n0\nInvalid Battery Reference Invalid Battery reference when \nset.\n1...7\n---\nReserved\nExtended Header\nData Size = 9\nBCDB\n","image_count":9,"table_count":3}
{"page":229,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 229\n\nBelongs to the Battery vendor the PID field Shall contain the Battery's 16-bit product identifier \ndesignated by the Battery vendor.\n\nBelongs to the Device vendor the PID field Shall contain the Battery's 16-bit product identifier \ndesignated by the Device vendor.\n\nIs 0xFFFF the PID field Shall be set to 0x0000.\n6.5.5.3\n  Battery Design Capacity Field\nThe Battery Design Capacity field Shall return the Battery's design capacity in tenths of WH. If the Battery is Hot \nSwappable and is not present, the Battery Design Capacity field Shall be set to zero. If the Battery is unable to \nreport its Design Capacity, the Battery Design Capacity field Shall be set to 0xFFFF.\n6.5.5.4\n  Battery Last Full Charge Capacity Field\nThe Battery Last Full Charge Capacity field Shall contain the Battery's last full charge capacity in tenths of WH. If \nthe Battery is Hot Swappable and is not present, the Battery Last Full Charge Capacity field Shall be set to zero. \nIf the Battery is unable to report its Design Capacity, the Battery Last Full Charge Capacity field Shall be set to \n0xFFFF.\n6.5.5.5\n  Battery Type Field\nThe Battery Type field is used to report additional information about the Battery's Capabilities. \n6.5.5.5.1\n  Invalid Battery Reference\nThe Invalid Battery Reference bit Shall be set when the Get_Battery_Cap Message contains a reference to a \nBattery that does not exist.\n","image_count":0,"table_count":1}
{"page":230,"text":"Page 230\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.6\n  Get_Manufacturer_Info Message\nThe Get_Manufacturer_Info (Get Manufacturer Info) Message is sent by a Port to request manufacturer specific \ninformation relating to its Port Partner, Cable Plug or of a Battery behind a Port. The Port Shall respond by \nreturning a Manufacturer_Info Message (Section 6.5.7, \"Manufacturer_Info Message\") containing a Manufacturer \nInfo Data Block (MIDB). Support for this feature by the Cable Plug is Optional Normative.\nThe Get_Manufacturer_Info Message contains a 2-byte Get Manufacturer Info Data Block (GMIDB). This block \ndefines whether it is the Device or Battery manufacturer information being requested and for which Battery the \nrequest is being made.\nThe Get_Manufacturer_Info Message returns a GMIDB whose format Shall be as shown in Figure 6.43, \n\"Get_Manufacturer_Info Message\" and Table 6.60, \"Get Manufacturer Info Data Block (GMIDB)\".\nFigure 6.43 Get_Manufacturer_Info Message\nTable 6.60  Get Manufacturer Info Data Block (GMIDB)\nOffset\nField\nDescription\n0\nManufacturer Info Target\n\n0: Port/Cable Plug\n\n1: Battery\n\n255…2: Reserved and Shall Not be used.\n1\nManufacturer Info Ref\nIf the Manufacturer Info Target field is Battery (01b) the Manufacturer Info \nRef field Shall contain the Battery number reference which is the number of the \nBattery indexed from zero: \n\nValues 0…3 represent the Fixed Batteries.\n\nValues 4…7 represent the Hot Swappable Batteries.\nOtherwise, this field is Reserved and Shall be set to zero.\nExtended Header\nData Size = 2\nGMIDB\n","image_count":12,"table_count":3}
{"page":231,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 231\n6.5.7\n  Manufacturer_Info Message\nThe Manufacturer_Info Message Shall be sent in response to a Get_Manufacturer_Info Message. The \nManufacturer_Info Message contains the USB VID and the Vendor's PID to identify the device or Battery and the \ndevice or Battery's manufacturer byte array in a variable length Data Block of up to MaxExtendedMsgLegacyLen.\nThe Manufacturer_Info Message returns a Manufacturer Info Data Block (MIDB) whose format Shall be as shown \nin Figure 6.44, \"Manufacturer_Info Message\" and Table 6.61, \"Manufacturer Info Data Block (MIDB)\".\nFigure 6.44 Manufacturer_Info Message\n6.5.7.1\n  Vendor ID (VID)\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with this Port/Cable \nPlug, the VID field Shall contain:\n\nThe manufacturer's VID associated with the Port/Cable Plug, as defined by the USB-IF, or \n\n0xFFFF in the case that the vendor does not have a VID.\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a Device that has \na USB data interface, the Device Shall report the same VID as the idVendor in the Standard Device Descriptor (see \n[USB 2.0] and [USB 3.2]).\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a Battery, the \nVID field Shall contain:\n\nThe manufacturer VID associated with the Battery specified, as defined by the USB-IF, or\n\n0xFFFF in the case that the vendor does not have a VID.\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message:\n\nIs Invalid, this VID field Shall be 0xFFFF.\n\nIs Battery (01b) and the Manufacturer Info Ref field is Invalid, the VID field Shall be 0xFFFF.\n6.5.7.2\n  Product ID (PID)\nIf the VID is 0xFFFF, the PID field Shall contain 0x0000.\nOtherwise:\nTable 6.61  Manufacturer Info Data Block (MIDB)\nOffset\nField\nDescription\n0\nVID\nVendor ID (assigned by the USB-IF)\n2\nPID\nProduct ID (assigned by the manufacturer)\n4\nManufacturer String\nVendor defined null terminated string of 0…21 characters.\nIf the Manufacturer Info Target field or Manufacturer Info \nRef field in the Get_Manufacturer_Info Message is \nunrecognized the field Shall return a null terminated ASCII \ntext string “Not Supported”.\nExtended Header\nData Size = 5..26\nMIDB\n","image_count":12,"table_count":3}
{"page":232,"text":"Page 232\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with this \nPort/Cable Plug, the PID field Shall contain the device's 16-bit product identifier designated by the \ndevice vendor.\n\nIf the in Manufacturer Info Target field in the Get_Manufacturer_Info Message is associated with a \nBattery:\n\nAnd the VID belongs to the Battery vendor, the PID field Shall contain the Battery's 16-bit product \nidentifier designated by the Battery vendor.\n\nAnd the VID belongs to the Device vendor, the PID field Shall contain the Battery's 16-bit product \nidentifier designated by the Device vendor.\n6.5.7.3\n  Manufacturer String\nThe Manufacturer String field Shall contain the device’s or Battery's manufacturer string as defined by the \nvendor. \nIf the Manufacturer Info Target field or Manufacturer Info Ref field in the Get_Manufacturer_Info Message is \nunrecognized the field Shall return a null terminated ASCII text string \"Not Supported\".\n","image_count":0,"table_count":1}
{"page":233,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 233\n6.5.8\n  Security Messages\nThe authentication process between Port Partners or a Port and Cable Plug is fully described in \n[USBTypeCAuthentication 1.0]. This specification describes two Extended Messages used by the authentication \nprocess when applied to PD.\n In the authentication process described in [USBTypeCAuthentication 1.0] there are three basic exchanges that \nserve to:\n\nGet the Port or Cable Plug's certificates.\n\nGet the Port or Cable Plug's digest.\n\nChallenge the Port Partner or Cable Plug.\nCertificates are used to convey information, attested to by a signer, which attests to the Port Partner's or Cable \nPlug's authenticity. The Port's or Cable Plug's certificates are needed when a Port encounters a Port Partner or \nCable Plug it has not been Attached to before. To minimize calculations after the initial Attachment, a Port can also \nuse a digest consisting of hashes of the certificates rather than the certificates themselves. Once the Port has the \ncertificates and has calculated the hashes, it stores the hashes and uses the digest in future exchanges. After the \nPort gets the certificates or digest, it challenges its Port Partner or the Cable Plug to detect replay attacks. \n For further details refer to [USBTypeCAuthentication 1.0]. \n6.5.8.1\n  Security_Request\nThe Security_Request Message is used by a Port to pass a security data structure to its Port Partner or a Cable Plug.\nThe Security_Request Message contains a Security Request Data Block (SRQDB) whose format Shall be as shown \nin Figure 6.45, \"Security_Request Message\". The contents of the SRQDB and its use are defined in \n[USBTypeCAuthentication 1.0].\nFigure 6.45 Security_Request Message\n6.5.8.2\n  Security_Response\nThe Security_Response Message is used by a Port or Cable Plug to pass a security data structure to the Port that \nsent the Security_Request Message.\nThe Security_Response Message contains a Security Response Data Block (SRPDB) whose format Shall be as \nshown in Figure 6.46, \"Security_Response Message\". The contents of the SRPDB and its use are defined in \n[USBTypeCAuthentication 1.0].\nFigure 6.46 Security_Response Message\nExtended Header\nData Size = 4..260\nSRQDB\nExtended Header\nData Size = 4..260\nSRPDB\n","image_count":12,"table_count":3}
{"page":234,"text":"Page 234\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.9\n  Firmware Update Messages\nThe firmware update process between Port Partners or a Port and Cable Plug is fully described in \n[USBPDFirmwareUpdate 1.0]. This specification describes two Extended Messages used by the firmware update \nprocess when applied to PD.\n6.5.9.1\n  Firmware_Update_Request\nThe Firmware_Update_Request Message is used by a Port to pass a firmware update data structure to its Port \nPartner or a Cable Plug.\nThe Firmware_Update_Request Message contains a Firmware Update Request Data Block (FRQDB) whose format \nShall be as shown in Figure 6.47, \"Firmware_Update_Request Message\". The contents of the FRQDB and its use are \ndefined in [USBPDFirmwareUpdate 1.0].\nFigure 6.47 Firmware_Update_Request Message\n6.5.9.2\n  Firmware_Update_Response\nThe Firmware_Update_Response Message is used by a Port or Cable Plug to pass a firmware update data structure \nto the Port that sent the Firmware_Update_Request Message.\nThe Firmware_Update_Response Message contains a Firmware Update Response Data Block (FRPDB) whose \nformat Shall be as shown in Figure 6.48, \"Firmware_Update_Response Message\". The contents of the FRPDB and its \nuse are defined in [USBPDFirmwareUpdate 1.0].\nFigure 6.48 Firmware_Update_Response Message\nExtended Header\nData Size = 4..260\nFRQDB\nExtended Header\nData Size = 4..260\nFRPDB\n","image_count":12,"table_count":3}
{"page":235,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 235\n6.5.10\n  PPS_Status Message\nThe PPS_Status Message Shall be sent in response to a Get_PPS_Status Message. The PPS_Status Message enables \na Sink to query the Source to get additional information about its operational state. The Get_PPS_Status Message \nand the PPS_Status Message Shall only be supported when the Alert Message is also supported.\nThe PPS_Status Message Shall return a 4-byte PPS Status Data Block (PPSSDB) whose format Shall be as shown in \nFigure 6.49, \"PPS_Status Message\" and Table 6.62, \"PPS Status Data Block (PPSSDB)\".\nFigure 6.49 PPS_Status Message\n6.5.10.1\n  Output Voltage Field\nThe Output Voltage field Shall return the Source's output voltage at the time of the request. The output voltage is \nmeasured either at the Source's receptacle or, if the Source has a captive cable, where the voltage is applied to the \ncable.\nThe measurement accuracy Shall be +/-3% rounded to the nearest 20mV in SPR PPS Mode.\nIf the Source does not support the Output Voltage field, the field Shall be set to 0xFFFF.\n6.5.10.2\n  Output Current Field\nThe Output Current field Shall return the Source's output current at the time of the request measured at the \nSource's receptacle. \nThe measurement accuracy Shall be +/-150mA. \nIf the Source does not support the Output Current field, the field Shall be set to 0xFF.\nTable 6.62   PPS Status Data Block (PPSSDB)\nOffset (Byte)\nField\nDescription\n0\nOutput Voltage\n2\nSource’s output voltage in 20mV units. \nWhen set to 0xFFFF, the Source does not support this field.\n2\nOutput Current\n1\nSource’s output current in 50mA units. \nWhen set to 0xFF, the Source does not support this field.\n3\nReal Time Flags\nBit\nDescription\n0\nReserved and Shall be set to zero\n1...2\nPTF\n\nPTF: 00 – Not Supported\n\nPTF: 01 – Normal\n\nPTF: 10 – Warning\n\nPTF: 11 – Over temperature\n3\nOMF\nOMF (Operating Mode Flag) is set when operating in Current \nLimit mode and cleared when operating in Constant Voltage \nmode.\n4...7\nReserved and Shall be set to zero\nExtended Header\nData Size = 4\nPPSSDB\n(4-byte Data Block)\n","image_count":9,"table_count":3}
{"page":236,"text":"Page 236\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.10.3\n  Real Time Flags Field\nReal Time flags provide a real-time indication of the Source's operating state:\n\nThe PTF (Present Temperature Flag) Shall provide a real-time indication of the Source's internal \nthermal status. If the PTF is not supported, it will be set to zero: \n\nNormal indicates that the Source is operating within its normal thermal envelope. \n\nWarning indicates that the Source is over-heating but is not in imminent danger of shutting down.\n\nOver Temperature indicates that the Source is over heated and will shut down soon or has already \nshutdown and has sent the OTP Event flag in an Alert Message.\n\nThe OMF (Operating Mode Flag) Shall provide a real-time indication of the SPR PPS Source's operating \nmode. When set, the Source is operating in Current Limit mode; when cleared it is operating Constant \nVoltage mode. This bit Shall be set to zero when not in SPR PPS Mode.\n","image_count":0,"table_count":1}
{"page":237,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 237\n6.5.11\n  Country_Codes Message\nThe Country_Codes Message Shall be sent in response to a Get_Country_Codes Message. The Country_Codes \nMessage enables a Port to query its Port Partner to get a list of alpha-2 country codes as defined in [ISO 3166] for \nwhich the Port Partner has country specific information. \nThe Country_Codes Message Shall contain a 4…26-byte Country Code Data Block (CCDB) whose format Shall be as \nshown in Figure 6.50, \"Country_Codes Message\" and Table 6.63, \"Country Codes Data Block (CCDB)\".\nFigure 6.50 Country_Codes Message\n6.5.11.1\n  Country Code Field\nThe Country Code field Shall contain Length Country Codes in the Alpha-2 Country Code defined by [ISO 3166].\nTable 6.63  Country Codes Data Block (CCDB)\nOffset\nField\nDescription\n0\nLength\nNumber of country codes in the Message\n1\nReserved\nShall be set to zero.\n2...\nLength * 2n\nCountry \nCode\nOffset\nField\nDescription\n2\n1st Country Code\nFirst character of the Alpha-2 Country Code defined by \n[ISO 3166]\n3\nSecond character of the Alpha-2 Country Code defined by \n[ISO 3166]\n4\n2nd Country Code \nFirst character of the Alpha-2 Country Code defined by \n[ISO 3166]\n5\nSecond character of the Alpha-2 Country Code defined by \n[ISO 3166]\n…\nLength * 2n\nnth Country Code\nExtended Header\nData Size = 4-26\nCCDB\n(4-26 byte Data Block)\n","image_count":12,"table_count":3}
{"page":238,"text":"Page 238\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.12\n  Country_Info Message\nThe Country_Info Message Shall be sent in response to a Get_Country_Info Message. The Country_Info Message \nenables a Port to get additional country specific information from its Port Partner. \nThe Country_Info Message Shall contain a 4…26-byte Country Info Data Block (CIDB) whose format Shall be as \nshown in Figure 6.51, \"Country_Info Message\" and Table 6.64, \"Country Info Data Block (CIDB)\".\nFigure 6.51 Country_Info Message\n6.5.12.1\n  Country Code Field\nThe Country Code field Shall contain the Alpha-2 Country Code received in the corresponding Get_Country_Info \nMessage.\n6.5.12.2\n  Country Specific Data Field\nThe Country Specific Data field Shall contain content defined by and formatted in a manner determined by an \nofficial agency of the country indicated in the Country Code field.\nIf the Country Code field in the Get_Country_Info Message is unrecognized then Country Specific Data field Shall \nreturn the null terminated ASCII text string \"Unsupported Code\".\nTable 6.64  Country Info Data Block (CIDB)\nOffset\nField\nSize\n0\nCountry Code\nFirst character of the Alpha-2 Country Code received in the corresponding \nGet_Country_Info Message.\n1\nSecond character of the Alpha-2 Country Code received in the corresponding \nGet_Country_Info Message\n2…3\nReserved\nShall be set to zero.\n4\nCountry Specific Data\n1…22 bytes of content defined by the country’s authority.\nExtended Header\nData Size = 4-26\nCIDB\n(4-26 byte Data Block)\n","image_count":12,"table_count":3}
{"page":239,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 239\n6.5.13\n  Sink_Capabilities_Extended Message\nThe Sink_Capabilities_Extended Message Shall be sent in response to a Get_Sink_Cap_Extended Message. The \nSink_Capabilities_Extended Message enables a Sink or a DRP to inform the Source about its Capabilities as a Sink.\nThe Sink_Capabilities_Extended Message Shall return a 24-byte Sink Capabilities Extended Data Block (SKEDB) \nwhose format Shall be as shown in Figure 6.52, \"Sink_Capabilities_Extended Message\" and Table 6.65, \"Sink \nCapabilities Extended Data Block (SKEDB)\".\nFigure 6.52 Sink_Capabilities_Extended Message\nTable 6.65   Sink Capabilities Extended Data Block (SKEDB)\nOffset (Byte)\nField\nSize \n(Bytes)\nType\nDescription\n0\nVID\n2\nNumeric\nVendor ID (assigned by the USB-IF)\n2\nPID\n2\nNumeric\nProduct ID (assigned by the manufacturer)\n4\nXID\n4\nNumeric\nValue provided by the USB-IF assigned to the product\n8\nFW Version\n1\nNumeric\nFirmware version number \n9\nHW Version\n1\nNumeric\nHardware version number \n10\nSKEDB Version\n1\nNumeric\nSKEDB Version (not the specification Version): \n\nVersion 1.0 = 1 \nValues 0 and 2-255 are Reserved and Shall Not be used.\n11\nLoad Step\n1\nBit Field\nBit\nDescription\n0...1\n\n00b: 150mA/μs Load Step (default)\n\n01b: 500mA/μs Load Step\n11b…10b: Reserved and Shall Not be used.\n2...7\nReserved and Shall be set to zero\n12\nSink Load \nCharacteristics\n2\nBit Field\nBit\nDescription\n0...4\nPercent overload in 10% increments.\nValues higher than 25 (11001b) are clipped to \n250%. 00000b is the default.\n5...10\nOverload period in 20ms when bits 0...4 non-zero.\n1...14\nDuty cycle in 5% increments when bits 0...4 are \nnon-zero.\n15\nCan tolerate VBUS voltage droop\n14\nCompliance\n1\nBit Field\nBit\nDescription\n0\nRequires LPS Source when set\n1\nRequires PS1 Source when set\n2\nRequires PS2 Source when set\n3...7\nReserved and Shall be set to zero\nExtended Header\nData Size = 24\nSKEDB\n(24 byte Data Block)\n","image_count":9,"table_count":3}
{"page":240,"text":"Page 240\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.13.1\n  Vendor ID (VID) Field\nThe VID field Shall contain the 16-bit Vendor ID (VID) assigned to the Sink's vendor by the USB-IF. If the vendor \ndoes not have a VID, the VID field Shall be set to 0xFFFF. Devices that have a USB data interface Shall report the \nsame VID as the idVendor in the Standard Device Descriptor (see [USB 2.0] and [USB 3.2]).\n6.5.13.2\n  Product ID (PID) Field\nThe PID field Shall contain the 16-bit Product ID (PID) assigned by the Sink's vendor. Devices that have a USB data \ninterface Shall report the same PID as the idProduct in the Standard Device Descriptor (see [USB 2.0] and [USB \n3.2]).\n15\nTouch Temp\n1\nValue\nTemperature conforms to:\n\n0 = Not applicable\n\n1 = [IEC 60950-1] (default)\n\n2 = [IEC 62368-1] TS1\n\n3 = [IEC 62368-1] TS2\nNote: All other values Reserved\n16\nBattery Info\n1\nByte\nUpper Nibble = Number of Hot Swappable Battery Slots (0…4)\nLower Nibble = Number of Fixed Batteries (0…4)\n17\nSink Modes\n1\nBit Field\nBit\nDescription\n0\nPPS charging supported\n1\nVBUS powered\n2\nAC Supply powered\n3\nBattery powered\n4\nBattery essentially unlimited\n5\nAVS Support\n6...7\nReserved and Shall be set to zero\n18\nSPR Sink Minimum \nPDP\n1\nByte\nBit\nDescription\n0...6\nThe PDP of the Source that the Sink requires to \noperate at its lowest functionality without \nconsuming power from its Battery if it has one.\n7\nReserved and Shall be set to zero\n19\nSPR Sink \nOperational PDP\n1\nByte\nBit\nDescription\n0...6\nThe PDP of the Source that the Sink requires to \noperate at its normal functionality.\n7\nReserved and Shall be set to zero\n20\nSPR Sink Maximum \nPDP\n1\nByte\nBit\nDescription\n0...6\nThe maximum PDP the Sink will ever request.\n7\nReserved and Shall be set to zero\n21\nEPR Sink Minimum \nPDP\n1\nByte\nThe PDP of the Source that the EPR Sink requires to operate at \nits lowest functionality without consuming power from its \nBattery if it has one.\n22\nEPR Sink \nOperational PDP\n1\nByte\nThe PDP of the Source that the EPR Sink requires to operate at \nits normal functionality.\n23\nEPR Sink Maximum \nPDP\n1\nByte\nThe maximum PDP that the EPR Sink will ever request.\nTable 6.65   Sink Capabilities Extended Data Block (SKEDB) (Continued)\nOffset (Byte)\nField\nSize \n(Bytes)\nType\nDescription\n","image_count":0,"table_count":2}
{"page":241,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 241\n6.5.13.3\n  XID Field\nThe XID field Shall contain the 32-bit XID provided by the USB-IF to the vendor who in turns assigns it to a product. \nIf the vendor does not have an XID, then it Shall return zero in this field (see [USB 2.0] and [USB 3.2]).\n6.5.13.4\n  Firmware Version Field\nThe FW Version field Shall contain an 8-bit firmware version number assigned to the device by the vendor. \n6.5.13.5\n  Hardware Version Field\nThe HW Version field Shall contain an 8-bit hardware version number assigned to the device by the vendor. \n6.5.13.6\n  SKEDB Version Field\nThe SKEDB Version field contains the version level of the SKEDB. Currently only Version 1 is defined.\n6.5.13.7\n  Load Step Field\nThe Load Step field contains bits indicating the Load Step Slew Rate and Magnitude that this Sink prefers. See \nSection 7.1.12.1, \"Voltage Regulation Field\" for further details.\n6.5.13.8\n  Sink Load Characteristics Field\nThe Sink Shall report its preferred load characteristics in the Sink Load Characteristics field. Regardless of this \nvalue, in operation its load Shall Not exceed the Capabilities reported in the Source_Capabilities_Extended Message.\n6.5.13.9\n  Compliance Field\nThe Compliance field Shall contain the types of Sources the Sink has been tested and certified with (see Section \n7.1.12.3, \"Compliance Field\").\n6.5.13.10\n  Touch Temp\nThe Touch Temp field Shall report the IEC standard used to determine the surface temperature of the Sink's \nenclosure. Safety limits for the Sink's touch temperature are set in applicable product safety standards (e.g., [IEC \n60950-1] or [IEC 62368-1]). The Sink May report when its touch temperature performance conforms to the TS1 \nor TS2 limits described in [IEC 62368-1].\n6.5.13.11\n  Battery Info\nThe Battery Info field Shall report the number of Fixed Batteries and Hot Swappable Battery slots the Sink \nsupports. This field Shall independently report the number of Battery Slots and the number of Fixed Batteries. The \ninformation reported in the Battery Info field Shall match that reported in the Number of Batteries/Battery Slots \nfield of the Source_Capabilities_Extended Message. \nA Sink Shall have no more than 4 Fixed Batteries and no more than 4 Battery Slots. \nFixed Batteries Shall be numbered consecutively from 0 to 3. The number assigned to a given Fixed Battery Shall \nNot change between Attach and Detach. \nBattery Slots Shall be numbered consecutively from 4 to 7. The number assigned to a given Battery Slot Shall Not \nchange between Attach and Detach.\n","image_count":0,"table_count":1}
{"page":242,"text":"Page 242\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.13.12\n  Sink Modes\nThe Sink Modes bit field Shall identify the charging Capabilities and the power sources that can be used by the Sink. \nWhen bit 0 is set, the Sink has the ability to use a PPS Source for fast charging.\nThe source of power a Sink can use: \n\nWhen bit 1 is set, the Sink has the ability to be sourced by VBUS. \n\nWhen bit 2 is set, the Sink has the ability to be sourced by an AC Supply.\n\nWhen bit 3 is set, the Sink has the ability to be sourced by a Battery.\n\nWhen bit 4 is set, the Sink has the ability to be sourced by a Battery with essentially infinite energy (e.g., \na car battery).\nBits 1-4 May be set independently of one another. The combination indicates what sources of power the Sink can \nutilize. For example, some Sinks are only powered by a Battery (e.g., an automobile battery) rather than the more \ncommon AC Supply and some Sinks are only powered from VBUS or VCONN.\nWhen bit 5 is set, the Sink has the ability to support AVS.\n6.5.13.13\n  SPR Sink Minimum PDP \nThe SPR Sink Minimum PDP field Shall contain the minimum power Source PDP needed by the Sink, rounded up \nto the next integer, to operate at its lowest level of functionality without requiring power from its Battery if present. \nBattery charging may be an opportunistic feature, however this PDP Should be designed for basic functionality, not \nfor charging. The SPR Sink Minimum PDP field Shall be less than or equal to the SPR Sink Operational PDP. The \nvalue is used by the Source to determine whether or not it has sufficient power to minimally support the Attached \nSink. If the Sink is EPR Capable and is unable to operate at PDPs less than 100W, it Shall set this field to the \nminimum power to sustain PD communication.\nIf the Sink is self-powered, such that it doesn't need power from a Source, then it Shall set this field to zero.\nThe SPR Sink Minimum PDP is used to indicate to Shared Capacity Chargers the power that Should be delivered \nto the Sink to guarantee at least basic functionality for the end user.\nPossible examples of SPR Sink Minimum PDP could be:\n\nThe minimum power a wireless Charger would require in order to detect, and deliver the minimum \nrequired amount of power to the attached device.\n\nThe power required to have basic functionality by a Batteryless Sink,\n\nOn a device with a Battery, it can power the minimum functionality of the device\n6.5.13.14\n  SPR Sink Operational PDP \nThe SPR Sink Operational PDP field Shall contain the Source PDP that the manufacturer recommends for the \nnormal functionality of the Sink, rounded up to the next integer. This corresponds to the PDP Rating of Sources that \nthe Sink is designed to operate with (See Section 10.3.2, \"Normative Sink Rules\"). The SPR Sink Operational PDP \nfield Shall be sufficient to operate all the Sink's functional modes normally AND charge the Sink's Battery if present. \nFor Sinks with a Battery(s), the SPR Sink Operational PDP field Shall correspond to the PDP Rating of the Charger \nshipped with the Sink or the recommended Charger's PDP Rating. If the Sink is EPR Capable and is unable to operate \nat PDPs less than 100W, it Shall set the SPR Sink Minimum PDP field to the minimum power to sustain PD \ncommunication.\nIf the Sink is self-powered, such that it doesn't need power from a Source, then it Shall set this field to zero.\nThe SPR Sink Operational PDP is used to indicate to Shared Capacity Chargers that at this power level the user is \nnot expected to receive any performance warning related to the power being supplied to the Sink.\n","image_count":0,"table_count":1}
{"page":243,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 243\n6.5.13.15\n  SPR Sink Maximum PDP \nThe SPR Sink Maximum PDP field Shall contain the highest PDP the Sink will ever request under any operating \ncondition, rounded up to the next integer, including charging its Battery if present. The SPR Sink Maximum PDP \nfield Shall Not be less than the SPR Sink Operational PDP field, but May be the same. The value is used by the \nSource to determine the maximum amount of power it has to budget for the Attached Sink. If the Sink is EPR Capable \nand is unable to operate at PDPs less than 100W, it Shall set this field to the minimum power to sustain PD \ncommunication.\nIf the Sink is self-powered, such that it doesn't need power from a Source, then it Shall set this field to zero.\n6.5.13.16\n  EPR Sink Minimum PDP \nThe EPR Sink Minimum PDP field Shall contain the Source PDP needed by an EPR Sink, rounded up to the next \ninteger, to operate at its lowest level of functionality without requiring power from its Battery, if present. Battery \ncharging may be an opportunistic feature, however this PDP Should be designed for basic functionality, not for \ncharging. The EPR Sink Minimum PDP field Shall be less than or equal to the EPR Sink Operational PDP field \nvalue. The value is used by the Source to determine whether or not it has sufficient power to minimally support the \nAttached Sink. If the Sink is not EPR Capable, or if the Sink is self-powered, such that it doesn't need power from a \nSource, this field Shall be set to zero.\nThe EPR Sink Minimum PDP is used to indicate to Shared Capacity Chargers the power that Should be delivered \nto the Sink to guarantee at least basic functionality for the end user.\nPossible examples of EPR Sink Minimum PDP could be:\n\nThe power required to have basic functionality by a Batteryless Sink,\n\nOn a device with a Battery, it can power the minimum functionality of the device.\nNote:\nEPR Sink Minimum PDP can be the same as its SPR Sink Minimum PDP.\n6.5.13.17\n  EPR Sink Operational PDP \nThe EPR Sink Operational PDP field Shall contain the Source PDP that the manufacturer recommends for the \nnormal functionality of the Sink, rounded up to the next integer. This corresponds to the PDP Rating of EPR Sources \nthat the Sink is designed to operate with (See Section 10.3.2, \"Normative Sink Rules\"). The EPR Sink Operational \nPDP Shall be sufficient to operate all the Sink's functional modes normally AND charge the Sink's Battery if present. \nFor Sinks with a Battery(s), it Shall correspond to the PDP Rating of the Charger shipped with the EPR Sink or the \nrecommended Charger's PDP Rating. If the Sink is not EPR Capable, or if the Sink is self-powered, such that it doesn't \nneed power from a Source, this field Shall be set to zero.\nThe EPR Sink Operational PDP is used to indicate to Shared Capacity Chargers that at this power level the user is \nnot expected to receive any performance warning related to the power being supplied to the Sink.\n6.5.13.18\n  EPR Sink Maximum PDP \nThe EPR Sink Maximum PDP field Shall be highest PDP the EPR Sink will ever request under any operating \ncondition, rounded up to the next integer, including charging its Battery if present. The EPR Sink Maximum PDP \nfield Shall Not be less than the EPR Sink Operational PDP, but May be the same. The value is used by the Source \nto determine the maximum amount of power it has to budget for the Attached Sink. If the Sink is not EPR Capable, \nor if the Sink is self-powered, such that it doesn't need power from a Source, this field Shall be set to zero.\n","image_count":0,"table_count":1}
{"page":244,"text":"Page 244\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.14\n  Extended_Control Message\nThe Extended_Control Message extends the Control Message space. The Extended_Control Message includes one \nbyte of data. The Extended_Control Message Shall be as shown in Figure 6.53, \"Extended_Control Message\" and \nTable 6.66, \"Extended Control Data Block (ECDB)\".\nFigure 6.53 Extended_Control Message\nThe Extended_Control Message types are specified in the Type field of the ECDB and are listed in Table 6.67, \n\"Extended Control Message Types\". The Sent by column indicates entities which May send the given Message \n(Source, Sink or Cable Plug); entities not listed Shall Not issue the corresponding Message. The \"Valid Start of \nPacket\" column indicates the Messages which Shall only be issued in SOP Packets.\n6.5.14.1\n  EPR_Get_Source_Cap Message\nThe EPR_Get_Source_Cap (EPR Get Source Capabilities) Message Shall only be sent by a Port capable of operating \nas a Sink and that supports EPR Mode to request the Source Capabilities and Dual-Role Power capability of its Port \nPartner. A Port that can operate as an EPR Source Shall respond by returning an EPR_Source_Capabilities Message \n(see Section 6.5.15.2, \"EPR_Source_Capabilities Message\"). A Port that does not support EPR Mode as a Source Shall \nreturn the Not_Supported Message.\nAn EPR Capable Sink Port that is operating in SPR Mode Shall treat the EPR_Source_Capabilities Message as \ninformational only and Shall Not respond with an EPR_Request Message.\n6.5.14.2\n  EPR_Get_Sink_Cap Message\nThe EPR_Get_Sink_Cap (EPR Get Sink Capabilities) Message Shall only be sent by a Port capable of operating as a \nSource and that supports EPR Mode to request the Sink Capabilities and Dual-Role Power capability of its Port \nPartner. A Port that is EPR Capable operating as a Sink Shall respond by returning an EPR_Sink_Capabilities \nMessage (see Section 6.5.15.3, \"EPR_Sink_Capabilities Message\"). A Port that does not support EPR Mode as a Sink \nShall return the Not_Supported Message.\nTable 6.66  Extended Control Data Block (ECDB)\nOffset Field\nValue\nDescription\n0\nType\nUnsigned Int\nExtended Control Message Type\n1\nData\nByte\nShall be set to zero when not used.\nTable 6.67  Extended Control Message Types\nType\nData\nMessage Type\nSent by\nDescription\nValid Start \nof Packet\n0\nReserved\nAll values not explicitly defined are \nReserved and Shall Not be used.\n1\nNot used\nEPR_Get_Source_Cap\nSink or DRP\nSee Section 6.5.14.1\nSOP only\n2\nNot used\nEPR_Get_Sink_Cap\nSource or DRP\nSee Section 6.5.14.2\nSOP only\n3\nNot used\nEPR_KeepAlive\nSink\nSee Section 6.5.14.3\nSOP only\n4\nNot Used\nEPR_KeepAlive_Ack\nSource\nSee Section 6.5.14.4\nSOP only\n5...255\nReserved\nAll values not explicitly defined are \nReserved and Shall Not be used.\nExtended Header\nData Size = 2\nECDB\n(2-byte block)\n","image_count":12,"table_count":4}
{"page":245,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 245\n6.5.14.3\n  EPR_KeepAlive Message\nThe EPR_KeepAlive Message May be sent by a Sink operating in EPR Mode to meet the requirement for periodic \ntraffic. The Source operating on EPR Mode responds by returning an EPR_KeepAlive_Ack Message to the Sink. See \nSection 6.4.9, \"EPR_Request Message\" for additional information.\n6.5.14.4\n  EPR_KeepAlive_Ack Message\nThe EPR_KeepAlive_Ack Message Shall be sent by a Source operating in EPR Mode in response to an EPR_KeepAlive \nMessage. See Section 6.4.9, \"EPR_Request Message\" for additional information.\n6.5.15\n  EPR Capabilities Message\nThe EPR Capabilities Message is an Extended Capabilities Message made of Power Data Objects (PDO) defined in \nSection 6.4.1, \"Capabilities Message\". It is used to form EPR_Source_Capabilities Messages and \nEPR_Sink_Capabilities Messages. Sources expose their EPR power Capabilities by sending an \nEPR_Source_Capabilities Message. Sinks expose their EPR power requirements by returning an \nEPR_Sink_Capabilities Message when requested. Both are composed of a number of 32-bit Power Data Objects (see \nTable 6.7, \"Power Data Object\").\nAn EPR Capabilities Message Shall have a 5V Fixed Supply PDO containing the sending Port's information in the first \nobject position followed by up to 10 additional PDOs.\n6.5.15.1\n  EPR Capabilities Message Construction\nThe EPR Capabilities Messages (EPR_Source_Capabilities and EPR_Sink_Capabilities) are Extended Messages with \nthe first seven positions filled with the same SPR (A)PDOs returned by the SPR Capabilities Messages \n(Source_Capabilities and Sink_Capabilities) followed by the EPR (A)PDOs starting in the eighth position. See \nFigure 6.54, \"Mapping SPR Capabilities to EPR Capabilities\".\nFigure 6.54 Mapping SPR Capabilities to EPR Capabilities\nPower Data Objects in the EPR Capabilities Messages Shall be sent in the following order:\n1)\nThe SPR (A)PDOs as reported in the SPR Capabilities Message. The Number of Data Objects field in the \nMessage Header of the EPR Capabilities Message is the same as the Number of Data Objects field in the \nMessage Header of the SPR Capabilities Message.\n2)\nIf the SPR Capabilities Message contains fewer than 7 PDOs, the unused Data Objects Shall be zero filled.\n3)\nThe EPR (A)PDOs as defined in Section 6.4.1, \"Capabilities Message\" Shall start at Data Object position 8 \nand Shall be sent in the following order:\na)\nFixed Supply PDOs that offer 28V, 36V or 48V, if present, Shall be sent in voltage order; lowest to \nhighest.\nb)\nOne EPR AVS APDO Shall be sent.\nHeader\n2 bytes\nExtended Header\n4 bytes\nSPR PDO\n1\nSPR PDO\n2\nSPR PDO\n3\nSPR PDO\n4\nSPR PDO\n5\nSPR PDO\n6\nSPR PDO\n7\nEPR PDO\n8\nEPR PDO\n9\nSPR PDO\n1\nSPR PDO\n2\nSPR PDO\n3\nSPR PDO\n4\nSPR PDO\n5\nSPR PDO\n6\nSPR PDO\n7\nPDOs > 20V2\n001b\n010b\n011b\n100b\n101b\n110b\n111b\n1000b\n1001b\nCapabilities\nEPR Capabilities\n001b\n010b\n011b\n100b\n101b\n110b\n111b\nEPR PDO\n10\nEPR PDO\n11\n1010b\n1011b\nPDOs 20V1\n1)\nSee Section 10 “Power Rules” for rules, on which SPR (A)PDOs are allowed to be used for a given PDP.\n2)\nSee Section 10 “Power Rules” for rules, on which EPR (A)PDOs are allowed be used for a given PDP.\n","image_count":0,"table_count":3}
{"page":246,"text":"Page 246\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.5.15.2\n  EPR_Source_Capabilities Message\nThe EPR_Source_Capabilities is an EPR Capabilities Message containing a list of Power Data Objects that the EPR \nSource is capable of supplying. It is sent by an EPR Source in order to convey its Capabilities to a Sink. An EPR Source \nShall send the EPR_Source_Capabilities Message:\n\nWhen entering EPR Mode\n\nWhile in EPR Modes when its Capabilities change\n\nIn response to an EPR_Get_Source_Cap Message\n\nAfter a Soft Reset while in EPR Mode\nAn EPR Sink operating in EPR Mode Shall evaluate every EPR_Source_Capabilities Message it receives and Shall \nrespond with a EPR_Request Message. If its power consumption exceeds the Source Capabilities, it Shall Re-\nnegotiate so as not to exceed the Source's most recently Advertised Source Capabilities.\nWhile operating in SPR Mode, an EPR Sink receiving an EPR_Source_Capabilities Message in response to an \nEPR_Get_Source_Cap Messages Shall Not respond with an EPR_Request Message.\nThe (A)PDOs in an EPR_Source_Capabilities Message Shall only be requested using the EPR_Request Message and \nonly when in EPR Mode.\nWhen Source wants to exit EPR Mode, if not already in power contract with an SPR (A)PDO, it Shall send an \nEPR_Source_Capabilities Message with no EPR (A)PDOs (i.e. seven SPR (A)PDOs including any zero padded ones). \nSee Figure 6.55, \"EPR_Source_Capabilities message with no EPR PDOs\".\nFigure 6.55 EPR_Source_Capabilities message with no EPR PDOs\n6.5.15.3\n  EPR_Sink_Capabilities Message\nThe EPR_Sink_Capabilities is an EPR Capabilities Message that contains a list of Power Data Objects that the EPR \nSink requires to operate. It is sent by an EPR Sink in order to convey its power requirements to an EPR Source. The \nEPR Sink Shall only send the EPR_Sink_Capabilities Message in response to an EPR_Get_Sink_Cap Message.\nHeader\n2 bytes\nExtended Header\n4 bytes\nSPR PDO\n1\nSPR PDO\n2\nSPR PDO\n3\nSPR PDO\n4\nSPR PDO\n5\nSPR PDO\n6\nSPR PDO\n7\nSPR PDO\n1\nSPR PDO\n2\nSPR PDO\n3\nSPR PDO\n4\nSPR PDO\n5\nSPR PDO\n6\nSPR PDO\n7\n001b\n010b\n011b\n100b\n101b\n110b\n111b\nCapabilities\nEPR Capabilities\n001b\n010b\n011b\n100b\n101b\n110b\n111b\nPDOs 20V1\n1)\nSee Section 10 “Power Rules” for rules, on which SPR (A)PDOs are allowed to be used for a given PDP.\n","image_count":0,"table_count":3}
{"page":247,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 247\n6.5.16\n  Vendor_Defined_Extended Message\nThe Vendor_Defined_Extended Message (VDEM) is provided to allow vendors to exchange information outside of \nthat defined by this specification using the Extended Message format.\nA Vendor_Defined_Extended Message Shall consist of at least one Vendor Data Object, the VDM Header, and May \ncontain up to a maximum of 256 additional data bytes.\nTo ensure vendor uniqueness of Vendor_Defined_Extended Messages, all Vendor_Defined_Extended Messages \nShall contain a Valid USB Standard or Vendor ID (SVID) allocated by USB-IF in the VDM Header.\nA VDEM does not define any structure and Messages May be created in any manner that the vendor chooses.\nVendor_Defined_Extended Messages Shall Not be used for direct power Negotiation. They May however be used \nto alter Local Policy, affecting what is offered or consumed via the normal PD Messages. For example, a \nVendor_Defined_Extended Message could be used to enable the Source to offer additional power via a \nSource_Capabilities Message.\nVendor_Defined_Extended Messages Shall Not be used where equivalent functionality is contained in the PD \nSpecification e.g., authentication or firmware update.\nThe Message format Shall be as shown in Figure 6.56, \"Vendor_Defined_Extended Message\".\nFigure 6.56 Vendor_Defined_Extended Message\nThe VDM Header Shall be the first 4-bytes in a Vendor Defined Extended Message. The VDM Header provides \nCommand space to allow vendors to customize Messages for their own purposes.\nThe VDM Header in the VDEM Shall follow the Unstructured VDM Header format as defined in Section 6.4.4.1, \n\"Unstructured VDM\".\nVDEMs Shall only be sent and received after an Explicit Contract has been established.\nA VDEM AMS Shall Not interrupt any other PD AMS.\nThe VDEM does not define the contents of bits B14…0 in the VDM Header. Their definition and use are the sole \nresponsibility of the vendor indicated by the SVID. The Port Partners and Cable Plugs Shall exit any states entered \nusing a VDEM according to the rules defined in Section 6.4.4.3.4, \"Enter Mode Command\".\nThe following rules apply to the use of VDEM Messages:\n\nVDEMs Shall Not be initiated or responded to under any other circumstances than the following:\n\nVDEMs Shall only be used when an Explicit Contract is in place.\n\nPrior to establishing an Explicit Contract VDEMs Shall Not be sent and Shall be Ignored if received.\n\nCable Plugs Shall Not initiate VDEMs.\nExtended Header\nData Size = 4...260\nVDM Header\nVDEDB\n(0...256-byte Data Block)\n","image_count":17,"table_count":2}
{"page":248,"text":"Page 248\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nVDEMs Shall only be used during Modal Operation in the context of an Active Mode i.e., only after the \nUFP has Ack'ed the Enter Mode Command can VDEMs be sent or received. The Active Mode and the \nassociated VDEMs Shall use the same SVID.\n\nVDEMs May be used with SOP* Packets.\n\nWhen a DFP or UFP does not support VDEMs or does not recognize the VID it Shall return a \nNot_Supported Message.\nNote:\nUsage of VDEMs with Chunking is not recommended since this is less efficient than using Unstructured \nVDMs.\n","image_count":0,"table_count":1}
{"page":249,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 249\n6.6\n  Timers\nAll the following timers are defined in terms of bits on the bus regardless of where they are implemented in terms \nof the logical architecture. This is to ensure a fixed reference for the starting and stopping of timers. It is left to the \nimplementer to ensure that this timing is observed in a real system.\n6.6.1\n  CRCReceiveTimer\nThe CRCReceiveTimer Shall be used by the sender's Protocol Layer to ensure that a Message has not been lost. \nFailure to receive an acknowledgment of a Message (a GoodCRC Message) whether caused by a bad GoodCRC \nMessage on the receiving end or by a garbled Message within tReceive is detected when the CRCReceiveTimer \nexpires.\nThe sender's Protocol Layer response when a CRCReceiveTimer expires Shall be to retry nRetryCount times. \nNote:\nCable Plugs do not retry Messages and large Extended Messages that are not Chunked are not retried (see \nSection 6.7.2, \"Retry Counter\").\nSending of the Preamble corresponding to the retried Message Shall start within tRetry of the CRCReceiveTimer \nexpiring.\nThe CRCReceiveTimer Shall be started when the last bit of the Message EOP has been transmitted by the PHY \nLayer. The CRCReceiveTimer Shall be stopped when the last bit of the EOP corresponding to the GoodCRC Message \nhas been received by the PHY Layer.\nThe Protocol Layer receiving a Message Shall respond with a GoodCRC Message within tTransmit in order to \nensure that the sender's CRCReceiveTimer does not expire. The tTransmit time Shall be measured from when the \nlast bit of the Message EOP has been received by the PHY Layer until the first bit of the Preamble of the GoodCRC \nMessage has been transmitted by the PHY Layer.\n6.6.2\n  SenderResponseTimer\nThe SenderResponseTimer Shall be used by the sender's Policy Engine to ensure that a Message requesting a \nresponse (e.g., Get_Source_Cap Message) is responded to within a bounded time of tSenderResponse. Failure to \nreceive the expected response is detected when the SenderResponseTimer expires.\nFor Extended Messages received as Chunks, the SenderResponseTimer will also be started and stopped by the \nChunking Rx State Machine. See Section 8.3.3.1.1, \"SenderResponseTimer State Diagram\" for more details of the \nSenderResponseTimer operation.\nThe Policy Engine's response when the SenderResponseTimer expires Shall be dependent on the Message sent \n(see Section 8.3, \"Policy Engine\").\nThe SenderResponseTimer Shall be started from the time the last bit of the GoodCRC Message EOP, corresponding \nto the Message requesting a response, has been received by the PHY Layer.\nThe SenderResponseTimer Shall be stopped when the last bit of the EOP of the GoodCRC Message, corresponding \nto the expected response Message, has been transmitted by the PHY Layer.\nThe receiver of a Message requiring a response Shall respond within tReceiverResponse in order to ensure that \nthe sender's SenderResponseTimer does not expire.\nThe tReceiverResponse time Shall be measured from the time the last bit of the GoodCRC Message EOP, \ncorresponding to the expected request Message, has been transmitted by the PHY Layer until the first bit of the \nresponse Message Preamble has been transmitted by the PHY Layer.\n6.6.3\n  Capability Timers\nSources and Sinks use Capability Timers to determine Attachment of a PD Capable device. By periodically sending \nor requesting Capabilities, it is possible to determine PD device Attachment when a response is received.\n","image_count":0,"table_count":1}
{"page":250,"text":"Page 250\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.6.3.1\n  SourceCapabilityTimer\nPrior to the First Explicit Contract a Source Shall use the SourceCapabilityTimer to periodically send out a \nSource_Capabilities Message every tTypeCSendSourceCap while:\n\nThe Port is Attached.\n\nThe Source is not in an active connection with a PD Sink Port.\nWhenever there is a SourceCapabilityTimer timeout the Source Shall send a Source_Capabilities Message. It \nShall then re-initialize and restart the SourceCapabilityTimer. The SourceCapabilityTimer Shall be stopped \nwhen the last bit of the EOP corresponding to the GoodCRC Message has been received by the PHY Layer since a PD \nconnection has been established. At this point, the Source waits for a Request Message or a response timeout.\nNote:\nThe Source can also stop sending Source_Capabilities Message after nCapsCount Messages have been \nsent without a GoodCRC Message response (see Section 6.7.4, \"Capabilities Counter\").\nSee Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" for more details of when Source_Capabilities \nMessages are transmitted.\n6.6.3.2\n  SinkWaitCapTimer\nThe Sink Shall support the SinkWaitCapTimer.\nWhile in a Default Contract or an Implicit Contract when a Sink observes an absence of Source_Capabilities \nMessages, after VBUS is present, for a duration of tTypeCSinkWaitCap the Sink May issue Hard Reset Signaling in \norder to restart the sending of Source_Capabilities Messages by the Source (see Section 6.7.4, \"Capabilities \nCounter\") or continue to operate at USB Type-C current.\nWhen a Sink, entering EPR Mode, observes an absence of EPR_Source_Capabilities Messages, after the GoodCRC \nMessage acknowledging the EPR_Mode Message with the Action field set to 3 (Enter Succeeded), for a duration of \ntTypeCSinkWaitCap the Sink Shall issue Hard Reset Signaling in order to exit EPR Mode (see Section 6.4.10, \n\"EPR_Mode Message\").\nWhen a Sink, exiting EPR Mode, observes an absence of Source_Capabilities Messages, after the GoodCRC Message \nacknowledging the EPR_Mode Message with the Action field set to 5 (Exit), for a duration of tTypeCSinkWaitCap \nthe Sink Shall issue Hard Reset Signaling in order to restart the sending of Source_Capabilities Messages by the \nSource (see Section 6.7.4, \"Capabilities Counter\").\nSee Section 8.3.3.3, \"Policy Engine Sink Port State Diagram\" for more details of when the SinkWaitCapTimer is run.\n6.6.3.3\n  tFirstSourceCap\nAfter Port Partners are Attached or after a Hard Reset or after a Power Role Swap or after a Fast Role Swap a Source \nShall send its first Source_Capabilities Message within tFirstSourceCap of VBUS reaching vSafe5V.\nAfter Soft Reset, a Source Shall send its first Source Capabilities Message within tFirstSourceCap after last bit of the \nGoodCRC Message EOP corresponding to Accept Message.\nThis ensures that the Sink receives a Source Capabilities Message before the Sink's SinkWaitCapTimer expires.\nA Source entering EPR Mode Shall send its first EPR_Source_Capabilities Message within tFirstSourceCap of the \nGoodCRC Message acknowledging the EPR_Mode Message with the Action field set to 3 (Enter Succeeded). \nA Source exiting EPR Mode Shall send its first Source_Capabilities Message within tFirstSourceCap of the \nGoodCRC Message acknowledging the EPR_Mode Message with the Action field set to 5 (Exit).\n","image_count":0,"table_count":1}
{"page":251,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 251\n6.6.4\n  Wait Timers and Times\n6.6.4.1\n  SinkRequestTimer\nThe SinkRequestTimer is used to ensure that the time before the next Sink Request Message, after a Wait Message \nhas been received from the Source in response to a Sink Request Message, is a minimum of tSinkRequest min (see \nSection 6.3.12, \"Wait Message\").\nThe SinkRequestTimer Shall be started when the EOP of a Wait Message has been received and Shall be stopped \nif any other Message is received or during a Hard Reset.\nThe Sink Shall wait at least tSinkRequest, after receiving the EOP of a Wait Message sent in response to a Sink \nRequest Message, before sending a new Request Message. Whenever there is a SinkRequestTimer timeout the Sink \nMay send a Request Message. It Shall then re-initialize and restart the SinkRequestTimer. \n6.6.4.2\n  tPRSwapWait\nThe time before the next PR_Swap Message, after a Wait Message has been received in response to a PR_Swap \nMessage is a minimum of tPRSwapWait min (see Section 6.3.12, \"Wait Message\"). The Port Shall wait at least \ntPRSwapWait after receiving the EOP of a Wait Message sent in response to a PR_Swap Message, before sending a \nnew PR_Swap Message.\n6.6.4.3\n  tDRSwapWait\nThe time before the next DR_Swap Message, after a Wait Message has been received in response to a DR_Swap \nMessage is a minimum of tDRSwapWait min (see Section 6.3.12, \"Wait Message\"). The Port Shall wait at least \ntDRSwapWait after receiving the EOP of a Wait Message sent in response to a DR_Swap Message, before sending \na new DR_Swap Message.\n6.6.4.4\n  tVCONNSwapWait\nThe time before the next VCONN_Swap Message, after a Wait Message has been received in response to a \nVCONN_Swap Message is a minimum of tVCONNSwapWait min (see Section 6.3.12, \"Wait Message\"). The Port Shall \nwait at least tVCONNSwapWait after receiving the EOP of a Wait Message sent in response to a VCONN_Swap \nMessage, before sending a new VCONN_Swap Message.\n6.6.4.5\n  tVCONNSwapDelayDFP\nThe time delay for DFP after losing VCONN Source role due to an incoming VCONN Swap request from UFP and before \nsending the next VCONN_Swap Message. The DFP Shall wait at least tVCONNSwapDelayDFP after sending the EOP \nof the GoodCRC Message in response to PS_RDY Message received at the end of the previous VCONN Swap AMS.\n6.6.4.6\n  tVCONNSwapDelayUFP\nThe time delay for UFP after losing VCONN Source role due to an incoming VCONN Swap request from DFP and before \nsending the next VCONN_Swap Message. The UFP Shall wait at least tVCONNSwapDelayUFP after sending the EOP \nof the GoodCRC Message in response to PS_RDY Message received at the end of the previous VCONN Swap AMS.\n6.6.4.7\n  tEnterUSBWait\nThe time before the next Enter_USB Message, after a Wait Message has been received in response to a Enter_USB \nMessage is a minimum of tEnterUSBWait min (see Section 6.3.12, \"Wait Message\"). The DFP Shall wait at least \ntEnterUSBWait after receiving the EOP of a Wait Message sent in response to an Enter_USB Message, before \nsending a new Enter_USB Message.\n6.6.5\n  Power Supply Timers\nSee Section 7.3, \"Transitions\" for diagrams showing the usage of the timers in this section.\n","image_count":0,"table_count":1}
{"page":252,"text":"Page 252\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.6.5.1\n  PSTransitionTimer\nThe PSTransitionTimer is used by the Policy Engine to timeout on a PS_RDY Message. It is started when a request \nfor new Source Capabilities has been accepted and will timeout after tPSTransition if a PS_RDY Message has not \nbeen received. This condition leads to a Hard Reset and a return to USB Default Operation. The PSTransitionTimer \nrelates to the time taken for the Source to transition from one voltage, or current level, to another (see Section 7.1, \n\"Source Requirements\").\nThe PSTransitionTimer Shall be started when the last bit of the GoodCRC Message EOP, corresponding to an \nAccept Message, has been transmitted by the PHY Layer. The PSTransitionTimer Shall be stopped when the last \nbit of the GoodCRC Message EOP, corresponding to the PS_RDY Message, has been transmitted by the PHY Layer.\n6.6.5.2\n  PSSourceOffTimer\n6.6.5.2.1\n  Use during Power Role Swap\nThe PSSourceOffTimer is used by the Policy Engine in Dual-Role Power Device that is currently acting as a Sink to \ntimeout on a PS_RDY Message during a Power Role Swap AMS. This condition leads to USB Type-C Error Recovery.\nIf a PR_Swap Message request has been sent by the Dual-Role Power Device currently acting as a Source the Sink can \nrespond with an Accept Message. When the last bit of the GoodCRC Message EOP, corresponding to this transmitted \nAccept Message, is received by the Sink's PHY Layer, then the PSSourceOffTimer Shall be started.\nIf a PR_Swap Message request has been sent by the Dual-Role Power Device currently acting as a Sink the Source can \nrespond with an Accept Message. When the last bit of the GoodCRC Message EOP, corresponding to this received \nAccept Message, is transmitted by the Sink's PHY Layer, then the PSSourceOffTimer Shall be started.\nThe PSSourceOffTimer Shall be stopped when the last bit of the GoodCRC Message EOP, corresponding to the \nreceived PS_RDY Message, is transmitted by the PHY Layer.\nThe PSSourceOffTimer relates to the time taken for the remote Dual-Role Power Device to stop supplying power \n(see also Section 7.3.2.1, \"Sink Requested Power Role Swap\" and Section 7.3.2.2, \"Source Requested Power Role \nSwap\"). The timer Shall time out if a PS_RDY Message has not been received from the remote Dual-Role Power \nDevice within tPSSourceOff indicating this has occurred.\n6.6.5.2.2\n  Use during Fast Role Swap\nThe PSSourceOffTimer is used by the Policy Engine in Dual-Role Power Device that is the Initial Sink (currently \nproviding vSafe5V) to timeout on a PS_RDY Message during a Fast Role Swap AMS. This condition leads to USB \nType-C Error Recovery.\nWhen the FR_Swap Message request has been sent by the Initial Sink, the Initial Source Shall respond with an \nAccept Message. When the last bit of the GoodCRC Message EOP, corresponding to this Accept Message is received \nby the Initial Sink's PHY Layer, then the PSSourceOffTimer Shall be started.\nThe PSSourceOffTimer Shall be stopped when \nthe last bit of the GoodCRC Message EOP, corresponding to the received PS_RDY Message, is transmitted by the PHY \nLayer.\nThe PSSourceOffTimer relates to the time taken for the Initial Source to stop supplying power and for VBUS to \nrevert to vSafe5V (see also Section 7.2.10, \"Fast Role Swap\" and Section 7.3.4, \"Transitions Caused by Fast Role \nSwap\"). The timer Shall time out if a PS_RDY Message has not been received from the Initial Source within \ntPSSourceOff indicating this has occurred.\n6.6.5.3\n  PSSourceOnTimer\n6.6.5.3.1\n  Use during Power Role Swap\nThe PSSourceOnTimer is used by the Policy Engine in Dual-Role Power Device that has just stopped sourcing power \nand is waiting to start sinking power to timeout on a PS_RDY Message during a Power Role Swap. This condition \nleads to USB Type-C Error Recovery.\n","image_count":0,"table_count":1}
{"page":253,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 253\nThe PSSourceOnTimer Shall be started when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the transmitted PS_RDY Message, is re-\nceived by the PHY Layer.\n\nThe PSSourceOnTimer Shall be stopped when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the received PS_RDY Message, is transmit-\nted by the PHY Layer.\nThe PSSourceOnTimer relates to the time taken for the remote Dual-Role Power Device to start sourcing power \n(see also Section 7.3.2.1, \"Sink Requested Power Role Swap\" and Section 7.3.2.2, \"Source Requested Power Role Swap\") \nand will time out if a PS_RDY Message indicating this has not been received within tPSSourceOn.\n6.6.5.3.2\n  Use during Fast Role Swap\nThe PSSourceOnTimer is used by the Policy Engine in Dual-Role Power Device that has just stopped sourcing power \nand is waiting to start sinking power to timeout on a PS_RDY Message during a Fast Role Swap. This condition leads \nto USB Type-C Error Recovery.\nThe PSSourceOnTimer Shall be started when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the transmitted PS_RDY Message, is re-\nceived by the PHY Layer.\nThe PSSourceOnTimer Shall be stopped when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the received PS_RDY Message, is transmit-\nted by the PHY Layer.\nThe PSSourceOnTimer relates to the time taken for the remote Dual-Role Power Device to start sourcing power \n(see also Section 7.2.10, \"Fast Role Swap\" and Section 7.3.4, \"Transitions Caused by Fast Role Swap\") and will time \nout if a PS_RDY Message indicating this has not been received within tPSSourceOn.\n6.6.6\n  NoResponseTimer\nThe NoResponseTimer is used by the Policy Engine in a Source to determine that its Port Partner is not responding \nafter a Hard Reset. When the NoResponseTimer times out, the Policy Engine Shall issue up to nHardResetCount \nadditional Hard Resets before determining that the Port Partner is non-responsive to USB Power Delivery \nmessaging.\nIf the Source fails to receive a GoodCRC Message in response to a Source_Capabilities Message within tNoResponse \nof: \n\nThe last bit of a Hard Reset Signaling being sent by the PHY Layer if the Hard Reset Signaling was initi-\nated by the Sink.\n\nThe last bit of a Hard Reset Signaling being received by the PHY Layer if the Hard Reset Signaling was \ninitiated by the Source.\nThen the Source Shall issue additional Hard Resets up to nHardResetCount times (see Section 6.8.3, \"Hard Reset\").\nFor a non-responsive device, the Policy Engine in a Source May either decide to continue sending \nSource_Capabilities Messages or to go to non-USB Power Delivery operation and cease sending \nSource_Capabilities Messages.\n6.6.7\n  BIST Timers\n6.6.7.1\n  tBISTCarrierMode\ntBISTCarrierMode is used to define the maximum time that a UUT has to enter BIST Carrier Mode when requested \nby a Tester. \n","image_count":0,"table_count":1}
{"page":254,"text":"Page 254\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nA UUT Shall enter BIST Carrier Mode within tBISTCarrierMode of the last bit of the GoodCRC Message EOP, \ncorresponding to the received the BIST Message used to initiate the test, being transmitted by the PHY Layer. In \nBIST Carrier Mode when transmitting a continuous carrier signal transmission Shall start as soon as the UUT enters \nBIST Mode.\n6.6.7.2\n  BISTContModeTimer\nThe BISTContModeTimer is used by a UUT to ensure that a Continuous BIST Mode (i.e., BIST Carrier Mode) is exited \nin a timely fashion. A UUT that has been put into a Continuous BIST Mode Shall return to normal operation (either \nPE_SRC_Transition_to_default, PE_SNK_Transition_to_default, or PE_CBL_Ready) within tBISTContMode of \nstarting to transmit a continuous carrier signal.\n6.6.7.3\n  tBISTSharedTestMode\ntBISTSharedTestMode is used to define the maximum time that a UUT has to enter BIST Shared Capacity Test Mode \nwhen requested by a Tester. \nA UUT Shall enter BIST Shared Capacity Test Mode and send a new Source_Capabilities Message from all Ports \nwithin the Shared Capacity Group within tBISTSharedTestMode of the last bit of the GoodCRC Message EOP, \ncorresponding to the received the BIST Message used to initiate the test, being transmitted by the PHY Layer.\n6.6.8\n  Power Role Swap Timers\n6.6.8.1\n  SwapSourceStartTimer\nThe SwapSourceStartTimer Shall be used by the New Source, after a Power Role Swap or Fast Role Swap, to ensure \nthat it does not send Source_Capabilities Message before the New Sink is ready to receive the Source_Capabilities \nMessage. The New Source Shall Not send the Source_Capabilities Message earlier than tSwapSourceStart after the \nlast bit of the EOP of GoodCRC Message sent in response to the PS_RDY Message sent by the New Source indicating \nthat its power supply is ready. The Sink Shall be ready to receive a Source_Capabilities Message tSwapSinkReady \nafter having sent the last bit of the EOP of GoodCRC Message sent in response to the PS_RDY Message sent by the \nNew Source indicating that its power supply is ready.\n6.6.9\n  Soft Reset Timers\n6.6.9.1\n  tSoftReset\nA failure to see a GoodCRC Message in response to any Message within tReceive (after nRetryCount retries), when \na Port Pair is Connected, is indicative of a communications failure. This Shall cause the Source or Sink to send a \nSoft_Reset Message, transmission of which Shall be completed within tSoftReset of the CRCReceiveTimer \nexpiring.\n6.6.9.2\n  tProtErrSoftReset\nIf the Protocol Error occurs that causes the Source or Sink to send a Soft_Reset Message, the transmission of the \nSoft_Reset Message Shall be completed within tProtErrSoftReset of the EOP of the GoodCRC sent in response to \nthe Message that caused the Protocol Error.\n6.6.10\n   Data Reset Timers\n6.6.10.1\n  VCONNDischargeTimer\nThe VCONNDischargeTimer is used by the Policy Engine in the DFP to ensure the UFP actively discharges VCONN in \na timely manner to ensure the cable will restore Ra. Once the UFP has discharged VCONN below vRaReconnect (see \n[USB Type-C 2.4]) it sends a PS_RDY Message (see also Section 7.1.15, \"VCONN Power Cycle\").\nIf the DFP does not receive a PS_RDY Message from the UFP within tVCONNSourceDischarge of the last bit of the \nGoodCRC acknowledging the Accept Message in response to the Data_Reset Message, the VCONNDischargeTimer \nwill time out and the Policy Engine Shall enter the ErrorRecovery State.\n","image_count":0,"table_count":1}
{"page":255,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 255\n6.6.10.2\n  tDataReset\nThe DFP Shall complete the Data_Reset process (as defined in Section 6.3.14, \"Data_Reset Message\") within \ntDataReset of the last bit of the GoodCRC Message EOP, corresponding to the Accept Message, being transmitted \nby the PHY Layer.\n6.6.10.3\n  DataResetFailTimer\nThe DataResetFailTimer Shall be used by the DFP's Policy Engine to ensure the Data Reset process completes \nwithin tDataResetFail of the last bit of the GoodCRC acknowledging the Accept Message in response to the \nData_Reset Message. If the DFP's DataResetFailTimer expires, the DFP Shall enter the ErrorRecovery State.\n6.6.10.4\n  DataResetFailUFPTimer\nThe DataResetFailUFPTimer Shall be used by the UFP's Policy Engine to ensure the Data Reset process completes \nwithin tDataResetFailUFP of the last bit of the GoodCRC acknowledging the Accept Message in response to the \nData_Reset Message. If the UFP's DataResetFailUFPTimer expires, the UFP Shall enter the ErrorRecovery State.\n6.6.11\n  Hard Reset Timers\n6.6.11.1\n  HardResetCompleteTimer\nThe HardResetCompleteTimer is used by the Protocol Layer in the case where it has asked the PHY Layer to send \nHard Reset Signaling and the PHY Layer is unable to send the Signaling within a reasonable time due to a non-Idle \nchannel. If the PHY Layer does not indicate that the Hard Reset Signaling has been sent within tHardResetComplete \nof the Protocol Layer requesting transmission, then the Protocol Layer Shall inform the Policy Engine that the Hard \nReset Signaling has been sent in order to ensure the power supply is reset in a timely fashion.\n6.6.11.2\n  PSHardResetTimer\nThe PSHardResetTimer is used by the Policy Engine in a Source to ensure that the Sink has had sufficient time to \nprocess Hard Reset Signaling before turning off its power supply to VBUS. \nWhen a Hard Reset occurs the Source, stops driving VCONN, removes Rp from the CC pin and starts to transition the \nVBUS voltage to vSafe0V either:\n\ntPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink or \n\ntPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source.\nSee Section 7.1.5, \"Response to Hard Resets\".\n6.6.11.3\n  tDRSwapHardReset\nIf a DR_Swap Message is received during Modal Operation then a Hard Reset Shall be initiated by the recipient of \nthe unexpected DR_Swap Message; Hard Reset Signaling Shall be generated within tDRSwapHardReset of the EOP \nof the GoodCRC sent in response to the DR_Swap Message.\n6.6.11.4\n  tProtErrHardReset\nIf a Protocol Error occurs that directly leads to a Hard Reset, the transmission of the Hard Reset Signaling Shall be \ncompleted within tProtErrHardReset of the EOP of the GoodCRC sent in response to the Message that caused the \nProtocol Error.\n6.6.12\n  Structured VDM Timers\n6.6.12.1\n  VDMResponseTimer\nThe VDMResponseTimer Shall be used by the Initiator's Policy Engine to ensure that a Structured VDM Command \nrequest needing a response (e.g. Discover Identity Command request) is responded to within a bounded time of \ntVDMSenderResponse. The VDMResponseTimer Shall be applied to all Structured VDM Commands except the \n","image_count":0,"table_count":1}
{"page":256,"text":"Page 256\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nEnter Mode and Exit Mode Commands which have their own timers (VDMModeEntryTimer and \nVDMModeExitTimer respectively). Failure to receive the expected response is detected when the \nVDMResponseTimer expires. \nThe Policy Engine's response when the VDMResponseTimer expires Shall be dependent on the Message sent (see \nSection 8.3, \"Policy Engine\").\nThe VDMResponseTimer Shall be started from the time the last bit of the GoodCRC Message EOP, corresponding \nto the VDM Command requesting a response, has been received by the PHY Layer. The VDMResponseTimer Shall \nbe stopped when the last bit of the EOP of the GoodCRC Message, corresponding to the expected VDM Command \nresponse, has been transmitted by the PHY Layer.\nThe receiver of a Message requiring a response Shall respond within tVDMReceiverResponse in order to ensure \nthat the sender's VDMResponseTimer does not expire.\nThe tVDMReceiverResponse time Shall be measured from the time the last bit of the Message EOP has been \ntransmitted by the PHY Layer until the first bit of the response Message Preamble has been transmitted by the PHY \nLayer.\n6.6.12.2\n  VDMModeEntryTimer\nThe VDMModeEntryTimer Shall be used by the Initiator's Policy Engine to ensure that the response to a Structured \nVDM Enter Mode Command request (ACK or NAK with ACK indicating that the requested Alternate Mode has been \nentered) arrives within a bounded time of tVDMWaitModeEntry. Failure to receive the expected response is \ndetected when the VDMModeEntryTimer expires.\nThe Policy Engine's response when the VDMModeEntryTimer expires is to inform the Device Policy Manager (see \nSection 8.3.3.23.1, \"DFP Structured VDM Mode Entry State Diagram\").\nThe VDMModeEntryTimer Shall be started from the time the last bit of the EOP of the GoodCRC Message, \ncorresponding to the VDM Command request, has been received by the PHY Layer. The VDMModeEntryTimer \nShall be stopped when the last bit of the EOP of the GoodCRC Message, corresponding to the expected Structured \nVDM Command response (ACK, NAK or BUSY), has been transmitted by the PHY Layer.\nThe receiver of a Message requiring a response Shall respond within tVDMEnterMode in order to ensure that the \nsender's VDMModeEntryTimer does not expire.\nThe tVDMEnterMode time Shall be measured from the time the last bit of the EOP of the GoodCRC Message, \ncorresponding to VDM Command Request, has been transmitted by the PHY Layer until the first bit of the response \nMessage Preamble has been transmitted by the PHY Layer.\n6.6.12.3\n  VDMModeExitTimer\nThe VDMModeExitTimer Shall be used by the Initiator's Policy Engine to ensure that the ACK response to a \nStructured VDM Exit Mode Command, indicating that the requested Alternate Mode has been exited, arrives within \na bounded time of tVDMWaitModeExit. Failure to receive the expected response is detected when the \nVDMModeExitTimer expires.\nThe Policy Engine's response when the VDMModeExitTimer expires is to inform the Device Policy Manager (see \nSection 8.3.3.23.2, \"DFP Structured VDM Mode Exit State Diagram\").\nThe VDMModeExitTimer Shall be started from the time the last bit of the GoodCRC Message EOP, corresponding \nto the VDM Command requesting a response, has been received by the PHY Layer. The VDMModeExitTimer Shall \nbe stopped when the last bit of the GoodCRC Message EOP, corresponding to the expected Structured VDM \nCommand response ACK, has been transmitted by the PHY Layer.\nThe receiver of a Message requiring a response Shall respond within tVDMExitMode in order to ensure that the \nsender's VDMModeExitTimer does not expire.\nThe tVDMExitMode time Shall be measured from the time the last bit of the Message EOP has been received by the \nPHY Layer until the first bit of the response Message Preamble has been transmitted by the PHY Layer.\n","image_count":0,"table_count":1}
{"page":257,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 257\n6.6.12.4\n  tVDMBusy\nThe Initiator Shall wait at least tVDMBusy, after receiving a BUSY Command response, before repeating the \nStructured VDM request again.\n6.6.13\n  VCONN Timers\n6.6.13.1\n  VCONNOnTimer\nThe VCONNOnTimer is used during a VCONN Swap.\nThe VCONNOnTimer Shall be started when:\n\nThe last bit of GoodCRC Message EOP, corresponding to the Accept Message, is transmitted or received \nby the PHY Layer.\nThe VCONNOnTimer Shall be stopped when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the PS_RDY Message, is transmitted by the \nPHY Layer.\nPrior to sending the PS_RDY Message, the Port Shall have turned VCONN On.\n6.6.13.2\n  tVCONNSourceOff\nThe tVCONNSourceOff time applies during a VCONN Swap. The initial VCONN Source Shall cease sourcing VCONN within \ntVCONNSourceOff of the last bit of the GoodCRC Message EOP, corresponding to the PS_RDY Message, being \ntransmitted by the PHY Layer.\n6.6.14\n  tCableMessage\nPorts compliant with Revision 3.x of the specification Shall Not wait tCableMessage before sending an SOP’ Packet \nor SOP’’ Packet even when communicating using [USBPD 2.0] with a Cable Plug. This specification defines Collision \nAvoidance mechanisms that obviate the need for this time.\nCable Plugs Shall only wait tCableMessage before sending an SOP’ Packet or SOP’’ Packet when operating at \n[USBPD 2.0]. When operating at Revisions higher than [USBPD 2.0] Cable Plugs Shall Not wait tCableMessage \nbefore sending an SOP’ Packet or SOP’’ Packet.\n6.6.15\n  DiscoverIdentityTimer\nThe DiscoverIdentityTimer is used prior to or during an Explicit Contract when discovering whether a Cable Plug \nis PD Capable using SOP’. When performing Cable Discovery during an Explicit Contract the Discover Identity \nCommand request Shall be sent every tDiscoverIdentity. No more than nDiscoverIdentityCount Discover \nIdentity Messages without a GoodCRC Message response Shall be sent. If no GoodCRC Message response is received \nafter nDiscoverIdentityCount Discover Identity Command requests have been sent by a Port, the Port Shall Not \nsend any further SOP’/SOP’’ Messages.\n6.6.16\n  Collision Avoidance Timers\n6.6.16.1\n  SinkTxTimer\nThe SinkTxTimer is used by the Protocol Layer in a Source to allow the Sink to complete its transmission before \ninitiating an AMS. \nThe Source Shall wait a minimum of tSinkTx after changing Rp from SinkTxOK to SinkTxNG before initiating an \nAMS by sending a Message.\nA Sink Shall only initiate an AMS when it has determined that Rp is set to SinkTxOK. \n","image_count":0,"table_count":1}
{"page":258,"text":"Page 258\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.6.16.2\n  tSrcHoldsBus\nIf a transition into the PE_SRC_Ready state will result in an immediate transition out of the PE_SRC_Ready state \nwithin tSrcHoldsBus e.g. it is due to a Protocol Error that has not resulted in a Soft Reset, then the notifications of \nthe end of AMS and first Message in an AMS May Not be sent to avoid changing the Rp value unnecessarily.\n6.6.17\n  Fast Role Swap Timers\n6.6.17.1\n  tFRSwap5V\nThe tFRSwap5V time Shall be measured from:\n\nThe later of:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the Accept Message or\n\nVBUS being within vSafe5V.\n\nUntil the first bit of the response PS_RDY Message Preamble has been transmitted by the PHY Layer.\nDuring a Fast Role Swap, the Initial Source Shall start the PS_RDY Message within tFRSwap5V after both:\n\nThe Initial Source has sent the Accept Message, and\n\nVBUS is at or below vSafe5V.\n6.6.17.2\n  tFRSwapComplete\nDuring a fast-role swap, the Initial Sink Shall respond with a the PS_RDY Message within tFRSwapComplete after \nit has received the PS_RDY Message from the Initial Source. The tFRSwapComplete time Shall be measured from \nthe time the last bit of the GoodCRC Message EOP, corresponding to the PS_RDY Message, has been transmitted by \nthe PHY Layer until the first bit of the response PS_RDY Message Preamble has been transmitted by the PHY Layer.\n6.6.17.3\n  tFRSwapInit\nThat last bit of the EOP of the FR_Swap Message Shall be transmitted by the New Source no later than tFRSwapInit \nafter the Fast Role Swap Request has been detected (see Section 5.8.6.3, \"Fast Role Swap Detection\").\n6.6.18\n   Chunking Timers\n6.6.18.1\n  ChunkingNotSupportedTimer\nThe ChunkingNotSupportedTimer is used by a Source or Sink which does not support multi-chunk Chunking but \nhas received a Message Chunk.\nThe ChunkingNotSupportedTimer Shall be started when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to a Message Chunk of a multi-chunk Message, \nis transmitted by the PHY Layer. The Policy Engine Shall Not send its Not_Supported Message before \nthe ChunkingNotSupportedTimer expires.\n6.6.18.2\n  ChunkSenderRequestTimer\nThe ChunkSenderRequestTimer is used during a Chunked Message transmission.\nThe ChunkSenderRequestTimer Shall be used by the sender's Chunking state machine to ensure that a Chunk \nResponse is responded to within a bounded time of tChunkSenderRequest. Failure to receive the expected \nresponse is detected when the ChunkSenderRequestTimer expires. \nThe ChunkSenderRequestTimer Shall be started when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the Chunk Response Message, is received by \nthe PHY Layer.\n","image_count":0,"table_count":1}
{"page":259,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 259\nThe ChunkSenderRequestTimer Shall be stopped when:\n\nThe last bit of the EOP of the GoodCRC Message, corresponding to the Chunk Request Message, is trans-\nmitted by the PHY Layer. \n\nA Message other than a Chunk Request is received from the Protocol Layer Rx.\nThe receiver of a Chunk Response requiring a Chunk Request Shall respond with a Chunk Request within \ntChunkReceiverRequest in order to ensure that the sender's ChunkSenderRequestTimer does not expire. \nThe tChunkReceiverRequest time Shall be measured from the time the last bit of the EOP of the GoodCRC Message, \ncorresponding to the Chunk Response Message, has been transmitted by the PHY Layer until the first bit of the \nresponse Message Preamble has been transmitted by the PHY Layer.\n6.6.18.3\n  ChunkSenderResponseTimer\nThe ChunkSenderResponseTimer is used during a Chunked Message transmission.\nThe ChunkSenderResponseTimer Shall be used by the sender's Chunking state machine to ensure that a Chunk \nRequest is responded to within a bounded time of tChunkSenderResponse. Failure to receive the expected \nresponse is detected when the ChunkSenderResponseTimer expires. \nThe ChunkSenderResponseTimer Shall be started when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the Chunk Request Message, is received by \nthe PHY Layer.\nThe ChunkSenderResponseTimer Shall be stopped when:\n\nThe last bit of the GoodCRC Message EOP, corresponding to the Chunk Response Message, is transmitted \nby the PHY Layer.\n\nA Message other than a Chunk is received from the Protocol Layer.\nThe receiver of a Chunk Request requiring a Chunk Response Shall respond with a Chunk Response within \ntChunkReceiverResponse in order to ensure that the sender's ChunkSenderResponseTimer does not expire. \nThe tChunkReceiverResponse time Shall be measured from the time the last bit of the EOP of the GoodCRC \nMessage, corresponding to the Chunk Request Message, has been transmitted by the PHY Layer until the first bit of \nthe response Message Preamble has been transmitted by the PHY Layer.\n6.6.19\n  Programmable Power Supply Timers\n6.6.19.1\n  SinkPPSPeriodicTimer\nThe SinkPPSPeriodicTimer Shall be used by the Sink's Policy Engine to ensure that communication between the \nSink and Source occurs within a bounded time of tPPSRequest when in SPR PPS Mode. In the absence of any other \ntraffic, a Request Message requesting an SPR PPS APDO is sent periodically as a keep alive mechanism. \nSinkPPSPeriodicTimer Shall be re-initialized and restarted on transmission, by the PHY Layer, of the last bit of the \nGoodCRC Message EOP, corresponding to any received Message, that causes the Sink to enter the PE_SNK_Ready \nstate.\nThe Sink Shall stop the SinkPPSPeriodicTimer on transmission, by the PHY Layer, of the last bit of the GoodCRC \nMessage EOP, corresponding to any Message, or the last bit of any Signaling is received, by the PHY Layer, from the \nSource and by the Sink that causes the Sink to leave the PE_SNK_Ready state.\n6.6.19.2\n  SourcePPSCommTimer\nThe SourcePPSCommTimer Shall be used by the Source's Policy Engine to ensure that communication between \nthe Sink and Source occurs within a bounded time of tPPSTimeout when in SPR PPS Mode. In the absence of any \nother traffic, a Request Message requesting an SPR PPS APDO is received periodically as a keep alive mechanism.\n","image_count":0,"table_count":1}
{"page":260,"text":"Page 260\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSourcePPSCommTimer Shall be re-initialized and restarted when, after receiving any Message that causes the \nSource to enter the PE_SRC_Ready state, the last bit of the corresponding GoodCRC Message EOP is transmitted by \nthe PHY Layer.\nThe Source Shall stop the SourcePPSCommTimer when:\n\nAfter receiving any Message that causes the Source to leave the PE_SRC_Ready state, the last bit of the \nof the corresponding GoodCRC Message EOP is sent by the PHY Layer, or\n\nThe last bit of any Signaling is received by the PHY Layer from the Sink by the Source that causes the \nSource to leave the PE_SRC_Ready state.\nWhen the SourcePPSCommTimer times out the Source Shall issue Hard Reset Signaling.\n6.6.20\n  tEnterUSB\nThe DFP Shall send the Enter_USB Message within tEnterUSB of either:\n\nThe last bit of the GoodCRC acknowledging the Data_Reset_Complete Message in response to the \nData_Reset Message or\n\nA PD Connection, specifically the last bit of the GoodCRC acknowledging the Source_Capabilities Mes-\nsage after the initial entry into the PE_SRC_Send_Capabilities state or \n\nThe last bit of the GoodCRC acknowledging the Accept Message in response to the DR_Swap Message\nFailure by the DFP to meet this timeout parameter can result in the ports not transitioning into [USB4] operation. \nAny AMS initiated by the UFP prior to receiving the Enter_USB Message will delay reception of the Enter_USB \nMessage and [USB4] operation, therefore a USB4® -capable UFP Should Not initiate any AMS until the DFP has been \ngiven time to send the Enter_USB Message.\n6.6.21\n  EPR Timers\n6.6.21.1\n  SinkEPREnterTimer Timer\nThe SinkEPREnterTimer is used to ensure the EPR Mode entry process completes within tEnterEPR. The Sink \nShall start the timer when it sees the last bit of the GoodCRC Message in response to the EPR_Mode Message with \nthe Action field set to 1 (Enter). The Sink Shall stop the timer when the last bit of the corresponding GoodCRC \nMessage EOP, corresponding to the received EPR_Mode Message with the Action field set to 3 (Enter Succeeded), \nhas been transmitted by the PHY Layer. If the timer expires the Sink Shall send a Soft_Reset Message.\n6.6.21.2\n  SinkEPRKeepAlive Timer\nThe SinkEPRKeepAliveTimer Shall be used by the Sink's Policy Engine to ensure that communication between the \nSink and Source occurs within a bounded time of tSinkEPRKeepAlive. The Sink Shall initialize and run this timer \nupon entry into the PE_SNK_Ready State when in EPR Mode and Shall stop it upon exit from the PE_SNK_Ready \nwhen in EPR Mode.\nWhile operating in EPR Mode, the Sink Shall stop the SinkEPRKeepAliveTimer timer whenever:\n\nThe last bit of the GoodCRC Message EOP, in response any Message from the Source, is transmitted by \nthe PHY Layer.\n\nThe PHY Layer receives the last bit of the GoodCRC Message EOP in response to any Message sent to the \nSource.\nIf the timer expires the Sink Shall send an EPR_KeepAlive Message.\n6.6.21.3\n  SourceEPRKeepAlive Timer\nThe SourceEPRKeepAliveTimer Shall be used by the Source's Policy Engine to ensure that communication \nbetween the Sink and Source occurs within a bounded time of tSourceEPRKeepAlive. The Source Shall initialize \n","image_count":0,"table_count":1}
{"page":261,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 261\nand run this timer upon entry into the PE_SRC_Ready State when in EPR Mode and Shall disable it upon exit from \nthe PE_SRC_Ready State when EPR Mode.\nWhile operating in EPR Mode, the Source Shall stop the SourceEPRKeepAliveTimer timer whenever:\n\nThe last bit of the GoodCRC Message EOP, in response any Message from the Sink, is transmitted by the \nPHY Layer.\n\nThe PHY Layer receives the last bit of the GoodCRC Message EOP in response to any Message sent to the \nSource. \nIf the timer expires the Source Shall send Hard Reset Signaling.\n6.6.21.4\n  tEPRSourceCableDiscovery\nAfter Port Partners are Attached or after a Hard Reset or after a Power Role Swap or after a Fast Role Swap an EPR \nSource Shall discover the Cable Plug within tEPRSourceCableDiscovery of entering the First Explicit Contract.\nThe EPR Source Shall send the Discover Identity REQ Command, to the Cable Plug, within \ntEPRSourceCableDiscovery of receiving the GoodCRC Message acknowledging the PS_RDY Message as part of the \nExplicit Contract Negotiation.\nNote:\nIf the EPR Source is not the VCONN Source, tEPRSourceCableDiscovery, will also include the time needed \nfor the VCONN Swap.\n","image_count":0,"table_count":1}
{"page":262,"text":"Page 262\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.6.22\n  Time Values and Timers\nTable 6.68, \"Time Values\" summarizes the values for the timers listed in this section. For each Timer Value, a given \nimplementation Shall pick a fixed value within the range specified. Table 6.69, \"Timers\" lists the timers.\nTable 6.68  Time Values\nParameter\nValue \n(min)\nValue \n(Nom)\nValue \n(max)\nUnits\nReference\ntACTempUpdate\n500\nms\nSection 6.5.2.2.1\ntBISTContMode\n30\n45\n60\nms\nSection 6.6.7.2\ntBISTCarrierMode\n300\nms\nSection 6.6.7.1\ntBISTSharedTestMode\n1\ns\nSection 6.6.7.3\ntCableMessage\n750\nµs\nSection 6.6.14\ntCapabilitiesMismatchResponse\n2\ns\nSection 6.4.2.3\ntChunkingNotSupported\n40\n45\n50\nms\nSection 6.6.18.1\ntChunkReceiverRequest\n15\nms\nSection 6.6.18.2\ntChunkReceiverResponse\n15\nms\nSection 6.6.18.3\ntChunkSenderRequest\n24\n27\n30\nms\nSection 6.6.18.2\ntChunkSenderResponse\n24\n27\n30\nms\nSection 6.6.18.3\ntDataReset\n200\n225\n250\nms\nSection 6.6.10.2\ntDataResetFail\n300\n400\nms\nSection 6.6.10.3\ntDataResetFailUFP\n450\n550\nms\nSection 6.6.10.4\ntDiscoverIdentity\n40\n50\nms\nSection 6.6.14\ntDRSwapHardReset\n15\nms\nSection 6.6.11.3\ntDRSwapWait\n100\nms\nSection 6.6.4.3\ntEnterUSB\n500\nms\nSection 6.6.20\ntEnterUSBWait\n100\nms\nSection 6.6.4.7\ntEnterEPR\n450\n500\n550\nms\nSection 6.6.21.1\ntEPRSourceCableDiscovery\n2\ns\nSection 6.6.21.4\ntFirstSourceCap\n250\nms\nSection 6.6.3.3\ntFRSwap5V\n15\nms\nSection 6.6.17.1\ntFRSwapComplete\n15\nms\nSection 6.6.17.2\ntFRSwapInit\n15\nms\nSection 6.6.17.3\ntHardReset\n5\nms\nSection 6.3.13\ntHardResetComplete\n4\n4.5\n5\nms\nSection 6.6.9\ntSourceEPRKeepAlive\n0.750\n0.875\n1.000\ns\nSection 6.6.21.3\ntSinkEPRKeepAlive\n0.250\n0.375\n0.500\ns\nSection 6.6.21.2\ntNoResponse\n4.5\n5.0\n5.5\ns\nSection 6.6.6\ntPPSRequest\n10\ns\nSection 6.6.19.1\ntPPSTimeout\n12.0\n13.5\n15.0\ns\nSection 6.6.19.2\ntProtErrHardReset\n15\nms\nSection 6.6.11.4\ntProtErrSoftReset\n15\nms\nSection 6.6.9.2\ntPRSwapWait\n100\nms\nSection 6.6.4.2\ntPSHardReset\n25\n30\n35\nms\nSection 6.6.11.2\n","image_count":0,"table_count":2}
{"page":263,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 263\ntPSSourceOff\nSPR Mode\n750\n835\n920\nms\nSection 6.6.5.2\nEPR Mode\n1120\n1260\n1400\ntPSSourceOn\nSPR Mode\n390\n435\n480\nms\nSection 6.6.5.3\ntPSTransition\nSPR Mode\n450\n500\n550\nms\nSection 6.6.5.1\nEPR Mode\n830\n925\n1020\ntReceive\n0.9\n1.0\n1.1\nms\nSection 6.6.1\ntReceiverResponse\n15\nms\nSection 6.6.2\ntRetry\n195\nµs\nSection 6.6.1\ntSenderResponse\n27\n30\n33 \nms\nSection 6.6.2\ntSinkDelay\n5\nms\nSection 5.7\ntSinkRequest\n100\nms\nSection 6.6.4.1\ntSinkTx\n16\n18\n20\nms\nSection 6.6.16\ntSoftReset\n15\nms\nSection 6.8.1\ntSrcHoldsBus\n50\nms\nSection 8.3.3.2\ntSwapSinkReady\n15\nms\nSection 6.6.8.1\ntSwapSourceStart\n20\nms\nSection 6.6.8.1\ntTransmit\n195\nµs\nSection 6.6.1\ntTypeCSendSourceCap\n100\n150\n200\nms\nSection 6.6.3.1\ntTypeCSinkWaitCap\n310\n465\n620\nms\nSection 6.6.3.2\ntVCONNSourceDischarge\n160\n200\n240\nms\nSection 6.6.10.1\ntVCONNSourceOff\n25\nms\nSection 6.6.13\ntVcONNSourceOn\n50\nms\nSection 6.3.11\ntVCONNSourceTimeout\n100\n150\n200\nms\nSection 6.6.13\ntVCONNSwapWait\n100\nms\nSection 6.6.4.4\ntVCONNSwapDelayDFP\n100\nms\nSection 6.6.4.5\ntVCONNSwapDelayUFP\n500\nms\nSection 6.6.4.6\ntVDMBusy\n50\nms\nSection 6.6.12.4\ntVDMEnterMode\n25\nms\nSection 6.6.12.2\ntVDMExitMode\n25\nms\nSection 6.6.12.3\ntVDMReceiverResponse\n15\nms\nSection 6.6.12.1\ntVDMSenderResponse\n24\n27\n30\nms\nSection 6.6.12.1\ntVDMWaitModeEntry\n40\n45\n50\nms\nSection 6.6.12.2\ntVDMWaitModeExit\n40\n45\n50\nms\nSection 6.6.12.3\nTable 6.68  Time Values (Continued)\nParameter\nValue \n(min)\nValue \n(Nom)\nValue \n(max)\nUnits\nReference\n","image_count":0,"table_count":2}
{"page":264,"text":"Page 264\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 6.69  Timers\nTimer\nParameter\nUsed By\nReference\nBISTContModeTimer\ntBISTContMode\nPolicy Engine\nSection 6.6.7.2\nChunkingNotSupportedTimer\ntChunkingNotSupported\nPolicy Engine\nSection 6.6.18.1\nChunkSenderRequestTimer\ntChunkSenderRequest\nProtocol Layer\nSection 6.6.18.2\nChunkSenderResponseTimer\ntChunkSenderResponse\nProtocol Layer\nSection 6.6.18.3\nCRCReceiveTimer\ntReceive\nProtocol Layer\nSection 6.6.1\nDataResetFailTimer\ntDataResetFail\nPolicy Engine\nSection 6.6.10.3\nDataResetFailUFPTimer\ntDataResetFailUFP\nPolicy Engine\nSection 6.6.10.4\nDiscoverIdentityTimer\ntDiscoverIdentity\nPolicy Engine\nSection 6.6.15\nHardResetCompleteTimer\ntHardResetComplete\nProtocol Layer\nSection 6.6.9\nNoResponseTimer\ntNoResponse\nPolicy Engine\nSection 6.6.6\nPSHardResetTimer\ntPSHardReset\nPolicy Engine\nSection 6.6.11.2\nPSSourceOffTimer\ntPSSourceOff\nPolicy Engine\nSection 6.6.5.2\nPSSourceOnTimer\ntPSSourceOn\nPolicy Engine\nSection 6.6.5.3\nPSTransitionTimer\ntPSTransition\nPolicy Engine\nSection 6.6.5.1\nSenderResponseTimer\ntSenderResponse\nPolicy Engine\nSection 6.6.2\nSinkEPREnterTimer\ntEnterEPR\nPolicy Engine\nSection 6.6.21.1\nSinkEPRKeepAliveTimer\ntSinkEPRKeepAlive\nPolicy Engine\nSection 6.6.21.2\nSinkPPSPeriodicTimer\ntPPSRequest\nPolicy Engine\nSection 6.6.19.1\nSinkRequestTimer\ntSinkRequest\nPolicy Engine\nSection 6.6.4\nSinkWaitCapTimer\ntTypeCSinkWaitCap\nPolicy Engine\nSection 6.6.3.2\nSourceCapabilityTimer\ntTypeCSendSourceCap\nPolicy Engine\nSection 6.6.3.1\nSourceEPRKeepAliveTimer\ntSourceEPRKeepAlive\nPolicy Engine\nSection 6.6.21.3\nSourcePPSCommTimer\ntPPSTimeout\nPolicy Engine\nSection 6.6.19.2\nSinkTxTimer\ntSinkTx\nProtocol Layer\nSection 6.6.16\nSwapSourceStartTimer\ntSwapSourceStart\nPolicy Engine\nSection 6.6.8.1\nVCONNDischargeTimer\ntVCONNSourceDischarge\nPolicy Engine\nSection 6.6.10.1\nVCONNOnTimer\ntVCONNSourceTimeout\nPolicy Engine\nSection 6.6.13.1\nVDMModeEntryTimer\ntVDMWaitModeEntry\nPolicy Engine\nSection 6.6.12.2\nVDMModeExitTimer\ntVDMWaitModeExit\nPolicy Engine\nSection 6.6.12.3\nVDMResponseTimer\ntVDMSenderResponse\nPolicy Engine\nSection 6.6.12.1\n","image_count":0,"table_count":2}
{"page":265,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 265\n6.7\n  Counters\n6.7.1\n  MessageID Counter\nThe MessageIDCounter is a rolling counter, ranging from 0 to nMessageIDCount, used to detect duplicate \nMessages. This value is used for the MessageID field in the Message Header of each transmitted Message.\nEach Port Shall maintain a copy of the last MessageID value received from its Port Partner. Devices that support \nmultiple ports, such as Hubs, Shall maintain copies of the last MessageID on a per Port basis. A Port which \ncommunicates using SOP* Packets Shall maintain copies of the last MessageID for each type of SOP* it uses.\nThe transmitter Shall use the MessageID in a GoodCRC Message to verify that a particular Message was received \ncorrectly. The receiver Shall use the MessageID to detect duplicate Messages.\n6.7.1.1\n  Transmitter Usage\nThe Transmitter Shall use the MessageID as follows:\n\nUpon receiving either Hard Reset Signaling, or a Soft_Reset Message, the transmitter Shall set its \nMessageIDCounter to zero and re-initialize its retry mechanism.\n\nIf a GoodCRC Message with a MessageID matching the MessageIDCounter is not received before the \nCRCReceiveTimer expires, it Shall retry the same Packet up to nRetryCount times using the same \nMessageID.\n\nIf a GoodCRC Message is received with a MessageID matching the current MessageIDCounter before \nthe CRCReceiveTimer expires, the transmitter Shall re-initialize its retry mechanism and increment its \nMessageIDCounter.\n\nIf the Message is aborted by the Policy Engine, the transmitter Shall delete the Message from its transmit \nbuffer, re-initialize its retry mechanism and increment its MessageIDCounter.\n6.7.1.2\n  Receiver Usage\nThe Receiver Shall use the MessageID as follows:\n\nWhen the first good Packet is received after a reset, the receiver Shall store a copy of the received \nMessageID value.\n\nFor subsequent Messages, if MessageID value in a received Message is the same as the stored value, the \nreceiver Shall return a GoodCRC Message with that MessageID value and drop the Message (this is a \nretry of an already received Message). \nNote:\nThis Shall Not apply to the Soft_Reset Message which always has a MessageID value of zero.\n\nIf MessageID value in the received Message is different than the stored value, the receiver Shall return \na GoodCRC Message with the new MessageID value, store a copy of the new MessageID value and pro-\ncess the Message.\n6.7.2\n  Retry Counter\nThe RetryCounter is used by a Port whenever there is a Message transmission failure (timeout of \nCRCReceiveTimer). If the nRetryCount retry fails, then the link Shall be reset using the Soft Reset mechanism. \nThe following rules apply to retries when there is a Message transmission failure (see also Section 6.12.2.2, \n\"Protocol Layer Message Transmission\"):\n\nCable Plugs Shall Not retry Messages.\n\nExtended Messages of Data Size > MaxExtendedMsgLegacyLen that are not Chunked (Chunked flag set \nto zero) Shall Not be retried.\n","image_count":0,"table_count":1}
{"page":266,"text":"Page 266\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nExtended Messages of Data Size ≤ MaxExtendedMsgLegacyLen (Chunked flag set to zero or one) Shall \nbe retried.\n\nExtended Messages of Data Size > MaxExtendedMsgLegacyLen that are Chunked (Chunked flag set to \none) individual Chunks Shall be retried.\nWhen Messages are not retried, then the RetryCounter is not used. Higher layer protocols are expected to \naccommodate Message delivery failure or failure to receive a GoodCRC Message.\n6.7.3\n  Hard Reset Counter\nThe HardResetCounter is used to retry the Hard Reset whenever there is no response from the remote device (see \nSection 6.6.6, \"NoResponseTimer\"). Once the Hard Reset has been retried nHardResetCount times then it Shall be \nassumed that the remote device is non-responsive.\n6.7.4\n  Capabilities Counter\nThe CapsCounter is used to count the number of Source_Capabilities Messages which have been sent by a Source \nat power up or after a Hard Reset. Implementation of the CapsCounter is Optional but May be used by any Source \nwhich wishes to preserve power by not sending Source_Capabilities Messages after a period of time. \nWhen the CapsCounter is implemented and the Source detects that a Sink is Attached then after nCapsCount \nSource_Capabilities Messages have been sent the Source Shall decide that the Sink is non-responsive, stop sending \nSource_Capabilities Messages and disable PD.\nA Sink Shall use the SinkWaitCapTimer to trigger the resending of Source_Capabilities Messages by a USB Power \nDelivery capable Source which has previously stopped sending Source_Capabilities Messages. Any Sink which is \nAttached and does not detect a Source_Capabilities Message, Shall issue Hard Reset Signaling when the \nSinkWaitCapTimer times out in order to reset the Source. Resetting the Source Shall also reset the CapsCounter \nand restart the sending of Source_Capabilities Messages.\n6.7.5\n  Discover Identity Counter\nWhen sending Discover Identity Messages to a Cable Plug a Port Shall maintain a count of Messages sent \n(DiscoverIdentityCounter). No more than nDiscoverIdentityCount Discover Identity Messages Shall be sent by \nthe Port without receiving a GoodCRC Message response. A VCONN Swap Shall reset the DiscoverIdentityCounter.\n6.7.6\n  VDMBusyCounter\nWhen sending Responder BUSY responses to a Structured Vendor_Defined Message a UFP or Cable Plug Shall \nmaintain a count of Messages sent (VDMBusyCounter). No more than nBusyCount Responder BUSY responses \nShall be sent. The VDMBusyCounter Shall be reset on sending a non-BUSY response. Products wishing to meet \n[USB Type-C 2.4] requirements for Alternate Mode entry Should use an nBusyCount of 1.\n","image_count":0,"table_count":1}
{"page":267,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 267\n6.7.7\n  Counter Values and Counters\nTable 6.70, \"Counter Parameters\" lists the counters used in this section and Table 6.71, \"Counters\" shows the \ncorresponding parameters.\nTable 6.70  Counter Parameters\nParameter\nValue\nReference\nnBusyCount\n5\nSection 6.7.6\nnCapsCount\n50\nSection 6.7.4\nnDiscoverIdentityCount\n20\nSection 6.7.5\nnHardResetCount\n2\nSection 6.7.3\nnMessageIDCount\n7\nSection 6.7.1\nnRetryCount\n2\nSection 6.7.2\nTable 6.71  Counters\nCounter\nMax\nReference\nCapsCounter\nnCapsCount\nSection 6.7.4\nDiscoverIdentityCounter\nnDiscoverIdentityCount\nSection 6.7.5\nHardResetCounter\nnHardResetCount\nSection 6.7.3\nMessageIDCounter\nnMessageIDCount\nSection 6.7.1\nRetryCounter\nnRetryCount\nSection 6.7.2\nVDMBusyCounter\nnBusyCount\nSection 6.7.6\n","image_count":0,"table_count":3}
{"page":268,"text":"Page 268\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.8\n  Reset\nResets are a necessary response to protocol or other error conditions. USB Power Delivery defines four different \ntypes of reset:\n\nSoft Reset, which resets protocol.\n\nData Reset which resets the USB Communications.\n\nHard Reset which resets both the power supplies and protocol\n\nCable Reset which resets the cable.\n6.8.1\n  Soft Reset and Protocol Error\nA Soft_Reset Message is used to cause a Soft Reset of protocol communication when this has broken down in some \nway. It Shall Not have any impact on power supply operation but is used to correct a Protocol Error occurring \nduring an Atomic Message Sequence (AMS). The Soft Reset May be triggered by either Port Partner in response to \nthe Protocol Error.\nProtocol Errors are any unexpected Message during an AMS. If the first Message in an AMS has been passed to the \nProtocol Layer by the Policy Engine but has not yet been sent (i.e., a GoodCRC Message acknowledging the Message \nhas not been received) when the Protocol Error occurs, the Policy Engine Shall Not issue a Soft Reset but Shall \nreturn to the PE_SNK_Ready or PE_SRC_Ready state and then process the incoming Message. If the incoming \nMessage is an Unexpected Message received in the PE_SNK_Ready or PE_SRC_Ready state, the Policy Engine Shall \nissue a Soft Reset. If the Protocol Error occurs during an AMS this Shall lead to a Soft Reset in order to re-synchronize \nthe Policy Engine state machines (see Section 8.3.3.4, \"SOP Soft Reset and Protocol Error State Diagrams\") except \nwhen the voltage is transition when a Protocol Error Shall lead to a Hard Reset (see Section 6.6.11.4, \n\"tProtErrHardReset\" and Section 8.3.3.2, \"Policy Engine Source Port State Diagram\"). Details of AMS's can be found \nin Section 8.3.2.1.3, \"Atomic Message Sequences\".\nAn Unrecognized Message or Unsupported Message received in the PE_SNK_Ready or PE_SRC_Ready states, Shall \nNot cause a Soft_Reset Message to be generated but instead a Not_Supported Message Shall be generated.\nA Soft_Reset Message Shall be sent regardless of the Rp value either SinkTxOK or SinkTxNG if it is the correct \nresponse in that state.\nNote:\nThis means that a Soft_Reset Message can be sent during an AMS regardless of the Rp value either \nSinkTxOK or SinkTxNG when responding to a Protocol Error.\n","image_count":0,"table_count":1}
{"page":269,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 269\nTable 6.72, \"Response to an incoming Message (except VDM)\" and Table 6.73, \"Response to an incoming VDM\" \nsummarize the responses that Shall be made to an incoming Message including VDMs.\nA failure to see a GoodCRC Message in response to any Message within tReceive (after nRetryCount retries), when \na Port Pair is Connected, is indicative of a communications failure resulting in a Soft Reset (see Section 6.6.9.1, \n\"tSoftReset\").\nA Soft Reset Shall impact the USB Power Delivery layers in the following ways:\n\nPHY Layer: Reset not required since the PHY Layer resets on each Packet transmission/reception.\n\nProtocol Layer: Reset MessageIDCounter, RetryCounter and state machines.\nTable 6.72  Response to an incoming Message (except VDM)\nRecipient’s \nPower Role\nRecipient’s \nstate\nIncoming Message\nRecognized\nUnrecognized\nSupported\nUnsupported\nExpected\nUnexpected\nSource\nPE_SRC_Ready\nProcess Message\nSoft_Reset \nMessage2\nNot_Supported \nMessage3\nNot_Supported Message3 \n(except for VDM) \nSee Section 6.4.4.1 for UVDM.\nSee Section 6.4.4.1 for SVDM\nDuring AMS \n(power not \ntransitioning1)\nProcess Message\nSoft_Reset Message2\nDuring AMS \n(power \ntransitioning1)\nProcess Message\nHard Reset Signaling\nSink\nPE_SNK_Ready\nProcess Message\nSoft_Reset \nMessage2\nNot_Supported \nMessage3\nNot_Supported Message3 \n(except for VDM) \nSee Section 6.4.4.1 for UVDM.\nSee Section 6.4.4.1 for SVDM\nDuring AMS (not \npower \ntransitioned)\nProcess Message\nSoft_Reset Message2\nDuring AMS \n(power \ntransitioned)\nProcess Message\nHard Reset Signaling\n1)\n“Power transitioning” means the Policy Engine is in PE_SRC_Transition_Supply State or PE_SNK_Transition_Sink State \nor PE_FRS_SNK_SRC_Start_AMS State.\n2)\nThe Soft_Reset Message Shall be sent using the SOP* of the incoming Message.\n3)\nThe Not_Supported Message Shall be sent using the SOP* of the incoming Message.\nTable 6.73  Response to an incoming VDM\nRecipient's\nRole\nUnstructured VDM\nStructured VDM\nSupported Unsupported Unrecognized\nSupported \nUnsupported Unrecognized\nDFP or UFP\nDefined by \nvendor\n Not_Supported \nMessage\n Not_Supported \nMessage\nSee \nSection 6.13.5\n Not_Supported \nMessage\nNAK Command\nCable Plug\nDefined by \nvendor\nMessage \nIgnored\nMessage \nIgnored\nSee\nSection 6.13.5\nMessage \nIgnored\nNAK Command\n","image_count":0,"table_count":3}
{"page":270,"text":"Page 270\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nPolicy Engine: Reset state dependent behavior by performing an Explicit Contract Negotiation. \n\nPower supply: Shall Not change.\nNote:\nWhen in SPR Mode the Source sends a Source_Capabilities Message and when in EPR Mode the Source \nsends an EPR_Source_Capabilities Message.\nA Soft Reset is performed using an AMS (see Table 8.8, \"AMS: Soft Reset\"). Message numbers Shall be set to zero \nprior to sending the Soft_Reset/Accept Message since the issue might be with the counters. The sender of a \nSoft_Reset Message Shall reset its MessageIDCounter and RetryCounter, the receiver of the Message Shall reset \nits MessageIDCounter and RetryCounter before sending the Accept Message response. Any failure in the Soft \nReset process will trigger a Hard Reset when SOP Packets are being used or Cable Reset, sent by the DFP only, for \nany other SOP* Packets; for example a GoodCRC Message is not received during the Soft Reset process (see Section \n6.8.3, \"Hard Reset\" and Section 6.8.4, \"Cable Reset\").\n6.8.2\n  Data Reset\nA Data_Reset Message is used by a Port to reset its USB data connection and to exit all Alternate Modes both with its \nPort Partner and in the Cable Plug(s).\n\nThe Data Reset process May be initiated by either Port Partner sending a Data_Reset Message.\nA Data Reset impacts USB Power Delivery in the following ways:\n\nShall Not change the Port Power Roles (Source/Sink) or Port Data Roles (DFP/UFP).\n\nShall Not change the existing Explicit Contract.\n\nShall cause all Active Modes to be exited.\n\nShall reset the cable by Power cycling VCONN.\n\nThe DFP Shall become the VCONN Source.\n\nIf the Data Reset process fails, then the Port Shall enter the ErrorRecovery State as defined in [USB \nType-C 2.4].\nSee Section 6.3.14, \"Data_Reset Message\" for details of Data Reset operation.\n6.8.3\n  Hard Reset\nHard Resets are signaled by an ordered set as defined in Section 5.6.4, \"Hard Reset\". Both the sender and recipient \nShall cause their power supplies to return to their default states (see Section 7.3.3.1, \"Source Initiated Hard Reset\" \nand Section 7.3.3.2, \"Sink Initiated Hard Reset\" for details of voltage transitions). In addition, their respective \nProtocol Layers Shall be reset as for the Soft Reset. This allows the Attached devices to be in a state where they can \nre-establish USB PD communication. Hard Reset is retried up to nHardResetCount times (see also Section 6.6.6, \n\"NoResponseTimer\" and Section 6.7.3, \"Hard Reset Counter\"). \nNote:\nEven though VBUS drops to vSafe0V during a Hard Reset a Sink will not see this as a disconnect since this \nis expected behavior.\nA Hard Reset Shall Not cause any change to either the Rp/Rd resistor being asserted. \nIf there has been a Data Role Swap the Hard Reset Shall cause the Port Data Role to be changed back to DFP for a \nPort with the Rp resistor asserted and UFP for a Port with the Rd resistor asserted. \nWhen VCONN is supported (see [USB Type-C 2.4]) the Hard Reset Shall cause the Port with the Rp resistor asserted \nto supply VCONN and the Port with the Rd resistor asserted to turn off VCONN. \nIn effect the Hard Reset will revert the Ports to their default state based on their CC line resistors. Removing and \nreapplying VCONN from the Cable Plugs also ensures that they re-establish their configuration as either SOP’ or SOP’’ \nbased on the location of VCONN (see [USB Type-C 2.4]).\n","image_count":0,"table_count":1}
{"page":271,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 271\nIf the Hard Reset is insufficient to clear the error condition, then the Port Shall use USB Type-C ErrorRecovery as \ndefined in [USB Type-C 2.4].\nA Sink Shall be able to send Hard Reset Signaling regardless of the value of Rp (see Section 5.7, \"Collision \nAvoidance\").\n6.8.3.1\n  Cable Plugs and Hard Reset\nCable Plugs Shall Not generate Hard Reset Signaling but Shall monitor for Hard Reset Signaling between the Port \nPartners and Shall reset when this is detected (see Section 8.3.3.25.2.2, \"Cable Plug Hard Reset State Diagram\"). The \nCable Plugs Shall perform the equivalent of a power cycle returning to their initial power up state. This allows the \nPort Partners to be in a state where they can re-establish USB PD communication.\n6.8.3.2\n  Modal Operation and Hard Reset\nA Hard Reset Shall cause EPR Mode and all Active Modes to be exited by both Port Partners and any Cable Plugs (see \nSection 6.4.4.3.4, \"Enter Mode Command\").\n6.8.4\n  Cable Reset\nCable Resets are signaled by an ordered set as defined in Section 5.6.5, \"Cable Reset\". Both the sender and recipient \nof Cable Reset Signaling Shall reset their respective Protocol Layers. The Cable Plugs Shall perform the equivalent \nof a power cycle returning to their initial power up state. This allows the Port Partners to be in a state where they \ncan re-establish USB PD communication. \nThe DFP must be supplying VCONN prior to a Cable Reset. If VCONN has been turned off the DFP Shall turn on VCONN \nprior to generating Cable Reset Signaling. If there has been a VCONN Swap and the UFP is currently supplying VCONN, \nthe DFP Shall perform a VCONN Swap such that it is supplying VCONN prior to generating Cable Reset Signaling. \nOnly a DFP Shall generate Cable Reset Signaling. A DFP Shall only generate Cable Reset Signaling within an \nExplicit Contract.\nA Cable Reset Shall cause all Active Modes in the Cable Plugs to be exited (see Section 6.4.4.3.4, \"Enter Mode \nCommand\").\n","image_count":0,"table_count":1}
{"page":272,"text":"Page 272\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.9\n  Accept, Reject and Wait\nThe recipient of a Request, EPR_Request, PR_Swap, DR_Swap, VCONN_Swap, or Enter_USB Message Shall respond \nby sending one of the following responses:\n\nAn Accept Message in response to a Valid request which can be serviced immediately (see Section 6.3.3, \n\"Accept Message\").\n\nA Wait Message in response to a Valid request which cannot be serviced immediately but could be ser-\nviced at a later time (see Section 6.3.12, \"Wait Message\").\n\nA Reject Message in response to an Invalid request or a request which is outside of the device's design \nCapabilities (see Section 6.3.4, \"Reject Message\").\n","image_count":0,"table_count":1}
{"page":273,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 273\n6.10\n  Collision Avoidance\nTo avoid Message collisions due to asynchronous Messaging sent from the Sink, the Source sets Rp to SinkTxOK to \nindicate to the Sink that it is OK to initiate an AMS. When the Source wishes to initiate an AMS, it sets Rp to SinkTxNG. \nWhen the Sink detects that Rp is set to SinkTxOK it May initiate an AMS. When the Sink detects that Rp is set to \nSinkTxNG it Shall Not initiate an AMS and Shall only send Messages that are part of an AMS the Source has initiated.\nNote:\nThis restriction applies to SOP* AMS's i.e., for both Port to Port and Port to Cable Plug communications.\nIf a transition into the PE_SRC_Ready state will result in an immediate transition out of the PE_SRC_Ready state \nwithin tSrcHoldsBus e.g. it is due to a Protocol Error that has not resulted in a Soft Reset, then the notifications of \nthe end of AMS and first Message in an AMS May Not be sent to avoid changing the Rp value unnecessarily.\nNote:\nA Sink can still send Hard Reset Signaling at any time.\n","image_count":0,"table_count":1}
{"page":274,"text":"Page 274\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.11\n  Message Discarding\nOn receiving a received Message on SOP, the Protocol Layer Shall Discard any pending SOP* Messages. A received \nMessage on SOP’/SOP’’ Shall Not cause any pending SOP* Messages to be Discarded. \nIt is assumed that Messages using SOP’/SOP’’ constitute a simple request/response AMS, with the Cable Plug \nproviding the response so there is no reason for a pending SOP* Message to be Discarded. There can only be one \nAMS between the Port Partners, and these also take priority over Cable Plug communications so a Message received \non SOP will always cause a Message pending on SOP* to be Discarded.\nTable 6.74, \"Message Discarding\" for details of the Messages that Shall/ Shall Not be Discarded.\nTable 6.74  Message Discarding\nMessage pending transmission Message received\nMessage to be Discarded\nSOP\nSOP\nOutgoing Message\nSOP\nSOP’/SOP’’\nIncoming Message\nSOP’\nSOP\nOutgoing Message\nSOP’\nSOP’\nIncoming Message\nSOP’\nSOP’’\nIncoming Message \nSOP’’\nSOP\nOutgoing Message\nSOP’’\nSOP’\nIncoming Message\nSOP’’\nSOP’’\nIncoming Message\n","image_count":0,"table_count":2}
{"page":275,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 275\n6.12\n  State behavior\n6.12.1\n  Introduction to state diagrams used in Chapter 6\nThe state diagrams defined in Section 6.12, \"State behavior\" are Normative and Shall define the operation of the \nPower Delivery Protocol Layer.\nNote:\nThese state diagrams are not intended to replace a well written and robust design.\nFigure 6.57, \"Outline of States\" shows an outline of the states defined in the following sections. At the top there is \nthe name of the state. This is followed by \"Actions on entry\" a list of actions carried out on entering the state and \nin some states \"Actions on exit\" a list of actions carried out on exiting the state.\nFigure 6.57 Outline of States\nTransitions from one state to another are indicated by arrows with the conditions listed on the arrow. Where there \nare multiple conditions, these are connected using either a logical OR \"|\" or a logical AND \"&.\" The inverse of a \ncondition is shown with a \"NOT\" in front of the condition.\nIn some cases, there are transitions which can occur from any state to a particular state. These are indicated by an \narrow which is unconnected to a state at one end, but with the other end (the point) connected to the final state.\nIn some state diagrams it is necessary to enter or exit from states in other diagrams. Figure 6.57, \"Outline of States\" \nindicates how such references are made. The reference is indicated with a hatched box. The box contains the name \nof the referenced state.\nFigure 6.58 References to states\nTimers are included in many of the states. Timers are initialized (set to their starting condition) and run (timer is \ncounting) in the state it is referenced. As soon as the state is exited then the timer is no longer active. Timeouts of \nthe timers are listed as conditions on state transitions.\nConditions listed on state transitions will come from one of three sources:\n<Name of State>\nActions on entry:\n“List of actions to carry out on entering the \nstate”\nActions on exit:\n“List of actions to carry out on exiting the \nstate”\n<Name of reference state> \n(<DFP | UFP>)\n","image_count":24,"table_count":1}
{"page":276,"text":"Page 276\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nMessages received from the PHY Layer.\n\nEvents triggered within the Protocol Layer e.g., timer timeouts\n\nMessage and related indications passed up to the Policy Engine from the Protocol Layer (Message sent; \nMessage received etc.)\n6.12.2\n  State Operation\nThe following section details Protocol Layer State Operation when sending and receiving SOP* Packets. \nFor each SOP’ Communication being sent and received there Shall be separate Protocol Layer Transmission and \nProtocol Layer Reception and Hard Reset State Machine instances, with their own counter and timer instances. \nWhen Chunking is supported there Shall be separate Chunked Tx, Chunked Tx, and Chunked Message Router State \nMachine instances.\nSoft Reset Shall only apply to the State Machine instances it is targeted at based on the type of SOP* Packet used to \nsend the Soft_Reset Message. The Hard Reset State Machine (including Cable Reset) Shall apply simultaneously to \nall Protocol Layer State Machine instances active in the DFP, UFP and Cable Plug (if present).\n6.12.2.1\n  Protocol Layer Chunking\n6.12.2.1.1\n  Architecture of Device Including Chunking Layer\nThe Chunking component resides in the Protocol Layer between the Policy Engine and Protocol Tx/Rx. Figure 6.59, \n\"Chunking architecture Showing Message and Control Flow\" illustrates the relationship between components.\nThe Chunking Layer comprises three related state machines:\n\nChunked Rx.\n\nChunked Tx.\n\nChunked Message Router.\nNote:\nThe consequence of this architecture is that the Policy Engine deals entirely in Unchunked Messages. It \nwill not receive (and might not respond to) a Message until all the related chunks have been collated.\nIf a PD device or Cable Plug has no requirement to handle any Message requiring more than one Chunk of any \nExtended Message, it May omit the Chunking Layer. In this case it Shall implement the \nChunkingNotSupportedTimer to ensure compatible operation with partners which support Chunking (see Section \n6.6.18.1, \"ChunkingNotSupportedTimer\" and Section 8.3.3.6, \"Not Supported Message State Diagrams\").\n","image_count":0,"table_count":1}
{"page":277,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 277\nFigure 6.59 Chunking architecture Showing Message and Control Flow\n6.12.2.1.1.1\n  Optional Abort Mechanism\nLong Chunked Messages bring with them the potential problem that they could prevent urgent Messages from being \ntransmitted in a timely manner. An Optional Abort mechanism is provided to remedy this problem. \nThe Abort Flag referred to in the diagrams below May be set and examined by the Policy Engine. The specific means \nare left to the implementer.\n6.12.2.1.1.2\n  Aborting Sending a Long-Chunked Message\nA long-Chunked Message being sent May be aborted by setting the Optional Abort Flag. The Message Shall be \nconsidered aborted when the Abort Flag is again cleared by the Chunked Tx state machine.\n6.12.2.1.1.3\n  Aborting Receiving a Long-Chunked Message\nIf the Optional Abort mechanism has been implemented, any Message sent while a Chunked Message receive is in \nprogress will result in an error report being received by the Policy Engine, to indicate that the Message request has \nbeen Discarded. If the Message was urgent the Policy Engine might set the Abort Flag, which will result in the \nincoming Chunked Message being aborted. The Abort Flag being cleared by the Chunked Rx state machine indicates \nthat the urgent Message can now be sent.\n6.12.2.1.2\n  Chunked Rx State Diagram\nFigure 6.60, \"Chunked Rx State Diagram\" shows the state behavior for the Chunked Rx State Machine. This \nrecognizes whether Chunked received Messages are involved and deals with requesting chunks when they are. It \nalso performs validity checks on all Messages related to Chunking.\nPolicy Engine\nProtocol Layer Rx\nProtocol Layer Tx\nPHY Layer\nRp Control or \nDetection\nChunked Rx\nChunked Tx\nChunking\nProtocol Layer\nHard Reset\nChunked Message Router\nAMS Notification\n","image_count":0,"table_count":3}
{"page":278,"text":"Page 278\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 6.60 Chunked Rx State Diagram\n6.12.2.1.2.1\n  RCH_Wait_For_Message_From_Protocol_Layer State\nThe Chunked Rx State Machine Shall enter the RCH_Wait_For_Message_From_Protocol_Layer state:\n\nAt startup.\n\nAs a result of a Soft Reset occurring.\n\nOn exit from a Hard Reset. \nOn entry to the RCH_Wait_For_Message_From_Protocol_Layer state the Chunked Rx state machine clears the \nExtended Rx Buffer and clears the Optional Abort Flag.\nIn the RCH_Wait_For_Message_From_Protocol_Layer state the Chunked Rx state machine waits until the Chunked \nMessage Router passes up a received Message.\nThe Chunked Rx State Machine Shall transition to the RCH_Pass_Up_Message state when:\n\nA non-Extended Message is passed up from the Chunked Message Router.\n\nAn Extended Message is passed up from the Chunked Message Router, and the Policy Engine has \ndetermined that we are not doing Chunking, and the Message has its Chunked bit set to 0b.\nThe Chunked Rx State Machine Shall transition to the RCH_Processing_Extended_Message state when:\n\nAn Extended Message is passed up from the Chunked Message Router, and the Policy Engine has \ndetermined that we are doing Chunking, and the Message has its Chunked bit set to 1b.\n6.12.2.1.2.2\n  RCH_Pass_Up_Message State\nOn entry to the RCH_Pass_Up_Message state the Chunked Rx state machine Shall pass the received Message to the \nPolicy Engine.\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n\nThe Message has been passed.\nTransmission Error \nfrom Protocol Layer |\n Message Received \nfrom Protocol Layer\nOther Message Received\n from Protocol Layer |\n ChunkSenderResponseTimer timeout\nRCH_Pass_Up_Message\nActions on entry:\nPass Message to Policy Engine\nRCH_Wait_For_Message_From_Protocol_Layer\nActions on entry:\nClear Extended Rx Buffer\nClear Abort Flag\nRCH_Report_Error\nActions on entry:\nReport Error to Policy Engine.\nIf a Message was received, pass it to \nthe Policy Engine.\nRCH_Processing_\nExtended_Message\nActions on entry:\nIf first chunk: set \nChunk_Number_Expected = 0 and \nNum bytes received = 0\nIf expected Chunk Number: Append \ndata to Extended_Message_Buffer; \nIncrement Chunk_Number_Expected \nand adjust Num bytes received.\nRCH_Requesting_Chunk\nActions on entry:\nSend notification SRT_Stop to \nSenderResponseTimer State \nMachine.\nSend Chunk Request to Protocol \nLayer with Chunk Number = \nChunk_Number_Expected.\nRCH_Waiting_Chunk\nActions on entry:\nStart ChunkSenderResponseTimer3\nSend notification SRT_Start to \nSenderResponseTimer State \nMachine.3\nStart\nMessage \nnot \nComplete\nMessage \nTransmitted \nreceived from \nProtocol Layer\nUnexpected \nChunk Number\nReported\nChunked != \nChunking1\nReceived Non-Extended Message |\n(Received Extended Message &\n (Chunking1 = 0 & Chunked = 0) )\nMessage is Complete\n (Num bytes received\n >= specified Data Size)2\nMessage Passed\nChunk Response Received \nfrom Protocol Layer\nReceived\nExtended Message &\n (Chunking1 = 1 &\n Chunked = 1)\nAny Message Received and \nnot in state RCH_Waiting_Chunk\nor RCH_Wait_For_Message_From_\nProtocol_Layer\nAbort Flag Set\nSoft Reset occured |\nExit from Hard Reset\n1)\nChunking is an internal state that is set to 1 if the ‘Unchunked Extended Messages Supported’ bit in either Source Capabilities or Request is 0.  It defaults to 1 and is set after the \nfirst exchange of Source Capabilities and Request.  It is also set to 1 for SOP’ or SOP’’ communication.\n2)\nAdditional bytes received over specified Data Size will be because of padding in the last chunk.\n3)\nThis state is responsible for starting two timers of similar length.  The implementor Should mitigate against more than one of these timers resulting in recovery action.\n","image_count":0,"table_count":5}
{"page":279,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 279\n6.12.2.1.2.3\n  RCH_Processing_Extended_Message State\nOn entry to the RCH_Processing_Extended_Message state the Chunked Rx state machine Shall:\n\nIf this is the first chunk:\n\nSet Chunk_Number_Expected = 0.\n\nSet Num bytes received = 0.\n\nIf chunk contains the expected Chunk Number:\n\nAppend its data to the Extended_Message_Buffer.\n\nIncrement Chunk_Number_Expected.\n\nAdjust Num bytes received.\nThe Chunked Rx State Machine Shall transition to the RCH_Pass_Up_Message state when:\n\nThe Message is complete (i.e., Num bytes received >= specified Data Size.\nNote:\nThe inequality allows for padding bytes in the last chunk, which are not actually part of the Extended Mes-\nsage).\nThe Chunked Rx State Machine Shall transition to the RCH_Requesting_Chunk state when:\n\nThe Message is not yet complete.\nThe Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n\nAn unexpected Chunk Number is received.\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n\nThe Optional Abort Flag is set.\n6.12.2.1.2.4\n  RCH_Requesting_Chunk State\nOn entry to the RCH_Requesting_Chunk state the Chunked Rx state machine Shall:\n\nSend notification SRT_Stop to SenderResponseTimer state machine (see Section 8.3.3.1.1, \n\"SenderResponseTimer State Diagram\").\n\nSend Chunk Request to Protocol Layer with Chunk Number = Chunk_Number_Expected.\nThe Chunked Rx State Machine Shall transition to the RCH_Waiting_Chunk state when:\n\nMessage Transmitted is received from the Protocol Layer.\nThe Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n\nTransmission Error is received from the Protocol Layer, or\n\nA Message is received from the Protocol Layer.\n6.12.2.1.2.5\n  RCH_Waiting_Chunk State\nOn entry to the RCH_Waiting_Chunk state the Chunked Rx state machine Shall:\n\nStart the ChunkSenderResponseTimer.\n\nSend notification SRT_Start to SenderResponseTimer state machine (see SSection 8.3.3.1.1, \n\"SenderResponseTimer State Diagram\").\nThe Chunked Rx State Machine Shall transition to the RCH_Processing_Extended_Message state when:\n\nA Chunk is received from the Protocol Layer.\n","image_count":0,"table_count":1}
{"page":280,"text":"Page 280\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Chunked Rx State Machine Shall transition to the RCH_Report_Error state when:\n\nA Message, other than a Chunk, is received from the Protocol Layer, or\n\nThe ChunkSenderResponseTimer expires.\n6.12.2.1.2.6\n  RCH_Report_Error State\nThe Chunked Rx State Machine Shall enter the RCH_Report_Error state:\n\nWhen any Message is received and the Chunked Rx State Machine is not in one of the states \nRCH_Waiting_Chunk or RCH_Wait_For_Message_From_Protocol_Layer.\nOn entry to the RCH_Report_Error state the Chunked Rx state machine Shall:\n\nReport the error to the Policy Engine.\n\nIf the state was entered because a Message was received, this Message Shall be passed to the Policy \nEngine.\nThe Chunked Rx State Machine Shall transition to the RCH_Wait_For_Message_From_Protocol_Layer state when:\n\nThe error has been reported.\n\nAny Message received was passed to the Policy Engine.\n","image_count":0,"table_count":1}
{"page":281,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 281\n6.12.2.1.3\n  Chunked Tx State Diagram\nFigure 6.61, \"Chunked Tx State Diagram\" shows the state behavior for the Chunked Tx State Machine. This \nrecognizes whether Chunked transmitted Messages are involved and deals with sending chunks and waiting for \nchunk requests when they are. It also performs validity checks on all related Messages related to Chunking.\nFigure 6.61 Chunked Tx State Diagram\n6.12.2.1.3.1\n  TCH_Wait_For_Message_Request_From_Policy_Engine State\nThe Chunked Tx State Machine Shall enter the TCH_Wait_For_Message_Request_From_Policy_Engine state:\n\nAt startup.\n\nAs a result of a Soft Reset occurring.\n\nOn exit from a Hard Reset. \nOn entry to the TCH_Wait_For_Message_Request_From_Policy_Engine state the Chunked Tx state machine clears \nthe Optional Abort Flag.\nIn the TCH_Wait_For_Message_Request_From_Policy_Engine state the Chunked Tx State Machine waits until the \nPolicy Engine sends it a Message Request.\nThe Chunked Tx State Machine Shall transition to the TCH_Pass_Down_Message state when: \n\nA non-Extended Message Request is received from the Policy Engine, or\n\nA Message Request is received from the Policy Engine and the link is not Chunking.\nTCH_Sending_\nChunked_Message\nActions on entry:\nTCH_ Wait_ For_Message_Request_From_Policy_Engine\nActions on entry:\nClear Abort Flag\nTCH_Pass_Down_Message\nActions on entry:\nPass Message to Protocol Layer\nTCH_Construct_\nChunked_Message\nActions on entry:\nConstruct Message Chunk and pass \nto Protocol Layer\nTCH_Wait_For_\nTransmision_Complete\nActions on entry:\nTCH_Prepare_To_Send_\nChunked_Message  \nActions on entry:\n'Chunk Number To Send' = 0\nTCH_Wait_Chunk_Request\nActions on entry:\nIncrement Chunk Number to Send\nStart ChunkSenderRequestTimer\nTCH_Report_Error\nActions on entry:\nReport Error to Policy Engine\nSoft Reset occured |\nExit from Hard Reset\nStart\nNon-Extended Message Request |\nNot Chunking  \nMessage\nPassed\nMessage Transmitted \nreceived from \nProtocol Layer\nTCH_Message_Sent\nActions on entry:\nInform Policy Engine of Message \nSent\nAny Message Received and \nnot in state \nTCH_Wait_Chunk_Request\nChunking &\nExtended Message Request  \nChunk Number Set\nChunk\nPassed\nMessage Transmitted \nfrom Protocol Layer & \nNot Last Chunk\nTCH_Message_Received\nActions on entry:\nClear Extended Message Buffers\nPass Message to Chunked Rx\nMessage passed \nto Chunked Rx\nMessage Transmitted \nreceived from Protocol Layer & \nLast Chunk\n(Rx Chunking\nState != \nRCH_Wait_For_\nMessage_From_\nProtocol_Layer) &\nAbort  Supported\nAbort Flag Set\nInformed\nChunk Request Rcvd &\nChunk Number = \nChunk Number to Send\nReported\nOther \nMessage\n Received\n(Rx Chunking\nState != \nRCH_Wait_For_\nMessage_From_\nProtocol_Layer) &\nAbort Not Supported\nTx Error from\nProtocol Layer\nChunkSenderRequestTimer\ntimeout & Chunk Number = 0\n(Chunk Request Rcvd &\nChunk Number != \nChunk Number to Send) |\n(ChunkSenderRequestTimer\ntimeout & Chunk Number > 0)\nTransmission\nError\n","image_count":0,"table_count":15}
{"page":282,"text":"Page 282\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Chunked Tx State Machine Shall transition to the TCH_Prepare_To_Send_Chunked_Message state when: \n\nAn Extended Message Request is received from the Policy Engine, and the link is Chunking.\nThe Chunked Tx State Machine Shall Discard the Message Request and remain in the \nTCH_Wait_For_Message_Request_From_Policy_Engine state when: \n\nThe Chunked Rx state is any other than RCH_Wait_For_Message_From_Protocol_Layer, and the \nOptional Abort Flag has not been implemented.\nThe Chunked Tx State Machine Shall Discard the Message Request and enter the TCH_Report_Error state when: \n\nThe Chunked Rx state is any other than RCH_Wait_For_Message_From_Protocol_Layer and the \nOptional Abort Flag has been implemented.\n6.12.2.1.3.2\n  TCH_Pass_Down_Message State\nOn entry to the TCH_Pass_Down_Message state the Chunked Tx State Machine Shall pass the Message to the \nProtocol Layer.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Transmision_Complete state when: \n\nThe Message has been passed to the Protocol Layer.\n6.12.2.1.3.3\n  TCH_Wait_For_Transmision_Complete State\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when: \n\nMessage Transmitted has been received from the Protocol Layer.\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when: \n\nTransmission Error has been received from the Protocol Layer.\n6.12.2.1.3.4\n  TCH_Message_Sent State\nOn entry to the TCH_Message_Sent state the Chunked Tx State Machine Shall:\n\nInform the Policy Engine that the Message has been sent.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state \nwhen: \n\nThe Policy Engine has been informed.\n6.12.2.1.3.5\n  TCH_Prepare_To_Send_Chunked_Message State\nOn entry to the TCH_Prepare_To_Send_Chunked_Message state the Chunked Tx State Machine Shall:\n\nSet 'Chunk Number To Send' to zero.\nThe Chunked Tx State Machine Shall transition to the TCH_Construct_Chunked_Message state when: \n\n‘Chunk Number To Send' has been set to zero.\n6.12.2.1.3.6\n  TCH_Construct_Chunked_Message State\nOn entry to the TCH_Construct_Chunked_Message state the Chunked Tx State Machine Shall:\n\nConstruct a Message Chunk and pass it to the Protocol Layer.\nThe Chunked Tx State Machine Shall transition to the TCH_Sending_Chunked_Message state when: \n\nThe Message Chunk has been passed to the Protocol Layer.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state \nwhen: \n","image_count":0,"table_count":1}
{"page":283,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 283\n\nThe Optional Abort Flag is set.\n6.12.2.1.3.7\n  TCH_Sending_Chunked_Message State\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_Chunk_Request state when: \n\nMessage Transmitted is received from Protocol Layer and this was not the last chunk.\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when: \n\nMessage Transmitted is received from Protocol Layer and this was the last chunk.\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when: \n\nTransmission Error has been received from the Protocol Layer.\n6.12.2.1.3.8\n  TCH_Wait_Chunk_Request State\nOn entry to the TCH_Wait_Chunk_Request state the Chunked Tx State Machine Shall:\n\nIncrement Chunk Number to Send.\n\nStart ChunkSenderRequestTimer.\nThe Chunked Tx State Machine Shall transition to the TCH_Report_Error state when: \n\nA Chunk Request has been received and the Chunk Number does not equal Chunk Number to Send or\n\nChunkSenderRequestTimer has expired and Chunk Number is greater than zero.\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Sent state when: \n\nChunkSenderRequestTimer has expired and Chunk Number equals zero.\nNote:\nThis is the mechanism which allows the remote Port Partner or Cable Plug to omit the Chunking Layer. \nThe Policy Engine will receive a Message Sent signal if the remote Port Partner or Cable Plug is present \n(GoodCRC Message received) but does not send a Chunk Request. After this the remote Port Partner will \nsend a Not_Supported Message, or the Cable Plug will Ignore the Chunked Message.\nThe Chunked Tx State Machine Shall transition to the TCH_Message_Received state when: \n\nAny other Message than Chunk Request is received.\n6.12.2.1.3.9\n  TCH_Message_Received State\nThe Chunked Tx State Machine Shall enter the TCH_Message_Received state:\n\nWhen any Message is received, and the Chunked Tx State Machine is not in the \nTCH_Wait_Chunk_Request state.\nOn entry to the TCH_Message_Received state the Chunked Tx State Machine Shall:\n\nClear the Extended Message Buffers.\n\nPass the received Message to Chunked Rx Engine.\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state \nwhen: \n\nThe received Message has been passed to the Chunked Rx Engine.\n6.12.2.1.3.10\n  TCH_Report_Error State\nOn entry to the TCH_Report_Error state the Chunked Tx State Machine Shall:\n\nReport the error to the Policy Engine.\n","image_count":0,"table_count":1}
{"page":284,"text":"Page 284\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Chunked Tx State Machine Shall transition to the TCH_Wait_For_Message_Request_From_Policy_Engine state \nwhen: \n\nThe error has been reported.\n6.12.2.1.4\n  Chunked Message Router State Diagram\nFigure 6.62, \"Chunked Message Router State Diagram\" shows the state behavior for the Chunked Message Router. \nThis determines to which state machine an incoming Message is routed to (Chunked Rx, Chunked Tx or direct to \nPolicy Engine).\nFigure 6.62 Chunked Message Router State Diagram\n6.12.2.1.4.1\n  RTR_Wait_for_Message_From_Protocol_Layer State\nIn the RTR_Wait_for_Message_From_Protocol_Layer state the Chunked Message Router waits until the Protocol \nLayer sends it a received Message.\nThe Chunked Message Router Shall transition to the RTR_Rx_Chunks state when: \n\nA Message is received from the Protocol Layer, and the combined Chunking is not doing Tx Chunks.\nThe Chunked Message Router Shall transition to the RTR_Tx_Chunks state when:\n\nA Message is received from the Protocol Layer, and the combined Chunking is doing Tx Chunks.\n6.12.2.1.4.2\n  RTR_Rx_Chunks State\nOn entry to the RTR_Rx_Chunks state the Chunked Message Router Shall:\n\nSend the Message to the Chunked Rx State Machine.\n\nTransition to the RTR_Wait_for_Message_From_Protocol_Layer state.\nRTR_Wait_for_Message_From_Protocol_Layer \nActions on entry:\nRTR_Rx_Chunks \nActions on entry:\nSend message to Rx Chunk Machine\nRTR_Tx_Chunks \nActions on entry:\nSend message to Tx Chunk Machine\nMessage Received from \nProtocol Layer &\nNot Doing Tx Chunks1\nMessage Received from \nProtocol Layer &\nDoing Tx Chunks1\nSent\nSoft Reset occured |\nExit from Hard Reset\nStart\nSent\n1)\nDoing Tx Chunks means that Chunked Tx State Machine is not in the TCH_Wait_For_Message_Request_From_Policy_Engine state.\n2)\nMessages are taken to include notification about transmission success or otherwise of Messages.\n","image_count":0,"table_count":5}
{"page":285,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 285\n6.12.2.1.4.3\n  RTR_Tx_Chunks State\nOn entry to the RTR_Tx_Chunks state the Chunked Message Router Shall:\n\nSend the Message to the Chunked Tx State Machine.\n\nTransition to the RTR_Wait_for_Message_From_Protocol_Layer state.\n","image_count":0,"table_count":1}
{"page":286,"text":"Page 286\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.2.2\n  Protocol Layer Message Transmission\n6.12.2.2.1\n  Common Protocol Layer Message Transmission State Diagram\nFigure 6.63, \"Common Protocol Layer Message Transmission State Diagram\" shows the state behavior, common \nbetween the Source and the Sink, for the Protocol Layer when transmitting a Message. \nFigure 6.63 Common Protocol Layer Message Transmission State Diagram\n6.12.2.2.1.1\n  PRL_Tx_PHY_Layer_Reset State\nThe Protocol Layer Shall enter the PRL_Tx_PHY_Layer_Reset state:\n\nAt startup.\n\nAs a result of a Soft Reset request being received by the PHY Layer.\n\nOn exit from a Hard Reset.\nOn entry to the PRL_Tx_PHY_Layer_Reset state the Protocol Layer Shall reset the PHY Layer (clear any outstanding \nMessages and enable communications).\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n\nWhen the PHY Layer reset is complete.\n6.12.2.2.1.2\n  PRL_Tx_Wait_for_Message_Request State \nIn the PRL_Tx_Wait_for_Message_Request state the Protocol Layer waits until the Policy Engine directs it to send \na Message. \n\nOn entry to the PRL_Tx_Wait_for_Message_Request state the Protocol Layer Shall reset the \nRetryCounter.\nMessage request received \nfrom Policy Engine (except Soft Reset)\nMessage sent to \nPHY Layer\nCRCReceiveTimer\nTimeout |\nMessage discarded bus Idle2\nGoodCRC response \nreceived from  PHY Layer\nMessageID mismatch\n(RetryCounter � nRetryCount) &\nnot Cable Plug &\nsmall Extended Message3\n(RetryCounter \n> nRetryCount) |\nCable Plug |\nlarge\nExtended Message3 \nPolicy Engine informed \nof Transmission Error\nMessageID match\nPolicy Engine \ninformed\nmessage sent\nPRL_Tx_Check_RetryCounter\nActions on entry:\nIf DFP or UFP increment and check \nRetryCounter\nPRL_Tx_Transmission_Error\nActions on entry:\nIncrement MessageIDCounter\nInform Policy Engine of \nTransmission Error\nPRL_Tx_Construct_Message\nActions on entry:\nConstruct message\nPass message to PHY Layer\nPRL_Tx_Wait_for_PHY_response\nActions on entry:\nInitialize and run CRCReceiveTimer1\nPRL_Tx_Match_MessageID\nActions on entry:\nMatch MessageIDCounter and \nresponse MessageID\nSoft Reset Message request received \nfrom Policy Engine\nLayer Reset Complete\nPRL_Tx_Message_Sent\nActions on entry:\nIncrement MessageIDCounter\nInform Policy Engine message sent\nPRL_Tx_Layer_Reset_for_Transmit\nActions on entry:\nReset MessageIDCounter.\nProtocol Layer message reception transitions to \nPRL_Rx_Wait_for_PHY_Message state.\nPRL_Tx_Wait_for_Message_Request\nActions on entry:\nReset RetryCounter\nPRL_Tx_Discard_Message\nActions on entry:\nIf any message is currently awaiting \ntransmission Discard4 and \nincrement MessageID Counter\nDiscarding\ncomplete\nProtocol Layer\nmessage reception\nin PRL_Rx_Store_MessageID state |\nFast Role Swap signal transmitted |\nFast Role Swap signal detected  \nStart\nSoft Reset Message from PHY Layer |\nExit from Hard Reset\nPRL_Tx_PHY_Layer_Reset\nActions on entry:\nReset PHY Layer\nPHY Layer reset\ncomplete\n1)\nThe CRCReceiveTimer is only started after the PHY has sent the message.  If the message is not sent due to a busy channel, then the CRCReceiveTimer will not be started (see Section 6.6.1 “CRCReceiveTimer”).\n2)\nThis indication is sent by the PHY Layer when a message has been Discarded due to CC being busy, and after CC becomes idle again (see Section 5.7 “Collision Avoidance”).  The CRCReceiveTimer is not running\nin this case since no message has been sent.\n3)\nA “small” Extended Message is either an Extended Message with Data Size ��MaxExtendedMsgLegacyLen bytes or an Extended Message with Data Size > MaxExtendedMsgLegacyLen bytes that has been\nChunked.  A “large” Extended Message is an Extended Message with Data Size > MaxExtendedMsgLegacyLen bytes that has not been Chunked. \n4)\nSee Section 6.11 “Message Discarding” for details of when Messages are Discarded .\n","image_count":0,"table_count":6}
{"page":287,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 287\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n\nA Message request is received from the Policy Engine which is not a Soft_Reset Message.\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n\nA Message request is received from the Policy Engine which is a Soft_Reset Message.\n6.12.2.2.1.3\n  PRL_Tx_Layer_Reset_for_Transmit State\nOn entry to the PRL_Tx_Layer_Reset_for_Transmit state the Protocol Layer Shall reset the MessageIDCounter. \nThe Protocol Layer Shall transition Protocol Layer Message reception to the PRL_Rx_Wait_for_PHY_Message state \n(see Section 6.12.2.3.1, \"PRL_Rx_Wait_for_PHY_Message state\") in order to reset the stored MessageID.\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n\nThe layer reset actions in this state have been completed.\n6.12.2.2.1.4\n  PRL_Tx_Construct_Message State\nOn entry to the PRL_Tx_Construct_Message state the Protocol Layer Shall construct the Message requested by the \nPolicy Engine, or resend a previously constructed Message, and then pass this Message to the PHY Layer.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_PHY_Response state when:\n\nThe Message has been sent to the PHY Layer.\n6.12.2.2.1.5\n  PRL_Tx_Wait_for_PHY_Response State\nOn entry to the PRL_Tx_Wait_for_PHY_Response state, once the Message has been sent, the Protocol Layer Shall \ninitialize and run the CRCReceiveTimer (see Section 6.6.1, \"CRCReceiveTimer\").\nThe Protocol Layer Shall transition to the PRL_Tx_Match_MessageID state when:\n\nA GoodCRC Message response is received from the PHY Layer.\nThe Protocol Layer Shall transition to the PRL_Tx_Check_RetryCounter state when:\n\nThe CRCReceiveTimer times out.\n\nOr the PHY Layer indicates that a Message has been Discarded due to the channel being busy but the \nchannel is now Idle (see Section 5.7, \"Collision Avoidance\").\n6.12.2.2.1.6\n  PRL_Tx_Match_MessageID State\nOn entry to the PRL_Tx_Match_MessageID state the Protocol Layer Shall compare the MessageIDCounter and the \nMessageID of the received GoodCRC Message.\nThe Protocol Layer Shall transition to the PRL_Tx_Message_Sent state when:\n\nThe MessageIDCounter and the MessageID of the received GoodCRC Message match.\nThe Protocol Layer Shall transition to the PRL_Tx_Check_RetryCounter state when:\n\nThe MessageIDCounter and the MessageID of the received GoodCRC Message do not match.\n6.12.2.2.1.7\n  PRL_Tx_Message_Sent State\nOn entry to the PRL_Tx_Message_Sent state the Protocol Layer Shall increment the MessageIDCounter and inform \nthe Policy Engine that the Message has been sent.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n\nThe Policy Engine has been informed that the Message has been sent.\n","image_count":0,"table_count":1}
{"page":288,"text":"Page 288\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.2.2.1.8\n  PRL_Tx_Check_RetryCounter State\nOn entry to the PRL_Tx_Check_RetryCounter state the Protocol Layer in a DFP or UFP Shall increment the value of \nthe RetryCounter and then check it in order to determine whether it is necessary to retry sending the Message.\nNote:\nCable Plugs do not retry Messages and so do not use the RetryCounter.\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state in order to retry Message sending \nwhen:\n\nRetryCounter ≤ nRetryCount and\n\nThis is not a Cable Plug and\n\nThis is an Extended Message with Data Size ≤ MaxExtendedMsgLegacyLen or \n\nThis is an Extended Message that has been Chunked.\nThe Protocol Layer Shall transition to the PRL_Tx_Transmission_Error state when:\n\nRetryCounter > nRetryCount or\n\nThis is a Cable Plug, which does not retry.\n\nThis is an Extended Message with Data Size > MaxExtendedMsgLegacyLen that has not been Chunked.\n6.12.2.2.1.9\n  PRL_Tx_Transmission_Error State\nOn entry to the PRL_Tx_Transmission_Error state the Protocol Layer Shall increment the MessageIDCounter and \ninform the Policy Engine of the transmission error.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n\nThe Policy Engine has been informed of the transmission error.\n6.12.2.2.1.10\n  PRL_Tx_Discard_Message State\nProtocol Layer Message transmission Shall enter the PRL_Tx_Discard_Message state whenever:\n\nProtocol Layer Message reception receives an incoming Message or\n\nThe Fast Role Swap Request is being transmitted (see Section 5.8.5.6, \"Fast Role Swap Transmission\")\n\nThe Fast Role Swap Request is detected (see Section 5.8.6.3, \"Fast Role Swap Detection\").\nOn entry to the PRL_Tx_Discard_Message state, if there is a Message queued awaiting transmission, the Protocol \nLayer Shall Discard the Message according to the rules in Section 6.11, \"Message Discarding\" and increment the \nMessageIDCounter.\nThe Protocol Layer Shall transition to the PRL_Tx_PHY_Layer_Reset state when:\n\nDiscarding is complete i.e., the Message queue is empty.\n","image_count":0,"table_count":1}
{"page":289,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 289\n6.12.2.2.2\n  Source Protocol Layer Message Transmission State Diagram\nFigure 6.64, \"Source Protocol Layer Message Transmission State Diagram\" shows the state behavior for the Protocol \nLayer in a Source when transmitting a Message.\nFigure 6.64 Source Protocol Layer Message Transmission State Diagram\nPRL_Tx_Wait_for_Message_Request\nPRL_Tx_Src_Sink_Tx\nActions on entry:\nSet Rp = SinkTxOk\nEnd of AMS notification received \nfrom Policy Engine\nStart of AMS notification\nreceived from Policy Engine\nPRL_Tx_Src_Pending\nActions on entry:\nStart SinkTxTimer\nPRL_Tx_Layer_Reset_for_Transmit\nPRL_Tx_Construct_Message\nSoft Reset Message pending &\nSinkTxTimer timeout\nMessage pending (except Soft Reset) &\nSinkTxTimer timeout\nRp set\nPRL_Tx_Src_Source_Tx\nActions on entry:\nSet Rp = SinkTxNG\nMessage request \nfrom Policy Engine\n","image_count":34,"table_count":7}
{"page":290,"text":"Page 290\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.2.2.2.1\n  PRL_Tx_Src_Sink_Tx State\nIn the PRL_Tx_Src_Sink_Tx state the Source sets Rp to SinkTxOK allowing the Sink to start an Atomic Message \nSequence (AMS). \nThe Protocol Layer in a Source Shall transition from the PRL_Tx_Wait_for_Message_Request state to the \nPRL_Tx_Src_Sink_Tx state when:\n\nA notification is received from the Policy Engine that the end of an AMS has been reached.\nOn entry to the PRL_Tx_Src_Sink_Tx state the Protocol Layer Shall request the PHY Layer to Rp to SinkTxOK.\nThe Protocol Layer Shall transition to the PRL_Tx_Wait_for_Message_Request state when:\n\nRp has been set.\n6.12.2.2.2.2\n  PRL_Tx_Src_Source_Tx State\nIn the PRL_Tx_Src_Source_Tx state the Source sets Rp to SinkTxNG allowing the Source to start an Atomic Message \nSequence (AMS). \nThe Protocol Layer in a Source Shall transition from the PRL_Tx_Wait_for_Message_Request state to the \nPRL_Tx_Src_Source_Tx state when:\n\nA notification is received from the Policy Engine that an AMS will be starting.\nOn entry to the PRL_Tx_Src_Source_Tx state the Protocol Layer Shall set Rp to SinkTxNG.\nThe Protocol Layer Shall transition to the PRL_Tx_Src_Pending state when:\n\nA Message request is received from the Policy Engine.\n6.12.2.2.2.3\n  PRL_Tx_Src_Pending State\nIn the PRL_Tx_Src_Pending state the Protocol Layer has a Message buffered ready for transmission. \nOn entry to the PRL_Tx_Src_Pending state the SinkTxTimer Shall be initialized and run.\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n\nThe pending Message request from the Policy Engine is not a Soft_Reset Message and\n\nThe SinkTxTimer times out.\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n\nThe pending Message request from the Policy Engine is a Soft_Reset Message and\n\nThe SinkTxTimer times out.\n","image_count":0,"table_count":1}
{"page":291,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 291\n6.12.2.2.3\n  Sink Protocol Layer Message Transmission State Diagram\nFigure 6.65, \"Sink Protocol Layer Message Transmission State Diagram\" shows the state behavior for the Protocol \nLayer in a Sink when transmitting a Message.\nFigure 6.65 Sink Protocol Layer Message Transmission State Diagram\n6.12.2.2.3.1\n  PRL_Tx_Snk_Start_of_AMS State\nIn the PRL_Tx_Snk_Start_of_AMS state the Protocol Layer waits for the first Message in a Sink initiated AMS.\nThe Protocol Layer in a Sink Shall transition from the PRL_Tx_Wait_for_Message_Request state to the \nPRL_Tx_Snk_Start_of_AMS state when:\n\nA notification is received from the Policy Engine that the next Message the Sink will send is the start of \nan AMS.\nThe Protocol Layer Shall transition to the PRL_Tx_Snk_Pending state when:\n\nA Message request is received from the Policy Engine.\nPRL_Tx_Wait_for_Message_Request\nFirst Message in AMS notification received \nfrom Policy Engine\nPRL_Tx_Snk_Pending\nActions on entry:\nPRL_Tx_Layer_Reset_for_Transmit\nPRL_Tx_Construct_Message\nSoft Reset Message pending\nMessage pending (except Soft Reset) &\nRp = SinkTxOk\nPRL_Tx_Snk_Start_of_AMS\nActions on entry:\nMessage Request from Policy Engine\n","image_count":20,"table_count":5}
{"page":292,"text":"Page 292\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.2.2.3.2\n  PRL_Tx_Snk_Pending State\nIn the PRL_Tx_Snk_Pending state the Protocol Layer has the first Message in a Sink initiated AMS ready to send and \nis waiting for Rp to transition to SinkTxOK before sending the Message.\nThe Protocol Layer Shall transition to the PRL_Tx_Construct_Message state when:\n\nA Message is Pending that is not a Soft_Reset Message and\n\nRp is set to SinkTxOK.\nThe Protocol Layer Shall transition to the PRL_Tx_Layer_Reset_for_Transmit state when:\n\nA Soft_Reset Message is pending.\n","image_count":0,"table_count":1}
{"page":293,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 293\n6.12.2.3\n  Protocol Layer Message Reception\nFigure 6.66, \"Protocol layer Message reception\" shows the state behavior for the Protocol Layer when receiving a \nMessage. \nFigure 6.66 Protocol layer Message reception\n6.12.2.3.1\n  PRL_Rx_Wait_for_PHY_Message state\nThe Protocol Layer Shall enter the PRL_Rx_Wait_for_PHY_Message state:\n\nAt startup.\n\nAs a result of a Soft Reset request from the Policy Engine.\n\nOn exit from a Hard Reset. \nIn the PRL_Rx_Wait_for_PHY_Message state the Protocol Layer waits until the PHY Layer passes up a received \nMessage.\nThe Protocol Layer Shall transition to the PRL_Rx_Send_GoodCRC state when:\n\nA Message is passed up from the PHY Layer.\nThe Protocol Layer Shall transition to the PRL_Rx_Layer_Reset_for_Receive state when:\n\nA Soft_Reset Message is received from the PHY Layer.\nMessage received \nfrom PHY (except Soft Reset)\nMessage passed to\nPolicy Engine\n(GoodCRC sent | Message discarded bus Idle1)\nMessageID <> stored\n MessageID | \nno stored value\nMessageID = stored\n MessageID\nStart\nPRL_Rx_Send_GoodCRC\nActions on entry:\nSend GoodCRC message to PHY\nPRL_Rx_Store_MessageID\nActions on entry:\nProtocol Layer message transmission transitions \nto PRL_Tx_Discard_Message state2.\nStore new MessageID\nPass message to Policy Engine3\nPRL_Rx_Wait_for_PHY_message\nActions on entry:\nPRL_Rx_Check_MessageID\nActions on entry:\nIf there is a stored value compare \nMessageID with stored value.\nSoft Reset Message received \nfrom PHY\nSoft Reset complete\nPRL_Rx_Layer_Reset_for_Receive\nActions on entry:\nReset MessageIDCounter and clear stored MessageID value\nProtocol Layer message transmission transitions to \nPRL_Tx_PHY_Layer_Reset state.\nSoft Reset request from Policy Engine |\nExit from Hard Reset\nMessage discarded bus Idle1\n1)\nThis indication is sent by the PHY when a message has been Discarded due to CC being busy, and after CC becomes idle again \n(see Section 5.7 “Collision Avoidance”).  Two alternate allowable transitions are shown.\n2)\nIn the case of a Ping message being received, in order to maintain robust communications in the presence of collisions, the outgoing message Should\nNot be Discarded.\n3)\nSee Section 6.11 “Message Discarding” for details of when Messages are discarded.\n","image_count":0,"table_count":3}
{"page":294,"text":"Page 294\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.2.3.2\n  PRL_Rx_Layer_Reset_for_Receive state\nOn entry to the PRL_Rx_Layer_Reset_for_Receive state the Protocol Layer Shall reset the MessageIDCounter and \nclear the stored MessageID. The Protocol Layer Shall transition Protocol Layer Message transmission to the \nPRL_Tx_Wait_for_Message_Request state (see Section 6.12.2.2.1.2, \"PRL_Tx_Wait_for_Message_Request State\").\nThe Protocol Layer Shall transition to the PRL_Rx_Send_GoodCRC State when:\n\nThe Soft Reset actions in this state have been completed.\n6.12.2.3.3\n  PRL_Rx_Send_GoodCRC state\nOn entry to the PRL_Rx_Send_GoodCRC state the Protocol Layer Shall construct a GoodCRC Message and request \nthe PHY Layer to transmit it.\nThe Protocol Layer Shall transition to the PRL_Rx_Check_MessageID state when:\n\nThe GoodCRC Message has been passed to the PHY Layer.\nWhen the PHY Layer indicates that a Message has been Discarded due to CC being busy but CC is now Idle (see \nSection 5.7, \"Collision Avoidance\"), the Protocol Layer Shall either:\n\nTransition to the PRL_Rx_Check_MessageID state or\n\nTransition to the PRL_Rx_Wait_for_PHY_Message state.\n6.12.2.3.4\n  PRL_Rx_Check_MessageID state\nOn entry to the PRL_Rx_Check_MessageID state the Protocol Layer Shall compare the MessageID of the received \nMessage with its stored value if a value has previously been stored. \nThe Protocol Layer Shall transition to the PRL_Rx_Wait_for_PHY_Message state when:\n\nThe MessageID of the received Message equals the stored MessageID value since this is a Message retry \nwhich Shall be Discarded.\nThe Protocol Layer Shall transition to the PRL_Rx_Store_MessageID state when:\n\nThe MessageID of the received Message does not equal the stored MessageID value since this is a new \nMessage or\n\nThis is the first received Message and no MessageID value is currently stored.\n6.12.2.3.5\n  PRL_Rx_Store_MessageID state\nOn entry to the PRL_Rx_Store_MessageID state the Protocol Layer Shall transition Protocol Layer Message \ntransmission to the PRL_Tx_Discard_Message state, replace the stored value of MessageID with the value of \nMessageID in the received Message and pass the Message up to the Policy Engine.\nThe Protocol Layer Shall transition to the PRL_Rx_Wait_for_PHY_Message state when:\n\nThe Message has been passed up to the Policy Engine.\n6.12.2.4\n  Hard Reset operation\nFigure 6.57, \"Outline of States\" shows the state behavior for the Protocol Layer when receiving a Hard Reset or Cable \nReset request from the Policy Engine or Hard Reset Signaling or Cable Reset Signaling from the PHY Layer (see also \nSection 6.8.3, \"Hard Reset\" and Section 6.8.4, \"Cable Reset\").\n","image_count":0,"table_count":1}
{"page":295,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 295\nFigure 6.67 Hard/Cable Reset\n6.12.2.4.1\n  PRL_HR_Reset_Layer state\nThe PRL_HR_Reset_Layer State defines the mode of operation of both the Protocol Layer transmission and \nreception state machines during a Hard Reset or Cable Reset. During Hard Reset no USB Power Delivery Protocol \nMessages are sent or received; only Hard Reset Signaling is present after which the communication channel is \nassumed to have been disabled by the PHY Layer until completion of the Hard Reset. During Cable Reset no USB \nPower Delivery Protocol Messages are sent to or received by the Cable Plug but other USB Power Delivery \ncommunication May continue.\nThe Protocol Layer Shall enter the PRL_HR_Reset_Layer state from any other state when:\n\nA Hard Reset Request is received from the Policy Engine or\n\nHard Reset Signaling is received from the PHY Layer or \nHard Reset request received from Policy Engine2 |\nCable Reset request received from Policy Engine4 |\nHard Reset signalling received By PHY Layer |\nCable Reset signalling received By PHY Layer3\nPHY Hard Reset request sent |\nPHY Cable Reset request sent\nHard Reset complete from Policy Engine |\nCable Reset complete from Policy Engine\nPhysical Layer informed\nPRL_HR_Request_Hard_Reset\nActions on entry:\nRequest PHY to perform a Hard Reset or \nCable Reset\nPRL_HR_Reset_Layer\nActions on entry:\nReset MessageIDCounter.\nProtocol Layer message transmission transitions to \nPRL_Tx_Wait_For_Message_Request state.\nProtocol Layer message reception transitions to \nPRL_Rx_Wait_for_PHY_Message state.\nProtocol Layer reset complete &\n(Hard Reset was Initiated by Policy Engine |\nCable Reset was Initiated by Policy Engine)\nPolicy Engine informed\nProtocol Layer reset complete &\n(Hard Reset was initiated by Port Partner |\nCable Reset received by Cable Plug)\nPRL_HR_Indicate_Hard_Reset\nActions on entry:\nInform the Policy Engine of the Hard \nReset or Cable Reset\nExit from Hard Reset\nPolicy Engine informed\nPRL_HR_PHY_Hard_Reset_Requested\nActions on entry:\nInform Policy Engine Hard Reset or Cable Reset \nrequest has been sent\nPRL_HR_Wait_For_PE_Hard_Reset_Complete\nActions on entry:\nWait for Hard Reset or Cable Reset complete indication from \nPolicy Engine.\nPRL_HR_PE_Hard_Reset_Complete\nActions on entry:\nInform Physical Layer Hard Reset or Cable \nReset is complete\nPRL_HR_Wait_For_PHY_Hard_Reset_Complete\nActions on entry:\nStart HardResetCompleteTimer\nWait for Hard Reset or Cable Reset complete \nindication from PHY\nHard Reset complete from PHY |\nCable Reset complete from PHY |\nHardResetCompleteTimer timeout1\n1)\nIf the HardResetCompleteTimer timeout occurs this means that the PHY is still waiting to send the Hard Reset due to a non-idle channel.  This condition will be cleared once the PE Hard Reset is completed.\n2)\nCable Plugs do not generate Hard Reset signaling but are required to monitor for Hard Reset signaling between the Port Partners and respond by resetting.\n3)\nCable Reset signaling is only recognized by a Cable Plug.\n4)\nCable Reset signaling cannot be generated by Cable Plugs.\n","image_count":0,"table_count":6}
{"page":296,"text":"Page 296\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nA Cable Reset Request is received from the Policy Engine or\n\nCable Reset Signaling is received from the PHY Layer.\nOn entry to the PRL_HR_Reset_Layer state the Protocol Layer Shall reset the MessageIDCounter. It Shall also reset \nthe states of the Protocol Layer transmission and reception state machines to their starting points. The Protocol \nLayer transmission state machine Shall transition to the PRL_Tx_Wait_for_Message_Request state. The Protocol \nLayer reception state machine Shall transition to the PRL_Rx_Wait_for_PHY_Message state.\nThe Protocol Layer Shall transition to the PRL_HR_Request_Hard_Reset state when:\n\nThe Protocol Layer's reset is complete and\n\nThe Hard Reset request has originated from the Policy Engine or\n\nThe Cable Reset request has originated from the Policy Engine.\nThe Protocol Layer Shall transition to the PRL_HR_Indicate_Hard_Reset state when:\n\nThe Protocol Layer's reset is complete and\n\nThe Hard Reset request has been passed up from the PHY Layer or\n\nA Cable Reset request has been passed up from the PHY Layer (Cable Plug only).\n6.12.2.4.2\n  PRL_HR_Indicate_Hard_Reset state\nOn entry to the PRL_HR_Indicate_Hard_Reset state the Protocol Layer Shall indicate to the Policy Engine that \neither Hard Reset Signaling or Cable Reset Signaling has been received.\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PE_Hard_Reset_Complete state when:\n\nThe indication to the Policy Engine has been sent.\n6.12.2.4.3\n  PRL_HR_Request_Hard_Reset state\nOn entry to the PRL_HR_Request_Hard_Reset state the Protocol Layer Shall request the PHY Layer to send either \nHard Reset Signaling or Cable Reset Signaling.\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PHY_Hard_Reset_Complete state when:\n\nThe PHY Layer Hard Reset Signaling request has been sent or\n\nThe PHY Layer Cable Reset Signaling request has been sent.\n6.12.2.4.4\n  PRL_HR_Wait_for_PHY_Hard_Reset_Complete state\nIn the PRL_HR_Wait_for_PHY_Hard_Reset_Complete state the Protocol Layer Shall start the \nHardResetCompleteTimer and wait for the PHY Layer to indicate that the Hard Reset or Cable Reset has been \ncompleted.\nThe Protocol Layer Shall transition to the PRL_HR_PHY_Hard_Reset_Requested state when:\n\nA Hard Reset complete indication is received from the PHY Layer or\n\nA Cable Reset complete indication is received from the PHY Layer or\n\nThe HardResetCompleteTimer times out.\n6.12.2.4.5\n  PRL_HR_PHY_Hard_Reset_Requested state\nOn entry to the PRL_HR_PHY_Hard_Reset_Requested state the Protocol Layer Shall inform the Policy Engine that \nthe PHY Layer has been requested to perform a Hard Reset or Cable Reset.\nThe Protocol Layer Shall transition to the PRL_HR_Wait_for_PE_Hard_Reset_Complete state when:\n","image_count":0,"table_count":1}
{"page":297,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 297\n\nThe Indication to the Policy Engine has been sent.\n6.12.2.4.6\n  PRL_HR_Wait_for_PE_Hard_Reset_Complete state\nIn the PRL_HR_Wait_for_PE_Hard_Reset_Complete state the Protocol Layer Shall wait for the Policy Engine to \nindicate that the Hard Reset or Cable Reset has been completed.\nThe Protocol Layer Shall transition to the PRL_HR_PE_Hard_Reset_Complete state when:\n\nA Hard Reset complete indication is received from the Policy Engine or\n\nA Cable Reset complete indication is received from the Policy Engine.\n6.12.2.4.7\n  PRL_HR_PE_Hard_Reset_Complete\nOn entry to the PRL_HR_PE_Hard_Reset_Complete state the Protocol Layer Shall inform the PHY Layer that the \nHard Reset or Cable Reset is complete.\nThe Protocol Layer Shall exit from the Hard Reset and return to normal operation when:\n\nThe PHY Layer has been informed that the Hard Reset is complete so that it will re-enable the \ncommunications channel. If Hard Reset Signaling is still pending due to a non-Idle channel this Shall be \ncleared and not sent or\n\nThe PHY Layer has been informed that the Cable Reset is complete.\n","image_count":0,"table_count":1}
{"page":298,"text":"Page 298\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n6.12.3\n  List of Protocol Layer States\nTable 6.75, \"Protocol Layer States\" lists the states used by the various state machines.\nTable 6.75  Protocol Layer States\nState Name\nSection\nProtocol Layer Message Transmission\nCommon Protocol Layer Message Transmission\nPRL_Tx_PHY_Layer_Reset\nSection 6.12.2.2.1.1\nPRL_Tx_Wait_for_Message_Request\nSection 6.12.2.2.1.2\nPRL_Tx_Layer_Reset_for_Transmit\nSection 6.12.2.2.1.3\nPRL_Tx_Construct_Message\nSection 6.12.2.2.1.4\nPRL_Tx_Wait_for_PHY_Response\nSection 6.12.2.2.1.5\nPRL_Tx_Match_MessageID\nSection 6.12.2.2.1.6\nPRL_Tx_Message_Sent\nSection 6.12.2.2.1.7\nPRL_Tx_Check_RetryCounter\nSection 6.12.2.2.1.8\nPRL_Tx_Transmission_Error\nSection 6.12.2.2.1.9\nPRL_Tx_Discard_Message\nSection 6.12.2.2.1.10\n Source Protocol Layer Message Transmission\nPRL_Tx_Src_Sink_Tx\nSection 6.12.2.2.2.1\nPRL_Tx_Src_Source_Tx\nSection 6.12.2.2.2.2\nPRL_Tx_Src_Pending\nSection 6.12.2.2.2.3\nSink Protocol Layer Message Transmission\nPRL_Tx_Snk_Start_of_AMS\nSection 6.12.2.2.3.1\nPRL_Tx_Snk_Pending\nSection 6.12.2.2.3.2\nProtocol Layer Message Reception\nPRL_Rx_Wait_for_PHY_Message\nSection 6.12.2.3.1\nPRL_Rx_Layer_Reset_for_Receive\nSection 6.12.2.3.2\nPRL_Rx_Send_GoodCRC\nSection 6.12.2.3.3\nPRL_Rx_Check_MessageID\nSection 6.12.2.3.4\nPRL_Rx_Store_MessageID\nSection 6.12.2.3.5\nHard Reset Operation\nPRL_HR_Reset_Layer\nSection 6.12.2.4.1\nPRL_HR_Indicate_Hard_Reset\nSection 6.12.2.4.2\nPRL_HR_Request_Hard_Reset\nSection 6.12.2.4.3\nPRL_HR_Wait_for_PHY_Hard_Reset_Complete\nSection 6.12.2.4.4\nPRL_HR_PHY_Hard_Reset_Requested\nSection 6.12.2.4.5\nPRL_HR_Wait_for_PE_Hard_Reset_Complete\nSection 6.12.2.4.6\nPRL_HR_PE_Hard_Reset_Complete\nSection 6.12.2.4.7\n","image_count":0,"table_count":2}
{"page":299,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 299\nChunking\nChunked Rx\nRCH_Wait_For_Message_From_Protocol_Layer\nSection 6.12.2.2.1.1\nRCH_Pass_Up_Message\nSection 6.12.2.2.1.1\nRCH_Processing_Extended_Message\nSection 6.12.2.2.1.1\nRCH_Requesting_Chunk\nSection 6.12.2.2.1.1\nRCH_Waiting_Chunk\nSection 6.12.2.2.1.1\nRCH_Report_Error\nSection 6.12.2.2.1.1\nChunked Tx\nTCH_Wait_For_Message_Request_From_Policy_Engine\nSection 6.12.2.1.3.1\nTCH_Pass_Down_Message\nSection 6.12.2.1.3.2\nTCH_Wait_For_Transmision_Complete\nSection 6.12.2.1.3.3\nTCH_Message_Sent\nSection 6.12.2.1.3.4\nTCH_Prepare_To_Send_Chunked_Message\nSection 6.12.2.1.3.5\nTCH_Construct_Chunked_Message\nSection 6.12.2.1.3.6\nTCH_Sending_Chunked_Message\nSection 6.12.2.1.3.7\nTCH_Wait_Chunk_Request\nSection 6.12.2.1.3.8\nTCH_Message_Received\nSection 6.12.2.1.3.9\nTCH_Report_Error\nSection 6.12.2.1.3.10\nChunked Message Router\nRTR_Wait_for_Message_From_Protocol_Layer\nSection 6.12.2.1.4.1\nRTR_Rx_Chunks\nSection 6.12.2.1.4.2\nRTR_Tx_Chunks\nSection 6.12.2.1.4.3\nTable 6.75  Protocol Layer States (Continued)\nState Name\nSection\n","image_count":0,"table_count":2}
{"page":300,"text":"Page 300\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\n6.13\n  Message Applicability\nThe following tables outline the Messages supported by a given Port, depending on its capability. \nWhen a Message is supported the feature and the AMS implied by the Message Shall also be supported. The \nabbreviations in Table 6.76, \"Message Applicability Abbreviations\" are used in this section to denote the level of \nsupport required.\nFor the case of Conditional Normative a note has been added to indicate the condition. \"CN/\" notation is used to \nindicate the level of support when the condition is not present.\n\"R/\" and \"O/\" notation is used to indicate the response when the Recommended or Optional Message is not \nsupported.\nNote:\nWhere NS/R/NK is indicated for Received Messages this Shall apply to the PE_CBL_Ready, \nPE_SNK_Ready or PE_SRC_Ready states only since unexpected Messages received during an AMS are Pro-\ntocol Errors (see Section 6.8.1, \"Soft Reset and Protocol Error\").\nThis section covers Control Message and Data Message support for Sources, Sink and Cable Plugs. It also covers VDM \nCommand support for DFPs, UFPs and Cable Plugs.\nTable 6.76  Message Applicability Abbreviations\nAbbreviation\nMeaning\nDescription\nN\nNormative\nShall be supported by this Port/Cable Plug.\nCN\nConditional Normative\nShall supported by a given Port/Cable Plug based on \nfeatures.\nR\nRecommended\nShould be supported by this Port/Cable Plug.\nO\nOptional\nMay be supported by this Port/Cable Plug.\nNS\nNot Supported\nShall result in a Not_Supported Message response by this \nPort/Cable Plug when received.\nI\nIgnore\nShall be Ignored by this Port/Cable Plug when received.\nNK\nNAK\nThis Port/Cable Plug Shall return Responder NAK to this \nCommand when received.\nNA\nNot allowed\nShall Not be transmitted by this Port/Cable Plug.\nDR\nDon’t Recognize\nThere Shall be no response at all (i.e., not even a GoodCRC \nMessage) from this Port/Cable Plug when received.\n","image_count":0,"table_count":2}
{"page":301,"text":"Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nPage 301\n6.13.1\n  Applicability of Control Messages\nTable 6.77, \"Applicability of Control Messages\" details Control Messages that Shall/Should/Shall Not be transmitted \nand received by a Source, Sink, Cable Plug or VPD. Requirements for Dual-Role Power Ports and Dual-Role Data Ports \nShall override any requirements for Source-only or Sink-Only Ports.\nTable 6.77  Applicability of Control Messages\nMessage Type\nSource\nSink\nDual-Role \nPower\nDual-Role \nData\nCable Plug\nVPD9\nTransmitted Message\nAccept\nN\nN\nN\nN\nData_Reset\nCN10/R\nCN10/R\nNA\nNA\nDR_Swap\nO\nO\nN\nNA\nNA\nFR_Swap\nNA\nNA\nR\nNA\nNA\nGet_Country_Codes\nCN7/NA\nCN7/NA\nNA\nNA\nGet_PPS_Status\nNA\nCN6\nNA\nNA\nGet_Sink_Cap\nR\nNA\nN\nNA\nNA\nGet_Sink_Cap_Extended\nR\nNA\nR\nNA\nNA\nGet_Source_Cap\nNA\nR\nN\nNA\nNA\nGet_Source_Cap_Extended\nNA\nR\nR\nNA\nNA\nGet_Source_Info\nNA\nR\nR\nNA\nNA\nGet_Revision\nR\nR\nNA\nNA\nGet_Status\nR\nR\nNA\nNA\nGoodCRC\nN\nN\nN\nN\nGotoMin (Deprecated)\nNA\nNA\nNA\nNA\nNot_Supported\nN\nN\nNA\nNA\nPing (Deprecated)\nNA\nNA\nNA\nNA\nPR_Swap\nNA\nNA\nN\nNA\nNA\nPS_RDY\nN\nCN1/NA\nN\nNA\nNA\nReject\nN\nO\nO\nO\nCN10/NA\nNA\nSoft_Reset\nN\nN\nNA\nNA\nVCONN_Swap\nR\nR\nNA\nNA\nWait\nO\nNA\nO\nO\nNA\nNA\n1)\nShall be supported by any Port that can supply VCONN.\n2)\nShall be supported products that support the Source_Capabilities_Extended Message.\n3)\nShall be supported by Sources that support the Alert Message.\n4)\nShall be supported when the Fast Role Swap Request is supported.\n5)\nShall be supported when VCONN Swap is supported.\n6)\nShall be supported when SPR PPS Mode is supported.\n7)\nShall be supported when required by a country authority.\n8)\nShall be supported by Active Cables.\n9)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take \nplace when not Connected to a Charger.\n10)\nShall be supported by products that support [USB4].\n11)\nShall be supported by all Sources except single Port SPR Chargers with Invariant PDOs.\n","image_count":0,"table_count":2}
{"page":302,"text":"Page 302\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nReceived Message\nAccept\nN\nN\nN\nN\nI\nI\nData_Reset\nCN10/R\nCN10/R\nI\nI\nDR_Swap\nO/NS\nO/NS\nN\nI\nI\nFR_Swap\nNS\nNS\nCN4/NS\nI\nI\nGet_Country_Codes\nCN7/NS\nCN7/NS\nI\nI\nGet_PPS_Status\nCN6/NS\nNS\nI\nI\nGet_Sink_Cap\nNS\nN\nN\nI\nI\nGet_Sink_Cap_Extended\nNS\nN\nN\nI\nI\nGet_Source_Cap\nN\nNS\nN\nI\nI\nGet_Source_Cap_Extended\nCN2/NS\nNS\nCN2/NS\nI\nI\nGet_Source_Info\nCN11\nNS\nN\nI\nI\nGet_Revision\nN\nN\nO/I\nO/I\nGet_Status\nCN3/NS\nCN3/NS\nCN3/NS\nCN8/I\nI\nGoodCRC\nN\nN\nN\nN\nGotoMin (Deprecated)\nNS\nNS\nI\nI\nNot_Supported\nN\nN\nCN8/I\nI\nPing (Deprecated)\nNS\nNS/I\nI\nI\nPR_Swap\nNS\nNS\nN\nI\nI\nPS_RDY\nCN1/NS\nN\nN\nI\nI\nReject\nCN5/NS\nN\nN\nN\nI\nI\nSoft_Reset\nN\nN\nN\nN\nVCONN_Swap\nCN1/ NS\nCN1/ NS\nI\nI\nWait\nCN5/NS\nN\nN\nN\nI\nI\nTable 6.77  Applicability of Control Messages (Continued)\nMessage Type\nSource\nSink\nDual-Role \nPower\nDual-Role \nData\nCable Plug\nVPD9\n1)\nShall be supported by any Port that can supply VCONN.\n2)\nShall be supported products that support the Source_Capabilities_Extended Message.\n3)\nShall be supported by Sources that support the Alert Message.\n4)\nShall be supported when the Fast Role Swap Request is supported.\n5)\nShall be supported when VCONN Swap is supported.\n6)\nShall be supported when SPR PPS Mode is supported.\n7)\nShall be supported when required by a country authority.\n8)\nShall be supported by Active Cables.\n9)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take \nplace when not Connected to a Charger.\n10)\nShall be supported by products that support [USB4].\n11)\nShall be supported by all Sources except single Port SPR Chargers with Invariant PDOs.\n","image_count":0,"table_count":2}
{"page":303,"text":"Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nPage 303\n6.13.2\n  Applicability of Data Messages\nTable 6.78, \"Applicability of Data Messages\" details Data Messages (except for VDM Commands) that Shall/Should/ \nShall Not be transmitted and received by a Source, Sink, Cable Plug or VPD. Requirements for Dual-Role Power Ports \nShall override any requirements for Source-only or Sink-Only Ports.\nTable 6.78  Applicability of Data Messages\nMessage Type\nSource\nSink\nDual-Role \nPower\nCable\nPlug SOP’\nCable\nPlug SOP’’\nVPD6\nTransmitted Message\nSource_Capabilities\nN\nNA\nN\nNA\nNA\nNA\nRequest\nNA\nN\nNA\nNA\nNA\nGet_Country_Info\nCN5/O\nCN5/O\nNA\nNA\nNA\nBIST\nN1\nN1\nNA\nNA\nNA\nSink_Capabilities\nNA\nN\nN\nNA\nNA\nNA\nBattery_Status\nCN2\nCN2\nNA\nNA\nNA\nAlert\nCN11/R\nCN11/R\nNA\nNA\nNA\nEnter_USB\nCN7/O\nCN7/O\nNA\nNA\nNA\nEPR_Request\nNA\nCN9\nNA\nNA\nNA\nEPR_Mode\nCN9\nCN9\nNA\nNA\nNA\nSource_Info\nCN10\nNA\nN\nNA\nNA\nNA\nRevision\nN\nN\nCN12/O/I\nNA\nO\nReceived Message\nSource_Capabilities\nNS\nN\nN\nI\nI\nI\nRequest\nN\nNS\nI\nI\nI\nGet_Country_Info\nCN5/NS\nCN5/NS\nI\nI\nI\nBIST\nN1\nN1\nN1\nN1\nN1\nSink_Capabilities\nCN4\nNS\nCN4\nI\nI\nI\nBattery_Status\nCN3/NS\nCN3/NS\nI\nI\nI\nAlert\nR/NS\nR/NS\nI\nI\nI\nEnter_USB\nCN7/O\nCN7/O\nCN8/I\nCN8/I\nI\n1)\nFor details of which BIST Modes and BIST Messages Shall be supported see Section 5.9 and Section 6.4.3.\n2)\nShall be supported by products that contain batteries.\n3)\nShallbe supported by products that support the Get_Battery_Status Message.\n4)\nShall be supported by products that support the Get_Sink_Cap Message.\n5)\nShall be supported when required by a country authority.\n6)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take \nplace when not Connected to a Charger.\n7)\nShall be supported by products that support [USB4].\n8)\nShall be supported by Active Cables that support [USB4].\n9)\nShall be supported by products that support Source operation in EPR Mode.\n10)\nShall be supported by all Source Ports except singlePort SPR Chargers with Invariant PDOs.\n11)\nShall be supported when SPR PPS Mode is supported.\n12)\nShall be supported by Active Cables.\n","image_count":0,"table_count":2}
{"page":304,"text":"Page 304\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nEPR_Request\nCN9\nNA\nI\nI\nI\nEPR_Mode\nCN9\nCN9\nI\nI\nI\nSource_Info\nNA\nN\nN\nI\nI\nI\nRevision\nN\nN\nI\nI\nI\nTable 6.78  Applicability of Data Messages (Continued)\nMessage Type\nSource\nSink\nDual-Role \nPower\nCable\nPlug SOP’\nCable\nPlug SOP’’\nVPD6\n1)\nFor details of which BIST Modes and BIST Messages Shall be supported see Section 5.9 and Section 6.4.3.\n2)\nShall be supported by products that contain batteries.\n3)\nShallbe supported by products that support the Get_Battery_Status Message.\n4)\nShall be supported by products that support the Get_Sink_Cap Message.\n5)\nShall be supported when required by a country authority.\n6)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take \nplace when not Connected to a Charger.\n7)\nShall be supported by products that support [USB4].\n8)\nShall be supported by Active Cables that support [USB4].\n9)\nShall be supported by products that support Source operation in EPR Mode.\n10)\nShall be supported by all Source Ports except singlePort SPR Chargers with Invariant PDOs.\n11)\nShall be supported when SPR PPS Mode is supported.\n12)\nShall be supported by Active Cables.\n","image_count":0,"table_count":2}
{"page":305,"text":"Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nPage 305\n6.13.3\n  Applicability of Extended Messages\nTable 6.79, \"Applicability of Extended Messages\" details Extended Messages (except for VDEM Commands) that \nShall/Should/ Shall Not be transmitted and received by a Source, Sink, Cable Plug or VPD. Requirements for Dual-\nRole Power Ports Shall override any requirements for Source-only or Sink-Only Ports.\nTable 6.79  Applicability of Extended Messages\nMessage Type\nSource\nSink\nDual-Role \nPower\nCable\nPlug SOP’\nCable\nPlug SOP’’\nVPD13\nTransmitted Message\nBattery_Capabilities\nCN1/NA\nCN1/NA\nNA\nNA\nNA\nCountry_Codes\nCN10/NA\nCN10/NA\nNA\nNA\nNA\nCountry_Info\nCN10/NA\nCN10/NA\nNA\nNA\nNA\nEPR_Source_Capabilities\nCN14/NA\nNA\nCN14/NA\nNA\nNA\nNA\nEPR_Sink_Capabilities\nNA\nCN14/NA\nCN14/NA\nNA\nNA\nNA\nExtended_Control\nSee Section 6.13.4 for details\nFirmware_Update_Request\nCN7/NA\nCN7/NA\nNA\nNA\nNA\nFirmware_Update_Response\nCN7/NA\nCN7/NA\nCN7/NA\nO\nNA\nGet_Battery_Cap\nR\nR\nNA\nNA\nNA\nGet_Battery_Status\nR\nR\nNA\nNA\nNA\nGet_Manufacturer_Info\nR\nR\nNA\nNA\nNA\nManufacturer_Info\nR\nR\nR\nNA\nNA\nPPS_Status\nCN8/NA\nNA\nNA\nNA\nNA\nSecurity_Request\nCN6/NA\nCN6/NA\nNA\nNA\nNA\nSecurity_Response\nCN6/NA\nCN6/NA\nCN6/NA\nNA\nNA\nSink_Capabilities_Extended\nNA\nN\nN\nNA\nNA\nNA\nSource_Capabilities_Extended\nR\nNA\nR\nNA\nNA\nNA\n1)\nShall be supported by products that contain batteries.\n2)\nShall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3)\nShall be supported by products that can transmit the Get_Status Message.\n4)\nShall be supported by products that can transmit the Get_Battery_Cap Message.\n5)\nShall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6)\nShall be supported by products that support USB security communication as defined in [USBTypeCAuthentication \n1.0].\n7)\nShall be supported by products that support USB firmware update communication as defined in \n[USBPDFirmwareUpdate 1.0].\n8)\nShall be supported when PPS is supported.\n9)\nShall be supported by products that can transmit the Get_PPS_Status Message.\n10)\nShall be supported when required by a country authority.\n11)\nShall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12)\nShall be supported by Active Cables.\n13)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take place \nwhen not Connected to a Charger.\n14)\nShall be supported by products that support operation in EPR Mode.\n15)\nShall be supported by Sources that support the Alert Message.\n","image_count":0,"table_count":2}
{"page":306,"text":"Page 306\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nStatus\nCN15/R\nCN15/R\nCN15/R\nCN12/NA\nCN12/NA\nNA\nVendor_Defined_Extended\nO\nO\nO\nO\nO\nReceived Message\nBattery_Capabilities\nCN4/NS\nCN4/NS\nI\nI\nI\nCountry_Codes\nCN10/NS\nCN10/NS\nI\nI\nI\nCountry_Info\nCN10/NS\nCN10/NS\nI\nI\nI\nEPR_Source_Capabilities\nNS\nCN14/NS\nCN14/NS\nI\nI\nI\nEPR_Sink_Capabilities\nCN14/NS\nNS\nCN14/NS\nI\nI\nI\nExtended_Control\nSee Section 6.13.4 for details\nFirmware_Update_Request\nCN7/NS\nCN7/NS\nCN7/I\nO\nI\nFirmware_Update_Response\nCN7/NS\nCN7/NS\nI\nI\nI\nGet_Battery_Cap\nCN1/NS\nCN1/NS\nI\nI\nI\nGet_Battery_Status\nCN1/NS\nCN1/NS\nI\nI\nI\nGet_Manufacturer_Info\nR/NS\nR/NS\nR/I\nI\nI\nManufacturer_Info\nCN5/NS\nCN5/NS\nI\nI\nI\nPPS_Status\nNS\nCN9/NS\nI\nI\nI\nSecurity_Request\nCN6/NS\nCN6/NS\nCN6/I\nI\nI\nSecurity_Response\nCN6/NS\nCN6/NS\nI\nI\nI\nSink_Capabilities_Extended\nCN11/NS\nNS\nCN11/NS\nI\nI\nI\nSource_Capabilities_Extended\nNS\nCN2/NS\nCN2/NS\nI\nI\nI\nTable 6.79  Applicability of Extended Messages (Continued)\nMessage Type\nSource\nSink\nDual-Role \nPower\nCable\nPlug SOP’\nCable\nPlug SOP’’\nVPD13\n1)\nShall be supported by products that contain batteries.\n2)\nShall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3)\nShall be supported by products that can transmit the Get_Status Message.\n4)\nShall be supported by products that can transmit the Get_Battery_Cap Message.\n5)\nShall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6)\nShall be supported by products that support USB security communication as defined in [USBTypeCAuthentication \n1.0].\n7)\nShall be supported by products that support USB firmware update communication as defined in \n[USBPDFirmwareUpdate 1.0].\n8)\nShall be supported when PPS is supported.\n9)\nShall be supported by products that can transmit the Get_PPS_Status Message.\n10)\nShall be supported when required by a country authority.\n11)\nShall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12)\nShall be supported by Active Cables.\n13)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take place \nwhen not Connected to a Charger.\n14)\nShall be supported by products that support operation in EPR Mode.\n15)\nShall be supported by Sources that support the Alert Message.\n","image_count":0,"table_count":2}
{"page":307,"text":"Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nPage 307\nStatus\nCN33/NS\nCN3/NS\nI\nI\nI\nVendor_Defined_Extended\nO/NS\nO/NS\nO/I\nO/I\nO/I\nTable 6.79  Applicability of Extended Messages (Continued)\nMessage Type\nSource\nSink\nDual-Role \nPower\nCable\nPlug SOP’\nCable\nPlug SOP’’\nVPD13\n1)\nShall be supported by products that contain batteries.\n2)\nShall be supported by products that can transmit the Get_Source_Cap_Extended Message.\n3)\nShall be supported by products that can transmit the Get_Status Message.\n4)\nShall be supported by products that can transmit the Get_Battery_Cap Message.\n5)\nShall be supported by products that can transmit the Get_Manufacturer_Info Message.\n6)\nShall be supported by products that support USB security communication as defined in [USBTypeCAuthentication \n1.0].\n7)\nShall be supported by products that support USB firmware update communication as defined in \n[USBPDFirmwareUpdate 1.0].\n8)\nShall be supported when PPS is supported.\n9)\nShall be supported by products that can transmit the Get_PPS_Status Message.\n10)\nShall be supported when required by a country authority.\n11)\nShall be supported by products that can transmit the Get_Sink_Cap_Extended Message.\n12)\nShall be supported by Active Cables.\n13)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take place \nwhen not Connected to a Charger.\n14)\nShall be supported by products that support operation in EPR Mode.\n15)\nShall be supported by Sources that support the Alert Message.\n","image_count":0,"table_count":2}
{"page":308,"text":"Page 308\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\n6.13.4\n  Applicability of Extended Control Messages\nTable 6.80, \"Applicability of Extended Control Messages\" details Extended Control Messages that Shall/Should/ \nShall Not be transmitted and received by a Source, Sink, Cable Plug or VPD. Requirements for Dual-Role Power Ports \nand Dual-Role Data Ports Shall override any requirements for Source-only or Sink-Only Ports.\nTable 6.80  Applicability of Extended Control Messages\nMessage Type\nSource\nSink\nDual-Role \nPower\nDual-Role \nData\nCable Plug\nVPD2\nTransmitted Message\nEPR_Get_Source_Cap\nNA\nCN1\nCN1\n \nNA\nNA\nEPR_Get_Sink_Cap\nCN1\nNA\nCN1\nNA\nNA\nEPR_KeepAlive\nNA\nCN1\nNA\nNA\nEPR_KeepAlive_Ack\nCN1\nNA\nNA\nNA\nReceived Message\nEPR_Get_Source_Cap\nCN1\nNS\nCN1\nI\nI\nEPR_Get_Sink_Cap\nNS\nCN1\nCN1\nI\nI\nEPR_KeepAlive\nCN1\nNS\nI\nI\nEPR_KeepAlive_Ack\nNS\nCN1\nI\nI\n1)\nShall be supported by products that support EPR Mode.\n2)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-VPD Shall only take \nplace when not Connected to a Charger.\n","image_count":0,"table_count":2}
{"page":309,"text":"Universal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\nPage 309\n6.13.5\n  Applicability of Structured VDM Commands\nTable 6.81, \"Applicability of Structured VDM Commands\" details Structured VDM Commands that Shall/Should/ \nShall Not be transmitted and received by a DFP, UFP, Cable Plug or VPD. If Structured VDMs are not supported, the \nDFP or UFP receiving a VDM Command Shall send a Not_Supported Message in response.\nTable 6.81  Applicability of Structured VDM Commands\nCommand Type\nDFP\nUFP\nCable Plug \nSOP’\nCable Plug \nSOP’’\nVPD4\nTransmitted Command Request\nDiscover Identity\nCN1,6/R\nR2\nNA\nNA\nNA\nDiscover SVIDs\nCN1/O\nO\nNA\nNA\nNA\nDiscover Modes\nCN1/O\nO\nNA\nNA\nNA\nEnter Mode\nCN1/NA\nNA\nNA\nNA\nNA\nExit Mode\nCN1/NA\nNA\nNA\nNA\nNA\nAttention\nO\nO\nNA\nNA\nNA\nReceived Command Request/Transmitted Command Response\nDiscover Identity\nCN5,6/R/\nNK3\nCN1,6/R/\nNK3\nN\nI\nN\nDiscover SVIDs\nO/NK3\nCN1/NK3\nCN1/NK\nI\nNK\nDiscover Modes\nO/NK3\nCN1/NK3\nCN1/NK\nI\nNK\nEnter Mode\nNK3\nCN1/NK3\nCN1/NK\nO\nNK\nExit Mode\nNK3\nCN1/NK3\nCN1/NK\nO\nNK\nAttention\nO/I3\nO/I3\nI\nI\nI\n1)\nShall be supported when Modal Operation is supported.\n2)\nMay be transmitted by a UFP/Source during discovery (see Section 6.4.4.3.1, \"Discover \nIdentity\" and Section 8.3.3.25.3, \"Source Startup Structured VDM Discover Identity of a \nCable Plug State Diagram\").\n3)\nIf Structured VDMs are not supported, the DFP or UFP receiving a VDM Command Shall \nsend a Not_Supported Message in response.\n4)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a CT-\nVPD Shall only take place when not Connected to a Charger.\n5)\nShall be supported by products with more than one DFP.\n6)\nShall be supported by products that support [USB4].\n","image_count":0,"table_count":2}
{"page":310,"text":"Page 310\nUniversal Serial Bus Power Delivery SpecificationRevision 3.2, Version 1.1, 2024-10\n6.13.6\n  Applicability of Reset Signaling\nTable 6.82, \"Applicability of Reset Signaling\" details the Reset that Shall/Should/ Shall Not be transmitted and \nreceived by a DFP/UFP or Cable Plug.\n6.13.7\n  Applicability of Fast Role Swap Request\nTable 6.83, \"Applicability of Fast Role Swap Request\" details the Fast Role Swap Request that Shall/Should/ Shall \nNot be transmitted and received by a Source or Sink.\nTable 6.82  Applicability of Reset Signaling\nReset Type\nDFP\nUFP\nCable Plug\nSOP’\nCable Plug\nSOP’’\nVPD2\nTransmitted Message/Signaling\nSoft_Reset\nN\nN\nNA\nNA\nNA\nHard Reset\nN\nN\nNA\nNA\nNA\nCable Reset\nCN1\nNA\nNA\nNA\nNA\nReceived Message/Signaling\nSoft_Reset\nN\nN\nN\nN\nN\nHard Reset\nN\nN\nN\nN\nN\nCable Reset\nDR\nDR\nN\nN\nN\n1)\nShall be supported when transmission of SOP’ Packets are supported, and the Port \ncan supply VCONN.\n2)\nVPD includes CT-VPDs when not Connected to a Charger. PD communication with a \nCT-VPD Shall only take place when not Connected to a Charger.\nTable 6.83  Applicability of Fast Role Swap Request\nCommand Type\nSource\nSink\nDual-Role Power\nTransmitted Message/Signaling\nFast Role Swap\nNA\nNA\nR\nReceived Message/Signaling\nFast Role Swap\nNA\nNA\nR\n","image_count":0,"table_count":3}
{"page":311,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 311\n6.14\n  Value Parameters\nTable 6.84, \"Value Parameters\" contains value parameters used in this section.\nTable 6.84  Value Parameters\nParameter\nDescription\nValue\nUnit\nReference\nMaxExtendedMsgLen\nMaximum length of an Extended Message as \nexpressed in the Data Size field.\n260\nByte\nSection 6.2.1.2\nMaxExtendedMsgChunkLen\nMaximum length of an Extended Message \nChunk.\n26\nByte\nSection 6.2.1.2\nMaxExtendedMsgLegacyLen\nMaximum length of an Extended Message \nthat can be sent without Chunking.\n26\nByte\nSection 6.2.1.2\n","image_count":0,"table_count":2}
{"page":312,"text":"Page 312\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7\n Power Supply\n7.1\n  Source Requirements\n7.1.1\n  Behavioral Aspects\nA PDUSB Source exhibits the following behaviors:\n\nShall supply [USB Type-C 2.4] USB Type-C® current to VBUS while in a Default Contract or Implicit \nContract.\n\nShall follow the requirements as specified in Section 7.1.5, \"Response to Hard Resets\" when Hard Reset \nSignaling is received.\n\nShall control VBUS voltage transitions as bound by undershoot, overshoot and transition time \nrequirements.\n7.1.2\n  Source Bulk Capacitance\nThe Source bulk capacitance Shall Not be placed between the transceiver isolation impedance and the USB \nreceptacle. The Source bulk capacitance consists of C1 and C2 as shown in Figure 7.1, \"Placement of Source Bulk \nCapacitance\". The Ohmic Interconnect might consist of PCB traces for power distribution or power switching \ndevices. The Ohmic Interconnect might also be part of the circuit implemented by the Source to limit its VBUS Output \nVoltage Limit (OVL) as described in Section 7.1.7.5, \"Output Voltage Limit\". Though a Source Shall limit its output \nvoltage, a Sink Shall implement Sink OVP as described in Section 7.2.9.2, \"Input Over Voltage Protection\" to protect \nagainst excessive VBUS input voltage. The capacitance might be a single capacitor, a capacitor bank or distributed \ncapacitance. If the power supply is shared across multiple ports, the bulk capacitance is defined as \ncSrcBulkShared. If the power supply is dedicated to a single Port, the minimum bulk capacitance is defined as \ncSrcBulk.\nThe Source bulk capacitance is allowed to change for a newly Negotiated power level. The capacitance change Shall \noccur before the Source is ready to operate at the new power level. During a Power Role Swap, the Initial Source \nShall transition to Swap Standby before operating as the New Sink. Any change in bulk capacitance required to \ncomplete the Power Role Swap Shall occur during Swap Standby.\nFigure 7.1 Placement of Source Bulk Capacitance\n7.1.3\n   Types of Sources\nConsistent with the Power Data Objects discussed in Section 6.4.1, \"Capabilities Message\", the power supply types \nthat are available as Sources in a USB Power Delivery System are:\n\nThe Fixed Supply PDO exposes well-regulated fixed voltage power supplies. Sources Shall support at \nleast one Fixed Supply capable of supplying vSafe5V. The output voltage of a Fixed Supply Shall remain \nC2\nOhmic  \nInterconnect\nGND\nSHIELD\nVBUS\n...\nData\nLines\nGND\nSHIELD\nVBUS\n...\nData\nLines\nSOURCE\nCABLE\nC1\nPower\nSupply\nSource Bulk Capacitance\nOVL\n","image_count":0,"table_count":2}
{"page":313,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 313\nwithin the range defined by the relative tolerance vSrcNew and the absolute band vSrcValid as listed \nin Table 7.23, \"Source Electrical Parameters\" and described in Section 7.1.8, \"Output Voltage Tolerance \nand Range\".\n\nThe Variable Supply (non-Battery) PDO exposes less well-regulated Sources. The output voltage of a \nVariable Supply (non-Battery) Shall remain within the absolute maximum output voltage and the \nabsolute minimum output voltage exposed in the Variable Supply PDO.\n\nThe Battery Supply PDO exposes Batteries than can be connected directly as a Source to VBUS. The output \nvoltage of a Battery Supply Shall remain within the absolute maximum output voltage and the absolute \nminimum output exposed in the Battery Supply PDO.\n\nThe Programmable Power Supply (PPS) Augmented Power Data Object (APDO) exposes a Source with \nan output voltage that can be adjusted programmatically over a defined range. The output voltage of \nthe Programmable Power Supply Shall remain within a range defined by the relative tolerance \nvPpsNew and the absolute band vPpsValid.\n\nThe Adjustable Voltage Supply (AVS) Augmented Power Data Object (APDO) exposes a Source with an \noutput voltage that can be adjusted programmatically over a defined range. The output voltage of the \nAVS Shall remain within a range defined by the relative tolerance vAvsNew and the absolute band \nvAvsValid.\n7.1.4\n  Source Transitions\n7.1.4.1\n  Fixed Supply\n7.1.4.1.1\n  Fixed Supply Positive Voltage Transitions\nThe Source Shall transition VBUS from the starting voltage to the higher new voltage in a controlled manner. The \nNegotiated new voltage (e.g., 5V, 9V, 15V, …) defines the nominal value for vSrcNew. During the positive transition \nthe Source Should be able to supply the Sink Standby current and the transient current to charge the total bulk \ncapacitance on VBUS. The slew rate of the positive transition Shall Not exceed vSrcSlewPos. The transitioning \nSource output voltage Shall settle within vSrcNew by tSrcSettle. The Source Shall be able to supply the Negotiated \npower level at the new voltage by tSrcReady. The positive voltage transition Shall remain above vSrcValid min of \nthe previous Explicit Contract and below vSrcValid max of the new Explicit Contract (Figure 7.2, \"Transition \nEnvelope for Positive Voltage Transitions\"). The voltage Shall settle to vSrcNew within tSrcSettle. The starting time, \nt0, in Figure 7.2, \"Transition Envelope for Positive Voltage Transitions\" starts tSrcTransition after the last bit of the \nEOP of the GoodCRC Message has been received by the Source.\nFigure 7.2 Transition Envelope for Positive Voltage Transitions\n At the start of the positive voltage transition the VBUS voltage level Shall Not droop vSrcValid min below either \nvSrcNew (i.e., if the starting VBUS voltage level is not vSafe5V) or vSafe5V as applicable.\nStarting voltage\nvSrcNew(typ)\nt0\nvSrcSlewPos\ntSrcSettle\nvSrcValid(max)\nUpper bound of valid Source range\nvSrcNew(max)\nvSrcNew(min)\ntSrcReady\nLower bound of valid Source range\n�\n�\nvSrcValid(min) beyond min/max limits of starting voltage\n","image_count":18,"table_count":1}
{"page":314,"text":"Page 314\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSection 7.1.14, \"Non-application of VBUS Slew Rate Limits\" lists transitions that are exempt from the vSrcSlewPos \nlimit.\n7.1.4.1.2\n  Fixed Supply Negative Voltage Transitions\nNegative voltage transitions are defined as shown in Figure 7.3, \"Transition Envelope for Negative Voltage \nTransitions\" and are specified in a similar manner to positive voltage transitions. Figure 7.3, \"Transition Envelope \nfor Negative Voltage Transitions\" does not apply to vSafe0V transitions. The slew rate of the negative transition \nShall Not exceed vSrcSlewNeg. The negative voltage transition Shall remain below vSrcValid max of the previous \nExplicit Contract and above vSrcValid min of the new Explicit Contract, as shown in FFigure 7.3, \"Transition \nEnvelope for Negative Voltage Transitions\". The transitioning Source output voltage Shall settle to vSrcNew within \ntSrcSettle. The starting time, t0, in Figure 7.3, \"Transition Envelope for Negative Voltage Transitions\" starts \ntSrcTransition after the last bit of the EOP of the GoodCRC Message has been received by the Source.\nFigure 7.3 Transition Envelope for Negative Voltage Transitions\nIf the newly Negotiated voltage is vSafe5V, then the vSrcValid limits Shall determine the transition window and \nthe transitioning Source Shall settle within the vSafe5V limits by tSrcSettle.\nSection 7.1.14, \"Non-application of VBUS Slew Rate Limits\" lists transitions that are exempt from the vSrcSlewNeg \nlimit.\n7.1.4.2\n  SPR Programmable Power Supply (PPS)\n7.1.4.2.1\n  SPR Programmable Power Supply Voltage Transitions\nThe Programmable Power Supply (PPS) Shall transition VBUS over the defined voltage range in a controlled \nmanner. The Output Voltage value in the Programmable RDO defines the nominal value of the PPS output voltage \nafter completing a voltage change and Shall settle within the limits defined by vPpsNew by tPpsSrcTransSmall for \nsteps smaller than or equal to vPpsSmallStep, or else, within the limits defined by vPpsNew by \ntPpsSrcTransLarge, but only in case the Programmable Power Supply is not in CL mode. Any overshoot beyond \nvPpsNew Shall Not exceed vPpsValid at any time. Any undershoot beyond vPpsNew Shall Not exceed vPpsValid \nfor currents not resulting in CL mode. The PPS output voltage May change in a step-wise or linear manner and the \nslew rate of either type of change Shall Not exceed vPpsSlewPos for voltage increases or vPpsSlewNeg for voltage \ndecreases. The nominal requested voltage of all linear voltage changes Shall equate to an integer number of LSB \nchanges. An LSB change of the PPS output voltage is defined as vPpsStep. A PPS Shall be able to supply the \nNegotiated current level as it changes its output voltage to the requested level. All PPS voltage increases Shall \nStarting voltage\nLower bound of valid Source range\nUpper bound of valid Source range\nt0\ntSrcSettle\ntSrcReady\nvSrcNew(typ)\nvSrcValid(min)\nvSrcNew(max)\nvSrcNew(min)\n�\nvSrcSlewNeg\n�\nvSrcValid(max)\n","image_count":6,"table_count":2}
{"page":315,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 315\nresult in a voltage that is greater than or equal to the previous PPS output voltage. Likewise, all PPS voltage \ndecreases Shall result in a voltage that is less than or equal to the previous PPS output voltage.\nSince a Sink can draw current up to the Negotiated APDO current level in case of a voltage step, the voltage might \nnot increase to the requested level due to the power supply operating in CL mode. Likewise, since a Sink can have \na Battery connected to VBUS, the voltage might not decrease to the requested level due to the Battery voltage being \nhigher than the output voltage set point the Source is transitioning to. Were the Source to rely on checking the \nvoltage on VBUS, in either case, to determine when its power supply is ready a PS_RDY Message would never be sent. \nWhen the PPS voltage steps up or down, a PS_RDY Message Shall be sent within:\n\ntPpsSrcTransLarge after the last bit of the GoodCRC Message following the Accept Message for steps \nlarger than vPpsSmallStep.\n\ntPpsSrcTransSmall after the last bit of the GoodCRC Message following the Accept Message for steps \nless than or equal to vPpsSmallStep provided that either the voltage on VBUS has reached vPpsNew or \nthe power supply is in CL mode.\nWhen vPpsNew is lower than the Battery voltage, or the Source's primary power is cut off the Sink Shall \nimmediately disconnect its Battery from VBUS. In these situations, the output current could reverse polarity and the \nSink is not allowed to source current (see Section 7.2.1, \"Behavioral Aspects\" and Section 7.2.9, \"Robust Sink \nOperation\").\nFigure 7.4, \"PPS Positive Voltage Transitions\" and Figure 7.5, \"PPS Negative Voltage Transitions\" below show the \noutput voltage behavior of a Programmable Power Supply in response to positive and negative voltage change \nrequests. The parameters vPpsMinVoltage and vPpsMaxVoltage define the lower and upper limits of the PPS \nrange respectively (see Table 10.11, \"SPR Programmable Power Supply Voltage Ranges\" for required ranges). \nvPpsMinVoltage corresponds to the Minimum Voltage field in the PPS APDO and vPpsMaxVoltage corresponds \nto Maximum Voltage field in the PPS APDO. If the Sink negotiates for a new PPS APDO, then the transition between \nthe two PPS APDOs Shall occur as described in Section 7.3.1, \"Transitions caused by a Request Message\".\nFigure 7.4 PPS Positive Voltage Transitions\nvPpsMinVoltage\nV(2) = 1 + vPpsMinVoltage\nvPpsMinVoltage V(1)\n�\n�\nProgrammable Power Supply Output Range\n�\nvPpsSlewPos\nV(3) = 1+n + vPpsMinVoltage\n�\n�\n0 Volts\nvPpsMaxVoltage\n�\n�\n�\nvPpsSlewPos\nvPpsSlewPos\n�\n�\n�\n�\nvPpsValid\n� vPpsNew\n�\nvPpsValid\nvPpsValid\n� vPpsNew\n�\nvPpsValid\nNominal V(2)\nNominal V(3)\nvPpsMaxVoltage V(4)\nV(2) > V(1)\nV(3) > V(2)\nV(4) > V(3)\n","image_count":20,"table_count":3}
{"page":316,"text":"Page 316\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.5  PPS Negative Voltage Transitions\nSection 7.1.14, \"Non-application of VBUS Slew Rate Limits\" lists transitions that are exempt from the vPpsSlewNeg \nand vPpsSlewPos limits.\nSee Section 7.1.8.1, \"AVS/PPS Output Voltage Ripple\" for output voltage ripple limits.\nSee Section 7.1.8.2, \"AVS/PPS DNL Errors and Output Voltage/Current Tolerance\" for output voltage and current \nDNL step adjustments.\n7.1.4.2.2\n   SPR Programmable Power Supply Current Limit\nThe Programmable Power Supply operating in SPR PPS Mode Shall limit its output current to the Operating \nCurrent field value in the RDO when the Sink attempts to draw more current than the Operating Current field \nvalue level. The programming step size for the Operating Current is iPpsCLStep. All programming changes of the \nOperating Current Shall settle to the new Operating Current field value within tPpsCLProgramSettle. The SPR \nPPS Operating Current regulation accuracy during Current Limit is defined as iPpsCLNew. The minimum \nprogrammable Current Limit level is iPpsCLMin. A Source that supports SPR PPS Mode Shall support Current Limit \nprogrammability between iPpsCLMin and the Maximum Current value in the SPR PPS APDO. A Source which \nreceives a request for current below iPpsCLMin Should reject the request. A Source that accepts a request for \ncurrent below iPpsCLMin Shall set its current limit at 1A.\nThe response of an SPR PPS to a load change depends on the Operating mode of the SPR PPS and the magnitude of \nthe load change. These dependencies lead to one of four possible responses of an SPR PPS to any load change. They \nare differentiated by the value of the PPS Status OMF before and after the load change:\n\nIf the PPS Status OMF is cleared both before and after the load change, the SPR PPS responds solely by \nmaintaining the output voltage. The SPR PPS output voltage Shall remain within vPpsValid range. The \nSPR PPS response to the load change Shall settle within the vPpsNew tolerance band by the time \ntPpsTransient. The Operating Mode Flag Shall remain cleared during the load change response of the \nSPR PPS.\n\nIf the PPS Status OMF is cleared before the load change and set after the load change, the SPR PPS \nresponds by reducing its output voltage to limit the SPR PPS output current. The SPR PPS output current \nShall stay within the iPpsCVCLTransient range once it reaches the iPpsCVCLTransient range. The SPR \nvPpsMinVoltage\nV(c) = 1 + vPpsMinVoltage\nvPpsMinVoltage V(d)\n�\n�\nProgrammable Power Supply Output Range\n�\nV(b) = 1 + n + vPpsMinVoltage\n�\n�\n0 Volts\nvPpsMaxVoltage\n�\n�\n�\n�\n�\n�\nvPpsValid\nvPpsNew\n�\n�\nvPpsValid\nNominal V(c)\nNominal V(b)\nvPpsMaxVoltage V(a)\nV(b) < V(a)\nV(d) < V(c)\nV(c) < V(b)\nvPpsValid\nvPpsNew\n�\n�\nvPpsValid\n�\nvPpsSlewNeg\nvPpsSlewNeg\nvPpsSlewNeg\n","image_count":22,"table_count":3}
{"page":317,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 317\nPPS response to the load change Shall settle within the iPpsCLNew tolerance band by the time \ntPpsCVCLTransient. The Operating Mode Flag Shall be set when the SPR PPS load change response \nsettles.\n\nIf the PPS Status OMF is set both before and after the load change, the SPR PPS responds by adjusting \nits output voltage to maintain the output current. The SPR PPS output current Shall stay within the \niPpsCLTransient range. The SPR PPS response to the load change Shall settle within the iPpsCLNew \ntolerance band by the time tPpsCLSettle. The Operating Mode Flag Shall remain set during the load \nchange response of the SPR PPS.\n\nIf the PPS Status OMF is set before the load change and cleared after the load change, the PPS responds \nto the load change by increasing its output voltage to vPpsNew and then maintaining it. The SPR PPS \noutput voltage Shall stay within the vPpsCLCVTransient range. The SPR PPS response to the load \nchange Shall settle within the vPpsNew tolerance band by the time tPpsCLCVTransient. The Operating \nMode Flag Shall be cleared when the PPS load change response settles.\nThe SPR PPS Source Shall maintain its output voltage at the value requested in the PPS RDO for all static and \ndynamic load conditions except when in Current Limit operation. In response to any static or dynamic load \ncondition during Current Limit operation that causes the SPR PPS output voltage to drop below vPpsShutdown the \nSource May send Hard Reset Signaling and Shall discharge VBUS to vSafe0V then resumes USB Default Operation at \nvSafe5V.\nWhen the Sink attempts to draw more current than the Operating Current in the RDO, the Source Shall limit its \noutput current. The current available from the Source during Current Limit mode Shall meet iPpsCLNew. The Sink \nMay Not reduce its Operating Current request in the RDO when the PPS Status OMF is set.\nCurrent limiting Shall be performed by the SPR PPS Source. Sinks that rely on PPS Current Limiting Shall meet the \nrequirements of Section 7.2.9, \"Robust Sink Operation\". The Source Shall Not shutdown or otherwise disrupt the \navailable output power while in Current Limit mode unless another protection mechanism as outlined in Section \n7.1.7, \"Robust Source Operation\" is engaged to protect the Source from damage.\nAn SPR PPS Source that is operating in Current Limit Shall Not change its set-point in a manner that exceeds \niPpsCLLoadStepRate or iPpsCLLoadReleaseRate.\nThe relationship between SPR PPS programmable output voltage and SPR PPS programmable Current Limit Shall \nbe as shown in Figure 7.6, \"SPR PPS Programmable Voltage and Current Limit\". The transition between the Constant \nVoltage mode and the Current Limit mode occurs between points a and b. The PPS Status OMF Shall be set or \ncleared within this region. In Current Limit mode when the load resistance changes, the output current of the \nSource Shall stay within iPpsCLNew. The proper behavior is represented by point c. \n","image_count":0,"table_count":1}
{"page":318,"text":"Page 318\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.6 SPR PPS Programmable Voltage and Current Limit\n7.1.4.2.3\n  SPR PPS Constant Power Mode\nIn Constant Power mode (when the PPS Power Limited bit is set) the Source May supply power that exceeds the \nSource's PDP Rating. Sinks May limit their Operating Current request in the RDO and Shall meet the requirements \nof Section 7.2.9, \"Robust Sink Operation\".\nThe tolerances along the Constant Power Curve Shall Not extend into the Guaranteed Capability Area of Figure 7.7, \n\"SPR PPS Constant Power\".\nCurrent\nVoltage\nPPS APDO\nMin Voltage (max)\nPPS APDO\nMax Voltage\niPpsCLMin\nPPS APDO \nMax Current\nvPpsNew\nPPS RDO\nOperating Current\nPPS RDO\nOutput Voltage\nProgrammable \nVoltage Only \nRegion\nProgrammable Voltage & \nProgrammable Current Limit Region\nValid Current Limit Response\nInvalid Current Limit Response\niPpsCLNew\na\nCurrent Limit Flag set\nCurrent Limit Flag cleared\nb\nc\nc\nc\nSource Disconnect Region\nvPpsShutdown (min)\nPoint a represents entry into the transition region between Constant Voltage mode and Current Limit mode.\nPoint b represents exit from the transition region between Constant Voltage mode and Current Limit mode.\nPoint c represents the exit from the iPpsCLNew region as the voltage drops below the PPS APDO Min Voltage.\nThe Source May disconnect at any point inside the tolerance range of the minimum voltage defined in the PPS APDO.\n","image_count":12,"table_count":2}
{"page":319,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 319\nFigure 7.7 SPR PPS Constant Power\nCurrent\nVoltage\nNominal limits as pr. the APDO\nGuaranteed operating capability as pr. the APDO\nTolerance area for actual voltages (only static tolerances are shown)\nvPpsNew  \nPDP constant power \ncurve\nMax APDO Voltage\nCapabilities when the Power Limited bit is set\nThe figure shows only the steady state after the transition\nvPpsNew  \n0A\n0V\niPpsCLNew  \n(X = PPS APDO Max Current, Y =  Prog Voltage)\nCoordinate applies when PPS Power Limited is set\nExample:\n• PDP = 27 W\n• Prog Voltage = 9V\n• PPS APDO Max Current = 3 A\nCoordinate = (3, 9)  \nvPpsNew  \nMin APDO Voltage\nvPpsNew  \niPpsCLMin(1A)\nMin Current Limit\nPPS APDO\nMax Current\nValid Current Limit Range\n(X = PDP/PPS APDO Max Current, Y =  PPS APDO Max Voltage)\nCoordinate applies when PPS Power Limited is set\nExample:\n• PDP = 27 W\n• PPS APDO Max Voltage = 11 V\nCoordinate = (2.45, 11)\n","image_count":0,"table_count":3}
{"page":320,"text":"Page 320\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.1.4.3\n   Adjustable Voltage Supply (AVS)\n7.1.4.3.1\n  Adjustable Voltage Supply Voltage Transitions\nThe Adjustable Voltage Supply (AVS) Shall transition VBUS over the defined voltage range in a controlled manner. \nThe Output Voltage value in the AVS RDO defines the nominal value of the AVS output voltage after completing a \nvoltage change and Shall settle within the limits defined by vAvsNew by tAvsSrcTransSmall for steps smaller than \nor equal to vAvsSmallStep, or else, within the limits defined by vAvsNew by tAvsSrcTransLarge for steps larger \nthan vAvsSmallStep. Any overshoot beyond vAvsNew Shall Not exceed vAvsValid at any time. Any undershoot \nbeyond vAvsNew Shall Not exceed vAvsValid at any time. The AVS output voltage May change in a stepwise or \nlinear manner and the slew rate of either type of change Shall Not exceed vAvsSlewPos for voltage increases or \nvAvsSlewNeg for voltage decreases. The nominal requested voltage of all linear voltage changes Shall equate to an \ninteger number of LSB changes. An LSB change of the AVS output voltage is defined as vAvsStep. An AVS Shall be \nable to supply the Negotiated current level as it changes its output voltage to the requested level if the change of \noutput voltage is less than or equal to vAvsSmallStep relative to vAvsNew. All AVS voltage increases Shall result in \na voltage that is greater than or equal to the previous AVS output voltage. Likewise, all AVS voltage decreases Shall \nresult in a voltage that is less than or equal to the previous AVS output voltage. Any time the Source enters the AVS \nrange of operation that voltage transition is considered a voltage step larger than vAvsSmallStep.\nWhen the AVS voltage steps up or down, a PS_RDY Message Shall be sent within:\n\ntAvsSrcTransLarge after the last bit of the GoodCRC Message following the Accept Message for steps \nlarger than vAvsSmallStep.\n\ntAvsSrcTransSmall after the last bit of the GoodCRC Message following the Accept Message for steps \nless than or equal to vAvsSmallStep provided the voltage on VBUS has reached vAvsNew.\nFigure 7.8, \"AVS Positive Voltage Transitions\" and Figure 7.9, \"AVS Negative Voltage Transitions\" below show the \noutput voltage behavior of an AVS in response to positive and negative voltage change requests. The parameters \nvAvsMinVoltage and vAvsMaxVoltage define the lower and upper limits of the AVS range respectively:\n\nFor SPR AVS Sources there are two possible voltage ranges where the vAvsMinVoltage is always 9V and \nvAvsMaxVoltage is either 15V or 20V depending on the Source's PDP. See Table 10.9, \"SPR Adjustable \nVoltage Supply (AVS) Voltage Ranges\". \n\nFor EPR AVS Sources vAvsMinVoltage corresponds to Minimum Voltage field (always 15V) in the EPR \nAVS APDO and vAvsMaxVoltage corresponds to Maximum Voltage field in the EPR AVS APDO. See \nTable 10.15, \"EPR Adjustable Voltage Supply (AVS) Voltage Ranges\" for required ranges.\n","image_count":0,"table_count":1}
{"page":321,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 321\nFigure 7.8 AVS Positive Voltage Transitions\nFigure 7.9 AVS Negative Voltage Transitions\nSee Section 7.1.8.1, \"AVS/PPS Output Voltage Ripple\" for output voltage ripple limits.\nSee Section 7.1.8.2, \"AVS/PPS DNL Errors and Output Voltage/Current Tolerance\" for output voltage DNL step \nadjustments.\nvAvsMinVoltage\nV(2) = 1 + vAvsMinVoltage\nvAvsMinVoltage V(1)\n�\n�\nAdjustable Voltage Supply Output Range\n�\nvAvsSlewPos\nV(3) = 1+n + vAvsMinVoltage\n�\n�\n0 Volts\nvAvsMaxVoltage\n�\n�\n�\nvAvsSlewPos\nvAvsSlewPos\n�\n�\n�\n�\nvAvsValid\n� vAvsNew\n�\nvAvsValid\nvAvsValid\n� vAvsNew\n�\nvAvsValid\nNominal V(2)\nNominal V(3)\nvAvsMaxVoltage V(4)\nV(2) > V(1)\nV(3) > V(2)\nV(4) > V(3)\nvAvsMinVoltage\nV(c) = 1 + vAvsMinVoltage\nvAvsMinVoltage V(d)\n�\n�\nAdjustable Voltage Supply Output Range\n�\nV(b) = 1 + n + vAvsMinVoltage\n�\n�\n0 Volts\nvAvsMaxVoltage\n�\n�\n�\n�\n�\n�\nvAvsValid\nvAvsNew\n�\n�\nvAvsValid\nNominal V(c)\nNominal V(b)\nvAvsMaxVoltage V(a)\nV(b) < V(a)\nV(d) < V(c)\nV(c) < V(b)\nvAvsValid\nvAvsNew\n�\n�\nvAvsValid\n�\nvAvsSlewNeg\nvAvsSlewNeg\nvAvsSlewNeg\n","image_count":23,"table_count":5}
{"page":322,"text":"Page 322\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.1.4.3.2\n  Adjustable Voltage Supply Current \nThe AVS Shall maintain its output voltage at the value requested in the AVS RDO for all static and dynamic load \nconditions that do not exceed the Operating Current in the RDO. Unlike the SPR PPS programmable current, the AVS \nprogrammable power May range from zero to the PDP.\nThe maximum operating current:\n\nFor SPR Sources, the maximum operating current is defined in the SPR Source_Capabilities Message \nMaximum Current 15V/Maximum Current 20V fields.\n\nFor EPR Sources, the maximum operating current has to be calculated as the lower of the PDP field \nvalue/Output Voltage or 5A whichever is lower. See Table 10.12, \"EPR Source Capabilities based on the \nPort Maximum PDP and using an EPR Capable Cable\"\n7.1.5\n  Response to Hard Resets\nHard Reset Signaling indicates a communication failure has occurred and the Source Shall stop driving VCONN, \nShall remove Rp from the VCONN pin and Shall drive VBUS to vSafe0V as shown in Figure 7.10, \"Source VBUS and \nVCONN Response to Hard Reset\". The USB connection May reset during a Hard Reset since the VBUS voltage will be \nless than vSafe5V for an extended period of time. After establishing the vSafe0V voltage condition on VBUS, the \nSource Shall wait tSrcRecover before re-applying VCONN and restoring VBUS to vSafe5V. A Source Shall conform to \nthe VCONN timing as specified in [USB Type-C 2.4].\nA Sink that enters Hard Reset can have cSnkBulkPd present until VBUS drops below vSafe0V. The Source Shall take \nthis into consideration.\nDevice operation during and after a Hard Reset is defined as follows:\n\nSelf-powered devices Should Not disconnect from USB during a Hard Reset (see Section 9.1.2, \"Mapping \nto USB Device States\").\n\nSelf-powered devices operating at more than vSafe5V May Not maintain full functionality after a Hard \nReset.\n\nBus powered devices will disconnect from USB during a Hard Reset due to the loss of their power \nsource.\nWhen a Hard Reset occurs the Source Shall stop driving VCONN, Shall remove Rp from the VCONN pin and Shall start \nto transition the VBUS voltage to vSafe0V either:\n\ntPSHardReset after the last bit of the Hard Reset Signaling has been received from the Sink or \n\ntPSHardReset after the last bit of the Hard Reset Signaling has been sent by the Source.\nThe Source Shall meet both tSafe5V and tSafe0V relative to the start of the voltage transition as shown in Figure \n7.10, \"Source VBUS and VCONN Response to Hard Reset\".\n","image_count":0,"table_count":1}
{"page":323,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 323\nFigure 7.10 Source VBUS and VCONN Response to Hard Reset\nVCONN will meet tVCONNDischarge relative to the start of the voltage transition as shown in Figure 7.10, \"Source VBUS \nand VCONN Response to Hard Reset\" due to the discharge circuitry in the Cable Plug. VCONN Shall meet tVCONNOn \nrelative to VBUS reaching vSafe5V. \nNote:\ntVCONNOn and tVCONNDischarge are defined in [USB Type-C 2.4].\n7.1.6\n  Changing the Output Power Capability\nSome USB Power Delivery Negotiations will require the Source to adjust its output power capability without \nchanging the output voltage. In this case the Source Shall be able to supply a higher or lower load current within \ntSrcReady.\n7.1.7\n  Robust Source Operation\n7.1.7.1\n  Output Over Current Protection \nSources Shall implement over current protection to prevent damage from output current that exceeds the current \nhandling capability of the Source. The definition of current handling capability is left to the discretion of the Source \nimplementation and Shall take into consideration the current handling capability of the connector contacts. If the \nover current protection implementation does not use a Hard Reset or Error Recovery, it Shall Not interfere with the \nNegotiated VBUS current level.\nAfter three consecutive over current events Source Shall go to ErrorRecovery.\nSources Should attempt to send Hard Reset Signaling when over current protection engages followed by an Alert \nMessage indicating an OCP event once an Explicit Contract has been established. The over current protection \nresponse May engage at either the Port or system level. Systems or ports that have engaged over current protection \nShould attempt to resume USB Default Operation after determining that the cause of over current is no longer \npresent and May latch off to protect the Port or system. The definition of how to detect if the cause of over current \nis still present is left to the discretion of the Source implementation.\nThe Source Shall Re-negotiate with the Sink after choosing to resume USB Default Operation. The decision of how \nto Re-negotiate after an over current event is left to the discretion of the Source implementation.\nThe Source Shall prevent continual system or Port cycling if over current protection continues to engage after \ninitially resuming either USB Default Operation or Re-negotiation. Latching off the Port or system is an acceptable \nresponse to recurring over current.\nDuring the over current response and subsequent system or Port shutdown, all affected Source ports operating \nwith VBUS greater than vSafe5V Shall discharge VBUS to vSafe5V by the time tSafe5V and vSafe0V by the time \ntSafe0V.\nOld voltage\n0V\nvSafe0V(max)\nvSrcNeg(max)\nt0\ntSafe5V\ntSafe0V\ntSrcTurnOn\nvSafe5V(max), VCONN(max)\n�\nvVconnDischarge\ntVconnDischarge\ntVconnOn\ntSrcRecover\n","image_count":19,"table_count":2}
{"page":324,"text":"Page 324\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.1.7.2\n  Over Temperature Protection\nSources Shall implement Over Temperature Protection (OTP) to prevent damage from temperature that exceeds \nthe thermal capability of the Source. The definition of thermal capability and the monitoring locations used to \ntrigger the over temperature protection are left to the discretion of the Source implementation. \nIn order to avoid reaching an OTP event, Sources May proactively reduce the available power being offered to the \nSink, even though these offers might be lower than the Source would be expected to offer during normal thermal \noperating conditions. Prior to reducing power, the Source Should generate Alert Message indicating an Operating \nCondition Change and set the Temperature Status bit in the SOP Status Message to Warning (10b).\nSources Should attempt to send Hard Reset Signaling when OTP engages followed by an Alert Message indicating \nan OTP event once an Explicit Contract has been established. The OTP response May engage at either the Port or \nsystem level. Systems or ports that have engaged OTP Should attempt to resume USB Default Operation and May \nlatch off to protect the Port or system.\nThe Source Shall Re-negotiate with the Sink after choosing to resume USB Default Operation. The decision of how \nto Re-negotiate after an over temperature event is left to the discretion of the Source implementation.\nThe Source Shall prevent continual system or Port cycling if over temperature protection continues to engage after \ninitially resuming either USB Default Operation or Re-negotiation. Latching off the Port or system is an acceptable \nresponse to recurring over temperature.\nDuring the OTP and subsequent system or Port shutdown, all affected Source ports operating with VBUS greater \nthan vSafe5V Shall discharge VBUS to vSafe5V by the time tSafe5V and vSafe0V by the time tSafe0V. \n7.1.7.3\n  vSafe5V Externally Applied to Ports Supplying vSafe5V\nSafe operation mandates that Power Delivery Sources Shall be tolerant of vSafe5V being present on VBUS when \nsimultaneously applying power to VBUS. Normal USB PD communication Shall be supported when this vSafe5V to \nvSafe5V connection exists.\n7.1.7.4\n  Detach\nA USB Detach is detected electrically using CC detection on the USB Type-C connector. When the Source is Detached \nthe Source Shall transition to vSafe0V by tSafe0V relative to when the Detach event occurred. During the transition \nto vSafe0V the VBUS voltage Shall be below vSafe5V max by tSafe5V relative to when the Detach event occurred \nand Shall Not exceed vSafe5V max after this time.\nSources operating in EPR Mode need to avoid creating large differential voltages at the connector. See Appendix H \nin the [USB Type-C 2.4] specification for background information. To achieve this, Sources operating in EPR Mode, \nupon detecting a disconnect, Shall stop sourcing current and minimize VBUS capacitance. There May continue to be \ncurrent sourced from the Source bulk capacitance, but that Should also be minimized by disconnecting as much of \nthe Source bulk capacitance as possible. For example, the Source can stop sourcing from the Power Supply and the \nC1 portion of the Source bulk capacitance in Figure 7.1, \"Placement of Source Bulk Capacitance\" by disabling the \nOhmic Interconnect switch.\nThe Source Should detect the disconnect, stop sourcing current, and minimize the VBUS capacitance as quickly as \npractical. If this is done after the CC contacts disconnect and before the VBUS contacts disconnect there is less risk \nof large differential voltages at the connector.\nNote:\nA USB-PD transmission by the Source during a disconnect event will delay disconnect detection by the \nSource.\n7.1.7.5\n  Output Voltage Limit\nThe output voltage of Sources Shall account for vSrcNew, vSrcValid or vPpsNew, vPpsValid or vAvsNew, \nvAvsValid as determined by the Negotiated VBUS value. Sources Shall meet applicable safety and regulatory \nrequirements.\n","image_count":0,"table_count":1}
{"page":325,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 325\n7.1.8\n  Output Voltage Tolerance and Range\nAfter a voltage transition is complete (i.e., after tSrcReady) and during static load conditions the Source output \nvoltage Shall remain within the vSrcNew or vSafe5V limits as applicable. The ranges defined by vSrcNew and \nvSafe5V account for DC regulation accuracy, line regulation, load regulation and output ripple. After a voltage \ntransition is complete (i.e., after tSrcReady) and during transient load conditions the Source output voltage Shall \nNot go beyond the range specified by vSrcValid. The amount of time the Source output voltage can be in the band \nbetween either vSrcNew or vSafe5V and vSrcValid Shall Not exceed tSrcTransient. Refer to Table 7.23, \"Source \nElectrical Parameters\" for the output voltage tolerance specifications. Figure 7.11, \"Application of vSrcNew and \nvSrcValid limits after tSrcReady\" illustrates the application of vSrcNew and vSrcValid after the voltage transition is \ncomplete.\nThe vSrcNew and vSrcValid limits Shall Not apply to VBUS during the VBUS discharge and switchover that occurs \nduring a Fast Role Swap as described in Section 7.1.13, \"Fast Role Swap\".\nFigure 7.11 Application of vSrcNew and vSrcValid limits after tSrcReady\n The Source output voltage Shall be measured at the connector receptacle. The stability of the Source Shall be \ntested in 25% load step increments from minimum load to maximum load and also from maximum load to \nminimum load. The transient behavior of the load current is defined in Section 7.2.6, \"Transient Load Behavior\". The \ntime between each step Shall be sufficient to allow for the output voltage to settle between load steps. In some \nsystems it might be necessary to design the Source to compensate for the voltage drop between the output stage of \nthe power supply electronics and the receptacle contact. The determination of whether compensation is necessary \nis left to the discretion of the Source implementation.\n7.1.8.1\n  AVS/PPS Output Voltage Ripple\nThe AVS/PPS output voltage ripple is expected to exceed the magnitude of one or more LSB as show in the Figure \n7.12, \"Expected AVS/PPS Ripple Relative to an LSB\".\nSink Load I1\nvSrcNew(typ)\ntSrcReady\niLoadStepRate\nvSrcValid(max)\nvSrcValid(min)\nvSrcNew(max)\nvSrcNew(min)\ntSrcTransient window\n���\ntSrcTransient windows\n���\n���\niLoadReleaseRate\nSink Load I2\n","image_count":9,"table_count":1}
{"page":326,"text":"Page 326\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.12 Expected AVS/PPS Ripple Relative to an LSB\n7.1.8.2\n  AVS/PPS DNL Errors and Output Voltage/Current Tolerance\nThe PPS voltage and current discrete LSB steps have a DNL tolerance as shown in Figure 7.13, \"Allowed DNL errors \nand tolerance of Voltage and Current in AVS/PPS mode\" below. In absolute terms the step size of the LSB for both \nvoltage and current is defined by vPpsStep/vAvsStep for voltage and iPpsCLStep for current. Several examples of \nValid LSB steps are shown in Figure 7.13, \"Allowed DNL errors and tolerance of Voltage and Current in AVS/PPS \nmode\":\n\nThe upper end of the DNL error (+1 LSB) shows the case where one step is effectively skipped.\n\nThe lower end of the DNL error (-1 LSB) shows the case where the voltage or current set-point \nremained the same.\nThe ideal scenario for the DNL error (=0) matches the typical step size for the voltage or current.\nThe intent of DNL is to guarantee that changes to the voltage/current have the correct directionality, and that the \nmaximum step size is clearly defined. \nNote:\nThe Source Should avoid scenarios where multiple consecutive steps have errors close to the Maximum \nand Minimum DNL.\ntime\nvoltage\n+1 LSB\n+1 LSB\n","image_count":0,"table_count":1}
{"page":327,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 327\nFigure 7.13 Allowed DNL errors and tolerance of Voltage and Current in AVS/PPS mode\n7.1.8.3\n  Programmable Power Supply Output Voltage Tolerance and \nRange\nAfter a voltage transition of a Programmable Power Supply is complete (i.e. after tPpsSrcTransSmall or \ntPpsSrcTransLarge) and during static load conditions the Source output voltage Shall remain within the vPpsNew \nlimits. The range defined by vPpsNew accounts for DC regulation accuracy, line regulation, load regulation and \noutput ripple. After a voltage transition is complete (i.e. after tPpsSrcTransSmall or tPpsSrcTransLarge) and \nduring transient load conditions the Source output voltage Shall Not go beyond the range specified by vPpsValid. \nThe amount of time the Source output voltage can be in the band between vPpsNew and vPpsValid Shall Not \nexceed tPpsTransient.\n7.1.8.4\n  Adjustable Voltage Supply Output Voltage tolerance and Range\nAfter a voltage transition of an AVS is complete (i.e. after tAvsSrcTransSmall or tAvsSrcTransLarge) and during \nstatic load conditions the Source output voltage Shall remain within the vAvsNew limits. The range defined by \nvAvsNew accounts for DC regulation accuracy, line regulation, load regulation and output ripple. After a voltage \ntransition is complete (i.e. after tAvsSrcTransSmall or tAvsSrcTransLarge) and during transient load conditions \nthe Source output voltage Shall Not go beyond the range specified by vAvsValid. The amount of time the Source \noutput voltage can be in the band between vAvsNew and vAvsValid Shall Not exceed tAvsTransient.\nCode\nVoltage, Current\n1 LSB\nDNL < 0 LSB\nMax DNL = 1 LSB\nvPpsNew,vAvsNew, \niPpsNew\n(max)\nvPpsNew,vAvsNew, \niPpsNew\n(min)\nvPpsNew,vAvsNew, \niPpsNew\nDNL = -1 LSB\n","image_count":0,"table_count":1}
{"page":328,"text":"Page 328\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.1.9\n  Charging and Discharging the Bulk Capacitance on VBUS\nThe Source Shall charge and discharge the bulk capacitance on VBUS whenever the Source voltage is Negotiated to \na different value. The charging or discharging occurs during the voltage transition and Shall Not interfere with the \nSource's ability to meet tSrcReady.\n7.1.10\n  Swap Standby for Sources\nSources and Sinks of a Dual-Role Power Port Shall support Swap Standby. Swap Standby occurs for the Source after \nthe Source power supply has discharged the bulk capacitance on VBUS to vSafe0V as part of the Power Role Swap \ntransition.\nWhile in Swap Standby:\n\nThe Source Shall Not drive VBUS that is therefore expected to remain at vSafe0V.\n\nAny discharge circuitry that was used to achieve vSafe0V Shall be removed from VBUS.\n\nThe Dual-Role Power Port Shall be configured as a Sink.\n\nThe USB connection Shall Not reset even though vSafe5V is no longer present on VBUS (see Section 9.1.2, \n\"Mapping to USB Device States\").\nThe PS_RDY Message associated with the Source being in Swap Standby Shall be sent after the VBUS drive is \nremoved. The time for the Source to transition to Swap Standby Shall Not exceed tSrcSwapStdby. Upon entering \nSwap Standby, the Source has relinquished its Power Role as Source and is ready to become the New Sink. The \ntransition time from Swap Standby to being the New Sink Shall be no more than tNewSnk. The New Sink May start \nusing power after the new Source sends the PS_RDY Message.\n7.1.11\n  Source Peak Current Operation\nA Source that has the Fixed Supply PDO or AVS APDO Peak Current bits set to 01b, 10b and 11b Shall be designed \nto support one of the overload Capabilities defined in Table 6.10, \"Fixed Power Source Peak Current Capability\" or \nTable 6.16, \"EPR AVS Power Source Peak Current Capability\" respectively. The overload conditions are bound in \nmagnitude, duration and duty cycle as listed in Table 6.10, \"Fixed Power Source Peak Current Capability\" or \nTable 6.16, \"EPR AVS Power Source Peak Current Capability\". Sources are not required to support continuous \noverload operation. When overload conditions occur, the Source is allowed the range of vSrcPeak (instead of \nvSrcNew) relative to the nominal value (see Figure 7.14, \"Source Peak Current Overload\"). When the overload \ncapability is exceeded, the Source is expected take whatever action is necessary to prevent electrical or thermal \ndamage to the Source. The Source May send a new Source_Capabilities Message with the Fixed Supply PDO or AVS \nAPDO Peak Current bits set to 00b to prohibit overload operation even if an overload capability was previously \nNegotiated with the Sink.\n","image_count":0,"table_count":1}
{"page":329,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 329\nFigure 7.14 Source Peak Current Overload\n7.1.12\n   Source Capabilities Extended Parameters\nImplementers can choose to make available certain characteristics of a PDUSB Source as a set of Static and/or \ndynamic parameters to improve interoperability between external power sources and portable computing \ndevices. The complete list of reportable Static parameters is described in full in Section 6.5.1, \n\"Source_Capabilities_Extended Message\" and listed in Figure 6.37, \"Source_Capabilities_Extended Message\". The \nsubset of parameters listed below directly represent Source Capabilities and are described in the rest of this \nsection.\n\nVoltage Regulation.\n\nHoldup Time.\n\nCompliance.\n\nPeak Current.\n\nSource Inputs.\n\nBatteries.\n7.1.12.1\n  Voltage Regulation Field\nThe power consumption of a device can change dynamically. The ability of the Source to regulate its voltage output \nmight be important if the device is sensitive to fluctuations in voltage. The Voltage Regulation bit field is used to \nconvey information about the Sources output regulation and tolerance to various load steps.\n7.1.12.1.1\n  Load Step Slew Rate\nThe default load step slew rate is established at 150mA/µs. A Source Shall meet the following requirements under \nthe load step reported in the Source_Capabilities_Extended Message:\n\nThe Source Shall maintain VBUS regulation within the vSrcValid range.\n\nThe noise on the CC line Shall remain below vNoiseIdle and vNoiseActive.\nSink Port Current\nSource Port Voltage\nvSrcNew(max)/\nvSrcPeak(max)\nNominal Voltage\nvSrcNew(min)\nvSrcPeak(min)\nIOC level\nas requested in the Operating \nCurrent field of an RDO\n% level with respect to IOC\nas advertised in the Peak Current \nfield of Fixed Supply PDO\nAdditional operating range for \nFixed Supply that supports \noverload capability\nOperating range for supply that DOES \nNOT support overload capability\n","image_count":18,"table_count":1}
{"page":330,"text":"Page 330\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTest conditions require a change in both positive and negative load steps from 1Hz to 5000Hz, up to the Advertised \nLoad Step Magnitude of the full load output including from both 10 mA and 10% initial load. The Source Shall \nensure that PD Communications meet the transmit and receive masks as specified in Section 5.8.2, \"Transmit and \nReceive Masks\" under all load conditions.\n7.1.12.1.2\n  Load Step Magnitude\nThe default load step magnitude rate Shall be 25% of IoC. The Source May report higher capability tolerating a load \nstep of 90% of IoC.\n7.1.12.2\n  Holdup Time Field\nThe Holdup Time field Shall return a numeric value of the number of milliseconds the output voltage stays in \nregulation upon a short interruption of the AC Supply. \nAn AC Supplied Source Shall report its holdup time in this field. The holdup time is measured with the load at rated \nmaximum, with the AC Supply at 115VAC rms and 60Hz (or at 230VAC rms and 50Hz for a Source that does not \nsupport 115VAC AC Supply). The reported time describes the minimum length of time from the last completed AC \nSupply input cycle (zero-degree phase angle) until when the output voltage decays below vSrcValid (min). Sources \nare recommended to support a minimum of 3ms and are preferred to support over 10 milliseconds holdup time \n(equivalent to a half cycle drop from the AC Supply). See Figure 7.15, \"Holdup Time Measurement\".\nFigure 7.15 Holdup Time Measurement\n7.1.12.3\n  Compliance Field\nAn SPR Source claiming LPS, PS1 or PS2 compliance (see [IEC 62368-1]) Shall report its Capabilities in the \nCompliance field. Since the SPR Source May have several potential output voltage and current settings, every SPR \nSource supply (each indicated by a PDO) Shall be compliant to LPS requirements. \nNote:\nAccording to the requirements of [IEC 60950-1] and/or [IEC 62368-3], a device tested and certified with \nan LPS Source (SPR Source or EPR Source operating in SPR Mode) is prohibited from using a non-LPS \nSource (EPR Source operating in EPR Mode). Alternatively, [IEC 62368-1], classifies power sources \naccording to their maximum, constrained power output (15watts or 100watts).\n7.1.12.4\n  Peak Current\nThe Source reports its ability to source peak current delivery in excess of the Negotiated amount in the Peak \nCurrent field. The duration of peak current Shall be followed by a current consumption below the Operating \nCurrent (IoC) in order to maintain average power delivery below the IoC current. \nvSrcValid(min)\nHold Up Time\n�\nVBUS\nAC mains voltage\n","image_count":0,"table_count":2}
{"page":331,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 331\nA Source May have greater capability to source peak current than can be reported using the Peak Current field in \nthe Fixed Supply PDO or AVS APDO. In this case the Source Shall report its additional capability in the Peak \nCurrent1/Peak Current2/Peak Current3 fields in the Source_Capabilities_Extended Message.\nEach overload period Shall be followed by a period of reduced current draw such that the rolling average current \nover the Overload Period field value with the specified Duty Cycle field value (see Section 6.5.1.10, \"Peak Current \nField\") Shall Not exceed the Negotiated current. This is calculated as:\nPeriod of reduced current = (1 - value in Duty Cycle field/100) * value in Overload Period field \n7.1.12.5\n  Source Inputs\nThe Source Inputs field identifies the possible inputs that provide power to the Source. \nNote:\nSome Sources are only powered by a Battery (e.g., an automobile) rather than the more common AC \nSupply. \n7.1.12.6\n  Batteries\nThe Number of Batteries/Battery Slots field Shall report the number of Batteries the Source supports. The Source \nShall independently report the number of Hot Swappable Batteries and the number of Fixed Batteries.\n7.1.13\n  Fast Role Swap\nA Fast Role Swap limits the interruption of VBUS power to a bus powered accessory connected to a Hub DFP that has \na UFP Attached to a power source and a DRP Attached to a Host Port supporting DRP as shown in Figure 7.16, \"VBUS \nPower during Fast Role Swap\".\nFigure 7.16 VBUS Power during Fast Role Swap\nWhen the power source connected to the Hub UFP stops sourcing power and VBUS at the Hub DRP connector \ndischarges below vSrcValid(min), if VBUS has been Negotiated to a higher voltage than vSafe5V, or vSafe5V (min) \nthe Fast Role Swap Request Shall be sent from the Hub DRP to the Host DRP and the Hub DRP Shall sink power. In \nthe Fast Role Swap use case, the Hub DRP behaves like a bidirectional power path. The Hub DRP Shall Not enable \nVBUS discharge circuitry when changing operation from Initial Source to New Sink. The Hub DFP Port(s) Shall \nsupport default USB Type-C Current (see [USB Type-C 2.4]) until a new Explicit Contract is Negotiated.\nAfter sending the Fast Role Swap Request and while VBUS > vSafe5V (min), the New Sink Shall Not draw more than \niNewFrsSink until the New Source has applied its Rp. The New Sink Shall Not draw more than iSnkStdby from VBUS \nuntil tSnkFRSwap after it has started sending the Fast Role Swap Request or VBUS has fallen below vSafe5V (min). \nThe tSnkFRSwap time Shall start at the beginning of the Fast Role Swap Request or when VBUS falls below vSafe5V \n(min), whichever comes later. After waiting for tSnkFRSwap, the New Sink Shall Not draw more than iNewFrsSink \nuntil the New Source has applied its Rp. After the New Source has applied its Rp, the New Sink Shall be limited to USB \nType-C Current (see [USB Type-C 2.4]) in an Implicit Contract until a new Explicit Contract is Negotiated. All Sink \nrequirements Shall apply to the New Sink after the Fast Role Swap is complete. The Fast Role Swap response of the \nHost DRP is described in Section 7.2.10, \"Fast Role Swap\" since the Host DRP is operating as the Initial Sink prior to \nthe Fast Role Swap.\nAfter the VBUS voltage level at the Hub DRP connector drops below vSafe5V a PS_RDY Message Shall be sent to the \nHost DRP as shown in the Fast Role Swap transition diagram of Section 7.3.4, \"Transitions Caused by Fast Role Swap\".\nUSB PD Capable\nHub\nDRP\nUFP\nDFP\nPower Source\nBus Powered \nAccessory\nUSB PD Capable \nHost\nDRP\nPower flow before the \nFast Role Swap\nPower flow after the \nFast Role Swap\n","image_count":0,"table_count":1}
{"page":332,"text":"Page 332\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.17, \"VBUS detection and timing during Fast Role Swap, initial VBUS (at new source) > vSafe5V(min)\" and \nFigure 7.18, \"VBUS detection and timing during Fast Role Swap, initial VBUS (at new source) < vSafe5V(min)\" show the \nVBUS detection and timing for the New Source during a Fast Role Swap after the Fast Role Swap Request has been \nreceived. The New Source May turn on the VBUS output switch once VBUS is below vSafe5V (max). In this case, the \nNew Source prevents VBUS from falling below vSafe5V (min). The new source Shall turn on the VBUS output switch \nwithin tSrcFRSwap of falling below vSafe5V (min).\nVBUS might have started at vSafe5V or at higher voltage. When the Fast Role Swap Request is detected, VBUS could \ntherefore be either above vSafe5V (max), within the vSafe5V range, or below vSafe5V (min). If the Fast Role Swap \nRequest is detected when VBUS is below vSafe5V (min), then the new source Shall turn on the VBUS output switch \nwithin tSrcFRSwap of detecting the Fast Role Swap Request. In this case, the maximum time from the beginning of \nthe Fast Role Swap Request to VBUS being sourced May be tSrcFRSwap (max) + tFRSwapRx (max).\nFigure 7.17 VBUS detection and timing during Fast Role Swap, initial VBUS (at new source) > vSafe5V(min)\nFigure 7.18  VBUS detection and timing during Fast Role Swap, initial VBUS (at new source) < vSafe5V(min)\n7.1.14\n  Non-application of VBUS Slew Rate Limits\nScenarios where vSrcSlewPos and vPpsSlewPos VBUS slew rate limits do not apply and VBUS May transition faster \nthan specified are as follows:\n\nWhen first applying VBUS after an Attach.\n\nWhen applying VBUS as part of a Power Role Swap to Source Power Role.\n\nWhen increasing VBUS from vSafe0V to vSafe5V during a Hard Reset.\n\nDuring a Fast Role Swap when the Initial Sink applies VBUS.\nOld Voltage\n0V\nvSafe5V(min)\ntSrcFRSwap\nvSafe5V(max)\n�\nNew Source may \nturn on at any time \nafter VBUS falls below \nvSafe5V(max)\nVBUS\nOld Source \ndetects power loss \nand signals Fast \nRole Swap\nOld Voltage\n0V\nvSafe5V(min)\ntSrcFRSwap\nVBUS is below vSafe5V(min) \nbefore FRS signal is finished\nOld Source detects power \nloss and signals Fast Role \nSwap\ntFRSwapRx (max)\nVBUS at new \nSource\nCC\nNew Source may turn on after \ndetecting Fast Role Swap signal\n","image_count":23,"table_count":6}
{"page":333,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 333\nScenarios where vSrcSlewNeg and vPpsSlewNeg VBUS slew rate limits do not apply and VBUS May transition faster \nthan specified are as follows:\n\nWhen discharging VBUS to vSafe0V during a Hard Reset.\n\nWhen discharging VBUS to vSafe0V as part of a Power Role Swap to Sink Power Role.\n\nWhen discharging VBUS to vSafe0V after a Detach.\n\nDuring a Fast Role Swap when the VBUS power source connected to the Hub UFP stops sourcing power.\n7.1.15\n  VCONN Power Cycle\n7.1.15.1\n  UFP VCONN Power Cycle\nThe Data Reset process requires the DFP to be the VCONN Source by the end of the process. In the case where the \nUFP is the VCONN Source, the following steps Shall be followed:\n\nFollowing the last bit of the GoodCRC Message acknowledging the Accept Message in response to the \nData_Reset Message, the UFP Shall turn off VCONN and ensure it is below vRaReconnect (see [USB Type-\nC 2.4]) within tVCONNZero.\n\nWhen VCONN is below vRaReconnect, the UFP Shall send a PS_RDY Message.\nNote:\nIf the UFP was not sourcing VCONN, it still sends the PS_RDY Message. \n\nThe DFP Shall wait tVCONNReapplied following the last bit of the GoodCRC Message acknowledging the \nPS_RDY Message before sourcing VCONN. The DFP Shall ensure VCONN is within vVCONNValid (see [USB \nType-C 2.4]) within tVCONNValid.\nFigure 7.19, \"Data Reset UFP VCONN Power Cycle\" below illustrates the UFP VCONN Power Cycle process.\nFigure 7.19 Data Reset UFP VCONN Power Cycle\n0V\nAccept \n(DFP/UFP)\nvVCONNValid\nvRaReconnect\ntVCONNZero\ntVCONNValid\ntVCONNReapplied\nPS_RDY \n(UFP)\nUFP\nDFP\n","image_count":0,"table_count":3}
{"page":334,"text":"Page 334\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.1.15.2\n   DFP VCONN Power Cycle\nThe Data Reset process requires the DFP to be the VCONN Source by the end of the process. In the case where the \nDFP is the VCONN Source, the following steps Shall be followed:\n1)\nIf the DFP sent the Data_Reset Message and is sourcing VCONN then it Shall turn off VCONN and ensure it \nis below vRaReconnect (see [USB Type-C 2.4]) within tVCONNZero of the last bit of the GoodCRC \nMessage acknowledging the Accept Message in response to the Data_Reset Message.\n2)\nIf the UFP sent the Data_Reset Message then the DFP Shall turn off VCONN and ensure it is below \nvRaReconnect (see [USB Type-C 2.4]) within tVCONNZero following the last bit of the GoodCRC Message \nacknowledging the Accept Message in response to the Data_Reset Message.\n3)\nWhen VCONN is below vRaReconnect, the DFP Shall wait tVCONNReapplied before sourcing VCONN.\n4)\nThe DFP Shall ensure VCONN is within vVCONNValid (see [USB Type-C 2.4]) within tVCONNValid.\nFigure 7.20, \"Data Reset DFP VCONN Power Cycle\" below illustrates the DFP VCONN Power Cycle process.\nFigure 7.20 Data Reset DFP VCONN Power Cycle\n0V\nAccept\n(DFP/UFP) \nvVCONNValid\nvRaReconnect\ntVCONNZero\ntVCONNValid\ntVCONNReapplied\nUFP\nDFP\n","image_count":0,"table_count":3}
{"page":335,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 335\n7.2\n  Sink Requirements\n7.2.1\n  Behavioral Aspects\nA PDUSB Sink exhibits the following behaviors:\n\nShall Not draw more than [USB Type-C 2.4] USB Type-C Current from VBUS while in a Default Contract \nor Implicit Contract.\n\nShall follow the requirements as specified in Section 7.1.5, \"Response to Hard Resets\" when Hard Reset \nSignaling is received.\n\nShall control VBUS in-rush current when increasing current consumption according to [USB 2.0] or \n[USB 3.2] as appropriate.\n7.2.2\n  Sink Bulk Capacitance \nThe Sink bulk capacitance consists of C3 and C4 as shown in Figure 7.21, \"Placement of Sink Bulk Capacitance\". The \nOhmic Interconnect might consist of PCB traces for power distribution or power switching devices. The Ohmic \nInterconnect is expected to be part of an input Over Voltage Protection (Sink OVP) circuit implemented by the Sink \nas described in Section 7.2.9.2, \"Input Over Voltage Protection\" to protect against excessive VBUS input voltage. A \nSink Shall implement OVP. The Sink Shall Not rely on the Source output voltage limit for its input OVP. The \ncapacitance might be a single capacitor, a capacitor bank or distributed capacitance. An upper bound of \ncSnkBulkPd Shall Not be exceeded so that the transient charging, or discharging, of the total bulk capacitance on \nVBUS can be accounted for during voltage transitions.\nThe Sink bulk capacitance that is within the cSnkBulk max or cSnkBulkPd max limits is allowed to change to \nsupport a newly Negotiated power level. The capacitance can be changed when the Sink enters Sink Standby or \nduring a voltage transition or when the Sink begins to operate at the new power level. Changing the Sink bulk \ncapacitance Shall Not cause a transient current on VBUS that violates the present Contract. During a Power Role \nSwap the Default Sink Shall transition to Swap Standby before operating as the New Source. Any change in bulk \ncapacitance required to complete the Power Role Swap Shall occur during Swap Standby.\nFigure 7.21 Placement of Sink Bulk Capacitance\n7.2.3\n  Sink Standby\nThe Sink Shall transition to Sink Standby before a positive voltage transition of VBUS. During Sink Standby the Sink \nShall reduce the current drawn to iSnkStdby. This allows the Source to manage the voltage transition as well as \nsupply sufficient operating current to the Sink to maintain PD operation during the transition. The Sink Shall \ncomplete this transition to Sink Standby within tSnkStdby after evaluating the Accept Message from the Source. The \ntransition when returning to Sink operation from Sink Standby Shall be completed within tSnkNewPower. The \niSnkStdby requirement Shall only apply if the Sink current draw is higher than this level.\nSee Section 7.3, \"Transitions\" for details.\nGND\nSHIELD\nVBUS\n...\nData\nLines\nC3\nGND\nSHIELD\nVBUS\n...\nData\nLines\nSINK\nCABLE\nC4\nLoad\nSink Bulk Capacitance\nOhmic  \nInterconnect\nOVP\n","image_count":0,"table_count":2}
{"page":336,"text":"Page 336\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.2.3.1\n  Programmable Power Supply Sink Standby\nA Sink is not required to transition to Sink Standby when operating within the Negotiated PPS APDO. A Sink May \nconsume the Operating Current value in the PPS RDO during PPS output voltage changes. However, prior to \noperating the SPR PPS in Current Limit, the Sink Shall program the PPS Operating Voltage to the lowest practical \nlevel that satisfies the Sink load requirement. Doing so will minimize the inrush current that occurs when the \ntransition to Current Limit occurs. When operating with an SPR PPS Source that is in Current Limit, the Sink Shall \nNot change its load in a manner that exceeds iPpsCLLoadStepRate or iPpsCLLoadReleaseRate. The load change \nmagnitude Shall Not request a change to the Current Limit set-point that exceeds iPpsCLLoadStep.\nIf the Sink Negotiates for a new PPS APDO, that is expected to increase VBUS voltage, then the Sink Shall transition \nto Sink Standby while changing between PPS APDOs as described in Section 7.3.1, \"Transitions caused by a Request \nMessage\".\n7.2.4\n  Suspend Power Consumption\nWhen Source has set its USB Suspend Supported flag (see Section 6.4.1.2.1.2, \"USB Suspend Supported\"), a Sink Shall \ngo to the lowest power state during USB suspend. The lowest power state Shall be pSnkSusp or lower for a PDUSB \nPeripheral and pHubSusp or lower for a PDUSB Hub. There is no requirement for the Source voltage to be changed \nduring USB suspend.\n7.2.5\n  Zero Negotiated Current\nWhen a Sink Requests zero current as part of a power Negotiation with a Source, the Sink Shall go to the lowest \npower state, pSnkSusp or lower, where it can still communicate using PD signaling.\n7.2.6\n  Transient Load Behavior\nWhen a Sink's operating current changes due to a load step, load release or any other change in load level, the \npositive or negative overshoot of the new load current Shall Not exceed the range defined by iOvershoot. For the \npurposes of measuring iOvershoot the new load current value is defined as the average steady state value of the \nload current after the load step has settled. The rate of change of any shift in Sink load current during normal \noperation Shall Not exceed iLoadStepRate (for load steps) and iLoadReleaseRate (for load releases) as measured \nat the Sink receptacle.\nThe Sink's operating current Shall Not change faster than the value reported in the Source's Load Step Slew Rate \nin its Voltage Regulation bit field and Shall ensure that PD Communications meet the transmit and receive masks \nas specified in Section 5.8.2, \"Transmit and Receive Masks\".\n7.2.7\n  Swap Standby for Sinks\nThe Sink functionality in a Dual-Role Power Port Shall support Swap Standby. Swap Standby occurs for the Sink after \nevaluating the Accept Message from the Source during a Power Role Swap. While in Swap Standby the Sink's current \ndraw Shall Not exceed iSnkSwapStdby from VBUS and the Dual-Role Power Port Shall be configured as a Source \nafter VBUS has been discharged to vSafe0V by the existing Initial Source. The Sink's USB connection Should Not be \nreset even though vSafe5V is not present on the VBUS conductor (see Section 9.1.2, \"Mapping to USB Device States\"). \nThe time for the Sink to transition to Swap Standby Shall be no more than tSnkSwapStdby. When in Swap Standby \nthe Sink has relinquished its Power Role as Sink and will prepare to become the New Source. The transition time \nfrom Swap Standby to New Source Shall be no more than tNewSrc.\n7.2.8\n  Sink Peak Current Operation\nSinks Shall only make use of a Source overload capability when the corresponding Fixed Supply PDO Peak Current \n(see Section 6.4.1.2.1.8, \"Peak Current\") or AVS APDO Peak Current (see Section 6.4.1.2.4.3.2, \"Peak Current\") bits are \nset to 01b, 10b and 11b. Sinks Shall manage thermal aspects of the overload event by not exceeding the average \nNegotiated output of a Fixed Supply or AVS that supports Peak Current operation.\nSinks that depend on the Peak Current capability for enhanced system performance Shall also function correctly \nwhen Attached to a Source that does not offer the Peak Current capability or when the Peak Current capability has \nbeen inhibited by the Source.\n","image_count":0,"table_count":1}
{"page":337,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 337\n7.2.9\n  Robust Sink Operation \n7.2.9.1\n  Sink Bulk Capacitance Discharge at Detach\nWhen a Source is Detached from a Sink, the Sink Shall continue to draw power from its input bulk capacitance until \nVBUS is discharged to vSafe5V or lower by no longer than tSafe5V from the Detach event. This safe Sink \nrequirement Shall apply to all Sinks operating with a Negotiated VBUS level greater than vSafe5V and Shall apply \nduring all low power and high-power operating modes of the Sink.\n If the Detach is detected during a Sink low power state, such as USB Suspend, the Sink can then draw as much \npower as needed from its bulk capacitance since a Source is no longer Attached. In order to achieve a successful \nDetach detect based on VBUS voltage level droop, the Sink power consumption Shall be high enough so that VBUS \nwill decay below vSrcValid(min) well within tSafe5V after the Source bulk capacitance is removed due to the \nDetach. Once adequate VBUS droop has been achieved, a discharge circuit can be enabled to meet the safe Sink \nrequirement.\n To illustrate the point, the following set of Sink conditions will not meet the safe Sink requirement without \nadditional discharge circuitry:\n\nNegotiated VBUS = 20V.\n\nMaximum allowable supplied VBUS voltage = 21.55V.\n\nMaximum bulk capacitance = 30µF.\n\nPower consumption at Detach = 12.5mW.\nWhen the Detach occurs (hence removal of the Source bulk capacitance) the 12.5mW power consumption will \ndraw down the VBUS voltage from the worst-case maximum level of 21.55V to 17V in approximately 205ms. At this \npoint, with VBUS well below vSrcValid (min) an approximate 100mW discharge circuit can be enabled to increase \nthe rate of Sink bulk capacitance discharge and meet the safe Sink requirement. The power level of the discharge \ncircuit is dependent on how much time is left to discharge the remaining voltage on the Sink bulk capacitance. If a \nSink has the ability to detect the Detach in a different manner and in much less time than tSafe5V, then this different \nmanner of detection can be used to enable a discharge circuit, allowing even lower power dissipation during low \npower modes such as USB Suspend.\n In most applications, the safe Sink requirement will limit the maximum Sink bulk capacitance well below the \ncSnkBulkPd limit. A Detach occurring during Sink high power operating modes must quickly discharge the Sink \nbulk capacitance to vSafe5V or lower as long as the Sink continues to draw adequate power until VBUS has decayed \nto vSafe5V or lower.\n7.2.9.2\n  Input Over Voltage Protection\nSinks Shall implement input Over-Voltage Protection (OVP) to prevent damage from input voltage that exceeds the \nvoltage handling capability of the Sink. The definition of voltage handling capability is left to the discretion of the \nSink implementation. The over voltage response of Sinks Shall Not interfere with normal PD operation and Shall \naccount for vSrcNew, vSrcValid or vPpsNew, vPpsValid as determined by the Negotiated VBUS value. SPR Sinks \nShould tolerate input voltages as high as vSprMax and Shall meet applicable safety requirements if vSprMax is \nexceeded. Likewise, EPR Sinks Should tolerate input voltages as high as vEprMax and Shall meet applicable safety \nrequirements if vEprMax is exceeded.\nSinks Should attempt to send Hard Reset Signaling when OVP engages followed by an Alert Message indicating an \nOVP event once an Explicit Contract has been established. The OVP response May engage at either the Port or \nsystem level. Systems or ports that have engaged OVP Shall resume USB Default Operation when the Source has re-\nestablished vSafe5V on VBUS.\nThe Sink Shall be able to Re-negotiate with the Source after resuming USB Default Operation. The decision of how \nto respond to Re-negotiation after an OVP event is left to the discretion of the Sink implementation.\nThe Sink Shall prevent continual system or Port cycling if OVP continues to engage after initially resuming either \nUSB Default Operation or Re-negotiation. Latching off the Port or system is an acceptable response to recurring over \nvoltage.\n","image_count":0,"table_count":1}
{"page":338,"text":"Page 338\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.2.9.3\n  Over Temperature Protection\nSinks Shall implement over temperature protection (OTP) to prevent damage from temperature that exceeds the \nthermal capability of the Sink. The definition of thermal capability and the monitoring locations used to trigger the \nover temperature protection are left to the discretion of the Sink implementation. \nSinks Shall attempt to send Hard Reset Signaling when over temperature protection engages followed by an Alert \nMessage indicating an OTP event once an Explicit Contract has been established. The over temperature protection \nresponse May engage at either the Port or system level. Systems or ports that have engaged over temperature \nprotection Should attempt to resume USB Default Operation after sufficient cooling is achieved and May latch off \nto protect the Port or system. The definition of sufficient cooling is left to the discretion of the Sink implementation.\nThe Sink Shall be able to Re-negotiate with the Source after resuming USB Default Operation. The decision of how \nto respond to Re-negotiation after an over temperature event is left to the discretion of the Sink implementation.\nThe Sink Shall prevent continual system or Port cycling if over temperature protection continues to engage after \ninitially resuming either USB Default Operation or Re-negotiation. Latching off the Port or system is an acceptable \nresponse to recurring over temperature.\n7.2.9.4\n  Over Current Protection\nSinks that operate with a Programmable Power Supply Shall implement their own internal current protection \nmechanism to protect against internal VBUS current faults as well as erratic Source current regulation. The Sink \nShall never draw higher current than the Maximum Current value in the PPS APDO.\n7.2.10\n  Fast Role Swap\nAs described in Section 7.1.13, \"Fast Role Swap\" a Fast Role Swap limits the interruption of VBUS power to a bus \npowered accessory connected to a Hub DFP that has a UFP Attached to a power source and a DRP Attached to a Host \nPort that supports DRP. This configuration is shown in Figure 7.16, \"VBUS Power during Fast Role Swap\".\nThe Host DRP, upon establishing an Explicit Contract, Shall query the Initial Source's Sink Capabilities to determine \nwhether the Initial Source supports Fast Role Swap, and what level of current it requires. If the Sink_Capabilities \nMessage received from the Initial Source has at least one of the Fast Role Swap required USB Type-C Current bits \nset, and the Host DRP is able to source the requested current at 5V, the Host DRP May arm itself for Fast Role Swap. \nIf the Host DRP has not queried the Sink Capabilities from the Initial Source, or if the Sink_Capabilities Message \nreports no Fast Role Swap support or a current that is beyond what the Host DRP is able or willing to source in the \nevent of a Fast Role Swap, the Host DRP Shall Not arm itself for Fast Role Swap and Shall Ignore any Fast Role Swap \nRequests that are detected.\nWhen the Host DRP that supports Fast Role Swap detects the FFast Role Swap Request, the Host DRP Shall stop \nsinking current and Shall be ready and able to source vSafe5V if the residual VBUS voltage level at the Host DRP \nconnector is greater than vSafe5V. When the residual VBUS voltage level at the Host DRP connector discharges \nbelow vSafe5V(min) the Host DRP as the New Source Shall supply vSafe5V to the Hub DRP within tSrcFRSwap. The \nHost DRP Shall Not enable VBUS discharge circuitry when changing Power Roles from Initial Sink to New Source.\nThe New Source Shall supply vSafe5V at USB Type-C Current (see [USB Type-C 2.4]) at the value Advertised in the \nFast Role Swap required USB Type-C Current field (see Section 6.4.1.3.1.6, \"Fast Role Swap USB Type-C Current\"). \nAll Source requirements Shall apply to the New Source after the Fast Role Swap is complete The Fast Role Swap \nresponse of the Hub DRP is described in Section 7.1.13, \"Fast Role Swap\" since the Hub DRP is operating as the Initial \nSource prior to the Fast Role Swap.\nAfter the Host DRP is providing VBUS power to the Hub DRP, a PS_RDY Message Shall be sent to the Hub DRP as \ndefined by the Fast Role Swap Request and the AMS detailed in Section 7.3.4, \"Transitions Caused by Fast Role Swap\".\n","image_count":0,"table_count":1}
{"page":339,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 339\n7.3\n  Transitions\nThe following sections illustrate the power supply's response to various types of Negotiations. The Negotiations \nare triggered by certain Messages or Signaling. It provides examples of the transitions and is organized around each \nof the Messages and Signals that result in a response from the power supply. The response to a Message or Signal \ncan result in different transitions depending upon the power supply's starting conditions and the requested \nchange.\n\nTransitions caused by a Request Message:\n\nGeneric transition between (A)PDO s:\n\nIncrease the current.\n\nIncrease the voltage.\n\nIncrease the voltage and the current.\n\nIncrease the voltage and decrease the current.\n\nDecrease the voltage and increase the current.\n\nDecrease the voltage and the current.\n\nNo change in Current or voltage.\n\nTransitions within the same PDO (Fixed Supply, Battery Supply, Variable Supply):\n\nIncrease the current.\n\nDecrease the current.\n\nNo change in current.\n\nTransitions within the same PPS APDO:\n\nIncreasing the Programmable Power Supply (PPS) voltage.\n\nDecreasing the Programmable Power Supply (PPS) voltage. \n\nIncreasing the Programmable Power Supply (PPS) Current.\n\nDecreasing the Programmable Power Supply (PPS) Current.\n\nSame Request Programmable Power Supply (PPS).\n\nTransitions within the same AVS APDO:\n\nIncreasing the Adjustable Voltage Supply (AVS) voltage\n\nDecreasing the Adjustable Voltage Supply (AVS) voltage\n\nSame Request Adjustable Voltage Supply (AVS) \n\nTransitions caused by the PR_Swap Message:\n\nSource requests a Power Role Swap\n\nSink requests a Power Role Swap\n\nTransitions caused by Hard Reset Signaling:\n\nSource issues Hard Reset Signaling.\n\nSink issues Hard Reset Signaling.\n\nTransitions caused by the Fast Role Swap Request:\n\nSource asserts Rd at its preferred [USB Type-C 2.4] current.\n","image_count":0,"table_count":1}
{"page":340,"text":"Page 340\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1\n  Transitions caused by a Request Message\nThis section describes transitions that are caused by a Request Message.\n7.3.1.1\n  Changing the Source between Different (A)PDOs\nIn these transition descriptions the term (A)PDO is used to describe any Power Data Object, regardless of whether \nit is a PDO or an APDO in the Capabilities Message.\nThis section describes transitions in response to a Request Message:\n\nFrom one (A)PDO to another (A)PDO \n\nFrom an Implicit Contract to an Explicit Contract\n\nFrom [USB Type-C 2.4]operation to the First Explicit Contract\nThese transitions usually result in a voltage change but is not required.\nThe interaction of the Device Policy Manager, the Port Policy Engine and the Power Supply that Shall be followed \nwhen increasing the current is shown in Figure 7.23, \"Transition Diagram for Increasing the Voltage and Current\" \nand Figure 7.25, \"Transition Diagram for Decreasing the Voltage and Increasing the Current\".\nThe Source voltage as the transition starts Shall be any voltage within the Valid VBUS range of the previous Source \nPDO or APDO. The Source voltage after the transition is complete Shall be any voltage within the Valid VBUS range \nof the New Source PDO or APDO. The sequence that Shall be followed is described in Table 7.2, \"Sequence Diagram \nfor Increasing the Voltage and Current\" and Table 7.4, \"Sequence Description for Decreasing the Voltage and \nIncreasing the Current\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical \nParameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn this figure, the Sink has previously sent a Request Message to the Source. \nThe voltage is considered to increase if the change from VOLD to VNEW is greater than vSmallStep. The \ndetermination Shall be based on the nominal (A)PDO voltage before and after, unless either (A)PDO is Battery \nSupply or Variable Supply when the worst case of the following is assumed in making this determination.\n\nMinimum voltage to voltage.\n\nMinimum voltage to Maximum voltage.\n\nVoltage to Maximum voltage.\nThe following sections begin with a description of the generic process followed by more specific examples of the \nmost common transitions.\n","image_count":0,"table_count":1}
{"page":341,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 341\n7.3.1.1.1\n  Examples of changes from one (A)PDO to another (A)PDO\nThe seven examples of (A)PDO change transitions below illustrate the most common transitions.\n7.3.1.1.1.1\n  Increasing the Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while increasing the voltage is shown in Figure 7.22, \"Transition Diagram for Increasing the \nVoltage\". The sequence that Shall be followed is described in Table 7.1, \"Sequence Description for Increasing the \nVoltage\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", \nTable 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.22, \"Transition Diagram for Increasing the Voltage\", the Sink has previously sent a Request \nMessage to the Source.\n","image_count":0,"table_count":1}
{"page":342,"text":"Page 342\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.22 Transition Diagram for Increasing the Voltage\nt3\nt1\nt2\nSource VOLD\nSource VNEW\nSource\n� V\n4\n3\n7\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\n8\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\n�����������\nSink � IOLD\n� IOLD\n� IOLD\nSink to Sink \nStandby\nSink iSnkStdBy\nSink Standby \nto Sink\nVOLD\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1 � iSnkStdBy + cSnkBulkPd( VBUS/ t)\nVNEW\nI1\n...\n�\n","image_count":12,"table_count":5}
{"page":343,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 343\nTable 7.1  Sequence Description for Increasing the Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nPolicy Engine tells the Device Policy Manager to \ninstruct the power supply to reduce current drawn \nto iSnkStdby within tSnkStdby (t1); t1 Shall \ncomplete before tSrcTransition. The Sink Shall Not \nviolate transient load behavior defined in Section \n7.2.6, \"Transient Load Behavior\" while transitioning \nto and operating at the new power level.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t2). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n5\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n6\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe Sink May begin operating at the new power level \nany time after evaluation of the PS_RDY Message. \nThis time duration is indeterminate.\n8\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level. The time duration (t3) depends on \nthe magnitude of the load change.\n","image_count":0,"table_count":2}
{"page":344,"text":"Page 344\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.1.1.2\n  Increasing the Voltage and Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while increasing the voltage and current is shown in Figure 7.23, \"Transition Diagram for \nIncreasing the Voltage and Current\". The sequence that Shall be followed is described in Table 7.2, \"Sequence \nDiagram for Increasing the Voltage and Current\". The timing parameters that Shall be followed are listed in \nTable 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common \nSource/Sink Electrical Parameters\".\nNote:\nIn Figure 7.23, \"Transition Diagram for Increasing the Voltage and Current\", the Sink has previously sent \na Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":345,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 345\nFigure 7.23 Transition Diagram for Increasing the Voltage and Current\nt3\nSource VOLD\nSource VNEW\nSource\n� V � I\n4\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\n�����������\nSink ��IOLD\n� IOLD\n��INEW\nSink to Sink \nStandby\nSink iSnkStdBy\nSink Standby \nto Sink\nVOLD\nVNEW\n3\n7\nI1\n�\n...\n8\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1 � iSnkStdBy + cSnkBulkPd( VBUS/ t)\nt2\nt1\n","image_count":12,"table_count":6}
{"page":346,"text":"Page 346\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.2  Sequence Diagram for Increasing the Voltage and Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nPolicy Engine tells the Device Policy Manager to \ninstruct the power supply to reduce current drawn \nto iSnkStdby within tSnkStdby (t1); t1 Shall \ncomplete before tSrcTransition. The Sink Shall Not \nviolate transient load behavior defined in Section \n7.2.6, \"Transient Load Behavior\" while transitioning \nto and operating at the new power level.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t2). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine. \n5\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n6\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out, the Sink sends Hard \nReset Signaling.\n7\nThe Sink May begin operating at the new power level \nany time after evaluation of the PS_RDY Message. \nThis time duration is indeterminate.\n8\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level. The time duration (t3) depends on \nthe magnitude of the load change.\n","image_count":0,"table_count":2}
{"page":347,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 347\n7.3.1.1.1.3\n  Increasing the Voltage and Decreasing the Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while increasing the voltage and decreasing the current is shown in Figure 7.24, \"Transition \nDiagram for Increasing the Voltage and Decreasing the Current\". The sequence that Shall be followed is described \nin Table 7.3, \"Sequence Description for Increasing the Voltage and Decreasing the Current\". The timing parameters \nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical \nParameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.24, \"Transition Diagram for Increasing the Voltage and Decreasing the Current\", the Sink has \npreviously sent a Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":348,"text":"Page 348\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.24 Transition Diagram for Increasing the Voltage and Decreasing the Current\nt3\nt1\nSource VOLD\nSource VNEW\nSource\n� V �I\n4\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\n�����������\nSink ��IOLD\n� IOLD\n� INEW\nI1\nSink to Sink \nStandby\nSink Standby \nto Sink\nSink iSnkStdBy\nVNEW\nVOLD\n3\n7\n...\n8\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1 � iSnkStdBy + cSnkBulkPd( VBUS/ t)\n�\nt2\n","image_count":12,"table_count":5}
{"page":349,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 349\nTable 7.3  Sequence Description for Increasing the Voltage and Decreasing the Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink. \nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nPolicy Engine tells the Device Policy Manager to \ninstruct the power supply to reduce current drawn \nto iSnkStdby within tSnkStdby (t1); t1 Shall \ncomplete before tSrcTransition. The Sink Shall Not \nviolate transient load behavior defined in Section \n7.2.6, \"Transient Load Behavior\" while transitioning \nto and operating at the new power level.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t2). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine. \n5\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n6\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe Sink May begin operating at the new power level \nany time after evaluation of the PS_RDY Message. \nThis time duration is indeterminate.\n8\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level. The time duration (t3) depends on \nthe magnitude of the load change.\n","image_count":0,"table_count":2}
{"page":350,"text":"Page 350\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.1.1.4\n  Decreasing the Voltage and Increasing the Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while decreasing the voltage and increasing the current is shown in Figure 7.25, \"Transition \nDiagram for Decreasing the Voltage and Increasing the Current\". The sequence that Shall be followed is described \nin Table 7.4, \"Sequence Description for Decreasing the Voltage and Increasing the Current\". The timing parameters \nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical \nParameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.25, \"Transition Diagram for Decreasing the Voltage and Increasing the Current\", the Sink has \npreviously sent a Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":351,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 351\nFigure 7.25 Transition Diagram for Decreasing the Voltage and Increasing the Current\nt2\nSource VOLD\nSource VNEW\nSource\n� V � I\n3\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\n�����������\nSink ��IOLD\n� IOLD\n� INEW\nVNEW\nVOLD\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nSink\n� I \n...\n6\n7\nt1\n","image_count":16,"table_count":4}
{"page":352,"text":"Page 352\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.4  Sequence Description for Decreasing the Voltage and Increasing the Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t1). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then evaluates the PS_RDY \nMessage from the Source and tells the Device Policy \nManager it is okay to operate at the new power level.\n6\nThe Sink May begin operating at the new power level \nany time after evaluation of the PS_RDY Message. \nThis time duration is indeterminate.\n","image_count":0,"table_count":2}
{"page":353,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 353\n7.3.1.1.1.5\n  Decreasing the Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while decreasing the voltage is shown in Figure 7.26, \"Transition Diagram for Decreasing the \nVoltage\". The sequence that Shall be followed is described in Table 7.5, \"Sequence Description for Decreasing the \nVoltage\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", \nTable 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.26, \"Transition Diagram for Decreasing the Voltage\", the Sink has previously sent a Request \nMessage to the Source.\n","image_count":0,"table_count":1}
{"page":354,"text":"Page 354\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.26 Transition Diagram for Decreasing the Voltage\nt\nSource VOLD\nSource\n� V\n3\nSource VNEW\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\nSink ��IOLD\nVOLD\n� IOLD\n� IOLD\nVNEW\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\n","image_count":6,"table_count":6}
{"page":355,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 355\nTable 7.5  Sequence Description for Decreasing the Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t1). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink within tSrcTransReq of the end of the GoodCRC \nMessage following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":356,"text":"Page 356\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.1.1.6\n  Decreasing the Voltage and the Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while decreasing the voltage and current is shown in Figure 7.28, \"Transition Diagram for \nno change in Current or Voltage\". The sequence that Shall be followed is described in Table 7.6, \"Sequence \nDescription for Decreasing the Voltage and the Current\". The timing parameters that Shall be followed are listed in \nTable 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common \nSource/Sink Electrical Parameters\".\nNote:\nIn Figure 7.27, \"Transition Diagram for Decreasing the Voltage and the Current\", the Sink has previously \nsent a Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":357,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 357\nFigure 7.27 Transition Diagram for Decreasing the Voltage and the Current\nt1\nt2\nSource\n� V � I\n4\nSource VOLD\nSource VNEW\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\nSink ��INEW\nSink ��IOLD\n� IOLD\n� INEW\nSink\n� I\nVNEW\nVOLD\n3\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\n","image_count":12,"table_count":7}
{"page":358,"text":"Page 358\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.6  Sequence Description for Decreasing the Voltage and the Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nThe Sink Shall be able to operate with lower current \nwithin tSnkNewPower (t1); t1 Shall complete before \ntSrcTransition. The Sink Shall Not violate transient \nload behavior defined in Section 7.2.6, \"Transient \nLoad Behavior\" while transitioning to and operating \nat the new power level.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t2). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n5\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n6\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level.\n","image_count":0,"table_count":2}
{"page":359,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 359\n7.3.1.1.1.7\n  No change in Current or Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when changing from \none (A)PDO to another while the Sink requests the same voltage and Current as it is currently operating at is shown \nin Figure 7.28, \"Transition Diagram for no change in Current or Voltage\". The sequence that Shall be followed is \ndescribed in Table 7.7, \"Sequence Description for no change in Current or Voltage\". The timing parameters that Shall \nbe followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical Parameters\", and \nTable 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.28, \"Transition Diagram for no change in Current or Voltage\", the Sink has previously sent a \nRequest Message to the Source.\n","image_count":0,"table_count":1}
{"page":360,"text":"Page 360\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.28 Transition Diagram for no change in Current or Voltage\nTable 7.7  Sequence Description for no change in Current or Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nThe Policy Engine waits tSrcTransition then sends \nthe PS_RDY Message to the Sink starting within \ntSrcTransReq of the end of the GoodCRC Message \nfollowing the Accept Message.\nPolicy Engine receives the PS_RDY Message.\n4\nPolicy Engine receives the GoodCRC Message from \nthe Sink.\nNote: The decision that no power transition is re-\nquired could be made either by the Device Pol-\nicy Manager or the power supply depending \non implementation.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine evaluates the PS_RDY Message.\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nSink ��IOLD\nVBUS doesn’t change\nSource VOLD\nCurrent doesn’t change\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n3\n4\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\nGood \nCRC\ntSrcTransReq\nVold\nSource VOLD\n","image_count":0,"table_count":5}
{"page":361,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 361\n7.3.1.2\n  Transitions within the same Fixed, Battery or Variable PDO or \nbetween Different (A)PDOs\n7.3.1.2.1\n  Increasing the Current Only\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when increasing the \ncurrent without changing the voltage is shown in Figure 7.29, \"Transition Diagram for Increasing the Current\". The \nsequence that Shall be followed is described in Table 7.8, \"Sequence Description for Increasing the Current\". The \ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.29, \"Transition Diagram for Increasing the Current\", the Sink has previously sent a Request \nMessage to the Source.\n","image_count":0,"table_count":1}
{"page":362,"text":"Page 362\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.29 Transition Diagram for Increasing the Current\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSink ��INEW\nSource Port\nVoltage\nSink Port\nCurrent\nSink ��IOLD\n� IOLD\n� INEW\nSink\n� I  \nVBUS doesn’t change\nSource\n� I  \n3\n6\n...\n7\n�\nSource VOLD\nSource VOLD\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSource Port\nPolicy Engine\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntSrcTransition\nPort to Port \nMessaging\nGood \nCRC\ntSrcTransReq\nGood \nCRC\nSink Port\nPolicy Engine\nt1\nt2\n","image_count":17,"table_count":8}
{"page":363,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 363\nTable 7.8  Sequence Description for Increasing the Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t1). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n6\nThe Sink May begin operating at the new power level \nany time after evaluation of the PS_RDY Message. \nThis time duration is indeterminate.\n7\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level. The time duration (t2) depends on \nthe magnitude of the load change.\n","image_count":0,"table_count":2}
{"page":364,"text":"Page 364\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.2.2\n  Decreasing the Current Only\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when decreasing the \ncurrent without changing the voltage is shown in Figure 7.30, \"Transition Diagram for Decreasing the Current\". The \nsequence that Shall be followed is described in Table 7.9, \"Sequence Description for Decreasing the Current\". The \ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.30, \"Transition Diagram for Decreasing the Current\", the Sink has previously sent a Request \nMessage to the Source.\n","image_count":0,"table_count":1}
{"page":365,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 365\nFigure 7.30 Transition Diagram for Decreasing the Current\nSource VOLD\nSource VOLD\nSink ��IOLD\nSink ��INEW\nVBUS does not change\nSource\n� I\n4\n3\n� IOLD\n� INEW\nSink\n� I  \nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSTransitionTimer\ntSrcTransition\nGood \nCRC\ntSrcTransReq\nGood \nCRC\nt1\nt2\n","image_count":19,"table_count":8}
{"page":366,"text":"Page 366\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.9  Sequence Description for Decreasing the Current\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage. Policy Engine tells the Device Policy \nManager to instruct the power supply to reduce \npower consumption.\n3\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level. The Sink Shall be able to operate \nwith lower current within tSnkNewPower (t1); t1 \nShall complete before tSrcTransition.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability. The power supply Shall be ready to \noperate at the new power level within tSrcReady \n(t2). The power supply informs the Device Policy \nManager that it is ready to operate at the new power \nlevel. The power supply status is passed to the Policy \nEngine.\n5\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tSrcTransReq of the end of the \nGoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n6\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new (A)PDO.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":367,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 367\n7.3.1.3\n  Changing Voltage or Current within the same PPS APDO\n7.3.1.3.1\n  Increasing the Programmable Power Supply (PPS) Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when increasing the \nvoltage is shown in Figure 7.31, \"Transition Diagram for Increasing the Programmable Power Supply Voltage\". The \nsequence that Shall be followed is described in Table 7.10, \"Sequence Description for Increasing the Programmable \nPower Supply Voltage\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical \nParameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.31, \"Transition Diagram for Increasing the Programmable Power Supply Voltage\", the Sink has \npreviously sent a Request Message to the Source. \n","image_count":0,"table_count":1}
{"page":368,"text":"Page 368\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.31 Transition Diagram for Increasing the Programmable Power Supply Voltage\nPps Transition Interval\nSource VOLD\nSource VNEW\nSink draws current continuously (not to exceed negotiated current)\nSource\n� V\n3\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntPpsSrcTransSmall, tPpsSrcTransLarge\nGood \nCRC\nGood \nCRC\nSource Port\nCurrent\nCL doesn’t change\nCurrent may change (not to exceed negotiated current)\nSource \nCL Current\nSink \nVBUS Current\nSink Port\nCurrent\nVOLD\nSource Port\nVoltage\nVNEW\nSource \nVBUS Voltage\n","image_count":0,"table_count":7}
{"page":369,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 369\nTable 7.10  Sequence Description for Increasing the Programmable Power Supply Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to increase its \noutput voltage. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nAfter sending the Accept Message, the Programmable \nPower Supply starts to increase its output voltage. \nThe Programmable Power Supply new voltage set-\npoint Shall be reached by tPpsSrcTransLarge for \nsteps larger than vPpsSmallStep or else by \ntPpsSrcTransSmall. The power supply informs the \nDevice Policy Manager that it has reached the new \nset-point and whether VBUS is at the corresponding \nnew level, or if the supply is operating in CL mode. \nThe power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tPpsSrcTransSmall or \ntPpsSrcTransLarge of the end of the GoodCRC \nMessage following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new voltage set \npoint (corresponding to vPpsNew).\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":370,"text":"Page 370\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.3.2\n  Decreasing the Programmable Power Supply (PPS) Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when decreasing the \nvoltage is shown in Figure 7.32, \"Transition Diagram for Decreasing the Programmable Power Supply Voltage\". The \nsequence that Shall be followed is described in Table 7.11, \"Sequence Description for Decreasing the Programmable \nPower Supply Voltage\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical \nParameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.32, \"Transition Diagram for Decreasing the Programmable Power Supply Voltage\", the Sink has \npreviously sent a Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":371,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 371\nFigure 7.32 Transition Diagram for Decreasing the Programmable Power Supply Voltage\nPps Transition Interval\nSource VOLD\nSource VNEW\nSink draws current continuously (not to exceed negotiated current)\nVOLD\nSource\n�V\n3\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nVNEW\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntPpsSrcTransSmall, tPpsSrcTransLarge\nGood \nCRC\nGood \nCRC\nSource Port\nCurrent\nCL doesn’t change\nSource \nCL Current\nCurrent may change (not to exceed negotiated current)\nSink \nVBUS Current\nSink Port\nCurrent\n","image_count":0,"table_count":7}
{"page":372,"text":"Page 372\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.11  Sequence Description for Decreasing the Programmable Power Supply Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to decrease its \noutput voltage. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nAfter sending the Accept Message, the Programmable \nPower Supply starts to decrease its output voltage. \nThe Programmable Power Supply new voltage set-\npoint (corresponding to vPpsNew) Shall be reached \nby tPpsSrcTransLarge for steps larger than \nvPpsSmallStep or else by tPpsSrcTransSmall. The \npower supply informs the Device Policy Manager that \nit has reached the new level. The power supply status \nis passed to the Policy Engine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tPpsSrcTransSmall or \ntPpsSrcTransLarge of the end of the GoodCRC \nMessage following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new voltage set \npoint (corresponding to vPpsNew).\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":373,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 373\n7.3.1.3.3\n  Increasing the Programmable Power Supply (PPS) Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when increasing the \ncurrent limit in the same APDO, not exceeding the maximum for that APDO and without changing the requested \nvoltage is shown in Figure 7.33, \"Transition Diagram for increasing the Current in PPS mode\". The sequence that \nShall be followed is described in Table 7.12, \"Sequence Description for increasing the Current in PPS mode\". The \ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.33, \"Transition Diagram for increasing the Current in PPS mode\", the Sink has previously sent \na Request Message to the Source. \nThe Sink May draw current equal to the increasing Current Limit of the Source before it has received the PS_RDY \nMessage for the new Request.\n","image_count":0,"table_count":1}
{"page":374,"text":"Page 374\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.33 Transition Diagram for increasing the Current in PPS mode\nSource IOLD\nSource INEW\n��������NEW\nSink draws current continuously (� old negotiated current)\nSink � |\nSource � |\n3\n6\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrent\n...\n7\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nGood \nCRC\nGood \nCRC\nPSTransitionTimer (running)\ntPpsSrcTransSmall\nSource VOLD\nPPS Transition Interval\nSink Port\nCurrent\nSource \nCL Current\nVOLD\nVNEW\nCLOLD\nCLNEW\nCL change\nIOLD\nFollows CL change\nINEW\nPassive Sink following CL Source\nActive Sink at IOLD\n","image_count":10,"table_count":2}
{"page":375,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 375\nTable 7.12  Sequence Description for increasing the Current in PPS mode\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to increase its \nset-point for the current limit.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nThe Power Supply increases its Current Limit set-\npoint to the new requested value. \nThe Sink draws current according to the increased \nCurrent Limit of the Source.\n4\nThe Policy Engine waits tPpsSrcTransSmall then \nsends the PS_RDY Message to the Sink starting within \ntPpsCLProgramSettle of the end of the GoodCRC \nMessage following the Accept Message.\nPolicy Engine receives the PS_RDY Message.\n5\nPolicy Engine receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. \n6\nPolicy Engine then stops the PSTransitionTimer, \nevaluates the PS_RDY Message and tells the Device \nPolicy Manager it can increase the current up to the \nrequested value without the Source going into CL \nmode.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe Sink increases its current.\n","image_count":0,"table_count":2}
{"page":376,"text":"Page 376\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.3.4\n  Decreasing the Programmable Power Supply (PPS) Current\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when decreasing the \ncurrent limit in the same APDO, not exceeding the minimum for that APDO and without changing the requested \nvoltage is shown in Figure 7.34, \"Transition Diagram for decreasing the Current in PPS mode\". The sequence that \nShall be followed is described in Table 7.13, \"Sequence Description for decreasing the Current in PPS mode\". The \ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.34, \"Transition Diagram for decreasing the Current in PPS mode\", the Sink has previously sent \na Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":377,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 377\nFigure 7.34 Transition Diagram for decreasing the Current in PPS mode\nSource IOLD\nSource INEW\n��������NEW\nSink draws current continuously (� old negotiated current)\nSink � |\nSource �  |\n3\n6\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrent\n...\n7\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nGood \nCRC\nGood \nCRC\nPSTransitionTimer (running)\ntPpsSrcTransSmall\nSource VOLD\nPPS Transition Interval\nSink Port\nCurrent\nSource \nCL Current\nVOLD\nVNEW\nCLOLD\nCLNEW\nCL change\nIOLD\nFollows CL change\nINEW\nPassive Sink following CL Source\nActive Sink at IOLD\nSet-point V does not change, only resulting V\n","image_count":10,"table_count":2}
{"page":378,"text":"Page 378\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.13  Sequence Description for decreasing the Current in PPS mode\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to decrease its \nset-point for the current limit.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then evaluates the Accept \nMessage and instructs the Sink to reduce its current to \nbelow the new Negotiated current level and starts the \nPSTransitionTimer.\n3\nThe Power Supply decreases its Current Limit set-\npoint to the new Negotiated value.\nThe Sink reduces its current to less than the new \nNegotiated current to prevent the Source from going \ninto Current Limit.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tPpsSrcTransSmall of the end of \nthe GoodCRC Message following the Accept Message.\n5\nPolicy Engine receives the GoodCRC Message from \nthe Sink.\nPolicy Engine receives the PS_RDY Message.\n6\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer and evaluates the PS_RDY \nMessage.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe Sink is allowed to draw INEW but must be aware \nthe voltage on VBUS can drop doing so.\n","image_count":0,"table_count":2}
{"page":379,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 379\n7.3.1.3.5\n  Same Request Programmable Power Supply (PPS)\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when the Sink requests \nthe same voltage and current levels as the present Negotiated levels for voltage and current is shown in Figure 7.35, \n\"Transition Diagram for no change in Current or Voltage in PPS mode\". The sequence that Shall be followed is \ndescribed in Table 7.14, \"Sequence Description for no change in Current or Voltage in PPS mode\". The timing \nparameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.35, \"Transition Diagram for no change in Current or Voltage in PPS mode\", the Sink has previ-\nously sent a Request Message to the Source.\n","image_count":0,"table_count":1}
{"page":380,"text":"Page 380\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.35 Transition Diagram for no change in Current or Voltage in PPS mode\nTable 7.14  Sequence Description for no change in Current or Voltage in PPS mode\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then evaluates the Accept \nMessage and starts the PSTransitionTimer.\n3\nThe Policy Engine then sends the PS_RDY Message to \nthe Sink starting within tPpsSrcTransSmall of the \nend of the GoodCRC Message following the Accept \nMessage.\nPolicy Engine receives the PS_RDY Message.\n4\nPolicy Engine receives the GoodCRC Message from \nthe Sink.\nNote: The decision that no power transition is re-\nquired could be made either by the Device Pol-\nicy Manager or the power supply depending \non implementation.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer and evaluates the PS_RDY \nMessage from the Source. The Sink is already \noperating at the new power level, so no further action \nis required.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\nSource IOLD\nSink � IOLD\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSource Port\nCurrent\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n3\n4\nGood \nCRC\nGood \nCRC\nPSTransitionTimer (running)\ntPpsSrcTransSmall\nSource VOLD\nSink Port\nCurrent\nSource \nCL Current\nCL doesn’t change\nCurrent doesn’t change\nVBUS doesn’t change\n","image_count":0,"table_count":3}
{"page":381,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 381\n7.3.1.4\n  Changing Voltage or Current within the same AVS APDO\n7.3.1.4.1\n  Increasing the Adjustable Voltage Supply (AVS) Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when increasing the \nvoltage is shown in Figure 7.36, \"Transition Diagram for Increasing the Adjustable Power Supply Voltage\". The \nsequence that Shall be followed is described in Table 7.15, \"Sequence Description for Increasing the Adjustable \nVoltage Supply Voltage\". The timing parameters that Shall be followed are listed inTable 7.23, \"Source Electrical \nParameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.36, \"Transition Diagram for Increasing the Adjustable Power Supply Voltage\", the Sink has pre-\nviously sent a Request Message to the Source. \n","image_count":0,"table_count":1}
{"page":382,"text":"Page 382\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 7.36 Transition Diagram for Increasing the Adjustable Power Supply Voltage\nAVS Transition Interval\nSource VOLD\nSource VNEW\nSink draws current continuously for voltage changes less than or equal to vAvsSmallStep. For larger voltage changes, the Sink \nreduces to iSnkStdby.\nIOLD\nVOLD\nSource\n� V\n3\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nVNEW\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nDepends on magnitude of AVS voltage \nchange\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntAvsSrcTransSmall, tAvsSrcTransLarge\nGood \nCRC\nGood \nCRC\nIOLD\n","image_count":0,"table_count":5}
{"page":383,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 383\nTable 7.15  Sequence Description for Increasing the Adjustable Voltage Supply Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to increase its \noutput voltage. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine. Policy Engine then starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\nIf the voltage increase is larger than vAvsSmallStep, \nthe Sink Shall reduce its current draw to iSnkStdby \nwithin tSnkStdby. The reduction to iSnkStdby is not \nrequired if the voltage increase is less than or equal \nto vAvsSmallStep.\n3\nAfter sending the Accept Message, the AVS starts to \nincrease its output voltage. The AVS new voltage set-\npoint Shall be reached by tAvsSrcTransLarge for \nsteps larger than vAvsSmallStep or else by \ntAvsSrcTransSmall. The power supply informs the \nDevice Policy Manager that it has reached the new \nlevel. The power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tAvsSrcTransSmall or \ntAvsSrcTransLarge of the end of the GoodCRC \nMessage following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new voltage set \npoint. The Sink May begin operating at the new \npower level any time after evaluation of the PS_RDY \nMessage.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":384,"text":"Page 384\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.1.4.2\n  Decreasing the Adjustable Voltage Supply (AVS) Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when decreasing the \nvoltage is shown in Figure 7.37, \"Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\". The \nsequence that Shall be followed is described in Table 7.16, \"Sequence Description for Decreasing the Adjustable \nVoltage Supply Voltage\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical \nParameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.37, \"Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\", the Sink has \npreviously sent a Request Message to the Source. \n","image_count":0,"table_count":1}
{"page":385,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 385\nFigure 7.37 Transition Diagram for Decreasing the Adjustable Voltage Supply Voltage\nAVS Transition Interval\nSource VOLD\nSource VNEW\n��IOLD\nVOLD\nSource\n�V\n3\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nVNEW\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSTransitionTimer\ntAvsSrcTransSmall, tAvsSrcTransLarge\nGood \nCRC\nGood \nCRC\nSink ��IOLD\n","image_count":0,"table_count":6}
{"page":386,"text":"Page 386\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.16  Sequence Description for Decreasing the Adjustable Voltage Supply Voltage\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to decrease its \noutput voltage. \nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then and starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nAfter sending the Accept Message, the AVS starts to \ndecrease its output voltage. The AVS new voltage set-\npoint Shall be reached by tAvsSrcTransLarge for \nsteps larger than vAvsSmallStep or else by \ntAvsSrcTransSmall. The power supply informs the \nDevice Policy Manager that it has reached the new \nlevel. The power supply status is passed to the Policy \nEngine.\n4\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tAvsSrcTransSmall or \ntAvsSrcTransLarge of the end of the GoodCRC \nMessage following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n5\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source and tells the Device Policy Manager \nthat the Source is operating at the new voltage set \npoint (corresponding to vAvsNew).\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n","image_count":0,"table_count":2}
{"page":387,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 387\n7.3.1.4.3\n  Same Request Adjustable Voltage Supply (AVS) Voltage\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed when the Sink requests \nthe same voltage and current levels as the present Negotiated levels for voltage and current as shown in Figure \n7.38, \"Transition Diagram for no change in Current or Voltage in AVS mode\". The sequence that Shall be followed is \ndescribed in Table 7.17, \"Sequence Description for no change in Current or Voltage in AVS mode\". The timing \nparameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\". \nNote:\nIn Figure 7.38, \"Transition Diagram for no change in Current or Voltage in AVS mode\", the Sink has previ-\nously sent a Request Message to the Source. \nFigure 7.38 Transition Diagram for no change in Current or Voltage in AVS mode\nTable 7.17  Sequence Description for no change in Current or Voltage in AVS mode\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends the Accept Message to the Sink.\nPolicy Engine receives the Accept Message.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then and starts the \nPSTransitionTimer and evaluates the Accept \nMessage.\n3\nThe Policy Engine sends the PS_RDY Message to the \nSink starting within tAvsSrcTransSmall of the end of \nthe GoodCRC Message following the Accept Message.\nThe Policy Engine receives the PS_RDY Message from \nthe Source.\n4\nProtocol Layer receives the GoodCRC Message from \nthe Sink.\nNote: The decision that no power transition is re-\nquired could be made either by the Device Pol-\nicy Manager or the power supply depending \non implementation.\nProtocol Layer sends the GoodCRC Message to the \nSource. Policy Engine then stops the \nPSTransitionTimer, evaluates the PS_RDY Message \nfrom the Source. The Sink is already operating at the \nnew power level, so no further action is required.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\nCurrent doesn’t change\nVBUS doesn’t change\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nVoltage\nSink Port\nCurrent\nPort to Port \nMessaging\nSource \nVBUS Voltage\nSink \nVBUS Current\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n3\n4\nPSTransitionTimer\ntAvsSrcTransSmall, tAvsSrcTransLarge\nGood \nCRC\nGood \nCRC\n","image_count":0,"table_count":5}
{"page":388,"text":"Page 388\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.2\n  Transitions Caused by Power Role Swap\n7.3.2.1\n  Sink Requested Power Role Swap\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed during a Sink requested \nPower Role Swap is shown in Figure 7.39, \"Transition Diagram for a Sink Requested Power Role Swap\". The sequence \nthat Shall be followed is described in Table 7.18, \"Sequence Description for a Sink Requested Power Role Swap\". The \ntiming parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.39, \"Transition Diagram for a Sink Requested Power Role Swap\", the Sink has previously sent \na PR_Swap Message to the Source.\n","image_count":0,"table_count":1}
{"page":389,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 389\nFigure 7.39 Transition Diagram for a Sink Requested Power Role Swap\nt4\nt2\nt3\nt1\nNew Sink\nNew Source\nNew Source\nNew Sink\nInitial Sink\nInitial Source\nInitial Sink\nInitial Source\nSource to \nSwap Standby\nSink � IOLD\nSwap Standby\nSwap Standby \nto Source\nSwap Standby \nto Sink\nImplicit Contract\nIOLD\nSource VOLD\nSink to Swap \nStandby\nVOLD\n3\n4\n7\nnot driven\nSwap Standby\nvSafe5V\n10\nnot driven\nI2\nI2\nI1\nI1\nInitial Source Port\nPolicy Engine\nInitial Sink Port\nPolicy Engine\nInitial Source Port\nDevice Policy Mgr\nSource � Sink\nPower Supply\nInitial Sink Port\nDevice Policy Mgr\nSink � Source\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1 � iSnkSwapStdby                                                           I2 ��iSnkSwapStdby + cSnkBulkPd( VBUS/ t)\nSource vSafe5V\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nRd to Rp\n���p to Rd\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n5\n6\nPSSourceOffTimer\ntSrcTransition\nGood \nCRC\ntSrcTransOff\nGood \nCRC\nPSSourceOnTimer\nSend\nPS_RDY\nEvaluate\nPS_RDY\nGood \nCRC\n8\n9\ntSrcTransOn\n","image_count":24,"table_count":2}
{"page":390,"text":"Page 390\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.18  Sequence Description for a Sink Requested Power Role Swap\nStep\nInitial Source Port  New Sink Port\nInitial Sink Port  New Source Port\n1\nPolicy Engine sends the Accept Message to the Initial \nSink.\nPolicy Engine receives the Accept.\n2\nProtocol Layer receives the GoodCRC Message from \nthe Sink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer sends the GoodCRC Message to the \nInitial Source. Policy Engine then starts the \nPSSourceOffTimer and evaluates the Accept \nMessage.\n3\nPolicy Engine tells the Device Policy Manager to \ninstruct the power supply to transition to Swap \nStandby within tSnkStdby (t1); t1 Shall complete \nbefore tSrcTransition min. When in Sink Standby the \nInitial Sink Shall Not draw more than \niSnkSwapStdby (I1). The Sink Shall Not violate \ntransient load behavior defined in Section 7.2.6, \n\"Transient Load Behavior\" while transitioning to and \noperating at the new power level.\n4\ntSrcTransition after the GoodCRC Message was \nreceived, the power supply starts to change its output \npower capability to Swap Standby (see Section 7.1.10, \n\"Swap Standby for Sources\"). The power supply Shall \ncomplete the transition to Swap Standby within \ntSrcSwapStdby (t2). The power supply informs the \nDevice Policy Manager that it is ready to operate as \nthe New Sink. The CC termination is changed from Rp \nto Rd (see [USB Type-C 2.4]). The power supply \nstatus is passed to the Policy Engine.\n5\nThe power supply is ready, and the Policy Engine \nsends the PS_RDY Message to the device that will \nbecome the New Source, starting within \ntSrcTransOff of the end of the GoodCRC Message \nfollowing the Accept Message.\n6\nProtocol Layer receives the GoodCRC Message from \nthe device that will become the New Source.\nPolicy Engine starts the PSSourceOnTimer. Upon \nsending the PS_RDY Message and receiving the \nGoodCRC Message the Initial Source is ready to be the \nNew Sink.\nThe Protocol Layer sends the GoodCRC Message to \nthe New Sink.\nPolicy Engine the stops the PSSourceOffTimer and \ntells the Device Policy Manager to instruct the power \nsupply to operate as the New Source.\nIf the PS_RDY Message is not received before \nPSTransitionTimer times out the Sink sends Hard \nReset Signaling.\n7\nThe CC termination is changed from Rd to Rp (see \n[USB Type-C 2.4]). The power supply as the New \nSource transitions from Swap Standby to sourcing \ndefault vSafe5V within tNewSrc (t3). The power \nsupply informs the Device Policy Manager that it is \noperating as the New Source.\n8\nPolicy Engine receives the PS_RDY Message from the \nSource.\nDevice Policy Manager informs the Policy Engine the \npower supply is ready, and the Policy Engine sends \nthe PS_RDY Message to the New Sink, starting within \ntSrcTransOn of the end of the GoodCRC Message \nfollowing the Accept Message. \n","image_count":0,"table_count":2}
{"page":391,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 391\n9\nProtocol Layer sends the GoodCRC Message to the \nNew Source and then stops the PSSourceOnTimer.\nPolicy Engine evaluates the PS_RDY Message from \nthe New Source and tells the Device Policy Manager to \ninstruct the power supply to draw current as the New \nSink.\nProtocol Layer receives the GoodCRC Message from \nthe New Sink.\n10\nThe power supply as the New Sink transitions from \nSwap Standby and begins to drawing the current \nallowed by the Implicit Contract. The power supply \ninforms the Device Policy Manager that it is \noperating as the New Sink. At this point subsequent \nNegotiations between the New Source and the New \nSink May proceed as normal. The Sink Shall Not \nviolate the transient load behavior defined in Section \n7.2.6, \"Transient Load Behavior\" while transitioning \nto and operating at the new power level. The time \nduration (t4) depends on the magnitude of the load \nchange (iLoadStepRate).\nTable 7.18  Sequence Description for a Sink Requested Power Role Swap (Continued)\nStep\nInitial Source Port  New Sink Port\nInitial Sink Port  New Source Port\n","image_count":0,"table_count":2}
{"page":392,"text":"Page 392\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.2.2\n  Source Requested Power Role Swap\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed during a Source \nrequested Power Role Swap is shown in Figure 7.40, \"Transition Diagram for a Source Requested Power Role Swap\". \nThe sequence that Shall be followed is described in Table 7.19, \"Sequence Description for a Source Requested Power \nRole Swap\". The timing parameters that Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", \nTable 7.24, \"Sink Electrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\nNote:\nIn Figure 7.40, \"Transition Diagram for a Source Requested Power Role Swap\", the Source has previously \nsent a PR_Swap Message to the Sink.\n","image_count":0,"table_count":1}
{"page":393,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 393\nFigure 7.40 Transition Diagram for a Source Requested Power Role Swap\nt4\nt2\nt3\nt1\nNew Sink\nNew Source\nNew Source\nNew Sink\nInitial Sink\nInitial Source\nInitial Sink\nInitial Source\nSource to \nSwap Standby\nSink � IOLD\nSwap Standby\nSwap Standby \nto Source\nSwap Standby \nto Sink\nImplicit Contract\nIOLD\nSource VOLD\nSink to Swap \nStandby\nVOLD\n2a\n4\n6\nnot driven\nSwap Standby\nvSafe5V\n10\nnot driven\nI2\nI2\nI1\nI1\nInitial Source Port\nPolicy Engine\nInitial Sink Port\nPolicy Engine\nInitial Source Port\nDevice Policy Mgr\nSource � Sink\nPower Supply\nInitial Sink Port\nDevice Policy Mgr\nSink � Source\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nI1 � iSnkSwapStdby                                                           I2 ��iSnkSwapStdby + cSnkBulkPd( VBUS/ t)\nSource vSafe5V\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nRd to Rp\n���p to Rd\nSend\nAccept\nEvaluate\nAccept\nSend\nPS_RDY\nEvaluate\nPS_RDY\n1\n2\n4\n5\nPSSourceOffTimer (running)\ntSrcTransition\nGood \nCRC\nGood \nCRC\nPSSourceOnTimer\n(running)\nSend\nPS_RDY\nEvaluate\nPS_RDY\nGood \nCRC\n7\n9\n","image_count":27,"table_count":2}
{"page":394,"text":"Page 394\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.19  Sequence Description for a Source Requested Power Role Swap\nStep\nInitial Source Port New Sink Port\nInitial Sink Port  New Source Port\n1\nPolicy Engine receives the Accept Message.\nPolicy Engine sends the Accept Message to the Initial \nSource.\n2\nProtocol Layer sends the GoodCRC Message to the \nSink. The Policy Engine tells the Device Policy \nManager to instruct the power supply to modify its \noutput power. \nProtocol Layer receives the GoodCRC Message from \nthe Initial Source. Policy Engine starts the \nPSSourceOffTimer.\n2a\nThe Policy Engine tells the Device Policy Manager to \ninstruct the power supply to transition to Swap \nStandby. The power supply Shall complete the \ntransition to Swap Standby within tSnkStdby (t1); t1 \nShall complete before tSrcTransition. The Sink Shall \nNot violate the transient load behavior defined in \nSection 7.2.6, \"Transient Load Behavior\" while \ntransitioning to and operating at the new power level. \nWhen in Sink Standby the Initial Sink Shall Not draw \nmore than iSnkSwapStdby (I1).\n3\ntSrcTransition after the GoodCRC Message was sent \nthe power supply starts to change its output power \ncapability to Swap Standby (see Section 7.1.10, \"Swap \nStandby for Sources\"). The power supply Shall \ncomplete the transition to Swap Standby within \ntSrcSwapStdby (t2). The power supply informs the \nDevice Policy Manager that it is ready to operate as \nthe New Sink. The CC termination is changed from Rp \nto Rd (see [USB Type-C 2.4]). The power supply \nstatus is passed to the Policy Engine.\n4\nThe Policy Engine sends the PS_RDY Message to the \ndevice that will become the New Source, starting \nwithin tSrcTransOff of the end of the GoodCRC \nMessage following the Accept Message.\nPolicy Engine receives the PS_RDY. \n5\nProtocol Layer receives the GoodCRC Message from \nthe soon to be New Source. Policy Engine starts the \nPSSourceOnTimer. At this point the Initial Source is \nready to be the New Sink.\nProtocol Layer sends the GoodCRC Message to the \nNew Sink.\nPolicy Engine then stops the PSSourceOffTimer and \ntells the Device Policy Manager to instruct the power \nsupply to operate as the New Source.\nIf the PS_RDY Message is not received before the \nPSSourceOffTimer times out the Sink starts sending \nHard Reset Signaling.\n6\nThe CC termination is changed from Rd to Rp (see \n[USB Type-C 2.4]). The power supply as the New \nSource transitions from Swap Standby to sourcing \ndefault vSafe5V within tNewSrc (t3). The power \nsupply informs the Device Policy Manager that it is \noperating as the New Source.\n7\nPolicy Engine receives the PS_RDY Message.\nDevice Policy Manager informs the Policy Engine the \npower supply is ready, and the Policy Engine sends \nthe PS_RDY Message to the New Sink, starting within \ntSrcTransOn of the end of the GoodCRC Message \nfollowing the Accept Message.\n","image_count":0,"table_count":2}
{"page":395,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 395\n8\nProtocol Layer sends the GoodCRC Message to the \nNew Source and then stops the PSSourceOnTimer.\nPolicy Engine evaluates the PS_RDY Message from \nthe New Source and tells the Device Policy Manager to \ninstruct the power supply to draw current as the New \nSink.\nProtocol Layer receives the GoodCRC Message from \nthe New Sink.\n9\nThe power supply as the New Sink transitions from \nSwap Standby to drawing the power allowed by the \nImplicit Contract. The power supply informs the \nDevice Policy Manager that it is operating as the New \nSink. At this point subsequent Negotiations \nbetween the New Source and the New Sink May \nproceed as normal. The New Sink Shall Not violate \nthe transient load behavior defined in Section 7.2.6, \n\"Transient Load Behavior\" while transitioning to and \noperating at the new power level. The time duration \n(t4) depends on the magnitude of the load change \n(iLoadStepRate).\nTable 7.19  Sequence Description for a Source Requested Power Role Swap (Continued)\nStep\nInitial Source Port New Sink Port\nInitial Sink Port  New Source Port\n","image_count":0,"table_count":2}
{"page":396,"text":"Page 396\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.3\n  Transitions Caused by Hard Reset\n7.3.3.1\n  Source Initiated Hard Reset\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed during a Source \nInitiated Hard Reset is shown in Figure 7.41, \"Transition Diagram for a Source Initiated Hard Reset\". The sequence \nthat Shall be followed is described in Table 7.20, \"Sequence Description for a Source Initiated Hard Reset\". The \ntiming parameters that Shall be applied are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink \nElectrical Parameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\n","image_count":0,"table_count":1}
{"page":397,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 397\nFigure 7.41 Transition Diagram for a Source Initiated Hard Reset\nTable 7.20  Sequence Description for a Source Initiated Hard Reset\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends Hard Reset Signaling to the Sink.\nSink receives Hard Reset Signaling.\n2\nPolicy Engine is informed of the Hard Reset. Policy \nEngine tells the Device Policy Manager to instruct the \npower supply to prepare for a Hard Reset.\n3\nThe Sink prepares for the Hard Reset within \ntSnkHardResetPrepare (t1) and passes an \nindication to the Device Policy Manager The Sink \nShall Not draw more than iSafe0mA when VBUS is \ndriven to vSafe0V.\n4\nPolicy Engine waits tPSHardReset after sending \nHard Reset Signaling and then tells the Device Policy \nManager to instruct the power supply to perform a \nHard Reset. The transition to vSafe0V Shall occur \nwithin tSafe0V (t2).\n5\nAfter tSrcRecover the Source applies power to VBUS \nin an attempt to re-establish communication with the \nSink and resume USB Default Operation. The \ntransition to vSafe5V Shall occur within tSrcTurnOn \n(t3).\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level.\nt3\nSource VOLD\nSend\nHard Reset\nSink\nPrepare\nVOLD\nSource\nHard Reset\n1\n� IOLD\niSafe0mA\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nvSafe0V\n3\nvSafe5V\nDefault current draw\n�\n�\nSource vSafe5V\n4\nSource vSafe0V\nSink � IOLD\nReady to recover and power up\nSource \nRecover\ntSrcRecover\n5\nProcess\nHard Reset\ntPSHardReset\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\n2\nt2\nt1\n","image_count":26,"table_count":9}
{"page":398,"text":"Page 398\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.3.2\n  Sink Initiated Hard Reset\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed during a Sink Initiated \nHard Reset is shown in Figure 7.42, \"Transition Diagram for a Sink Initiated Hard Reset\". The sequence that Shall be \nfollowed is described in Table 7.21, \"Sequence Description for a Sink Initiated Hard Reset\". The timing parameters \nthat Shall be followed are listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical \nParameters\", and Table 7.25, \"Common Source/Sink Electrical Parameters\".\n","image_count":0,"table_count":1}
{"page":399,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 399\nFigure 7.42 Transition Diagram for a Sink Initiated Hard Reset\nTable 7.21  Sequence Description for a Sink Initiated Hard Reset\nStep\nSource Port\nSink Port\n1\nPolicy Engine sends Hard Reset Signaling to the \nSource.\n2\nPolicy Engine tells the Device Policy Manager to \ninstruct the power supply to prepare for a Hard \nReset. \n3\nThe Sink prepares for the Hard Reset within \ntSnkHardResetPrepare (t1) and passes an \nindication to the Device Policy Manager. The Sink \nShall Not draw more than iSafe0mA when VBUS is \ndriven to vSafe0V.\n4\nPolicy Engine is informed of the Hard Reset. \n5\nPolicy Engine waits tPSHardReset after receiving \nHard Reset Signaling and then tells the Device Policy \nManager to instruct the power supply to perform a \nHard Reset. The transition to vSafe0V Shall occur \nwithin tSafe0V (t2).\n6\nAfter tSrcRecover the Source applies power to VBUS \nin an attempt to re-establish communication with the \nSink and resume USB Default Operation. The \ntransition to vSafe5V Shall occur within tSrcTurnOn \n(t3).\nThe Sink Shall Not violate the transient load \nbehavior defined in Section 7.2.6, \"Transient Load \nBehavior\" while transitioning to and operating at the \nnew power level.\nt3\nt2\nSend\nHard Reset\nEvaluate\nHard Reset\nSink\nPrepare\nVOLD\nSource\nHard Reset\n1\n� IOLD\niSafe0mA\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Supply\nSink Port\nDevice Policy Mgr\nSink Port\nPower Supply\nSource Port\nVoltage\nSink Port\nCurrent\nvSafe0V\n3\n4\nvSafe5V\nDefalt current \ndraw\n�\n�\nSource vSafe5V\n5\nSource vSafe0V\nSink � IOLD\nSource VOLD\nReady to recover and power up\nSource \nRecover\ntSrcRecover\n6\ntPSHardReset\nPort to Port \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nProcess\nHard Reset\n2\nt1\n","image_count":21,"table_count":7}
{"page":400,"text":"Page 400\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.3.4\n  Transitions Caused by Fast Role Swap\n7.3.4.1\n  Fast Role Swap\nThe interaction of the System Policy, Device Policy, and power supply that Shall be followed during a Fast Role Swap \nis shown in Figure 7.43, \"Transition Diagram for Fast Role Swap\". The parallel sequences that Shall be followed are \ndescribed in Table 7.22, \"Sequence Description for Fast Role Swap\". The timing parameters that Shall be followed \nare listed in Table 7.23, \"Source Electrical Parameters\", Table 7.24, \"Sink Electrical Parameters\", and Table 7.25, \n\"Common Source/Sink Electrical Parameters\". Negotiations between the New Source and the New Sink May occur \nafter the New Source sends the final PS_RDY Message.\nNote:\nIn Figure 7.43, \"Transition Diagram for Fast Role Swap\". and Table 7.22, \"Sequence Description for Fast \nRole Swap\" numbers are used to indicate Message related steps and letters are used to indicate other \nevents.\n","image_count":0,"table_count":1}
{"page":401,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 401\nFigure 7.43 Transition Diagram for Fast Role Swap\nRp Changed \nto Rd\nSignal Fast \nSwap\nDetect\nFast Swap\nOld Sink\nNew Sink\nOld Source\nA\nB\n2\nC\nSource Port\nPolicy Engine\nSink Port\nPolicy Engine\nSource Port\nDevice Policy Mgr\nSource Port\nPower Path\nSink Port\nDevice Policy Mgr\nSink Port\nPower Path\nSource Port\nVoltage\nSink Port\nCurrent\nPort to Port \nSignaling & \nMessaging\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nSource \nStops\nSend\nFR_Swap\n1\nSend\nAccept\nEvaluate \nFR_Swap\nNew Source = vSafe5V    \nEvaluate\nAccept\n3\n4\nSend\nPS_RDY\nEvaluate\nPS_RDY\nD1\nSink\n5\n6\nSource\nVBUS< \nvSafe5V\nSend\nPS_RDY\n7\nVBUS< \nvSafe5V\nSource \nVBUS\nSource vSafe5V\nD2\nE\nReady & Able to Source \nvSafe5V\nEvaluate\nPS_RDY\n8\ntFRSwapInit\nRd Changed \nto Rp\nF\nG\n0 A\n< tSrcFRSwap\ndischarging\nSink\n0 V\nAny voltage \n> vSafe5V\nNo current may be drawn while \nVBUS is below vSafe5V\n","image_count":0,"table_count":4}
{"page":402,"text":"Page 402\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 7.22  Sequence Description for Fast Role Swap\nStep\nInitial Source Port New Sink Port\nInitial Sink Port  New Source Port\nFast Role Swap Request and Power Transition\nA\nThe Source connected to the Hub UFP (see Figure \n7.16, \"VBUS Power during Fast Role Swap\") stops \nsourcing VBUS.\nB\nPolicy Engine sends the Fast Role Swap Request to the \nInitial Sink on the CC wire. When VBUS < vSafe5V \n(min), it tells the Device Policy Manager not to draw \nmore than iSnkStdby until the tSnkFRSwap timer \nhas elapsed.\nC\nPolicy Engine detects the Fast Role Swap Request on \nthe CC wire from the Initial Source and Shall send \nthe FR_Swap Message back to the Initial Source (that \nis no longer powering VBUS) within time \ntFRSwapInit.\nD1\nThe Policy Engine monitors for VBUS ≤ vSafe5V so \nthat a PS_RDY Message can be sent to the New Source \nat Step 5 of the messaging sequence.\nD2\nThe Policy Engine monitors for VBUS ≤ vSafe5V so the \nInitial Sink can assume the Power Role of New Source \nand begin to source VBUS.\nE\nWhen VBUS = vSafe5V the New Source May provide \npower to VBUS. When VBUS < vSafe5V the New Source \nShall provide power to VBUS within tSrcFRSwap.\nOnce the New Source is providing power, the PS_RDY \nMessage can be sent to the New Sink at Step 7 of the \nmessaging sequence.\nF\nThe CC termination is changed from Rp to Rd (see \n[USB Type-C 2.4]) before the New Sink sends the \nPS_RDY Message at Step 5 to the New Source.\nG\nThe CC termination is changed from Rd to Rp (see \n[USB Type-C 2.4]) before the New Source sends the \nPS_RDY Message at Step 7 to the New Sink.\nFast Role Swap Message Sequence\n 1\nPolicy Engine receives the FR_Swap Message from \nthe Initial Sink that is transitioning to be the New \nSource.\nPolicy Engine sends the FR_Swap Message to the \nInitial Source (that is no longer powering VBUS) after \ndetecting the Fast Role Swap Request at Step C.\n2\nProtocol Layer sends the GoodCRC Message to the \nInitial Sink. Policy Engine then evaluates the \nFR_Swap Message.\nProtocol Layer receives the GoodCRC Message from \nthe Initial Source.\n3\nPolicy Engine sends an Accept Message to the Initial \nSink that is transitioning to be the New Source.\nPolicy Engine receives the Accept Message from the \nInitial Source that is transitioning to be the New Sink.\n4\nProtocol Layer receives the GoodCRC Message from \nthe Initial Sink that is transitioning to be the New \nSource.\nProtocol Layer sends the GoodCRC Message to the \nInitial Source that is transitioning to be the New Sink.\n","image_count":0,"table_count":2}
{"page":403,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 403\n5\nPolicy Engine sends a PS_RDY Message to the Initial \nSink that is transitioning to be the New Source. The \nPolicy Engine Shall start the PS_RDY Message at least \ntFRSwap5V after it has sent the Accept Message, and \nwhen Step D1 has also been completed.\nPolicy Engine receives the PS_RDY Message from the \nNew Sink.\n6\nProtocol Layer receives the GoodCRC Message from \nthe New Source.\nProtocol Layer sends the GoodCRC Message from the \nInitial Sink that has completed the transition to New \nSource. Policy Engine then evaluates the PS_RDY \nMessage.\n7\nPolicy Engine receives the PS_RDY Message from the \nNew Source.\nPolicy Engine sends a PS_RDY Message to the New \nSink. The Policy Engine Shall wait for Step E before \nsending the PS_RDY Message, and Shall send the \nPS_RDY Message within tFRSwapComplete of \nreceiving the PS_RDY Message from the Initial Source \nPort.\nTable 7.22  Sequence Description for Fast Role Swap (Continued)\nStep\nInitial Source Port New Sink Port\nInitial Sink Port  New Source Port\n","image_count":0,"table_count":2}
{"page":404,"text":"Page 404\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n7.4\n  Electrical Parameters\n7.4.1\n  Source Electrical Parameters\nThe Source Electrical Parameters that Shall be followed are specified in Table 7.23, \"Source Electrical Parameters\".\nTable 7.23  Source Electrical Parameters\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\ncSrcBulk\nSource bulk \ncapacitance when a \nPort is powered from a \ndedicated supply.1\n10\nµF\nSection 7.1.2\ncSrcBulkShared\nSource bulk \ncapacitance when a \nPort is powered from a \nshared supply.1\n120\nµF\nSection 7.1.2\nDNL\n(Differential Non-\nLinearity)\nDeviation between \nideal analog values \ncorresponding to \nadjacent input digital \nvalues\n-1\n0\n+1\nLSB\nSection 7.1.4.2.1\niPpsCLMin\nSPR PPS Minimum \nCurrent Limit setting.\n1\nA\nSection 7.1.4.2.2\niPpsCLNew\nCurrent Limit accuracy\nSection 7.1.4.2.2\n1A ≤ Operating \nCurrent ≤ 3A\n-150\n150\nmA\nOperating current > 3A\n-5\n5\n%\niPpsCLStep\nSPR PPS Current Limit \nprogramming step size \n(1 LSB).\n50\nmA\nSection 7.1.4.2.2\niPpsCLLoadReleaseRate\nMaximum load \ndecrease slew rate \nduring Current Limit \nset-point changes.\n-150\nmA/µs\nSection 7.1.4.2.2\niPpsCLLoadStepRate\nMaximum load \nincrease slew rate \nduring Current Limit \nset-point changes.\n150\nmA/µs\nSection 7.1.4.2.2\niPpsCLTransient\nAllowed output \ncurrent overshoot \nwhen a load increase \noccurs while in CL \nmode.\nNew load + \n100\nmA\nSection 7.1.4.2.2\nAllowed output \ncurrent undershoot \nwhen a load decrease \noccurs while in CL \nmode.\nNew load – \n100\nmA\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":405,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 405\niPpsCVCLTransient\nCV to CL transient \ncurrent bounds \nassuming the \nOperating Voltage \nreduction of Section \n7.2.3.1, \"Programmable \nPower Supply Sink \nStandby\".\niPpsCLNe\nw - 100\nNew load + \n500\nmA\nSection 7.1.4.2.2\ntAvsTransient\nThe maximum time for \nthe AVS to be between \nvAvsNew and \nvAvsValid in response \nto a load transient.\n5\nms\nSection 7.1.8.4\ntAvsSrcTransLarge\nThe time the AVS set-\npoint Shall transition \nbetween requested \nvoltages for steps \nlarger than \nvAvsSmallStep.\n0\n700\nms\nSection 7.1.4.3.1\ntAvsSrcTransSmall\nThe time the AVS set-\npoint Shall transition \nbetween requested \nvoltages for steps \nsmaller than \nvAvsSmallStep.\n0\n50\nms\nSection 7.1.4.3.1\ntNewSnk\nTime allowed for an \nInitial Source in Swap \nStandby to transition \nNew Sink operation.\n15\nms\nSection 7.1.10\nFigure 7.39\nFigure 7.40\ntPpsCLCVTransient\nCL to CV transient \nvoltage settling time.\n275\nms\nSection 7.1.4.2.2\ntPpsCLProgramSettle\nSPR PPS Current Limit \nprogramming settling \ntime.\n250\nms\nSection 7.1.4.2.2\ntPpsCLSettle\nCL load transient \ncurrent settling time.\n250\nms\nSection 7.1.4.2.2\ntPpsCVCLTransient\nCV to CL transient \nsettling time.\n250\nms\nSection 7.1.8.3\ntPpsSrcTransLarge\nThe time the \nProgrammable Power \nSupply’s set-point \nShall transition \nbetween requested \nvoltages for steps \nlarger than \nvPpsSmallStep.\n0\n275\nms\nSection 7.3.1.3\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":406,"text":"Page 406\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\ntPpsSrcTransSmall\nThe time the \nProgrammable Power \nSupply’s set-point \nShall transition \nbetween requested \nvoltages for steps less \nthan or equal to \nvPpsSmallStep.\n0\n25\nms\nSection 7.3.1.3\ntPpsTransient\nThe maximum time for \nthe Programmable \nPower Supply to be \nbetween vPpsNew and \nvPpsValid in response \nto a load transient \nwhen target load is \ngreater than or equal \nto 60mA.\n5\nms\nSection 7.1.8.3\nThe maximum time for \nthe Programmable \nPower Supply to be \nbetween vPpsNew and \nvPpsValid in response \nto a load transient \nwhen target load is less \nthan 60mA.\n150\nms\nSection 7.1.8.3\ntSrcFRSwap\nTime from the Initial \nSink detecting that \nVBUS has dropped \nbelow vSafe5V until \nthe Initial Sink/new \nSource is able to supply \nUSB Type-C Current \n(see [USB Type-C 2.4]) \n150\nµs\nSection 7.1.13\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":407,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 407\ntSrcReady\nSPR Mode\nTime from positive/\nnegative transition \nstart (t0) to when the \nSource is ready to \nprovide the newly \nNegotiated power \nlevel.\nApplies only to SPR \nMode voltage \ntransitions.\n285\nms\nFigure 7.2\nFigure 7.3\nEPR Mode\nTime from positive/\nnegative transition \nstart (t0) to when the \nSource is ready to \nprovide the newly \nNegotiated power \nlevel.\nApplies to EPR Mode \nvoltage transitions and \nany voltage transition \nthat either begins or \nends in EPR Mode.\n720\ntSrcRecover\nSPR Mode\nTime allotted for the \nSource to recover.\n0.66\n1.0\ns\nSection 7.1.5\nEPR Mode\n1.085\n1.425\ntSrcSettle\nSPR Mode\nTime from positive/\nnegative transition \nstart (t0) to when the \ntransitioning voltage is \nwithin the range \nvSrcNew.\nApplies only to SPR \nMode voltage \ntransitions.\n275\nms\nFigure 7.2\nEPR Mode\nTime from positive/\nnegative transition \nstart (t0) to when the \ntransitioning voltage is \nwithin the range \nvAvsNew.\nApplies to EPR Mode \nvoltage transitions and \nany voltage transition \nthat either begins or \nends in EPR Mode.\n700\ntSrcSwapStdby\nThe maximum time for \nthe Source to \ntransition to Swap \nStandby.\n650\nms\nSection 7.1.10\nFigure 7.17\nFigure 7.18\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":408,"text":"Page 408\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\ntSrcTransient\nThe maximum time for \nthe Source output \nvoltage to be between \nvSrcNew and \nvSrcValid in response \nto a load transient \nwhen target load is \ngreater or equal to \nthan 60mA.\n5\nms\nSection 7.1.8\nThe maximum time for \nthe Source output \nvoltage to be between \nvSrcNew and \nvSrcValid in response \nto a load transient \nwhen target load is less \nthan 60mA.\n150\nms\nSection 7.1.8\ntSrcTransition\nThe time the Source \nShall wait before \ntransitioning the \npower supply to \nensure that the Sink \nhas sufficient time to \nprepare (does not \napply to transitions \nwithin the same PPS or \nAVS APDO).\n25\n35\nms\nSection 7.3\ntSrcTransOff\nSPR \nMode\nTime from the last bit \nof the GoodCRC \nMessage \nacknowledging the \nAccept Message in \nresponse to the \nPR_Swap Message \nuntil the PS_RDY \nMessage must be \nstarted.\nApplies only to SPR \nMode voltage \ntransitions.\n690\nms\nSection 7.3.2\ntSrcTransOn\nTime from the last bit \nof the GoodCRC \nMessage \nacknowledging the \nPS_RDY Message sent \nby the new Source, in \nresponse to the \nPR_Swap Message \nuntil the PS_RDY \nMessage must be \nstarted.\n280\nms\nSection 7.3.2\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":409,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 409\ntSrcTransReq\nSPR \nMode\nTime from the last bit \nof the GoodCRC \nMessage \nacknowledging the \nAccept Message in \nresponse to the \nRequest Message until \nthe PS_RDY Message \nmust be started.\nApplies only to SPR \nMode voltage \ntransitions.\n325\nms\nSection 7.3\nEPR \nMode\nTime from the last bit \nof the GoodCRC \nMessage \nacknowledging the \nAccept Message in \nresponse to the \nRequest Message until \nthe PS_RDY Message \nmust be started.\nApplies to EPR Mode \nvoltage transitions and \nany voltage transition \nthat either begins or \nends in EPR Mode.\n760\nms\nSection 7.3\ntSrcTurnOn\nTransition time from \nvSafe0V to vSafe5V.\n275\nms\nFigure 7.10\nTable 7.20\nTable 7.21\nvAvsMaxVoltage\nMaximum Voltage \nField in the AVS APDO.\nAPDO Max\nVoltage \n*0.95\nAPDO Max\nVoltage * \n1.05\nV\nSection 7.1.4.3.1\nvAvsMinVoltage\nMinimum Voltage \nField in the AVS APDO.\nAPDO Min\nVoltage \n*0.95\nAPDO\nMin\nVoltage * \n1.05\nV\nSection 7.1.4.3.1\nvAvsNew\nAdjustable RDO Output \nVoltage measured at \nthe Source receptacle.\nRDO \nOutput \nVoltage \n*0.95\nRDO \nOutput \nVoltage\nRDO \nOutput \nVoltage \n*1.05\nV\nSection 7.1.8.4\nvAvsSlewNeg\nAVS maximum slew \nrate for negative \nvoltage changes.\n-30\nmV/µs\nSection 7.1.8.4\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":410,"text":"Page 410\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nvAvsSlewPos\nAVS maximum slew \nrate for positive \nvoltage changes.\n30\nmV/µs\nSection 7.1.8.4\nvAvsSmallStep\nAVS step size defined \nas a small step relative \nto the previous \nvAvsNew.\n-1.0\n1.0\nV\nSection 7.1.4.3.1\nvAvsStep\nAVS voltage \nprogramming step \nsize.\n100\nmV\nSection 7.1.8.4\nvAvsValid\nThe range in addition \nto vAvsNew which the \nAVS output is \nconsidered Valid \nduring and after a \ntransition as well as in \nresponse to a transient \nload condition.\n-0.5\n0.5\nV\nSection 7.1.8.4\nvPpsCLCVTransient\nCL to CV load transient \nvoltage bounds.\nOperating \nVoltage * \n0.95 – \n0.1V\nOperating \nVoltage * \n1.05 + \n0.1V\nV\nSection 7.1.4.2.2\nvPpsMaxVoltage\nMaximum Voltage \nField in the \nProgrammable Power \nSupply APDO.\nAPDO\nMax\nVoltage \n*0.95\nAPDO Max\nVoltage * \n1.05\nV\nSection 7.1.4.2.1\nvPpsMinVoltage\nMinimum Voltage \nField in the \nProgrammable Power \nSupply APDO.\nAPDO\nMin\nVoltage \n*0.95\nAPDO Min \nVoltage * \n1.05\nV\nSection 7.1.4.2.1\nvPpsNew\nProgrammable RDO \nOutput Voltage \nmeasured at the \nSource receptacle.\nRDO \nOutput \nVoltage \n*0.95\nRDO \nOutput \nVoltage\nRDO \nOutput \nVoltage \n*1.05\nV\nSection 7.1.8.3\nvPpsShutdown\nThe voltage at which \nthe SPR PPS shuts \ndown when operating \nin CL.\nAPDO \nMinimum \nVoltage * \n0.85\nAPDO \nMinimum\nVoltage * \n0.95\nV\nSection 7.1.4.2.2\nvPpsSlewNeg\nProgrammable Power \nSupply maximum slew \nrate for negative \nvoltage changes\n-30\nmV/µs\nSection 7.1.8.3\nvPpsSlewPos\nProgrammable Power \nSupply maximum slew \nrate for positive \nvoltage changes\n30\nmV/µs\nSection 7.1.8.3\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":411,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 411\nvPpsSmallStep\nPPS Step size defined \nas a small step relative \nto the previous \nvPpsNew.\n-500\n500\nmV\nSection 7.1.4.2.2\nvPpsStep\nPPS voltage \nprogramming step size \n(1 LSB).\n20\nmV\nSection 7.1.8.3\nvPpsValid\nThe range in addition \nto vPpsNew which the \nProgrammable Power \nSupply output is \nconsidered Valid in \nresponse to a load step. \n-0.1\n0.1\nV\nSection 7.1.8.3\nvSmallStep\nVBUS step size increase \ndefined as a small step \nrelative to the \nprevious VBUS when \nRequesting a different \n(A)PDO.\n500\nmV\nSection 7.1.4.3.1\nvSrcNeg\nMost negative voltage \nallowed during \ntransition.\n-0.3\nV\nFigure 7.10\nvSrcNew\nFixed Supply output \nmeasured at the \nSource receptacle.\nPDO \nVoltage \n*0.95\nPDO \nVoltage\nPDO \nVoltage \n*1.05\nV\nTable 7.2\nVariable Supply output \nmeasured at the \nSource receptacle.\nPDO \nMinimum \nVoltage\nPDO \nMaximum \nVoltage\nV\nBattery Supply output \nmeasured at the \nSource receptacle.\nPDO \nMinimum \nVoltage\nPDO \nMaximum \nVoltage\nV\nvSrcPeak\nThe range that a Fixed \nSupply or EPR AVS in \nPeak Current \noperation is allowed \nwhen overload \nconditions occur.\nPDO \nVoltage \n*0.90\nPDO \nVoltage \n*1.05\nV\nTable 6.10\nTable 6.16\nFigure 7.14\nvSrcSlewNeg\nMaximum slew rate \nallowed for negative \nvoltage transitions. \nLimits current based \non a 3 A connector \nrating and maximum \nSink bulk capacitance \nof 100 µF.\n-30\nmV/µs Section 7.1.4.2\nTable 7.2\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":412,"text":"Page 412\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nvSrcSlewPos\nMaximum slew rate \nallowed for positive \nvoltage transitions. \nLimits current based \non a 3 A connector \nrating and maximum \nSink bulk capacitance \nof 100 µF.\n30\nmV/µs\nSection 7.1.4\nFigure 7.2\nvSrcValid\nThe range in addition \nto vSrcNew which a \nnewly Negotiated \nvoltage is considered \nValid during and after \na transition as well as \nin response to a \ntransient load \ncondition. This range \nalso applies to \nvSafe5V.\n-0.5\n0.5\nV\nFigure 7.2\nFigure 7.3\nSection 7.1.8\nTable 7.23  Source Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nThe Source Shall charge and discharge the total bulk capacitance to meet the transition time requirements.\n","image_count":0,"table_count":2}
{"page":413,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 413\n7.4.2\n  Sink Electrical Parameters\nThe Sink Electrical Parameters that Shall be followed are specified in Table 7.24, \"Sink Electrical Parameters\".\nTable 7.24  Sink Electrical Parameters\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\ncSnkBulk\nSink bulk capacitance on VBUS at \nAttach and during FRS after the \nInitial Source stops sourcing and \nprior to establishing the First \nExplicit Contract (see Appendix E, \n\"FRS System Level Example\" for an \nexample).1\nSee [USB 3.2]\nSection 7.2.2\n[USB 3.2]\ncSnkBulkPd\nBulk capacitance on VBUS a Sink is \nallowed after a successful \nNegotiation.1\n100\nµF\nSection 7.2.2\niLoadReleaseRate\nLoad release di/dt.\n-150\nmA/\nµs\nSection 7.2.6\niLoadStepRate\nLoad step di/dt.\n150\nmA/\nµs\nSection 7.2.6\niNewFrsSink\nMaximum current the New Sink \ncan draw during a Fast Role Swap \nuntil the New Source applies Rp.\nMatches the required Fast Role \nSwap required USB Type-C \nCurrent Current field of the Fixed \nSupply PDO of the Initial Source’s \nSink_Capabilities Message.\nDefault USB \ncurrent or 1.5 \nor 3.0\nA\nSection 7.1.13\niOvershoot\nPositive or negative overshoot \nwhen a load change occurs less \nthan or equal to iLoadStepRate; \nrelative to the settled value after \nthe load change.\n-230\n230\nmA\nSection 7.2.6\niPpsCLLoadStep \nMaximum Current set-point \nchange while operating in CL \nmode.\n-500\n500\nmA\nSection 7.2.3.1\niSafe0mA\nMaximum current a Sink is \nallowed to draw when VBUS is \ndriven to vSafe0V.\n1.0\nmA\nFigure 7.29\nFigure 7.30\niSnkStdby\nMaximum current during voltage \ntransition.\n500\nmA\nSection 7.2.3\niSnkSwapStdby\nMaximum current a Sink can draw \nduring Swap Standby. Ideally this \ncurrent is very near to 0 mA \nlargely influenced by Port leakage \ncurrent.\n2.5\nmA\nSection 7.2.7\n1)\nIf more bypass capacitance than cSnkBulk max or cSnkBulkPd max is required in the device, then the device Shall \nincorporate some form of VBUS surge current limiting as described in [USB 3.2] Section 11.4.4.1.\n","image_count":0,"table_count":2}
{"page":414,"text":"Page 414\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\npHubSusp\nSuspend power consumption for a \nHub. 25mW + 25mW per \ndownstream Port for up to 4 \nports.\n125\nmW\nSection 7.2.3\npSnkSusp\nSuspend power consumption for a \nperipheral device.\n25\nmW\nSection 7.2.3\ntNewSrc\nMaximum time allowed for an \nInitial Sink in Swap Standby to \ntransition to New Source \noperation.\n275\nms\nSection 7.2.7\nTable 7.18\nTable 7.19\ntSnkFRSwap\nTime during a Fast Role Swap \nwhen the New Sink can draw no \nmore than iSnkStdby.\n200\nµs\nSection 7.1.13\ntSnkHardResetPrepare\nTime allotted for the Sink power \nelectronics to prepare for a Hard \nReset.\n15\nms\nTable 7.12\ntSnkNewPower\nMaximum transition time \nbetween power levels.\n15\nms\nSection 7.2.3\ntSnkRecover\nTime for the Sink to resume USB \nDefault Operation.\n150\nms\nTable 7.20\ntSnkStdby\nTime to transition to Sink Standby \nfrom Sink.\n15\nms\nSection 7.2.3\ntSnkSwapStdby\nMaximum time for the Sink to \ntransition to Swap Standby.\n15\nms\nSection 7.2.7\nvEprMax\nHighest voltage an EPR Sink is \nexpected to tolerate \n55\nV\nSection 7.2.9.2\nvSprMax\nHighest voltage an SPR Sink is \nexpected to tolerate\n24\nV\nSection 7.2.9.2\nTable 7.24  Sink Electrical Parameters (Continued)\nParameter\nDescription\nMIN\nTYP\nMAX\nUNITS\nReference\n1)\nIf more bypass capacitance than cSnkBulk max or cSnkBulkPd max is required in the device, then the device Shall \nincorporate some form of VBUS surge current limiting as described in [USB 3.2] Section 11.4.4.1.\n","image_count":0,"table_count":2}
{"page":415,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 415\n7.4.3\n  Common Electrical Parameters\nElectrical Parameters that are common to both the Source and the Sink that Shall be followed are specified in \nTable 7.25, \"Common Source/Sink Electrical Parameters\"”.\nTable 7.25  Common Source/Sink Electrical Parameters\nParameter\nDescription\nMIN TYP MAX UNITS\nReference\ntSafe0V\nTime to reach vSafe0V max.\n650\nms\nSection 7.1.5\nFigure 7.10\nTable 7.20\nTable 7.21\ntSafe5V\nTime to reach vSafe5V max.\n275\nms\nSection 7.1.5\nFigure 7.10\nTable 7.20\nTable 7.21\ntVCONNReapplied\nWhen the UFP is the VCONN Source: \ntime from the last bit of the \nGoodCRC acknowledging the \nPS_RDY Message before \nreapplying VCONN. \nWhen the DFP is the VCONN Source: \ntime from when VCONN drops \nbelow vRaReconnect.\n10\n20\nms\nFigure 7.19\nFigure 7.20\ntVCONNValid\nTime from tVCONNReapplied until \nVCONN is within vVconnValid (see \n[USB Type-C 2.4]).1\n0\n5\nms\nFigure 7.19\nFigure 7.20\ntVCONNZero\nTime from the last bit of the \nGoodCRC acknowledging the \nAccept Message in response to the \nData_Reset Message until VCONN is \nbelow vRaReconnect (see [USB \nType-C 2.4]).\n125\nms\nFigure 7.19\nFigure 7.20\nvSafe0V\nSafe operating voltage at “zero \nvolts”.\n0\n0.8\nV\nSection 7.1.5\nvSafe5V\nSafe operating voltage at 5V. See \n[USB 2.0] and [USB 3.2] for \nallowable VBUS voltage range.\n4.75\n5.5\nV\nSection 7.1.5\n1)\ntVCONNStable (See [USB Type-C 2.4]) still applies.\n","image_count":0,"table_count":2}
{"page":416,"text":"Page 416\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8\n Device Policy\n8.1\n  Overview\nThis section describes the Device Policy and Policy Engine that implements it. For an overview of the architecture and \nhow the Device Policy Manager fits into this architecture, please see Section 2.6, \"Architectural Overview\".\n","image_count":0,"table_count":1}
{"page":417,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 417\n8.2\n  Device Policy Manager\nThe Device Policy Manager is responsible for managing the power used by one or more USB Power Delivery ports. \nIn order to have sufficient knowledge to complete this task it needs relevant information about the device it resides \nin. Firstly, it has a priori knowledge of the device including the Capabilities of the power supply and the receptacles \non each Port since these will for example have specific current ratings. It also has to know information from the \nUSB-C® Port Control module regarding cable insertion, type and rating of cable etc. It also has to have information \nfrom the power supply about changes in its Capabilities as well as being able to request power supply changes. \nWith all of this information the Device Policy Manager is able to provide up to date information regarding the \nCapabilities available to a specific Port and to manage the power resources within the device.\nWhen working out the Capabilities for a given Source Port the Device Policy Manager will take into account firstly \nthe current rating of the Port's receptacle and whether the inserted cable is PD or non-PD rated and if so, what is \nthe capability of the plug. This will set an upper bound for the Capabilities which might be offered. After this the \nDevice Policy Manager will consider the available power supply resources since this will bound which voltages and \ncurrents might be offered. Finally, the Device Policy Manager will consider what power is currently allocated to \nother ports, which power is in the Power Reserve and any other amendments to Policy from the System Policy \nManager. The Device Policy Manager will offer a set of Capabilities within the bounds detailed above.\nWhen selecting a capability for a given Sink Port the Device Policy Manager will look at the Capabilities offered by \nthe Source. This will set an upper bound for the Capabilities which might be requested. The Device Policy Manager \nwill also consider which Capabilities are required by the Sink in order to operate. If an appropriate match for \nvoltage and Current can be found within the limits of the receptacle and cable, then this will be requested from the \nSource. If an appropriate match cannot be found then a request for an offered voltage and current will be made, \nalong with an indication of a Capabilities Mismatch.\nUSB PD defines two types of power sources:\n\nPredefined voltage sources (Fixed Supply, Variable Supply and Battery Supply) \n\nProgrammable voltage sources:\n\nProgrammable Power Supply (PPS)\n\nAdjustable Voltage Supply (AVS)\nThe first are generally used for classic charging wherein the Charger electronics reside inside the Sink. The Device \nPolicy Manager in the Sink requests a fixed voltage from the list of PDOs offered by the Source and which is \nconverted internally to charge the Sink's Battery and/or power its function. \nThe second moves the Charger electronics that manage the voltage control outside the Sink and back into the \nSource itself. When in SPR PPS Mode, the Device Policy Manager in the Sink requests a specific voltage with a 20mV \naccuracy and sets a current limit. Unlike traditional USB where Sinks are responsible for limiting the current, they \nconsume, the SPR PPS Source limits the current to what the Sink has requested. When operating in, the Device Policy \nManager in the Sink requests a specific voltage with a 100mV accuracy and requests a maximum current it is \nallowed to draw. \nNote:\nThe AVS Sources unlike SPR PPS Sources do not support current limit mode. A Sink operating in is respon-\nsible not to draw more current than it requests.\nThe process to request power is the same for both types of power Sources although the actual format and contents \nof the request are slightly different. The primary operational differences are:\n\nA Sink that is using SPR PPS is required to periodically sent requests to let the Source know it is still alive \nand communicating. When this communication fails a Hard Reset results.\n\nA Sink operating in SPR Mode has no special timing requirements.\n\nA Sink operating in EPR Mode is required to periodically communicate with the Source to let it know it \nis still operational. If the communication fails, a Hard Reset results.\nFor Dual-Role Power Ports the Device Policy Manager manages the functionality of both a Source and a Sink. In \naddition, it is able to manage the Power Role Swap process between the two. In terms of power management this \n","image_count":0,"table_count":1}
{"page":418,"text":"Page 418\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\ncould mean that a Port which is initially consuming power as a Sink is able to become a power resource as a Source. \nConversely, Attached Sources might request that power be provided to them.\nThe functionality within the Device Policy Manager (and to a certain extent the Policy Engine) is scalable depending \non the complexity of the device, including the number of different power supply Capabilities and the number of \ndifferent features supported for example System Policy Manager interface or Capabilities Mismatch, and the \nnumber of ports being managed. Within these parameters it is possible to implement devices from very simple \npower supplies to more complex power supplies or devices such as USB Hubs or Hard Drives. Within multi-Port \ndevices it is also permitted to have a combination of USB Power Delivery and non-USB Power Delivery ports which \nShould all be managed by the Device Policy Manager.\nAs noted in Section 2.6, \"Architectural Overview\" the logical architecture used in the PD specification will vary \ndepending on the implementation. This means that different implementations of the Device Policy Manager might \nbe relatively small or large depending on the complexity of the device, as indicated above. It is also possible to \nallocate different responsibilities between the Policy Engine and the Device Policy Manager, which will lead to \ndifferent types of architectures and interfaces.\nThe Device Policy Manager is responsible for the following:\n\nMaintaining the Local Policy for the device. \n\nFor a Source, monitoring the present Capabilities and triggering notifications of the change.\n\nFor a Sink, evaluating and responding to Capabilities related requests from the Policy Engine for a given \nPort.\n\nControl of the Source/Sink in the device.\n\nControl of the USB-C® Port Control module for each Port.\n\nInterface to the Policy Engine for a given Port.\nThe Device Policy Manager is responsible for the following Optional features when implemented:\n\nCommunications with the System Policy over USB.\n\nFor Sources with multiple ports monitoring and balancing power requirements across these ports.\n\nMonitoring of batteries and AC power supplies.\n\nManaging Modes in its Port Partner and Cable Plug(s).\n8.2.1\n  Capabilities\nThe Device Policy Manager in a Provider Shall know the power supplies available in the device and their \nCapabilities. In addition, it Shall be aware of any other PD sources of power such as batteries and AC inputs. The \navailable power sources and existing demands on the device Shall be taken into account when presenting \nCapabilities to a Sink.\nThe Device Policy Manager in a Consumer Shall know the requirements of the Sink and use this to evaluate the \nCapabilities offered by a Source. It Shall be aware of its own power sources e.g., Batteries or AC supplies where \nthese have a bearing on its operation as a Sink.\nThe Device Policy Manager in a Dual-Role Power Device Shall combine the above Capabilities and Shall also be able \nto present the dual-role nature of the device to an Attached PD Capable device.\n8.2.2\n  System Policy\nA given PD Capable device might have no USB capability, or PD might have been added to a USB device in such a \nway that PD is not integrated with USB. In these two cases there Shall be no requirement for the Device Policy \nManager to interact with the USB interface of the device. The following requirements Shall only apply to PD \ndevices that expose PD functionality over USB.\n","image_count":0,"table_count":1}
{"page":419,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 419\nThe Device Policy Manager Shall communicate over USB with the System Policy Manager according to the \nrequirements detailed in [UCSI]. Whenever requested the Device Policy Manager Shall implement a Local Policy \naccording to that requested by the System Policy Manager. For example, the System Policy Manager might request \nthat a Battery powered Device temporarily stops charging so that there is sufficient power for an HDD to spin up.\nNote:\nDue to timing constraints, a PD Capable device Shall be able to respond autonomously to all time-critical \nPD related requests.\n8.2.3\n  Control of Source/Sink\nThe Device Policy Manager for a Provider Shall manage the power supply for each PD Source Port and Shall know \nat any given time what the Negotiated power is. It Shall request transitions of the supply and inform the Policy \nEngine whenever a transition completes.\nThe Device Policy Manager for a Consumer Shall manage the Sink for each PD Sink Port and Shall know at any given \ntime what the Negotiated power is.\nThe Device Policy Manager for a Dual-Role Power Device Shall manage the transition between Source/Sink Power \nRoles for each PD Dual-Role Power Port and Shall know at any given time what Power Role the Port is in.\n8.2.4\n  Cable Detection\n8.2.4.1\n  Device Policy Manager in a Provider\nThe Device Policy Manager in the Provider Shall control the USB-C® Port Control module and Shall be able to use the \nUSB-C® Port Control module to determine the Attachment status.\nNote:\nIt might be necessary for the Device Policy Manager to also initiate additional discovery using the Discov-\ner Identity Command in order to determine the full Capabilities of the cabling (see Section 6.4.4.3.1, \"Dis-\ncover Identity\").\n8.2.4.2\n  Device Policy Manager in a Consumer\nThe Device Policy Manager in a Consumer controls the USB-C® Port Control module and Shall be able to use the USB-\nC® Port Control module to determine the Attachment status.\n8.2.4.3\n  Device Policy Manager in a Consumer/Provider\nThe Device Policy Manager in a Consumer/Provider inherits characteristics of Consumers and Providers and Shall \ncontrol the USB-C® Port Control module in order to support the Dead Battery back-powering case to determine the \nfollowing for a given Port:\n\nAttachment of a USB Power Delivery Provider/Consumer which supports Dead Battery back-powering.\n\nPresence of VBUS.\n8.2.4.4\n  Device Policy Manager in a Provider/Consumer\nThe Device Policy Manager in a Provider/Consumer inherits characteristics of Consumers and Providers and May \ncontrol the USB-C® Port Control module in order to support the Dead Battery back-powering case to determine the \nfollowing for a given Port:\n\nPresence of VBUS.\n","image_count":0,"table_count":1}
{"page":420,"text":"Page 420\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.2.5\n  Managing Power Requirements\nIt is the responsibility of the Device Policy Manager in a Provider to be aware of the power requirements of all \ndevices connected to its Source Ports. This includes being aware of any reserve power that might be required by \ndevices in the future and ensuring that power is shared optimally amongst Attached PD Capable devices. This is a \nkey function of the Device Policy Manager; whose implementation is critical to ensuring that all PD Capable devices \nget the power they require in a timely fashion in order to facilitate smooth operation. This is balanced by the fact \nthat the Device Policy Manager is responsible for managing the sources of power that are, by definition, finite.\nThe Consumer's Device Policy Manager Shall ensure that it takes no more power than is required to perform its \nfunctions and when its requirements change, it Should make a new Request. The Provider, after satisfying the \nRequest, Should reclaim any unused power to ensure that it can meet total power requirements of Attached Sinks \non at least one Port.\nNote:\nIt is expected that a future design guide will provide additional guidance.\n8.2.5.1\n  Managing the Power Reserve\nThere might be some products where a Device has certain functionality at one power level and a greater \nfunctionality at another, for example a Printer/Scanner that operates only as a printer with one power level and as \na scanner if it can get more power. While the visibility of the linkage between power and functionality might only \nbe apparent to the USB Host; the Device Policy Manager Should provide mechanisms to manage the power \nrequirements of such Devices.\nIt is the Device Policy Manager's responsibility to allocate power and maintain a power reserve so as not to over-\nsubscribe its available power resource. A Device with multiple ports such as a Hub Shall always attempt to meet \nthe incremental demands of the Port requiring the highest incremental power from its power reserve.\n8.2.5.2\n  Power Capability Mismatch\nA Capabilities Mismatch occurs when a Consumer cannot obtain required power from a Provider (or the Source is \nnot PD Capable) and the Consumer requires such Capabilities to operate. Different actions are taken by the Device \nPolicy Manager and the System Policy Manager in this case.\n8.2.5.2.1\n  Local device handling of mismatch\nThe Consumer's Device Policy Manager Shall cause a notification to be displayed to the end user that a power \nCapabilities Mismatch has occurred. Examples of such feedback can include:\n\nFor a simple Device an LED May be used to indicate the failure. For example, during connection the LED \ncould be solid amber. If the connection is successful, the LED could change to green. If the connection \nfails, it could be red or alternately blink amber.\n\nA more sophisticated Device with a user interface, e.g., a mobile device or monitor, Should provide no-\ntification through the user interface on the Device.\nThe Provider's Device Policy Manager May cause a notification to be displayed to the user of the power Capabilities \nMismatch.\nBecause the Capabilities Mismatch might not cause operational failure, the Provider's Device Policy Manager Should \nNot display a notification to the user if the power offered to the Sink meets or exceeds the SPR Sink Minimum PDP/\nEPR Sink Minimum PDP Advertised in the Sink_Capabilities_Extended Message (see Section 6.5.13, \n\"Sink_Capabilities_Extended Message\"). If a notification is displayed, it Should Not be shown as an error unless the \npower offered to the Sink is less than the SPR Sink Minimum PDP/EPR Sink Minimum PDP Advertised in the \nSink_Capabilities_Extended Message.\n8.2.5.2.2\n  Device Policy Manager Communication with System Policy\nIn a USB Power Delivery aware system with an active System Policy Manager (see Section 8.2.2, \"System Policy\"), the \nDevice Policy Manager Shall notify the System Policy Manager of the mismatch. This information Shall be passed \nback to the System Policy Manager using the mechanisms described in [UCSI]. The System Policy Manager Should \n","image_count":0,"table_count":1}
{"page":421,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 421\nensure that the user is informed of the condition. When another Port in the system could satisfy the Consumer's \npower requirements the user Should be directed to move the Device to the alternate Port.\nIn order to identify a more suitable Source Port for the Consumer the System Policy Manager Shall communicate \nwith the Device Policy Manager in order to determine the Consumer's requirements. The Device Policy Manager \nShall use a Get_Sink_Cap Message (see Section 6.3.8, \"Get_Sink_Cap Message\") to discover which power levels can \nbe utilized by the Consumer.\n8.2.6\n  Use of \"Unconstrained Power\" bit with Batteries and AC \nsupplies\nThe Device Policy Manager in a Provider or Consumer May monitor the status of any variable sources of power that \ncould have an impact on its Capabilities as a Source such as Batteries and AC supplies and reflect this in the \n\"Unconstrained Power\" bit (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and Section 6.4.1.3.1.3, \"Unconstrained \nPower\") provided as part of the Source_Capabilities or Sink_Capabilities Message (see Section 6.4.1, \"Capabilities \nMessage\"). When monitored, and a USB interface is supported, the External Power status (see [UCSI]) and the \nBattery state (see Section 9.4.1, \"GetBatteryStatus\") Shall also be reported to the System Policy Manager using the \nUSB interface.\n8.2.6.1\n  AC Supplies\nThe Unconstrained Power bit provided by Sources and Sinks (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and \nSection 6.4.1.3.1.3, \"Unconstrained Power\") notifies a connected device that it is acceptable to use the Advertised \npower for charging as well as for what is needed for normal operation. A device that sets the Unconstrained Power \nbit has either an external source of power that is sufficient to adequately power the system while charging external \ndevices or expects to charge external devices as a primary state of function (such as a battery pack).\nIn the case of the external power source, the power can either be from an AC Supply directly connected to the device \nor from an AC Supply connected to an Attached device, which is also getting unconstrained power from its power \nsupply. The Unconstrained Power bit is in this way communicated through a PD system indicating that the origin \nof the power is from a single or multiple AC supplies, from a battery bank, or similar:\n\nIf the \"Unconstrained Power\" bit is set, then that power is originally sourced from an AC Supply.\n\nDevices capable of consuming on multiple ports can only claim that they have \"Unconstrained Power\" \nfor the power Advertised as a Provider Port if there is unconstrained power beyond that needed for nor-\nmal operation coming from external supplies, (e.g., multiple AC supplies).\n\nThis concept applies as the power is routed through multiple Provider and Consumer tiers, so, as an ex-\nample. Power provided out of a monitor that is connected to a monitor that gets power from an AC Sup-\nply, will claim it has \"Unconstrained Power\" even though it is not directly connected to the AC Supply.\nAn example use case is a Tablet computer that is used with two USB A/V displays that are daisy chained (see Figure \n8.1, \"Example of daisy chained displays\"). The tablet and 1st display are not externally powered, (meaning, they \nhave no source of power outside of USB PD). The 2nd display has an external supply Attached which could either \nbe a USB PD based supply or some other form of external supply. When the displays are connected as shown, the \npower adapter Attached to the 2nd display is able to power both the 1st display and the tablet. In this case the 2nd \ndisplay will indicate the presence of a sufficiently sized Charger to the 1st display, by setting its \"Unconstrained \nPower\" bit. The 1st display will then in turn assess and indicate the presence of the extra power to the tablet by \nsetting its \"Unconstrained Power\" bit. Power is transmitted through the system to all devices, provided that there \nis sufficient power available from the external supply.\n","image_count":0,"table_count":1}
{"page":422,"text":"Page 422\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.1 Example of daisy chained displays\nAnother example use case is a laptop computer that is Attached to both an external supply and a Tablet computer. \nIn this situation, if the external supply is large enough to power the laptop in its normal state as well as charge an \nexternal device, the laptop would set its \"Unconstrained Power\" bit and the tablet will allow itself to charge at its \npeak rate. If the external supply is small, however, and would not prevent the laptop from discharging if maximal \npower is drawn by the external device, the laptop would not set its \"Unconstrained Power\" bit, and the tablet can \nchoose to draw less than what is offered. This amount could be just enough to prevent the tablet from discharging, \nor none at all. Alternatively, if the tablet determines that the laptop has significantly larger battery with more \ncharge than the tablet has, the tablet can still choose to charge itself, although possibly not at the maximal rate.\nIn this way, Sinks that do not receive the Unconstrained Power bit from the connected Source can still choose to \ncharge their batteries, or charge at a reduced rate, if their policy determines that the impact to the Source is \nminimal -- such as in the case of a phone with a small battery charging from a laptop with a large battery. These \npolicies can be decided via further USB PD communication.\n8.2.6.2\n  Battery Supplies\nWhen monitored, and a USB interface is supported, the Battery state Shall be reported to the System Policy \nManager using the USB interface.\nIf the device is Battery-powered but is in a state that is primarily for charging external devices, the device is \nconsidered to be an unconstrained source of power and thus Should set the \"Unconstrained Power\" bit.\nA simplified algorithm is detailed below to ensure that Battery powered devices will get charge from non-Battery \npowered devices when possible, and also to ensure that devices do not constantly Power Role Swap back and forth.\nWhen two devices are connected that do not have Unconstrained Power, they Should define their own policies so \nas to prevent constant Power Role Swapping.\nThis algorithm uses the \"Unconstrained Power\" bit (see Section 6.4.1.2.1.3, \"Unconstrained Power\" and Section \n6.4.1.3.1.3, \"Unconstrained Power\"), thus the decisions are based on the availability and sufficiency of an external \nsupply, not the full Capabilities of a system or device or product.\nRecommendations:\n\nProvider/Consumers using large external sources (\"Unconstrained Power\" bit set) Should always deny \nPower Role Swap requests from Consumer/Providers not using external sources (\"Unconstrained Pow-\ner\" bit cleared).\nAC\nTablet\nDisplay 1\nDisplay 2\n","image_count":0,"table_count":1}
{"page":423,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 423\n\nProvider/Consumers not using large external sources (\"Unconstrained Powered\" bit cleared) Should al-\nways accept a Power Role Swap request from a Consumer/Provider using large external power sources \n(\"Unconstrained Power\" bit set) unless the requester is not able to provide the requirements of the \npresent Provider/Consumer.\n8.2.7\n  Interface to the Policy Engine\nThe Device Policy Manager Shall maintain an interface to the Policy Engine for each Port in the device.\n8.2.7.1\n  Device Policy Manager in a Provider\nThe Device Policy Manager in a Provider Shall also provide the following functions to the Policy Engine:\n\nInform the Policy Engine of changes in cable/ device Attachment status for a given cable.\n\nInform the Policy Engine whenever the Source Capabilities available for a Port change.\n\nEvaluate requests from an Attached Consumer and provide responses to the Policy Engine.\n\nRespond to requests for power supply transitions from the Policy Engine.\n\nIndication to Policy Engine when power supply transitions are complete.\n\nMaintain a power reserve for devices operating on a Port at less than maximum power.\n8.2.7.2\n  Device Policy Manager in a Consumer\nThe Device Policy Manager in a Consumer Shall also provide the following functions to the Policy Engine:\n\nInform the Policy Engine of changes in cable/device Attachment status.\n\nInform the Policy Engine whenever the power requirements for a Port change.\n\nEvaluate Source Capabilities and provide suitable responses:\n\nRequest from offered Capabilities.\n\nIndicate whether additional power is required.\n\nRespond to requests for Sink transitions from the Policy Engine.\n8.2.7.3\n  Device Policy Manager in a Dual-Role Power Device\nThe Device Policy Manager in a Dual-Role Power Device Shall provide the following functions to the Policy Engine:\n\nProvider Device Policy Manager\n\nConsumer Device Policy Manager\n\nInterface for the Policy Engine to request power supply transitions from Source to Sink and vice versa.\n\nIndications to Policy Engine during Power Role Swap transitions.\n8.2.7.4\n  Device Policy Manager in a Dual-Role Power Device Dead Bat-\ntery handling\nThe Device Policy Manager in a Dual-Role Power Device with a Dead Battery Should:\n\nSwitch Ports to Sink-only or Sink DFP operation to obtain power from the next Attached Source.\n\nUse VBUS from the Attached Source to power the USB Power Delivery communications as well as \ncharging to enable the Negotiation of higher input power.\n","image_count":0,"table_count":1}
{"page":424,"text":"Page 424\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3\n  Policy Engine\n8.3.1\n  Introduction\nThere is one Policy Engine instance per Port that interacts with the Device Policy Manager in order to implement \nthe present Local Policy for that particular Port. This section includes:\n\nAMSs for various operations.\n\nState diagrams covering operation of Sources, Sinks and Cable Plugs.\n","image_count":0,"table_count":1}
{"page":425,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 425\n8.3.2\n  Atomic Message Sequence Diagrams\n8.3.2.1\n  Introduction\nThe Policy Engine drives the Atomic Message Sequences (AMS) and responses based on both the expected AMSs and \nthe present Local Policy. \nAn AMS Shall be defined as a Message sequence that starts and/or ends in either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready states (see Section 8.3.3.2, \"Policy Engine Source Port State Diagram\", Section \n8.3.3.3, \"Policy Engine Sink Port State Diagram\" and Section 8.3.3.25, \"Cable Plug Specific State Diagrams\"). \nIn addition, the Cable Plug discovery sequence specified in Section 8.3.3.25.3, \"Source Startup Structured VDM \nDiscover Identity of a Cable Plug State Diagram\" Shall be defined as an AMS.\nThe Source and Sink indicate to the Protocol Layer when an AMS starts and ends on entry to/exit from PE_SRC_Ready \nor PE_SNK_Ready (see Section 8.3.3.2, \"Policy Engine Source Port State Diagram\" and Section 8.3.3.3, \"Policy Engine \nSink Port State Diagram\").\nAn AMS Shall be considered to have been started by the Initiator when the protocol engine signals the Policy Engine \nthat transmission is a success (the GoodCRC Message has been received in response to the initial Message). For the \nreceiving Port the AMS Shall be considered to have started when the initial Message has arrived.\nAn AMS Shall be considered to have ended:\n\nWhen the Protocol Layer signals the Policy Engine that transmission of the final Message in the AMS is a \nsuccess and for the opposite Port when the final Message has been received.\n\nA Soft_Reset Message, Hard Reset Signaling for SOP’ or SOP’’ or Cable Reset Signaling has been sent or \nreceived.\nSection 8.3.2.1.3, \"Atomic Message Sequences\" gives details of these AMS's.\nThis section contains sequence diagrams that highlight some of the more interesting transactions. It is by no means \na complete summary of all possible combinations but is Informative in nature.\n","image_count":0,"table_count":1}
{"page":426,"text":"Page 426\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.1\n  Basic Message Exchange\nFigure 8.2, \"Basic Message Exchange (Successful)\" below illustrates how a Message is sent. Table 8.1, \"Basic Message \nFlow\" details the steps in the flow. Note that the sender might be either a Source or Sink while the receiver might \nbe either a Sink or Source. The basic Message sequence is the same. It starts when the Message Sender's Protocol \nLayer at the behest of its Policy Engine forms a Message that it passes to the PHY Layer.\nFigure 8.2 Basic Message Exchange (Successful)\nTable 8.1  Basic Message Flow\nStep\nMessage Sender\nMessage Receiver\n1\nPolicy Engine directs Protocol Layer to send a Message. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Message and checks the CRC to \nverify the Message.\n4\nPHY Layer removes the CRC and forwards the Message \nto the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer forwards the received Message \ninformation to the Policy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it to the PHY Layer.\n7\nPHY Layer receives the Message and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \nProtocol Layer checks and increments the \nMessageIDCounter and stops CRCReceiveTimer.\n9\nProtocol Layer informs the Policy Engine that the \nMessage was successfully sent. \n: Policy Engine\n: Protocol\n1: Send message\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n2: Message\n3: Message + CRC\n4: Message\nStart CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\n5: Message received\nConsume message\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Message sent\nMessage Sender\nMessage Receiver\n","image_count":5,"table_count":6}
{"page":427,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 427\n8.3.2.1.2\n  Errors in Basic Message flow\nThere are various points during the Message flow where failures in communication or other issues can occur. \nFigure 8.3, \"Basic Message flow indicating possible errors\" is an annotated version of Figure 8.2, \"Basic Message \nExchange (Successful)\" indicating at which point issues can occur. Table 8.2, \"Potential issues in Basic Message Flow\" \ndetails the steps in the flow.\nFigure 8.3 Basic Message flow indicating possible errors\nTable 8.2  Potential issues in Basic Message Flow\nPoint\nPossible issues\nA\n1)\nThere is an incoming Message on the channel meaning that the PHY Layer is unable to send. In this case \nthe outgoing Message is removed from the queue and the incoming Message processed.\n2)\nDue to some sort of noise on the line it is not possible to transmit. In this case the outgoing Message is \nDiscarded by the PHY Layer. Retransmission is via the Protocol Layer’s normal mechanism.\nB\n1)\nMessage does not arrive at the PHY Layer due to noise on the channel.\n2)\nMessage arrives but has been corrupted and has a bad CRC.\nThere is no Message to pass up to the Protocol Layer on the receiver which means a GoodCRC Message is not \nsent. This leads to a CRCReceiveTimer timeout in the Message Sender.\nC\n1)\nMessageID of received Message matches stored MessageID so this is a retry. Message is not passed \nup to the Policy Engine.\nD\n1)\nPolicy Engine receives a known Message that it was not expecting.\n2)\nPolicy Engine receives an Unrecognized Message.\nThese cases are errors in the protocol which could lead to the generation of a Soft_Reset Message.\nE\nSame as point A but at the Message Receiver side.\n: Policy Engine\n: Protocol\n1: Send message\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n2: Message\n3: Message + CRC\n4: Message\nStart CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\n5: Message received\nConsume message\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Message sent\nMessage Sender\nMessage Receiver\n• Message currently being received\n• Channel unavailable\n• Message does not arrive\n• Message has bad CRC\n• Message is a retry\n• Message is unexpected\n• Message is unknown\n• Message currently being received\n• Channel unavailable\n• GoodCRC does not arrive\n• GoodCRC has a bad CRC\n• GoodCRC has the wrong MessageID\n• Response is not GoodCRC\nA\nB\nC\nD\nE\nF\nG\n","image_count":6,"table_count":6}
{"page":428,"text":"Page 428\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.4, \"Basic Message Flow with Bad followed by a Retry\" illustrates one of these cases; the basic Message flow \nwith a retry due to a bad CRC at the Message Receiver. It starts when the Message Sender's Protocol Layer at the \nbehest of its Policy Engine forms a Message that it passes to the PHY Layer. The Protocol Layer is responsible for \nretries on a “'n' strikes and you are out\" basis (nRetryCount). Table 8.3, \"Basic Message Flow with CRC failure\" \ndetails the steps in the flow.\nFigure 8.4 Basic Message Flow with Bad followed by a Retry\nF\n1)\nGoodCRC Message response does not arrive at the Message Sender side due to the noise on the channel.\n2)\nGoodCRC Message response arrives but has a bad CRC.\nA GoodCRC Message is not received by the Message Sender’s Protocol Layer. This leads to a CRCReceiveTimer \ntimeout in the Message Sender.\nG\n1)\nGoodCRC Message is received but does contain the same MessageID as the transmitted Message.\n2)\nA Message is received but it is not a GoodCRC Message (similar case to that of an unexpected or unknown \nMessage but this time detected in the Protocol Layer).\nBoth of these issues indicate errors in receiving an expected GoodCRC Message which will lead to a \nCRCReceiveTimer timeout in the Protocol Layer and a subsequent retry (except for communications with Cable \nPlugs).\nTable 8.2  Potential issues in Basic Message Flow\nPoint\nPossible issues\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n4: Message\n5: Message + CRC\n6: Message\nStart CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\n7: Message received\nConsume message\n8: GoodCRC\n9: GoodCRC + CRC\n10: GoodCRC\nCheck and increment MessageIDCounter\nReset RetryCounter\nStop CRCReceiveTimer\n11: Message sent\n1: Send message\n2: Message\n3: Message + CRC\nStart CRCReceiveTimer\nCRCReceiveTimer expires\nRetry and increment RetryCounter\nMessage is not received or CRC \nis bad so message is not passed \nto the protocol layer\nMessage Sender\nMessage Receiver\n","image_count":5,"table_count":9}
{"page":429,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 429\nTable 8.3  Basic Message Flow with CRC failure\nStep\nMessage Sender\nMessage Receiver\n1\nPolicy Engine directs Protocol Layer to send a Message. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\nPHY Layer receives no Message or a Message with an \nincorrect CRC. Nothing is passed to Protocol Layer.\n4\nSince no response is received, the CRCReceiveTimer \nwill expire and trigger the first retry by the Protocol \nLayer. The RetryCounter is incremented. Protocol Layer \npasses the Message to the PHY Layer.\n5\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Message and checks the CRC to \nverify the Message.\n6\nPHY Layer removes the CRC and forwards the Message \nto the Protocol Layer.\n7\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer forwards the received Message \ninformation to the Policy Engine that consumes it.\n8\nProtocol Layer generates a GoodCRC Message and \npasses it to the PHY Layer.\n9\nPHY Layer receives the Message and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n10\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n11\nProtocol Layer verifies the MessageID, stops \nCRCReceiveTimer and resets the RetryCounter. \nProtocol Layer informs the Policy Engine that the \nMessage was successfully sent.\n","image_count":0,"table_count":2}
{"page":430,"text":"Page 430\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3\n  Atomic Message Sequences\nThe types of Atomic Message Sequences (AMS) are listed in Table 8.4, \"Atomic Message Sequences\". The following \ntables list sequences of either Messages or combinations of Messages and one or more embedded AMSes which are \nNon-interruptible. Where there is an embedded AMS the entire Message sequence is treated as an AMS and the Rp \nvalue used for Collision Avoidance (see Section 5.7, \"Collision Avoidance\") Shall only be changed on leaving or \nentering the ready state at the beginning or end of the entire Message sequence, and not at the start or end of the \nembedded AMS.\nNote:\nAn AMS is has not started until the first Message in the sequence has been successfully sent (i.e., a \nGoodCRC Message has been received acknowledging the Message).\nTable 8.31, \"AMS: Hard Reset\" details a Hard Reset (which is Signaling not an AMS) followed by an SPR Contract \nNegotiation AMS which Shall be treated as Non-interruptible.\nTable 8.4  Atomic Message Sequences\nType of AMS\nTable Reference\nSection Reference\nPower Negotiation (SPR)\nTable 8.5, \"AMS: Power Negotiation (SPR)\"\nSection 8.3.2.2.1\nPower Negotiation (EPR)\nTable 8.6, \"AMS: Power Negotiation (EPR)\"\nSection 8.3.2.2.2\nUnsupported Message\nTable 8.7, \"AMS: Unsupported Message\"\nSection 8.3.2.3\nSoft Reset\nTable 8.8, \"AMS: Soft Reset\"\nSection 8.3.2.4\nData Reset\nTable 8.9, \"AMS: Data Reset\"\nSection 8.3.2.5\nHard Reset\nTable 8.31, \"AMS: Hard Reset\"\nSection 8.3.2.6\nPower Role Swap\nTable 8.10, \"AMS: Power Role Swap\"\nSection 8.3.2.7\nFast Role Swap\nTable 8.11, \"AMS: Fast Role Swap\"\nSection 8.3.2.8\nData Role Swap\nTable 8.12, \"AMS: Data Role Swap\"\nSection 8.3.2.9\nVCONN Swap\nTable 8.13, \"AMS: VCONN Swap\"\nSection 8.3.2.10\nAlert\nTable 8.14, \"AMS: Alert\"\nSection 8.3.2.11.1\nStatus\nTable 8.15, \"AMS: Status\"\nSection 8.3.2.11.2\nSource Capabilities/\nSink Capabilities (SPR)\nTable 8.16, \"AMS: Source/Sink Capabilities (SPR)\"\nSection 8.3.2.11.3.1\nSource Capabilities/\nSink Capabilities (EPR)\nTable 8.17, \"AMS: Source/Sink Capabilities (EPR)\"\nSection 8.3.2.11.3.2\nExtended Capabilities\nTable 8.18, \"AMS: Extended Capabilities\"\nSection 8.3.2.11.4\nBattery Capabilities and Status\nTable 8.19, \"AMS: Battery Capabilities\"\nSection 8.3.2.11.5\nManufacturer Information\nTable 8.20, \"AMS: Manufacturer Information\"\nSection 8.3.2.11.6\nCountry Codes\nTable 8.21, \"AMS: Country Codes\"\nSection 8.3.2.11.7\nCountry Information\nTable 8.22, \"AMS: Country Information\"\nSection 8.3.2.11.8\nRevision Information\nTable 8.23, \"AMS: Revision Information\"\nSection 8.3.2.11.9\nSource Information\nTable 8.24, \"AMS: Source Information\"\nSection 8.3.2.11.10\nSecurity\nTable 8.25, \"AMS: Security\"\nSection 8.3.2.12\nFirmware Update\nTable 8.26, \"AMS: Firmware Update\"\nSection 8.3.2.13\nStructured VDM\nTable 8.27, \"AMS: Structured VDM\"\nSection 8.3.2.14\nBuilt-In Self-Test (BIST)\nTable 8.28, \"AMS: Built-In Self-Test (BIST)\"\nSection 8.3.2.15\nEnter USB\nTable 8.29, \"AMS: Enter USB\"\nSection 8.3.2.16\nUnstructured VDM\nTable 8.30, \"AMS: Unstructured VDM\"\nSection 8.3.2.17\n","image_count":0,"table_count":2}
{"page":431,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 431\n8.3.2.1.3.1\n  AMS: Power Negotiation (SPR)\nTable 8.5  AMS: Power Negotiation (SPR)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine \nRef\nSPR Explicit Contract \nNegotiation (Accept)\n1.\nSource_Capabilities \nMessage\n2.\nRequest Message\n3.\nAccept Message\n4.\nPS_RDY Message\nStarted by Source, \nSPR Mode\nSection 8.3.2.2.1.1.1\nSection 8.3.3.2,\nSection 8.3.3.3\nSPR Explicit Contract \nNegotiation (Reject)\n1.\nSource_Capabilities \nMessage\n2.\nRequest Message\n3.\nReject Message\nSection 8.3.2.2.1.1.2\nSPR Explicit Contract \nNegotiation (Wait)\n1.\nSource_Capabilities \nMessage\n2.\nRequest Message\n3.\nWait Message\nSection 8.3.2.2.1.1.3\nSPR PPS Keep Alive\n1.\nRequest Message\n2.\nAccept Message\n3.\nPS_RDY Message\nStarted by Sink, \nSPR Mode\nSection 8.3.2.2.1.2\nSection 8.3.3.3\nSPR Sink Makes Request \n(Accept)\n1.\nRequest Message\n2.\nAccept Message\n3.\nPS_RDY Message\nSection 8.3.2.2.1.3.1\nSection 8.3.3.2,\nSection 8.3.3.3\nSPR Sink Makes Request \n(Reject)\n1.\nRequest Message\n2.\nReject Message\nSection 8.3.2.2.1.3.2\nSPR Sink Makes Request \n(Wait)\n1.\nRequest Message\n2.\nWait Message\nSection 8.3.2.2.1.3.3\n","image_count":0,"table_count":2}
{"page":432,"text":"Page 432\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.2\n  AMS: Power Negotiation (EPR)\nTable 8.6  AMS: Power Negotiation (EPR)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nEntering EPR Mode \n(Success)\n1.\nEPR_Mode (Enter) \nMessage\n2.\nEPR_Mode (Enter \nAcknowledge) Message\n3.\nVCONN Source Swap, \ninitiated by non- VCONN \nSource (Accept) AMS \n(Optional).\n4.\nInitiator to Responder \nDiscover Identity (ACK) \nAMS (Optional for \nSources with captive \ncables)\n5.\nEPR_Mode (Enter \nSucceeded) Message\n6.\nEPR Explicit Contract \nNegotiation AMS\nStarted by Sink, \nSPR Mode\nSection 8.3.2.2.2.1,\nSection 8.3.2.10.1,\nSection 8.3.2.10.2,\nSection 8.3.2.12.3,\nSection 8.3.2.2.2.4\nSection 8.3.3.25.1,\nSection 8.3.3.25.2,\nSection 8.3.3.19,\nSection 8.3.3.20.1,\nSection 8.3.3.21.1,\nSection 8.3.3.2,\nSection 8.3.3.3\nEntering EPR Mode \n(Failure due to non-EPR \nCable)\n1.\nEPR_Mode (Enter) \nMessage\n2.\nEPR_Mode (Enter \nAcknowledge) Message\n3.\nVCONN Source Swap, \ninitiated by non- VCONN \nSource (Accept) \nAMS(Optional).\n4.\nInitiator to Responder \nDiscover Identity (ACK) \nAMS (Optional for \nSources with captive \ncables)\n5.\nEPR_Mode (Enter Failed) \nMessage\nStarted by Sink, \nSPR Mode\nSection 8.3.2.2.2.2,\nSection 8.3.2.10.1,\nSection 8.3.2.10.2,\nSection 8.3.2.12.3\nSection 8.3.3.25.1,\nSection 8.3.3.25.2,\nSection 8.3.3.19,\nSection 8.3.3.20.1,\nSection 8.3.3.21.1\nEntering EPR Mode \n(Failure of VCONN Swap)\n1.\nEPR_Mode (Enter) \nMessage.\n2.\nEPR_Mode (Enter \nAcknowledge) Message.\n3.\nVCONN Source Swap, \ninitiated by non- VCONN \nSource (Reject) \nAMS(Optional).\n4.\nEPR_Mode (Enter Failed) \nMessage\nStarted by Sink, \nSPR Mode\nSection 8.3.2.2.2.3,\nSection 8.3.2.10.1,\nSection 8.3.2.10.2\nSection 8.3.3.25.1,\nSection 8.3.3.25.2,\nSection 8.3.3.19\n","image_count":0,"table_count":2}
{"page":433,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 433\nEPR Explicit Contract \nNegotiation (Accept)\n1.\nEPR_Source_Capabilities \nMessage\n2.\nEPR_Request Message\n3.\nAccept Message\n4.\nPS_RDY Message\nStarted by Source, \nEPR Mode\nSection 8.3.2.2.2.2.1\nSection 8.3.3.2,\nSection 8.3.3.3\nEPR Explicit Contract \nNegotiation (Reject)\n1.\nEPR_Source_Capabilities \nMessage\n2.\nEPR_Request Message\n3.\nReject Message\nSection 8.3.2.2.2.2.2\nEPR Explicit Contract \nNegotiation (Wait)\n1.\nEPR_Source_Capabilities \nMessage\n2.\nEPR_Request Message\n3.\nWait Message\nSection 8.3.2.2.2.2.3\nEPR Keep Alive\n1.\nEPR_KeepAlive Message\n2.\nEPR_KeepAlive_Ack \nMessage\nStarted by Sink, \nEPR Mode\nSection 8.3.2.2.2.3\nExiting EPR Mode (Sink \nInitiated)\n1.\nEPR_Mode (Exit) \nMessage\n2.\nSPR Explicit Contract \nNegotiation AMS\nStarted by Sink, \nEPR Mode\nSection 8.3.2.2.2.4.1,\nSection 8.3.2.2.1.1\nSection 8.3.3.25.3,\nSection 8.3.3.25.4,\nSection 8.3.3.2,\nSection 8.3.3.3\nExiting EPR Mode \n(Source Initiated)\n1.\nEPR_Mode (Exit) \nMessage\n2.\nSPR Explicit Contract \nNegotiation AMS\nStarted by Source, \nEPR Mode\nSection 8.3.2.2.2.4.2,\nSection 8.3.2.2.1.1\nEPR Sink Makes \nRequest (Accept)\n1.\nEPR_Request Message\n2.\nAccept Message\n3.\nPS_RDY Message\nStarted by Sink, \nEPR Mode\nSection 8.3.2.2.2.5.1\nSection 8.3.3.2,\nSection 8.3.3.3\nEPR Sink Makes \nRequest (Reject)\n1.\nEPR_Request Message\n2.\nReject Message\nStarted by Sink, \nEPR Mode\nSection 8.3.2.2.2.5.2\nEPR Sink Makes \nRequest (Wait)\n1.\nEPR_Request Message\n2.\nWait Message\nStarted by Sink, \nEPR Mode\nSection 8.3.2.2.2.5.3\nTable 8.6  AMS: Power Negotiation (EPR)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\n","image_count":0,"table_count":2}
{"page":434,"text":"Page 434\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.3\n  AMS: Unsupported Message\n8.3.2.1.3.4\n  AMS: Soft Reset\n8.3.2.1.3.5\n  AMS: Data Reset\nTable 8.7  AMS: Unsupported Message\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine Ref\nUnsupported Message\n1.\nAny Message which is not supported \nby the Source or Sink\n2.\nNot_Supported Message\nStarted by \nSource or Sink\nSection 8.3.2.3\nSection \n8.3.3.6.2\nTable 8.8  AMS: Soft Reset\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine Ref\nSoft Reset\n1.\nSoft_Reset Message\n2.\nAccept Message\n3.\nIn SPR Mode: SPR Explicit Contract \nNegotiation AMS \n4.\nor in EPR Mode: EPR Explicit Contract \nNegotiation AMS.\nStarted by \nSource or Sink\nSection 8.3.2.4,\nSection \n8.3.2.2.1.1,\nSection \n8.3.2.2.1.1,\nSection \n8.3.2.2.2.2\nSection \n8.3.3.4.1,\nSection \n8.3.3.4.2,\nSection \n8.3.3.25.2.1,\nSection \n8.3.3.25.2.3,\nSection \n8.3.3.25.2.4,\nSection 8.3.3.2,\nSection 8.3.3.3\nTable 8.9  AMS: Data Reset\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine Ref\nDFP Initiated Data Reset \nwhere the DFP is the VCONN \nSource\n1.\nData_Reset Message\n2.\nAccept Message\n3.\nData_Reset_Complete Message\nStarted by DFP\nSection 8.3.2.5.1\nSection \n8.3.3.5.1,\nSection \n8.3.3.5.2\nDFP Receives Data Reset \nwhere the DFP is the VCONN \nSource\n1.\nData_Reset Message\n2.\nAccept Message\n3.\nData_Reset_Complete Message\nStarted by UFP\nSection 8.3.2.5.2\nDFP Initiated Data Reset \nwhere the UFP is the VCONN \nSource\n1.\nData_Reset Message\n2.\nAccept Message\n3.\nPS_RDY Message\n4.\nData_Reset_Complete Message\nStarted by DFP\nSection 8.3.2.5.3\nDFP Receives Data Reset \nwhere the UFP is the VCONN \nSource\n1.\nData_Reset Message\n2.\nAccept Message\n3.\nPS_RDY Message\n4.\nData_Reset_Complete Message\nStarted by UFP\nSection 8.3.2.5.4\n","image_count":0,"table_count":4}
{"page":435,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 435\n8.3.2.1.3.6\n  AMS: Power Role Swap\n8.3.2.1.3.7\n  AMS: Fast Role Swap\nTable 8.10  AMS: Power Role Swap\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine Ref\nSource Initiated Power Role \nSwap (Accept)\n1.\nPR_Swap Message\n2.\nAccept Message\n3.\nPS_RDY Message\n4.\nPS_RDY Message\n5.\nSPR Explicit Contract Negotiation \nAMS\nStarted by \nSource\nSection \n8.3.2.7.1.1,\nSection \n8.3.2.2.1.1\nSection \n8.3.3.19.3,\nSection \n8.3.3.19.4,\nSection 8.3.3.2,\nSection 8.3.3.3\nSource Initiated Power Role \nSwap (Reject)\n1.\nPR_Swap Message\n2.\nReject Message\nSection \n8.3.2.7.1.2\nSource Initiated Power Role \nSwap (Wait)\n1.\nPR_Swap Message\n2.\nWait Message\nSection \n8.3.2.7.1.1\nSink Initiated Power Role \nSwap (Accept)\n1.\nPR_Swap Message\n2.\nAccept Message\n3.\nPS_RDY Message\n4.\nPS_RDY Message\n5.\nSPR Explicit Contract Negotiation \nAMS\nStarted by Sink\nSection \n8.3.2.7.2.1,\nSection \n8.3.2.2.1.1\nSink Initiated Power Role \nSwap (Reject)\n1.\nPR_Swap Message\n2.\nReject Message\nSection \n8.3.2.7.2.2\nSink Initiated Power Role \nSwap (Wait)\n1.\nPR_Swap Message\n2.\nWait Message\nSection \n8.3.2.7.2.3\nTable 8.11  AMS: Fast Role Swap\nAMS\nMessage Sequence\nConditio\nns\nAMS Ref\nState Machine \nRef\nFast Role Swap\n1.\nFR_Swap Message\n2.\nAccept Message\n3.\nPS_RDY Message\n4.\nPS_RDY Message\n5.\nSPR Explicit Contract Negotiation \nAMS\nStarted by \nSink\nSection 8.3.2.8,\nSection 8.3.2.2.1.1\nSection 8.3.3.2,\nSection 8.3.3.3,\nSection 8.3.3.19.5,\nSection 8.3.3.19.6\n","image_count":0,"table_count":3}
{"page":436,"text":"Page 436\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.8\n  AMS: Data Role Swap\nTable 8.12  AMS: Data Role Swap\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine \nRef\nData Role Swap, Initiated by \nUFP Operating as Sink \n(Accept)\n1.\nDR_Swap Message\n2.\nAccept Message\nStarted by Sink Section \n8.3.2.9.1.1\nSection \n8.3.3.19.1,\nSection \n8.3.3.19.2\nData Role Swap, Initiated by \nUFP Operating as Sink \n(Reject)\n1.\nDR_Swap Message\n2.\nReject Message\nSection \n8.3.2.9.1.2\nData Role Swap, Initiated by \nUFP Operating as Sink \n(Wait)\n1.\nDR_Swap Message\n2.\nWait Message\nSection \n8.3.2.9.1.3\nData Role Swap, Initiated by \nUFP Operating as Source \n(Accept)\n1.\nDR_Swap Message\n2.\nAccept Message\nStarted by \nSource\nSection \n8.3.2.9.2.1\nData Role Swap, Initiated by \nUFP Operating as Source \n(Reject)\n1.\nDR_Swap Message\n2.\nReject Message\nSection \n8.3.2.9.2.2\nData Role Swap, Initiated by \nUFP Operating as Source \n(Wait)\n1.\nDR_Swap Message\n2.\nWait Message\nSection \n8.3.2.9.2.3\nData Role Swap, Initiated by \nDFP Operating as Source \n(Accept)\n1.\nDR_Swap Message\n2.\nAccept Message\nStarted by \nSource\nSection \n8.3.2.9.3.1\nData Role Swap, Initiated by \nDFP Operating as Source \n(Reject)\n1.\nDR_Swap Message\n2.\nReject Message\nSection \n8.3.2.9.3.2\nData Role Swap, Initiated by \nDFP Operating as Source \n(Wait)\n1.\nDR_Swap Message\n2.\nWait Message\nSection \n8.3.2.9.3.3\nData Role Swap, Initiated by \nDFP Operating as Sink \n(Accept)\n1.\nDR_Swap Message\n2.\nAccept Message\nStarted by Sink Section \n8.3.2.9.4.1\nData Role Swap, Initiated by \nDFP Operating as Sink \n(Reject)\n1.\nDR_Swap Message\n2.\nReject Message\nSection \n8.3.2.9.4.2\nData Role Swap, Initiated by \nDFP Operating as Sink \n(Wait)\n1.\nDR_Swap Message\n2.\nWait Message\nSection \n8.3.2.9.4.3\n","image_count":0,"table_count":2}
{"page":437,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 437\n8.3.2.1.3.9\n  AMS: VCONN Swap\n8.3.2.1.3.10\n  AMS: Alert\nTable 8.13  AMS: VCONN Swap\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine \nRef\nVCONN Source Swap, \ninitiated by VCONN \nSource (Accept)\n1.\nVCONN_Swap Message\n2.\nAccept Message\n3.\nPS_RDY Message\nStarted by VCONN Source\nSection \n8.3.2.10.1.1\nSection 8.3.3.20\nVCONN Source Swap, \ninitiated by VCONN \nSource (Reject)\n1.\nVCONN_Swap Message\n2.\nReject Message\nSection \n8.3.2.10.1.2\nVCONN Source Swap, \ninitiated by VCONN \nSource (Wait)\n1.\nVCONN_Swap Message\n2.\nWait Message\nSection \n8.3.2.10.1.3\nVCONN Source Swap, \ninitiated by non- \nVCONN Source \n(Accept)\n1.\nVCONN_Swap Message\n2.\nAccept Message\n3.\nPS_RDY Message\nStarted by non-VCONN Source\nSection \n8.3.2.10.2.1\nVCONN Source Swap, \ninitiated by non- \nVCONN Source \n(Reject)\n1.\nVCONN_Swap Message\n2.\nReject Message\nSection \n8.3.2.10.2.2\nVCONN Source Swap, \ninitiated by non- \nVCONN Source (Wait)\n1.\nVCONN_Swap Message\n2.\nWait Message\nSection \n8.3.2.10.2.3\nTable 8.14  AMS: Alert\nAMS\nMessage Sequence\nConditions\nAMS Ref\nAMS Ref\nSource sends Alert to \na Sink \n(SenderResponseTi\nmer Timeout)\n1.\nAlert Message\nStarted by Source\nSection \n8.3.2.11.1.1\nSection 8.3.3.7.1,\nSection 8.3.3.7.2\nSource sends Alert to \na Sink (Get_Status \nMessage)\n1.\nAlert Message\n2.\nSink Gets Source Status AMS\nSink sends Alert to a \nSource \n(SenderResponseTi\nmer Timeout)\n1.\nAlert Message\nStarted by Sink\nSection \n8.3.2.11.1.2\nSection 8.3.3.7.3,\nSection 8.3.3.7.4\nSink sends Alert to a \nSource (Get_Status \nMessage)\n1.\nAlert Message\n2.\nSource Gets Sink Status AMS\n","image_count":0,"table_count":3}
{"page":438,"text":"Page 438\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.11\n  AMS: Status\n8.3.2.1.3.12\n  AMS: Source/Sink Capabilities (SPR)\nTable 8.15  AMS: Status\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine \nRef\nSink Gets Source \nStatus\n1.\nGet_Status Message\n2.\nStatus Message\nStarted by Sink\nStarted by Source\nSection \n8.3.2.11.2.1,\nSection \n8.3.2.11.2.2\nSection 8.3.3.10.1,\nSection 8.3.3.10.2\nSource Gets Sink \nStatus\n1.\nGet_Status Message\n2.\nStatus Message\nVCONN Source Gets \nCable Plug Status\n1.\nGet_Status Message\n2.\nStatus Message\nStarted by VCONN Source\nStarted by Sink\nSection \n8.3.2.11.2.3,\nSection \n8.3.2.11.2.4\nSink Gets Source PPS \nStatus\n1.\nGet_PPS_Status Message\n2.\nPPS_Status Message\nSection 8.3.3.10.3,\nSection 8.3.3.10.4\nTable 8.16  AMS: Source/Sink Capabilities (SPR)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine \nRef\nSink Gets Source \nCapabilities (EPR \nMode)\n1.\nGet_Source_Cap Message\n2.\nSource_Capabilities \nMessage\nStarted by Sink\nSection 8.3.2.11.3.1.1,\nSection 8.3.2.2.1.3.1,\nSection 8.3.2.2.1.3.2,\nSection 8.3.2.2.1.3.3\nSection 8.3.3.2,\nSection 8.3.3.3,\nSink Gets Source \nCapabilities \n(Accept in SPR \nMode)\n1.\nGet_Source_Cap Message\n2.\nSource_Capabilities \nMessage\n3.\nIn SPR Mode only: SPR Sink \nMakes Request (Accept) AMS\nSink Gets Source \nCapabilities (Reject \nin SPR Mode)\n1.\nGet_Source_Cap Message\n2.\nSource_Capabilities \nMessage\n3.\nIn SPR Mode only: SPR Sink \nMakes Request (Reject) AMS\nSink Gets Source \nCapabilities (Wait \nin SPR Mode)\n1.\nGet_Source_Cap Message\n2.\nSource_Capabilities \nMessage\n3.\nIn SPR Mode only: SPR Sink \nMakes Request (Wait) AMS\nDual-Role Power \nSource Gets Source \nCapabilities from a \nDual-Role Power \nSink\n1.\nGet_Source_Cap Message\n2.\nSource_Capabilities \nMessage\nStarted by Source\nSection 8.3.2.11.3.1.2\nSection 8.3.3.19.7,\nSection 8.3.3.19.10\nSource Gets Sink \nCapabilities\n1.\nGet_Sink_Cap Message\n2.\nSink_Capabilities Message\nStarted by Source\nSection 8.3.2.11.3.1.3\nSection 8.3.3.2,\nSection 8.3.3.3,\nDual-Role Power \nSink Get Sink \nCapabilities from a \nDual-Role Power \nSource\n1.\nGet_Sink_Cap Message\n2.\nSink_Capabilities Message\nStarted by Sink\nSection 8.3.2.11.3.1.4\nSection 8.3.3.19.9,\nSection 8.3.3.19.8\n","image_count":0,"table_count":3}
{"page":439,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 439\n8.3.2.1.3.13\n  AMS: Source/Sink Capabilities (EPR)\nTable 8.17  AMS: Source/Sink Capabilities (EPR)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSink Gets EPR \nSource Capabilities \n(SPR Mode)\n1.\nEPR_Get_Source_Cap \nMessage\n2.\nEPR_Source_Capabilities \nMessage\nStarted by Sink\nSection 8.3.2.11.3.2.1,\nSection 8.3.2.2.2.5.1,\nSection 8.3.2.2.2.5.2,\nSection 8.3.2.2.2.5.3\nSection 8.3.3.2,\nSection 8.3.3.3,\nSink Gets EPR \nSource Capabilities \n(Accept in EPR \nMode)\n1.\nEPR_Get_Source_Cap \nMessage\n2.\nEPR_Source_Capabilities \nMessage\n3.\nIn EPR Mode only: EPR Sink \nMakes Request (Accept) AMS\nSink Gets EPR \nSource Capabilities \n(Reject in EPR Mode)\n1.\nEPR_Get_Source_Cap \nMessage\n2.\nEPR_Source_Capabilities \nMessage\n3.\nIn EPR Mode only: EPR Sink \nMakes Request (Reject) AMS\nSink Gets EPR \nSource Capabilities \n(Wait in EPR Mode)\n1.\nEPR_Get_Source_Cap \nMessage\n2.\nEPR_Source_Capabilities \nMessage\n3.\nIn EPR Mode only: EPR Sink \nMakes Request (Wait) AMS\nDual-Role Power \nSource Gets Source \nCapabilities from a \nDual-Role Power \nEPR Sink\n1.\nEPR_Get_Source_Cap \nMessage\n2.\nEPR_Source_Capabilities \nMessage\nStarted by \nSource\nSection 8.3.2.11.3.2.2\nSection 8.3.3.19.7,\nSection 8.3.3.19.10\nSource Gets Sink EPR \nCapabilities\n1.\nEPR_Get_Sink_Cap Message\n2.\nEPR_Sink_Capabilities \nMessage\nStarted by \nSource\nSection 8.3.2.11.3.2.3\nSection 8.3.3.2,\nSection 8.3.3.3,\nDual-Role Power \nSink Get Sink EPR \nCapabilities from a \nDual-Role Power \nSource\n1.\nEPR_Get_Sink_Cap Message\n2.\nEPR_Sink_Capabilities \nMessage\nStarted by Sink Section 8.3.2.11.3.2.4\nSection 8.3.3.19.8,\nSection 8.3.3.19.9\n","image_count":0,"table_count":2}
{"page":440,"text":"Page 440\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.14\n  AMS: Extended Capabilities\n8.3.2.1.3.15\n  AMS: Battery Capabilities\nTable 8.18  AMS: Extended Capabilities\nAMS\nInterruptible\nMessage \nSequence\nConditions\nAMS Ref\nSink Gets Source \nExtended \nCapabilities\n1.\nGet_Source_Cap_Extended \nMessage\n2.\nSource_Capabilities_Extended M\nessage\nStarted by Sink Section 8.3.2.11.4.1\nSection 8.3.3.8.1,\nSection 8.3.3.8.2\nDual-Role Power \nSource Gets Source \nExtended \nCapabilities from a \nDual-Role Power \nSink\n1.\nGet_Source_Cap_Extended \nMessage\n2.\nSource_Capabilities_Extended M\nessage\nStarted by \nSource\nSection 8.3.2.11.4.2\nSection 8.3.3.19.11,\nSection 8.3.3.19.12\nSource Gets Sink \nExtended \nCapabilities\n1.\nGet_Sink_Cap_Extended \nMessage\n2.\nSink_Capabilities_Extended \nMessage\nStarted by \nSource\nSection 8.3.2.11.4.3\nSection 8.3.3.8.3,\nSection 8.3.3.8.4\nDual-Role Power \nSink Gets Sink \nExtended \nCapabilities from a \nDual-Role Power \nSource\n1.\nGet_Sink_Cap_Extended \nMessage\n2.\nSink_Capabilities_Extended \nMessage\nStarted by Sink Section 8.3.2.11.4.4\nSection 8.3.3.19.13,\nSection 8.3.3.19.14\nTable 8.19  AMS: Battery Capabilities\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSink Gets Battery \nCapabilities\n1.\nGet_Battery_Cap Message\n2.\nBattery_Capabilities \nMessage\nStarted by Sink Section 8.3.2.11.5.1\nSection 8.3.3.11.1,\nSection 8.3.3.11.2\nSource Gets Battery \nCapabilities\n1.\nGet_Battery_Cap Message\n2.\nBattery_Capabilities \nMessage\nStarted by \nSource\nSection 8.3.2.11.5.2\nSink Gets Battery \nStatus\n1.\nGet_Battery_Status Message\n2.\nBattery_Status Message\nStarted by Sink Section 8.3.2.11.5.3\nSection 8.3.3.12.1,\nSection 8.3.3.12.2\nSink Gets Battery \nStatus\n1.\nGet_Battery_Cap Message\n2.\nBattery_Status Message\nStarted by Sink Section 8.3.2.11.5.4\n","image_count":0,"table_count":3}
{"page":441,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 441\n8.3.2.1.3.16\n  AMS: Manufacturer Information\n8.3.2.1.3.17\n  AMS: Country Codes\n8.3.2.1.3.18\n  AMS: Country Information\nTable 8.20  AMS: Manufacturer Information\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine \nRef\nSource Gets Port \nManufacturer \nInformation from a Sink\n1.\nGet_Manufacturer_Info Message\n2.\nManufacturer_Info Message\nStarted by \nSource\nSection 8.3.2.11.6.1\nSection 8.3.3.12.1,\nSection 8.3.3.12.2\nSink Gets Port \nManufacturer \nInformation from a \nSource\n1.\nGet_Manufacturer_Info Message\n2.\nManufacturer_Info Message\nStarted by Sink Section 8.3.2.11.6.2\nSource Gets Battery \nManufacturer \nInformation from a Sink\n1.\nGet_Manufacturer_Info Message\n2.\nManufacturer_Info Message\nStarted by \nSource\nSection 8.3.2.11.6.3\nSink Gets Battery \nManufacturer \nInformation from a \nSource\n1.\nGet_Manufacturer_Info Message\n2.\nManufacturer_Info Message\nStarted by Sink Section 8.3.2.11.6.4\nVCONN Source Gets \nManufacturer \nInformation from a Cable \nPlug\n1.\nGet_Manufacturer_Info Message\n2.\nManufacturer_Info Message\nStarted by \nVCONN Source\nSection 8.3.2.11.6.5\nTable 8.21  AMS: Country Codes\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSource Gets Country \nCodes from a Sink\n1.\nGet_Country_Codes Message\n2.\nCountry_Codes Message\nStarted by \nSource\nSection 8.3.2.11.7.1\nSection 8.3.3.14.1,\nSection 8.3.3.14.2\nSink Gets Country \nCodes from a Source\n1.\nGet_Country_Codes Message\n2.\nCountry_Codes Message\nStarted by Sink Section 8.3.2.11.7.2\nVCONN Source Gets \nCountry Codes from \na Cable Plug\n1.\nGet_Country_Codes Message\n2.\nCountry_Codes Message\nStarted by \nVCONN Source\nSection 8.3.2.11.7.3\nTable 8.22  AMS: Country Information\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSource Gets Country \nInformation from a \nSink\n1.\nGet_Country_Info Message\n2.\nCountry_Info Message\nStarted by \nSource\nSection 8.3.2.11.8.1\nSection 8.3.3.14.3,\nSection 8.3.3.14.4\nSink Gets Country \nInformation from a \nSource\n1.\nGet_Country_Info Message\n2.\nCountry_Info Message\nStarted by Sink\nSection 8.3.2.11.8.2\nVCONN Source Gets \nCountry Information \nfrom a Cable Plug\n1.\nGet_Country_Info Message\n2.\nCountry_Info Message\nStarted by \nVCONN Source\nSection 8.3.2.11.8.3\n","image_count":0,"table_count":4}
{"page":442,"text":"Page 442\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.19\n  AMS: Revision Information\n8.3.2.1.3.20\n  AMS: Source Information\n8.3.2.1.3.21\n  AMS: Security\nTable 8.23  AMS: Revision Information\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSource Gets Revision \nInformation from a \nSink\n1.\nGet_Revision Message\n2.\nRevision Message\nStarted by \nSource\nSection 8.3.2.11.9.1\nSection 8.3.3.15.1,\nSection 8.3.3.15.2\nSink Gets Revision \nInformation from a \nSource\n1.\nGet_Revision Message\n2.\nRevision Message\nStarted by Sink Section 8.3.2.11.9.2\nVCONN Source Gets \nRevision \nInformation from a \nCable Plug\n1.\nGet_Revision Message\n2.\nRevision Message\nStarted by \nVCONN Source\nSection 8.3.2.11.9.1\nTable 8.24  AMS: Source Information\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSink Gets Source \nInformation\n1.\nGet_Source_Cap_Extended \nMessage\n2.\nSource_Capabilities_Extended M\nessage\nStarted by Sink Section 8.3.2.11.10.1\nSection 8.3.3.9.1,\nSection 8.3.3.9.2\nDual-Role Power \nSource Gets Source \nInformation from a \nDual-Role Power \nSink\n1.\nGet_Source_Cap_Extended \nMessage\n2.\nSource_Capabilities_Extended M\nessage\nStarted by \nSource\nSection 8.3.2.11.10.2\nSection 8.3.3.19.15,\nSection 8.3.3.19.16\nTable 8.25  AMS: Security\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSource requests \nsecurity exchange \nwith Sink\n1.\nSecurity_Request Message\nStarted by \nSource\nSection 8.3.2.12.1\nSection 8.3.3.17.1,\nSection 8.3.3.17.2,\nSection 8.3.3.17.3\nSink requests \nsecurity exchange \nwith Source\n1.\nSecurity_Request Message\nStarted by Sink Section 8.3.2.12.2\nVCONN Source \nrequests security \nexchange with Cable \nPlug\n1.\nSecurity_Request Message\nStarted by \nVCONN Source\nSection 8.3.2.12.3\nSource responds to \nsecurity exchange \nwith Sink\n1.\nSecurity_Response Message\nStarted by \nSource\nSection 8.3.2.12.1\nSink responds to \nsecurity exchange \nwith Source\n1.\nSecurity_Response Message\nStarted by Sink Section 8.3.2.12.2\nVCONN Source \nrequests security \nexchange with Cable \nPlug\n1.\nSecurity_Response Message\nStarted by \nVCONN Source\nSection 8.3.2.12.3\n","image_count":0,"table_count":4}
{"page":443,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 443\n8.3.2.1.3.22\n  AMS: Firmware Update\nTable 8.26  AMS: Firmware Update\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nSource requests \nfirmware update \nexchange with Sink\n1.\nFirmware_Update_Request \nMessage\nStarted by \nSource\nSection 8.3.2.13.1\nSection 8.3.3.18.1,\nSection 8.3.3.18.2,\nSection 8.3.3.18.3\nSink requests \nfirmware update \nexchange with \nSource\n1.\nFirmware_Update_Request \nMessage\nStarted by Sink Section 8.3.2.13.2\nVCONN Source \nrequests firmware \nupdate exchange \nwith Cable Plug\n1.\nFirmware_Update_Request \nMessage\nStarted by \nVCONN Source\nSection 8.3.2.13.3\nSource responds to \nfirmware update \nexchange with Sink\n1.\nFirmware_Update_Response \nMessage\nStarted by \nSource\nSection 8.3.2.13.1\nSink responds to \nfirmware update \nexchange with \nSource\n1.\nFirmware_Update_Response \nMessage\nStarted by Sink Section 8.3.2.13.2\nVCONN Source \nresponds to \nfirmware update \nexchange with Cable \nPlug\n1.\nFirmware_Update_Response \nMessage\nStarted by \nVCONN Source\nSection 8.3.2.13.3\n","image_count":0,"table_count":2}
{"page":444,"text":"Page 444\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.23\n  AMS: Structured VDM\nTable 8.27  AMS: Structured VDM\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nInitiator to \nResponder Discover \nIdentity (ACK)\n1.\nDiscover Identity REQ \nCommand\n2.\nDiscover Identity ACK \nCommand\nStarted by \nInitiator\nSection 8.3.2.14.1.1\nSection 8.3.3.21.1,\nSection 8.3.3.22.1\nInitiator to \nResponder Discover \nIdentity (NAK)\n1.\nDiscover Identity REQ \nCommand\n2.\nDiscover Identity NAK \nCommand\nSection 8.3.2.14.1.2\nInitiator to \nResponder Discover \nIdentity (BUSY)\n1.\nDiscover Identity REQ \nCommand\n2.\nDiscover Identity BUSY \nCommand\nSection 8.3.2.14.1.3\nInitiator to \nResponder Discover \nSVIDs (ACK)\n1.\nDiscover SVIDs REQ \nCommand\n2.\nDiscover SVIDs ACK Command\nSection 8.3.2.14.2.1\nSection 8.3.3.21.2,\nSection 8.3.3.22.2\nInitiator to \nResponder Discover \nSVIDs (NAK)\n1.\nDiscover SVIDs REQ \nCommand\n2.\nDiscover SVIDs NAK \nCommand\nSection 8.3.2.14.2.2\nInitiator to \nResponder Discover \nSVIDs (BUSY)\n1.\nDiscover SVIDs REQ \nCommand\n2.\nDiscover SVIDs BUSY \nCommand\nSection 8.3.2.14.2.3\nInitiator to \nResponder Discover \nModes (ACK)\n1.\nDiscover Modes REQ \nCommand\n2.\nDiscover Modes ACK \nCommand\nSection 8.3.2.14.3.1\nSection 8.3.3.21.3,\nSection 8.3.3.22.3\nInitiator to \nResponder Discover \nModes (NAK)\n1.\nDiscover Modes REQ \nCommand\n2.\nDiscover Modes NAK \nCommand\nSection 8.3.2.14.3.2\nInitiator to \nResponder Discover \nModes (BUSY)\n1.\nDiscover Modes REQ \nCommand\n2.\nDiscover Modes BUSY \nCommand\nSection 8.3.2.14.3.3\nDFP to UFP Enter \nMode\n1.\nEnter Mode REQ Command\n2.\nEnter Mode ACK Command\nStarted by DFP\nSection 8.3.2.14.4.1\nSection 8.3.3.23.1,\nSection 8.3.3.24.1\nDFP to UFP Exit \nMode\n1.\nExit Mode REQ Command\n2.\nExit Mode ACK Command\nSection 8.3.2.14.4.2\nSection 8.3.3.23.2,\nSection 8.3.3.24.2\nDFP to Cable Plug \nEnter Mode\n1.\nEnter Mode REQ Command\n2.\nEnter Mode ACK Command\nSection 8.3.2.14.4.3\nSection 8.3.3.23.1,\nSection 8.3.3.25.4.1\nDFP to Cable Plug \nExit Mode\n1.\nExit Mode REQ Command\n2.\nExit Mode ACK Command\nSection 8.3.2.14.4.4\nSection 8.3.3.23.2,\nSection 8.3.3.25.4.2\nInitiator to \nResponder Attention\n1.\nAttention REQ Command\nStarted by \nInitiator\nSection 8.3.2.14.4.5\nSection 8.3.3.21.4,\nSection 8.3.3.22.4\n","image_count":0,"table_count":2}
{"page":445,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 445\n8.3.2.1.3.24\n  AMS: Built-In Self-Test (BIST)\n8.3.2.1.3.25\n  AMS: Enter USB\n8.3.2.1.3.26\n  AMS: Unstructured VDM\nTable 8.28  AMS: Built-In Self-Test (BIST)\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nBIST Carrier Mode\n1.\nBIST (BIST Carrier Mode) \nMessage\nStarted by \nTester\nSection 8.3.2.15.1\nSection 8.3.3.27.1\nBIST Test Data Mode 1.\nBIST (BIST Test Data) \nMessage\nSection 8.3.2.15.2\nSection 8.3.3.27.2\nBIST Shared \nCapacity Test Mode\n1.\nBIST (BIST Shared Test Mode \nEntry) Message\n2.\nSeries of Messages\n3.\nBIST (BIST Shared Test Mode \nExit) Message\nSection 8.3.2.15.3\nSection 8.3.3.27.3\nTable 8.29  AMS: Enter USB\nAMS\nMessage Sequence\nConditions\nAMS Ref\nState Machine Ref\nUFP Entering USB4® \nMode (Accept)\n1.\nEnter_USB Message\n2.\nAccept Message\nStarted by DFP\nSection 8.3.2.16.1.1\nSection 8.3.3.16.1,\nSection 8.3.3.16.2\nUFP Entering USB4 \nMode (Reject)\n1.\nEnter_USB Message\n2.\nReject Message\nSection 8.3.2.16.1.2\nUFP Entering USB4 \nMode (Wait)\n1.\nEnter_USB Message\n2.\nWait Message\nSection 8.3.2.16.1.3\nCable Plug Entering \nUSB4 Mode (Accept)\n1.\nEnter_USB Message\n2.\nAccept Message\nSection 8.3.2.16.2.1\nCable Plug Entering \nUSB4 Mode (Reject)\n1.\nEnter_USB Message\n2.\nReject Message\nSection 8.3.2.16.2.2\nCable Plug Entering \nUSB4 Mode (Wait)\n1.\nEnter_USB Message\n2.\nWait Message\nSection 8.3.2.16.2.3\nTable 8.30  AMS: Unstructured VDM\nAMS\nMessage Sequence\nAMS Ref\nState Machine Ref\nUnstructured VDM\n1.\nUnstructured Vendor_Defined \nMessage\nSection 8.3.2.17.1\nVDEM\n1.\nVendor_Defined_Extended Message Section 8.3.2.17.2\n","image_count":0,"table_count":4}
{"page":446,"text":"Page 446\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.1.3.27\n  AMS: Hard Reset\nTable 8.31  AMS: Hard Reset\nAMS\nInterruptibl\ne\nMessage Sequence\nConditions\nAMS Ref\nState \nMachine Ref\nSource Initiated \nHard Reset\nNo\n1.\nHard Reset Signaling\n2.\nSPR Explicit Contract \nNegotiation AMS\nStarted by \nSource\nSection 8.3.2.6.1,\nSection 8.3.2.2.1.1\nSection 8.3.3.2,\nSection 8.3.3.3\nSink Initiated Hard \nReset\nNo\n1.\nHard Reset Signaling\n2.\nSPR Explicit Contract \nNegotiation AMS\nStarted by \nSink\nSection 8.3.2.6.2,\nSection 8.3.2.2.1.1\nSource Initiated \nHard Reset – Sink \nLong Reset\nNo\n1.\nHard Reset Signaling\n2.\nSPR Explicit Contract \nNegotiation AMS\nStarted by \nSource\nSection 8.3.2.6.3,\nSection 8.3.2.2.1.1\n","image_count":0,"table_count":2}
{"page":447,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 447\n8.3.2.2\n  Power Negotiation\n8.3.2.2.1\n  SPR\n8.3.2.2.1.1\n  SPR Explicit Contract Negotiation\n8.3.2.2.1.1.1\n  SPR Explicit Contract Negotiation (Accept)\nFigure 8.5, \"Successful Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a successful \nMessage flow while negotiating an Explicit Contract in SPR Mode. The Negotiation goes through 5 distinct phases:\n\nThe Source sends out its power Capabilities in a Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities, and, in the request, phase selects one power level by sending a \nRequest Message.\n\nThe Source evaluates the request and accepts the request with an Accept Message.\n\nThe Source transitions to the new power level and then informs the Sink by sending a PS_RDY Message.\n\nThe Sink starts using the new power level.\n\nFor SPR PPS operation:\n\nthe Source starts its keep alive timer.\n\nthe Sink starts its request timer to send periodic Request Messages.\n","image_count":0,"table_count":1}
{"page":448,"text":"Page 448\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.5 Successful Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Accept\n20: Accept\n21: Accept + CRC\n22: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Accept received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Accept sent\nPower supply adjusted to negotiated output\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sent\nStop PSTransitionTimer\nFor PPS operation start \nPPSRequestTimer\nNew Power level\nEvaluate Capabilities\nDetect plug type\nEvaluate Request\nPrepare for new power\nSource\nSink\nCable Capabilities detected\nPlug type detected\nFor PPS operation start \nPPSTimeoutTimer\n","image_count":10,"table_count":7}
{"page":449,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 449\nTable 8.32, \"Steps for a successful Power Negotiation\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.5, \"Successful Fixed, Variable or Battery SPR Power Negotiation\" above.\nTable 8.32  Steps for a successful Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities or Plug Type are detected if these \nare not already known (see Section 4.4, \"Cable Type \nDetection\"). Policy Engine directs the Protocol Layer to \nsend a Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the Source_Capabilities \nMessage sent by the Source, detects the plug type if this is \nnecessary (see Section 4.4, \"Cable Type Detection\") and \nselects which power it would like. It tells the Protocol \nLayer to form the data (e.g., Power Data Object) that \nrepresents its Request into a Message.\n11\nProtocol Layer creates the Request Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":450,"text":"Page 450\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n19\nPolicy Engine evaluates the Request Message sent by \nthe Sink and decides if it can meet the request. It tells the \nProtocol Layer to form an Accept Message. \n20\nThe Protocol Layer forms the Accept Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Accept Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the PSTransitionTimer \nand reduces its current draw.\nThe DPM prepares the Power supply for transition to \nthe new power level.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that an \nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n28\nThe DPM informs the Policy Engine that the power \nsupply has settled at the new operating condition and \ntells the Protocol Layer to send a PS_RDY Message.\n29\nThe Protocol Layer forms the PS_RDY Message.\n30\nPHY Layer appends CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n31\nPHY Layer forwards the PS_RDY Message to the \nProtocol Layer.\nTable 8.32  Steps for a successful Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":451,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 451\n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY \nhas been received. The Policy Engine stops the \nPSTransitionTimer.\nWhen in SPR PPS Mode the Policy Engine starts the \nSinkPPSPeriodicTimer.\n33\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n34\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n35\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter. Stops the \nCRCReceiveTimer.\n \n36\nThe Protocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\n37\nWhen in SPR PPS Mode the Policy Engine starts the \nSourcePPSCommTimer.\nNew Power Level Negotiated\nTable 8.32  Steps for a successful Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":452,"text":"Page 452\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.1.1.2\n  SPR Explicit Contract Negotiation (Reject)\nFigure 8.6, \"Rejected Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a Message flow \nwhere the request is rejected while negotiating an Explicit Contract in SPR Mode. The Negotiation goes through the \nfollowing phases:\n\nThe Source sends out its power Capabilities in a Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities, and, in the request, phase selects one power level by sending a \nRequest Message.\n\nThe Source evaluates the request and rejects the request with a Reject Message.\nFigure 8.6 Rejected Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Reject\n20: Reject\n21: Reject + CRC\n22: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Reject received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Reject sent\nStop SenderResponseTimer\nEvaluate Capabilities\nDetect plug type\nEvaluate Request\nSource\nSink\nCable Capabilities detected\nPlug type detected\n","image_count":11,"table_count":5}
{"page":453,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 453\nTable 8.33, \"Steps for a rejected Power Negotiation\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.6, \"Rejected Fixed, Variable or Battery SPR Power Negotiation\" above.\nTable 8.33  Steps for a rejected Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities or Plug Type are detected if these \nare not already known (see Section 4.4, \"Cable Type \nDetection\"). Policy Engine directs the Protocol Layer to \nsend a Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the Source_Capabilities \nMessage sent by the Source, detects the plug type if this is \nnecessary (see Section 4.4, \"Cable Type Detection\") and \nselects which power it would like. It tells the Protocol \nLayer to form the data (e.g., Power Data Object) that \nrepresents its Request into a Message.\n11\nProtocol Layer creates the Request Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Request Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":454,"text":"Page 454\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n19\nPolicy Engine evaluates the Request Message sent by \nthe Sink and decides it can’t meet the request. It tells the \nProtocol Layer to form a Reject Message. \n20\nThe Protocol Layer forms the Reject Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Reject Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Reject \nMessage has been received. The Policy Engine stops \nSenderResponseTimer.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that a \nReject Message was successfully sent.\nTable 8.33  Steps for a rejected Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":455,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 455\n8.3.2.2.1.1.3\n  SPR Explicit Contract Negotiation (Wait)\nFigure 8.7, \"Wait response to Fixed, Variable or Battery SPR Power Negotiation\" illustrates an example of a Message \nflow where the request is responded to with wait while negotiating an Explicit Contract in SPR Mode. The \nNegotiation goes through the following phases:\n\nThe Source sends out its power Capabilities in a Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities, and, in the request, phase selects one power level by sending a \nRequest Message.\n\nThe Source evaluates the request and rejects the request with a Wait Message.\nFigure 8.7 Wait response to Fixed, Variable or Battery SPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: Capabilities\n3: Capabilities + CRC\n4: Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Capabilities sent\nStart SenderResponseTimer\n10: Send Request\n11: Request\n12: Request + CRC\n13: Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Wait\n20: Wait\n21: Wait + CRC\n22: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Wait received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Wait sent\nStop SenderResponseTimer\nEvaluate Capabilities\nDetect plug type\nEvaluate Request\nSource\nSink\nCable Capabilities detected\nPlug type detected\n","image_count":11,"table_count":5}
{"page":456,"text":"Page 456\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.34, \"Steps for a Wait response to a Power Negotiation\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.7, \"Wait response to Fixed, Variable or Battery SPR Power Negotiation\" \nabove.\nTable 8.34  Steps for a Wait response to a Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities or Plug Type are detected if these \nare not already known (see Section 4.4, \"Cable Type \nDetection\"). Policy Engine directs the Protocol Layer to \nsend a Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the Source_Capabilities \nMessage sent by the Source, detects the plug type if this is \nnecessary (see Section 4.4, \"Cable Type Detection\") and \nselects which power it would like. It tells the Protocol \nLayer to form the data (e.g., Power Data Object) that \nrepresents its Request into a Message.\n11\nProtocol Layer creates the Request Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":457,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 457\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n19\nPolicy Engine evaluates the Request Message sent by \nthe Sink and decides if it can meet the request. It tells the \nProtocol Layer to form a Wait Message. \n20\nThe Protocol Layer forms the Wait Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Wait Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Wait \nMessage has been received. The Policy Engine stops \nSenderResponseTimer.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that a \nWait Message was successfully sent.\nTable 8.34  Steps for a Wait response to a Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":458,"text":"Page 458\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.1.2\n  SPR PPS Keep Alive\nThis is an example of SPR PPS keep alive operation during an Explicit Contract with SPR PPS as the APDO. Figure \n8.8, \"SPR PPS Keep Alive\" shows the Messages as they flow across the bus and within the devices to accomplish the \nkeep alive.\nFigure 8.8 SPR PPS Keep Alive\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer\nStop PPSCommTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\nStop PPSRequestTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated output\nSend Ping if required to maintain activity\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nStop PSTransitionTimer\nStart PPSRequestTimer\nNew Power level\nEvaluate Request\nPrepare for new power\nSource\nSink\nPPSRequestTimer Timeout\nStart PPSCommTimer\n","image_count":10,"table_count":18}
{"page":459,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 459\nTable 8.35, \"Steps for SPR PPS Keep Alive\" below provides a detailed explanation of what happens at each labeled \nstep in Figure 8.8, \"SPR PPS Keep Alive\" above.\nTable 8.35  Steps for SPR PPS Keep Alive\nStep\nSource\nSink\n1\nThe SinkPPSPeriodicTimer times out in the Policy \nEngine. The Policy Engine tells the Protocol Layer to \nform a Request Message.\nThe Protocol Layer creates the Request Message and \npasses it to PHY Layer.\n2\nPHY Layer receives the Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops the \nSourcePPSCommTimer.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n9\nPolicy Engine requests the DPM to evaluate the \nRequest Message sent by the Sink and decides if the \nSource can meet the request. The Policy Engine tells \nthe Protocol Layer to form an Accept Message. \n10\nThe Protocol Layer forms the Accept Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Accept Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Accept Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the PSTransitionTimer \nand reduces its current draw.\nThe DPM prepares the Power supply for transition to \nthe new power level.\n","image_count":0,"table_count":2}
{"page":460,"text":"Page 460\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that an \nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18\nThe DPM informs the Policy Engine that the power \nsupply has settled at the new operating condition and \ntells the Protocol Layer to send a PS_RDY Message.\n19\nThe Protocol Layer forms the PS_RDY Message.\n20\nPHY Layer appends CRC and sends the PS_RDY Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n21\nPHY Layer forwards the PS_RDY Message to the Protocol \nLayer.\n22\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY \nhas been received. The Policy Engine stops the \nPSTransitionTimer.\nWhen in SPR PPS Mode the Policy Engine starts the \nSinkPPSPeriodicTimer.\n23\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n24\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n25\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter. Stops the \nCRCReceiveTimer.\n \n26\nThe Protocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\n27\nWhen in SPR PPS Mode the Policy Engine starts the \nSourcePPSCommTimer.\nTable 8.35  Steps for SPR PPS Keep Alive\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":461,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 461\n8.3.2.2.1.3\n  SPR Sink Makes Request\n8.3.2.2.1.3.1\n  SPR Sink Makes Request (Accept)\nThis is an example of SPR when a Sink makes a Request which is Accepted during an Explicit Contract. Figure 8.9, \n\"SPR Sink Makes Request (Accept)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the keep alive.\nFigure 8.9 SPR Sink Makes Request (Accept)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated output\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nStop PSTransitionTimer\nNew Power level\nEvaluate Request\nPrepare for new power\nSource\nSink\n","image_count":10,"table_count":17}
{"page":462,"text":"Page 462\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.36, \"Steps for SPR Sink Makes Request (Accept)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.9, \"SPR Sink Makes Request (Accept)\" above.\nTable 8.36  Steps for SPR Sink Makes Request (Accept)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form a Request Message.\nThe Protocol Layer creates the Request Message and \npasses it to PHY Layer.\n2\nPHY Layer receives the Request Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n9\nPolicy Engine requests the DPM to evaluate the \nRequest Message sent by the Sink and decides if the \nSource can meet the request. The Policy Engine tells \nthe Protocol Layer to form an Accept Message. \n10\nThe Protocol Layer forms the Accept Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Accept Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Accept Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the PSTransitionTimer \nand reduces its current draw.\nThe DPM prepares the Power supply for transition to \nthe new power level.\n","image_count":0,"table_count":2}
{"page":463,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 463\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that an \nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18\nThe DPM informs the Policy Engine that the power \nsupply has settled at the new operating condition and \ntells the Protocol Layer to send a PS_RDY Message.\n19\nThe Protocol Layer forms the PS_RDY Message.\n20\nPHY Layer appends CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n21\nPHY Layer forwards the PS_RDY Message to the Protocol \nLayer.\n22\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY \nhas been received. The Policy Engine stops the \nPSTransitionTimer.\n23\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n24\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n25\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter. Stops the \nCRCReceiveTimer.\n \n26\nThe Protocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\nNew Power Level Negotiated\nTable 8.36  Steps for SPR Sink Makes Request (Accept)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":464,"text":"Page 464\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.1.3.2\n  SPR Sink Makes Request (Reject)\nThis is an example of SPR when a Sink makes a Request which is Rejected during an Explicit Contract. Figure 8.10, \n\"SPR Sink Makes Request (Reject)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the keep alive.\nFigure 8.10 SPR Sink Makes Request (Reject)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Reject sent\nStop SenderResponseTimer\nEvaluate Request\nSource\nSink\n","image_count":10,"table_count":14}
{"page":465,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 465\nTable 8.37, \"Steps for SPR Sink Makes Request (Reject)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.10, \"SPR Sink Makes Request (Reject)\" above.\nTable 8.37  Steps for SPR Sink Makes Request (Reject)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form a Request Message.\nThe Protocol Layer creates the Request Message and \npasses it to PHY Layer.\n2\nPHY Layer receives the Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n9\nPolicy Engine requests the DPM to evaluate the \nRequest Message sent by the Sink and decides that the \nSource can’t meet the request. The Policy Engine tells \nthe Protocol Layer to form a Reject Message. \n10\nThe Protocol Layer forms the Reject Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Reject Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Reject Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Reject \nMessage has been received. The Policy Engine informs \nthe DPM that the Request has been rejected.\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":466,"text":"Page 466\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that a \nReject Message was successfully sent.\nTable 8.37  Steps for SPR Sink Makes Request (Reject)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":467,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 467\n8.3.2.2.1.3.3\n  SPR Sink Makes Request (Wait)\nThis is an example of SPR when a Sink makes a Request which is responded to with a Wait Message during an \nExplicit Contract. Figure 8.11, \"SPR Sink Makes Request (Wait)\" shows the Messages as they flow across the bus and \nwithin the devices to accomplish the keep alive.\nFigure 8.11 SPR Sink Makes Request (Wait)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send Request\n2: Request\n3: Request + CRC\n4: Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Wait sent\nStop SenderResponseTimer\nEvaluate Request\nSource\nSink\n","image_count":10,"table_count":13}
{"page":468,"text":"Page 468\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.38, \"Steps for SPR Sink Makes Request (Wait)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.11, \"SPR Sink Makes Request (Wait)\" above.\nTable 8.38  Steps for SPR Sink Makes Request (Wait)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form a Request Message.\nThe Protocol Layer creates the Request Message and \npasses it to PHY Layer.\n2\nPHY Layer receives the Request Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the Request \nMessage to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n9\nPolicy Engine requests the DPM to evaluate the \nRequest Message sent by the Sink and decides if the \nSource can meet the request. The Policy Engine tells \nthe Protocol Layer to form a Wait Message. \n10\nThe Protocol Layer forms the Wait Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Wait Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Wait Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Wait \nMessage has been received. The Policy Engine informs \nthe DPM that the Request has been rejected.\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":469,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 469\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that a \nWait Message was successfully sent.\nTable 8.38  Steps for SPR Sink Makes Request (Wait)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":470,"text":"Page 470\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2\n  EPR\n8.3.2.2.2.1\n  Entering EPR Mode\n8.3.2.2.2.1.1\n  Entering EPR Mode (Success)\nThis is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process succeeds. \nFigure 8.12, \"Entering EPR Mode (Success)\" shows the Messages as they flow across the bus and within the devices \nto accomplish the Enter EPR process.\nFigure 8.12 Entering EPR Mode (Success)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)\nStart CRCReceiveTimer\n5: EPR_Mode (Enter) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode entered\nSink\nSource\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional VCONN Swap Process – Source becomes VCONN Source\n20: Source reads Cable E-Marker to determine EPR capability – Cable is EPR Capable\n21: Send EPR_Mode (Enter Succeeded)\n22: EPR_Mode (Enter Succeeded)\n23: EPR_Mode (Enter Succeeded) + CRC\nStop SinkEPREnterTimer\n26: GoodCRC\n27: GoodCRC + CRC\n28: GoodCRC\n29: EPR_Mode (Enter Succeeded) sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n24: EPR_Mode (Enter Succeeded)\n25: EPR_Mode (Enter Succeeded) received\n","image_count":11,"table_count":9}
{"page":471,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 471\nTable 8.39, \"Steps for Entering EPR Mode (Success)\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.12, \"Entering EPR Mode (Success)\" above. \nTable 8.39  Steps for Entering EPR Mode (Success)\nStep\nSink\nSource\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an EPR_Mode (Enter) Message to request \nentry to EPR Mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the EPR_Mode \n(Enter) Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Mode (Enter) Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the EPR_Mode \n(Enter) Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode \n(Enter) Message information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Mode (Enter)Source_Capabilities Message was \nsuccessfully sent. The Policy Engine starts the \nSenderResponseTimer and the SinkEPREnterTimer.\n10\nPolicy Engine evaluates the EPR_Mode (Enter) Message \nsent by the Sink. It tells the Protocol Layer to form a \nEPR_Mode (Enter Acknowledged) Message.\n11\nProtocol Layer creates the EPR_Mode (Enter \nAcknowledged) Message and passes to PHY Layer.\n12\nPHY Layer receives the EPR_Mode (Enter \nAcknowledged) Message and compares the CRC it \ncalculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Acknowledged) Message. Starts \nCRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Acknowledged) Message to the \nProtocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nAcknowledged) information to the Policy Engine. The \nPolicy Engine stops the SenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":472,"text":"Page 472\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Acknowledged) Message was \nsuccessfully sent. The Protocol Layer stops the \nCRCReceiveTimer.\n19\nIf the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10, \n\"VCONN Swap\".\n20\nThe Source performs Cable Discovery to determine whether the cable supports EPR. The Cable Discovery process \nis described in Section 8.3.2.14.1, \"Discover Identity\".\n21\nThe Source is now the VCONN Source and has determined \nthat the Sink and the cable are EPR Capable.\nThe Policy Engine tells the Protocol Layer to form a \nEPR_Mode (Enter Succeeded) Message.\n22\nProtocol Layer creates the EPR_Mode (Enter Succeeded) \nMessage and passes to PHY Layer.\n23\nPHY Layer receives the EPR_Mode (Enter Succeeded) \nMessage and compares the CRC it calculated with the one \nsent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Succeeded) Message. Starts CRCReceiveTimer.\n24\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Succeeded) Message to the Protocol \nLayer. \n25\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nSucceeded) information to the Policy Engine. The \nPolicy Engine stops the SinkEPREnterTimer.\n26\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n27\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n28\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n29\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Succeeded) Message was \nsuccessfully sent. The Protocol Layer stops the \nCRCReceiveTimer.\nEPR Mode Entered\nTable 8.39  Steps for Entering EPR Mode (Success)\nStep\nSink\nSource\n","image_count":0,"table_count":2}
{"page":473,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 473\n8.3.2.2.2.1.2\n  Entering EPR Mode (Failure due to non-EPR cable)\nThis is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process fails due \nto the cable not being capable of EPR. Figure 8.13, \"Entering EPR Mode (Failure due to non-EPR cable)\" shows the \nMessages as they flow across the bus and within the devices to accomplish the Enter EPR process.\nFigure 8.13 Entering EPR Mode (Failure due to non-EPR cable)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)\nStart CRCReceiveTimer\n5: EPR_Mode (Enter) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode is not entered.  Sink Initiates Soft Reset.\nSink\nSource\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional VCONN Swap Process – Source becomes VCONN Source\n20: Source reads Cable E-Marker to determine EPR capability – Cable is not EPR Capable\n21: Send EPR_Mode (Enter Failed)\n22: EPR_Mode (Enter Failed)\n23: EPR_Mode (Enter Failed) + CRC\nStop SinkEPREnterTimer\n26: GoodCRC\n27: GoodCRC + CRC\n28: GoodCRC\n29: EPR_Mode (Enter Failed) sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n24: EPR_Mode (Enter Failed)\n25: EPR_Mode (Enter Failed) received\n","image_count":11,"table_count":10}
{"page":474,"text":"Page 474\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.40, \"Steps for Entering EPR Mode (Failure due to non-EPR cable)\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.13, \"Entering EPR Mode (Failure due to non-EPR cable)\" above. \nTable 8.40  Steps for Entering EPR Mode (Failure due to non-EPR cable)\nStep\nSink\nSource\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an EPR_Mode (Enter) Message to request \nentry to EPR Mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the EPR_Mode \n(Enter) Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Mode (Enter) Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the EPR_Mode \n(Enter) Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode \n(Enter) Message information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Mode (Enter) Message was successfully sent. The \nPolicy Engine starts the SenderResponseTimer and \nthe SinkEPREnterTimer.\n10\nPolicy Engine evaluates the EPR_Mode (Enter) Message \nsent by the Sink. It tells the Protocol Layer to form a \nEPR_Mode (Enter Acknowledged) Message.\n11\nProtocol Layer creates the EPR_Mode (Enter \nAcknowledged) Message and passes to PHY Layer.\n12\nPHY Layer receives the EPR_Mode (Enter \nAcknowledged) Message and compares the CRC it \ncalculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Acknowledged) Message. Starts \nCRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Acknowledged) Message to the \nProtocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nAcknowledged) information to the Policy Engine. The \nPolicy Engine stops the SenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":475,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 475\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Acknowledged) Message was \nsuccessfully sent. The Protocol Layer stops the \nCRCReceiveTimer.\n19\nIf the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10, \n\"VCONN Swap\".\n20\nThe Source performs Cable Discovery to determine whether the cable supports EPR; cable is not EPR Capable. The \nCable Discovery process is described in Section 8.3.2.14.1, \"Discover Identity\".\n21\nThe Source determines that there has been a failure or \nincompatibility during the EPR process (see Section \n6.4.10, \"EPR_Mode Message\").\nThe Policy Engine tells the Protocol Layer to form a \nEPR_Mode (Enter Failed) Message.\n22\nProtocol Layer creates the EPR_Mode (Enter Failed) \nMessage and passes to PHY Layer.\n23\nPHY Layer receives the EPR_Mode (Enter Failed) \nMessage and compares the CRC it calculated with the one \nsent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Failed) Message. Starts CRCReceiveTimer.\n24\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Failed) Message to the Protocol Layer. \n25\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter Failed) \ninformation to the Policy Engine. The Policy Engine \nstops the SinkEPREnterTimer.\n26\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n27\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n28\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n29\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Failed) Message was successfully \nsent. The Protocol Layer stops the CRCReceiveTimer.\nEPR Mode is not entered. Sink Initiates Soft Reset\nTable 8.40  Steps for Entering EPR Mode (Failure due to non-EPR cable)\nStep\nSink\nSource\n","image_count":0,"table_count":2}
{"page":476,"text":"Page 476\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2.1.3\n  Entering EPR Mode (Failure of VCONN Swap)\nThis is an example of an Enter EPR Mode operation where the Sink requests EPR Mode when this process fails due \nto a failure of the VCONN Swap process. Figure 8.14, \"Entering EPR Mode (Failure of VCONN Swap)\" shows the \nMessages as they flow across the bus and within the devices to accomplish the Enter EPR process.\nFigure 8.14 Entering EPR Mode (Failure of VCONN Swap)\n: Protocol\n1: Send EPR_Mode (Enter)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Enter)\n3: EPR_Mode (Enter) + CRC\n4: EPR_Mode (Enter)\nStart CRCReceiveTimer\n5: EPR_Mode (Enter) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Enter) sent\nStart SinkEPREnterTimer\nStart SenderResponseTimer\n10: Send EPR_Mode (Enter Acknowledged)\n11: EPR_Mode (Enter Acknowledged)\n12: EPR_Mode (Enter Acknowledged) + CRC\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Mode (Enter Acknowledged) sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nEPR Mode is not entered.  Sink Initiates Soft Reset.\nSink\nSource\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n13: EPR_Mode (Enter Acknowledged)\n14: EPR_Mode (Enter Acknowledged) received\n19: Optional VCONN Swap Process – Source fails to become VCONN Source\n20: Send EPR_Mode (Enter Failed)\n21: EPR_Mode (Enter Failed)\n22: EPR_Mode (Enter Failed) + CRC\nStop SinkEPREnterTimer\n25: GoodCRC\n26: GoodCRC + CRC\n27: GoodCRC\n28: EPR_Mode (Enter Failed) sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n23: EPR_Mode (Enter Failed)\n24: EPR_Mode (Enter Failed) received\n","image_count":11,"table_count":10}
{"page":477,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 477\nTable 8.41, \"Steps for Entering EPR Mode (Failure of VCONN Swap)\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.14, \"Entering EPR Mode (Failure of VCONN Swap)\" above. \nTable 8.41  Steps for Entering EPR Mode (Failure of VCONN Swap)\nStep\nSink\nSource\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an EPR_Mode (Enter) Message to request \nentry to EPR Mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the EPR_Mode \n(Enter) Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Mode (Enter) Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the EPR_Mode \n(Enter) Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode \n(Enter) Message information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Mode (Enter) Message was successfully sent. The \nPolicy Engine starts the SenderResponseTimer and \nthe SinkEPREnterTimer.\n10\nPolicy Engine evaluates the EPR_Mode (Enter) Message \nsent by the Sink. It tells the Protocol Layer to form a \nEPR_Mode (Enter Acknowledged) Message.\n11\nProtocol Layer creates the EPR_Mode (Enter \nAcknowledged) Message and passes to PHY Layer.\n12\nPHY Layer receives the EPR_Mode (Enter \nAcknowledged) Message and compares the CRC it \ncalculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Acknowledged) Message. Starts \nCRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Acknowledged) Message to the \nProtocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nAcknowledged) information to the Policy Engine. The \nPolicy Engine stops the SenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":478,"text":"Page 478\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Acknowledged) Message was \nsuccessfully sent. The Protocol Layer stops the \nCRCReceiveTimer.\n19\nIf the Source is not the VCONN Source the Source initiates the VCONN Swap process as described in Section 8.3.2.10, \n\"VCONN Swap\". In this case the VCONN Swap process fails.\n20\nThe Source determines that there has been a failure or \nincompatibility during the EPR process (see Section \n6.4.10, \"EPR_Mode Message\").\nThe Policy Engine tells the Protocol Layer to form a \nEPR_Mode (Enter Failed) Message.\n21\nProtocol Layer creates the EPR_Mode (Enter Failed) \nMessage and passes to PHY Layer.\n22\nPHY Layer receives the EPR_Mode (Enter Failed) \nMessage and compares the CRC it calculated with the one \nsent to verify the Message.\nPHY Layer appends a CRC and sends the EPR_Mode \n(Enter Failed) Message. Starts CRCReceiveTimer.\n23\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Enter Failed) Message to the Protocol Layer. \n24\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter Failed) \ninformation to the Policy Engine. The Policy Engine \nstops the SinkEPREnterTimer.\n25\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n26\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n27\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n28\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Mode (Enter Failed) Message was successfully \nsent. The Protocol Layer stops the CRCReceiveTimer.\nEPR Mode is not entered. Sink Initiates Soft Reset\nTable 8.41  Steps for Entering EPR Mode (Failure of VCONN Swap)\nStep\nSink\nSource\n","image_count":0,"table_count":2}
{"page":479,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 479\n8.3.2.2.2.2\n  EPR Explicit Contract Negotiation\n8.3.2.2.2.2.1\n  EPR Explicit Contract Negotiation (Accept)\nFigure 8.15, \"Successful Fixed EPR Power Negotiation\" illustrates an example of a successful Message flow while \nnegotiating an Explicit Contract in EPR Mode. The Negotiation goes through several distinct phases:\n\nThe Source sends out its power Capabilities in an EPR_Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an \nEPR_Request Message.\n\nThe Source evaluates the request and accepts the request with an Accept Message.\n\nThe Source transitions to the new power level and then informs the Sink by sending a PS_RDY Message.\n\nThe Sink starts using the new power level.\n\nthe Source starts its keep alive timer\n\nthe Sink starts its request timer to send periodic EPR_KeepAlive Messages \n","image_count":0,"table_count":1}
{"page":480,"text":"Page 480\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.15 Successful Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Accept\n20: Accept\n21: Accept + CRC\n22: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Accept received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Accept sent\nPower supply adjusted to negotiated output\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sent\nStop PSTransitionTimer\nStart SinkEPRKeepAliveTimer\nNew Power level\nEvaluate EPR Capabilities\nEvaluate EPR Request\nPrepare for new power\nSource\nSink\nCable EPR_Source_Capabilities detected\nStart SourceEPRKeepAliveTimer\n","image_count":10,"table_count":9}
{"page":481,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 481\nTable 8.42, \"Steps for a successful EPR Power Negotiation\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.15, \"Successful Fixed EPR Power Negotiation\" above.\nTable 8.42  Steps for a successful EPR Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities are detected if these are not \nalready known (see Section 4.4, \"Cable Type Detection\"). \nPolicy Engine directs the Protocol Layer to send a \nEPR_Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Source_Capabilities \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Source_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Source_Capabilities Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Source_Capabilities Message was successfully \nsent. Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the EPR_Source_Capabilities \nMessage sent by the Source and selects which power it \nwould like. It tells the Protocol Layer to form the data \n(e.g., Power Data Object) that represents its Request into \na Message.\n11\nProtocol Layer creates the EPR_Request Message and \npasses to PHY Layer.\n12\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":482,"text":"Page 482\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Request Message was successfully sent. The \nProtocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n19\nPolicy Engine evaluates the EPR_Request Message \nsent by the Sink and decides if it can meet the request. It \ntells the Protocol Layer to form an Accept Message. \n20\nThe Protocol Layer forms the Accept Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Accept Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the PSTransitionTimer \nand reduces its current draw.\nThe DPM prepares the Power supply for transition to \nthe new power level.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that an \nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n28\nThe DPM informs the Policy Engine that the power \nsupply has settled at the new operating condition and \ntells the Protocol Layer to send a PS_RDY Message.\n29\nThe Protocol Layer forms the PS_RDY Message.\n30\nPHY Layer appends CRC and sends the PS_RDY Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n31\nPHY Layer forwards the PS_RDY Message to the \nProtocol Layer.\nTable 8.42  Steps for a successful EPR Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":483,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 483\n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY \nhas been received. The Policy Engine stops the \nPSTransitionTimer.\nThe Policy Engine starts the SinkEPRKeepAliveTimer.\n33\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n34\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n35\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter. Stops the \nCRCReceiveTimer.\n \n36\nThe Protocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\n37\nWhen in EPR operation the Policy Engine starts the \nSourceEPRKeepAliveTimer.\nTable 8.42  Steps for a successful EPR Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":484,"text":"Page 484\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2.2.2\n  EPR Explicit Contract Negotiation (Reject)\nFigure 8.16, \"Rejected Fixed EPR Power Negotiation\" illustrates an example of a Message flow where the request is \nrejected while negotiating an Explicit Contract in EPR Mode. The Negotiation goes through several distinct phases:\n\nThe Source sends out its power Capabilities in an EPR_Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an \nEPR_Request Message.\n\nThe Source evaluates the request and accepts the request with a Reject Message.\nFigure 8.16 Rejected Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Reject\n20: Reject\n21: Reject + CRC\n22: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Reject received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Reject sent\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\nEvaluate EPR Capabilities\nEvaluate EPR Request\nSource\nSink\nCable EPR_Source_Capabilities detected\n","image_count":11,"table_count":5}
{"page":485,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 485\nTable 8.43, \"Steps for a Rejected EPR Power Negotiation\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.16, \"Rejected Fixed EPR Power Negotiation\" above.\nTable 8.43  Steps for a Rejected EPR Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities are detected if these are not \nalready known (see Section 4.4, \"Cable Type Detection\"). \nPolicy Engine directs the Protocol Layer to send a \nEPR_Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Source_Capabilities \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Source_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Source_Capabilities Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Source_Capabilities Message was successfully \nsent. Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the EPR_Source_Capabilities \nMessage sent by the Source and selects which power it \nwould like. It tells the Protocol Layer to form the data \n(e.g., Power Data Object) that represents its Request into \na Message.\n11\nProtocol Layer creates the EPR_Request Message and \npasses to PHY Layer.\n12\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":486,"text":"Page 486\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Request Message was successfully sent. The \nProtocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n19\nPolicy Engine evaluates the EPR_Request Message \nsent by the Sink and decides it can’t meet the request. It \ntells the Protocol Layer to form a Reject Message. \n20\nThe Protocol Layer forms the Reject Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Reject Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Reject \nMessage has been received. The Policy Engine stops \nSenderResponseTimer.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that a \nReject Message was successfully sent.\nTable 8.43  Steps for a Rejected EPR Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":487,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 487\n8.3.2.2.2.2.3\n  EPR Explicit Contract Negotiation (Wait)\nFigure 8.17, \"Wait response to Fixed EPR Power Negotiation\" illustrates an example of a Message flow where the \nrequest is responded to with wait while negotiating an Explicit Contract in EPR Mode. The Negotiation goes through \nseveral distinct phases:\n\nThe Source sends out its power Capabilities in an EPR_Source_Capabilities Message.\n\nThe Sink evaluates these Capabilities and, in the request phase, selects one power level by sending an \nEPR_Request Message.\n\nThe Source evaluates the request and accepts the request with a Wait Message.\nFigure 8.17 Wait response to Fixed EPR Power Negotiation\n: Source Policy Engine\n: Protocol\n1: Send EPR_Source_Capabilities\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n2: EPR_Source_Capabilities\n3: EPR_Source_Capabilities + CRC\n4: EPR_Source_Capabilities\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Source_Capabilities received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: EPR_Source_Capabilities sent\nStart SenderResponseTimer\n10: Send EPR_Request\n11: EPR_Request\n12: EPR_Request + CRC\n13: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Request received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n19: Send Wait\n20: Wait\n21: Wait + CRC\n22: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Wait received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Wait sent\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\nEvaluate EPR Capabilities\nEvaluate EPR Request\nSource\nSink\nCable EPR_Source_Capabilities detected\n","image_count":11,"table_count":5}
{"page":488,"text":"Page 488\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.44, \"Steps for a Wait response to an EPR Power Negotiation\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.17, \"Wait response to Fixed EPR Power Negotiation\" above.\nTable 8.44  Steps for a Wait response to an EPR Power Negotiation\nStep\nSource\nSink\n1\nThe Cable Capabilities are detected if these are not \nalready known (see Section 4.4, \"Cable Type Detection\"). \nPolicy Engine directs the Protocol Layer to send a \nEPR_Source_Capabilities Message that represents the \npower supply’s present capabilities.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Source_Capabilities \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Source_Capabilities Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Source_Capabilities Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Source_Capabilities Message was successfully \nsent. Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the EPR_Source_Capabilities \nMessage sent by the Source and selects which power it \nwould like. It tells the Protocol Layer to form the data \n(e.g., Power Data Object) that represents its Request into \na Message.\n11\nProtocol Layer creates the EPR_Request Message and \npasses to PHY Layer.\n12\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops \nSenderResponseTimer.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":489,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 489\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Request Message was successfully sent. The \nProtocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n19\nPolicy Engine evaluates the EPR_Request Message \nsent by the Sink and decides if it can meet the request. It \ntells the Protocol Layer to form a Wait Message. \n20\nThe Protocol Layer forms the Wait Message that is \npassed to the PHY Layer.\n21\nPHY Layer appends CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n22\nPHY Layer forwards the Wait Message to the Protocol \nLayer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a Wait \nMessage has been received. The Policy Engine stops \nSenderResponseTimer.\n24\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n25\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends CRC and sends the Message.\n26\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n27\nThe Protocol Layer informs the Policy Engine that a \nWait Message was successfully sent.\nTable 8.44  Steps for a Wait response to an EPR Power Negotiation\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":490,"text":"Page 490\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2.3\n  EPR Keep Alive\nThis is an example of keep alive operation during an Explicit Contract in EPR Mode. Figure 8.18, \"EPR Keep \nAlive\"shows the Messages as they flow across the bus and within the devices to accomplish the keep alive.\nFigure 8.18 EPR Keep Alive\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_KeepAlive\n2: EPR_KeepAlive\n3: EPR_KeepAlive + CRC\n4: EPR_KeepAlive\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_KeepAlive received\nStop SourceEPRKeepAliveTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_KeepAlive sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send EPR_KeepAlive_Ack\n11: EPR_KeepAlive_Ack\n12: EPR_KeepAlive_Ack + CRC\n13: EPR_KeepAlive_Ack\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_KeepAlive_Ack received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: EPR_KeepAlive_Ack sent\nStop SenderResponseTimer\nStart SinkEPRKeepAliveTimer\nEPR Mode Continues\nEvaluate EPR_KeepAlive\nSource\nSink\nSinkEPRKeepAliveTimer Timeout\nStop SinkEPRKeepAliveTimer\nStart SourceEPRKeepAliveTimer\n","image_count":11,"table_count":16}
{"page":491,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 491\nTable 8.45, \"Steps for EPR Keep Alive\" below provides a detailed explanation of what happens at each labeled step \nin Figure 8.18, \"EPR Keep Alive\" above.\nTable 8.45  Steps for EPR Keep Alive\nStep\nSource\nSink\n1\nThe SinkEPRKeepAliveTimer times out in the Policy \nEngine. The Policy Engine stops the \nSinkEPRKeepAliveTimer timer and tells the Protocol \nLayer to form an EPR_KeepAlive Message.\n2\nThe Protocol Layer creates the EPR_KeepAlive Message \nand passes it to PHY Layer. The Protocol Layer.\n3\nPHY Layer receives the EPR_KeepAlive Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Request \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nEPR_KeepAlive Message to the Protocol Layer. \n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine. Policy Engine stops the \nSourceEPRKeepAliveTimer.\n6\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n8\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n9\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe SinkEPRKeepAliveTimer Message was successfully \nsent. The Protocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM to evaluate the \nSourceEPRKeepAliveTimer Message sent by the Sink \nand decides if the Source can meet the request. The \nPolicy Engine tells the Protocol Layer to form an \nEPR_KeepAlive_Ack Message.\n11\nThe Protocol Layer forms the EPR_KeepAlive_Ack \nMessage that is passed to the PHY Layer.\n12\nPHY Layer appends CRC and sends the \nEPR_KeepAlive_Ack Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_KeepAlive_Ack Message \nand compares the CRC it calculated with the one sent to \nverify the Message.\n13\nPHY Layer forwards the EPR_KeepAlive_Ack Message to \nthe Protocol Layer.\n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the \nSinkEPRKeepAliveTimer.\n","image_count":0,"table_count":2}
{"page":492,"text":"Page 492\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n18\nThe Protocol Layer informs the Policy Engine that an \nEPR_KeepAlive_Ack Message was successfully sent.\nThe Policy Engine starts the \nSourceEPRKeepAliveTimer.\nEPR Mode Continues\nTable 8.45  Steps for EPR Keep Alive\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":493,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 493\n8.3.2.2.2.4\n  Exiting EPR Mode\n8.3.2.2.2.4.1\n  Exiting EPR Mode (Sink Initiated)\nThis is an example of an Exit EPR Mode operation where the Sink requests EPR Mode to be exited. Figure 8.19, \n\"Exiting EPR Mode (Sink Initiated)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the Exit EPR process.\nFigure 8.19 Exiting EPR Mode (Sink Initiated)\n: Protocol\n1: Send EPR_Mode (Exit)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Exit)\n3: EPR_Mode (Exit) + CRC\n4: EPR_Mode (Exit)\nStart CRCReceiveTimer\n5: EPR_Mode (Exit) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Exit) sent\n: Policy Engine\n: Policy Engine\nEPR Mode exited\nSink\nSource\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Source_Capabilities sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n13: Source_Capabilities\n14: Source_Capabilities received\nPorts in EPR Mode with SPR PDO Explicit Contract\n","image_count":10,"table_count":8}
{"page":494,"text":"Page 494\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.46, \"Steps for Exiting EPR Mode (Sink Initiated)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.19, \"Exiting EPR Mode (Sink Initiated)\" above.\nTable 8.46  Steps for Exiting EPR Mode (Sink Initiated)\nStep\nSink\nSource\nThe Port Partners are in an Explicit Contract using an SPR (A)PDO (Voltage <= 20V)\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an EPR_Mode (Exit) Message to request entry \nto EPR Mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the EPR_Mode \n(Exit) Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Mode (Exit) Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the EPR_Mode \n(Exit) Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode \n(Exit) Message information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Mode (Exit) Message was successfully sent.\n10\nPolicy Engine evaluates the EPR_Mode (Exit) Message \nsent by the Sink. It tells the Protocol Layer to form a \nSource_Capabilities Message.\n11\nProtocol Layer creates the Source_Capabilities Message \nand passes to PHY Layer.\n12\nPHY Layer receives the Source_Capabilities Message \nand compares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\n13\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nSucceeded) information to the Policy Engine.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":495,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 495\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Source_Capabilities Message was successfully sent. \nThe Protocol Layer stops the CRCReceiveTimer.\nEPR Mode Exited. Power Negotiation proceeds as defined in Section 8.3.2.2.1.1, \"SPR Explicit Contract Negotiation\".\nTable 8.46  Steps for Exiting EPR Mode (Sink Initiated)\nStep\nSink\nSource\n","image_count":0,"table_count":2}
{"page":496,"text":"Page 496\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2.4.2\n  Exiting EPR Mode (Source Initiated)\nThis is an example of an Exit EPR Mode operation where the Source requests EPR Mode to be exited. Figure 8.20, \n\"Exiting EPR Mode (Source Initiated)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the Exit EPR process.\nFigure 8.20 Exiting EPR Mode (Source Initiated)\n: Protocol\n1: Send EPR_Mode (Exit)\n: PHY\n: PHY\n: Protocol\n2: EPR_Mode (Exit)\n3: EPR_Mode (Exit) + CRC\n4: EPR_Mode (Exit)\nStart CRCReceiveTimer\n5: EPR_Mode (Exit) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Mode (Exit) sent\n: Policy Engine\n: Policy Engine\nEPR Mode exited\nSink\nSource\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Source_Capabilities sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n13: Source_Capabilities\n14: Source_Capabilities received\nPorts in EPR Mode with SPR PDO Explicit Contract\n","image_count":10,"table_count":6}
{"page":497,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 497\nTable 8.47, \"Steps for Exiting EPR Mode (Source Initiated)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.20, \"Exiting EPR Mode (Source Initiated)\" above. \nTable 8.47  Steps for Exiting EPR Mode (Source Initiated)\nStep\nSink\nSource\nThe Port Partners are in an Explicit Contract using an SPR (A)PDO (Voltage <= 20V)\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an EPR_Mode (Exit) Message to request entry \nto EPR Mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer receives the EPR_Mode (Exit) Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the EPR_Mode \n(Exit) Message. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Mode (Exit) Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received EPR_Mode \n(Exit) Message information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Mode (Exit) Message was successfully sent.\n10\nPolicy Engine evaluates the EPR_Mode (Exit) Message \nsent by the Sink. It tells the Protocol Layer to form a \nSource_Capabilities Message.\n11\nProtocol Layer creates the Source_Capabilities Message \nand passes to PHY Layer. Starts CRCReceiveTimer.\n12\nPHY Layer receives the Source_Capabilities Message \nand compares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities Message.\n13\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer. \n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the EPR_Mode (Enter \nSucceeded) information to the Policy Engine.\n15\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n16\nPHY Layer appends CRC and sends the Message.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":498,"text":"Page 498\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n18\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Source_Capabilities Message was successfully sent. \nThe Protocol Layer stops the CRCReceiveTimer.\nEPR Mode Exited. Power Negotiation proceeds as defined in Section 8.3.2.2.1.1, \"SPR Explicit Contract Negotiation\".\nTable 8.47  Steps for Exiting EPR Mode (Source Initiated)\nStep\nSink\nSource\n","image_count":0,"table_count":2}
{"page":499,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 499\n8.3.2.2.2.5\n  EPR Sink Makes Request\n8.3.2.2.2.5.1\n  EPR Sink Makes Request (Accept)\nThis is an example of EPR when a Sink makes a Request which is Accepted during an Explicit Contract. Figure 8.21, \n\"EPR Sink Makes Request (Accept)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the keep alive.\nFigure 8.21 EPR Sink Makes Request (Accept)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Accept sent\nPower supply adjusted to negotiated output\nStop SenderResponseTimer\nStart PSTransitionTimer\nReduce current\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nStop PSTransitionTimer\nNew Power level\nEvaluate EPR_Request\nPrepare for new power\nSource\nSink\n","image_count":10,"table_count":18}
{"page":500,"text":"Page 500\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.48, \"Steps for EPR Sink Makes Request (Accept)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.21, \"EPR Sink Makes Request (Accept)\" above.\nTable 8.48  Steps for EPR Sink Makes Request (Accept)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form an EPR_Request Message.\nThe Protocol Layer creates the EPR_Request Message \nand passes it to PHY Layer.\n2\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Request Message was successfully sent. The \nProtocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n9\nPolicy Engine requests the DPM to evaluate the \nEPR_Request Message sent by the Sink and decides if \nthe Source can meet the request. The Policy Engine \ntells the Protocol Layer to form an Accept Message. \n10\nThe Protocol Layer forms the Accept Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Accept Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Accept Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Accept \nMessage has been received. The Policy Engine stops \nSenderResponseTimer, starts the PSTransitionTimer \nand reduces its current draw.\nThe DPM prepares the Power supply for transition to \nthe new power level.\n","image_count":0,"table_count":2}
{"page":501,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 501\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that an \nAccept Message was successfully sent.\nPower supply Adjusts its Output to the Negotiated Value\n18\nThe DPM informs the Policy Engine that the power \nsupply has settled at the new operating condition and \ntells the Protocol Layer to send a PS_RDY Message.\n19\nThe Protocol Layer forms the PS_RDY Message.\n20\nPHY Layer appends CRC and sends the PS_RDY Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n21\nPHY Layer forwards the PS_RDY Message to the \nProtocol Layer.\n22\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that a RS_RDY \nhas been received. The Policy Engine stops the \nPSTransitionTimer.\n23\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n24\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n25\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter. Stops the \nCRCReceiveTimer.\n \n26\nThe Protocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\nNew Power Level Negotiated\nTable 8.48  Steps for EPR Sink Makes Request (Accept)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":502,"text":"Page 502\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.2.2.5.2\n  EPR Sink Makes Request (Reject)\nThis is an example of EPR when a Sink makes a Request which is Rejected during an Explicit Contract. Figure 8.22, \n\"EPR Sink Makes Request (Reject)\" shows the Messages as they flow across the bus and within the devices to \naccomplish the keep alive.\nFigure 8.22 EPR Sink Makes Request (Reject)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Reject sent\nStop SenderResponseTimer\nEvaluate EPR_Request\nSource\nSink\n","image_count":10,"table_count":14}
{"page":503,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 503\nTable 8.49, \"Steps for EPR Sink Makes Request (Reject)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.22, \"EPR Sink Makes Request (Reject)\" above.\nTable 8.49  Steps for EPR Sink Makes Request (Reject)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form an EPR_Request Message.\nThe Protocol Layer creates the Request Message and \npasses it to PHY Layer.\n2\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe EPR_Request Message was successfully sent. The \nProtocol Layer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer. \n9\nPolicy Engine requests the DPM to evaluate the \nEPR_Request Message sent by the Sink and decides that \nthe Source can’t meet the request. The Policy Engine \ntells the Protocol Layer to form a Reject Message. \n10\nThe Protocol Layer forms the Reject Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Reject Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n12\nPHY Layer forwards the Reject Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Reject \nMessage has been received. The Policy Engine informs \nthe DPM that the Request has been rejected.\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":504,"text":"Page 504\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that a \nReject Message was successfully sent.\nTable 8.49  Steps for EPR Sink Makes Request (Reject)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":505,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 505\n8.3.2.2.2.5.3\n  EPR Sink Makes Request (Wait)\nThis is an example of SPR when a Sink makes a Request which is responded to with a Wait Message during an \nExplicit Contract. Figure 8.23, \"EPR Sink Makes Request (Wait)\" shows the Messages as they flow across the bus and \nwithin the devices to accomplish the keep alive.\nFigure 8.23 EPR Sink Makes Request (Wait)\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\n1: Send EPR_Request\n2: EPR_Request\n3: EPR_Request + CRC\n4: EPR_Request\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Request received\nStop SenderResponseTimer\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: EPR_Request sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Wait sent\nStop SenderResponseTimer\nEvaluate EPR_Request\nSource\nSink\n","image_count":10,"table_count":13}
{"page":506,"text":"Page 506\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.50, \"Steps for SPR Sink Makes Request (Wait)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.23, \"EPR Sink Makes Request (Wait)\" above.\nTable 8.50  Steps for SPR Sink Makes Request (Wait)\nStep\nSource\nSink\n1\nDPM tells the Policy Engine to request a different \npower level. The Policy Engine tells the Protocol Layer \nto form an EPR_Request Message.\nThe Protocol Layer creates the EPR_Request Message \nand passes it to PHY Layer.\n2\nPHY Layer receives the EPR_Request Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the EPR_Request \nMessage. Starts CRCReceiveTimer.\n3\nPHY Layer removes the CRC and forwards the \nEPR_Request Message to the Protocol Layer. \n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer passes the Request information to \nthe Policy Engine.\n5\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n6\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n7\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. \n8\nThe Protocol Layer verifies and increments the \nMessageIDCounter. It informs the Policy Engine that \nthe Request Message was successfully sent. The Protocol \nLayer stops the CRCReceiveTimer.\nThe Policy Engine starts SenderResponseTimer.\n9\nPolicy Engine requests the DPM to evaluate the \nEPR_Request Message sent by the Sink and decides if \nthe Source can meet the request. The Policy Engine \ntells the Protocol Layer to form a Wait Message. \n10\nThe Protocol Layer forms the Wait Message that is \npassed to the PHY Layer.\n11\nPHY Layer appends CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Wait Message and compares the \nCRC it calculated with the one sent to verify the Message.\n12\nPHY Layer forwards the Wait Message to the Protocol \nLayer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nProtocol Layer informs the Policy Engine that an Wait \nMessage has been received. The Policy Engine informs \nthe DPM that the Request has been rejected.\n14\nThe Protocol Layer generates a GoodCRC Message and \npasses it to its PHY Layer.\n","image_count":0,"table_count":2}
{"page":507,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 507\n15\nPHY Layer receives the GoodCRC Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n16\nPHY Layer forwards the GoodCRC Message to the \nProtocol Layer. The Protocol Layer verifies and \nincrements the MessageIDCounter and stops the \nCRCReceiveTimer.\n17\nThe Protocol Layer informs the Policy Engine that a \nWait Message was successfully sent.\nTable 8.50  Steps for SPR Sink Makes Request (Wait)\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":508,"text":"Page 508\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.3\n  Unsupported Message\nThis is an example of the response to an Unsupported Message. Figure 8.24, \"Unsupported message\" shows the \nMessages as they flow across the bus and within the devices.\nFigure 8.24 Unsupported message\n: Protocol\n1: Send Message\n: PHY\n: PHY\n: Protocol\n2: Message\n3: Message + CRC\n4: Message\nStart CRCReceiveTimer\n5: Message received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Message sent\nStart SenderResponseTimer\n10: Send Not_supported\n11: Not_supported\n12: Not_supported + CRC\n13: Not_supported\n14: Not_supported received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Not_supported sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nMessage Initiator\nMessage Responder\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":7,"table_count":11}
{"page":509,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 509\nTable 8.51, \"Steps for an Unsupported Message\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.24, \"Unsupported message\" above.\nTable 8.51  Steps for an Unsupported Message\nStep\nMessage Initiator\nMessage Responder\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a Message. \n2\nProtocol Layer resets MessageIDCounter, stored \nMessageID and RetryCounter. Protocol Layer creates \nthe Message and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Message to \nthe Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Message \ninformation to the Policy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nMessage was successfully sent. Policy Engine starts \nSenderResponseTimer.\n10\nPolicy Engine tells the Protocol Layer to form an \nNot_Supported Message.\n11\nProtocol Layer creates the Not_Supported Message and \npasses to PHY Layer.\n12\nPHY Layer receives the Not_Supported Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Not_Supported \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received \nNot_Supported Message information to the Policy \nEngine that consumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":510,"text":"Page 510\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nNot_Supported Message was successfully sent.\nTable 8.51  Steps for an Unsupported Message\nStep\nMessage Initiator\nMessage Responder\n","image_count":0,"table_count":2}
{"page":511,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 511\n8.3.2.4\n  Soft Reset\nThis is an example of a Soft Reset operation. Figure 8.25, \"Soft Reset\" shows the Messages as they flow across the \nbus and within the devices to accomplish the Soft Reset.\nFigure 8.25 Soft Reset\n: Protocol\n1: Send Soft Reset\n: PHY\n: PHY\n: Protocol\n2: Soft Reset\n3: Soft Reset + CRC\n4: Soft Reset\nStart CRCReceiveTimer\n5: Soft Reset received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Soft Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nReset Complete, Explicit Contract negotiation\nReset Initiator\nReset Responder\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":6,"table_count":10}
{"page":512,"text":"Page 512\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.52, \"Steps for a Soft Reset\" below provides a detailed explanation of what happens at each labeled step in \nFigure 8.25, \"Soft Reset\" above.\nTable 8.52  Steps for a Soft Reset\nStep\nReset Initiator\nReset Responder\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a Soft_Reset Message to request a Soft Reset. \n2\nProtocol Layer resets MessageIDCounter, stored \nMessageID and RetryCounter. Protocol Layer creates \nthe Message and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Soft_Reset \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Soft_Reset Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nSoft_Reset Message to the Protocol Layer.\n5\nProtocol Layer does not check the MessageID in the \nincoming Message and resets MessageIDCounter, \nstored MessageID and RetryCounter.\nThe Protocol Layer forwards the received Soft_Reset \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSoft_Reset Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":513,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 513\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nThe reset is complete and protocol communication can restart. Port Partners perform an Explicit Contract Negotiation to re-\nsynchronize their state machines.\nTable 8.52  Steps for a Soft Reset\nStep\nReset Initiator\nReset Responder\n","image_count":0,"table_count":2}
{"page":514,"text":"Page 514\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.5\n  Data Reset\n8.3.2.5.1\n  DFP Initiated Data Reset where the DFP is the VCONN Source\nThis is an example of a Data Reset operation where the DFP is also the VCONN Source and initiates a Data Reset. \nFigure 8.26, \"DFP Initiated Data Reset where the DFP is the VCONN Source\" shows the Messages as they flow across \nthe bus and within the devices to accomplish the Data Reset.\nFigure 8.26 DFP Initiated Data Reset where the DFP is the VCONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_Reset\nStart CRCReceiveTimer\n5: Data_Reset received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection Established\nDFP/VCONN Source \n(Reset Initiator)\nUFP\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that Data_Reset \nhas been received\nStop SenderResponseTimer\nTell DPM to perform Data Reset\n19: Send Data_Reset_Complete\n20: Data_Reset_Complete\n21: Data_Reset_Complete + CRC\n22: Data_Reset_Complete\nStart CRCReceiveTimer\n23: Data_Reset_Complete received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: Data_Reset_Complete sent\nInform DPM that \nData_Reset_Complete has been sent\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that \nData_Reset_Complete has \nbeen received\nDPM indicates that Data \nReset process is complete\n","image_count":10,"table_count":19}
{"page":515,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 515\nTable 8.53, \"Steps for a DFP Initiated Data Reset where the DFP is the VCONN Source\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.26, \"DFP Initiated Data Reset where the DFP is the \nVCONN Source\" above. \nTable 8.53  Steps for a DFP Initiated Data Reset where the DFP is the VCONN Source\nStep\nDFP/VCONN Source (Reset Initiator)\nUFP (Reset Responder)\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset Message to request a Data Reset. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Data_Reset \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Data_Reset Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nData_Reset Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset \nMessage has been received.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine stops the SenderResponseTimer \nand tells the DPM to perform a Data Reset. \nThe DPM proceeds to cycle VCONN and then reset the \ndata connection.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":516,"text":"Page 516\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\n19\nThe DPM indicates that the Data Reset process is \ncomplete.\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset_Complete Message. \n20\nProtocol Layer creates the Message and passes to PHY \nLayer.\n21\nPHY Layer appends CRC and sends the \nData_Reset_Complete Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Data_Reset_Complete Message \nand compares the CRC it calculated with the one sent to \nverify the Message.\n22\nPHY Layer removes the CRC and forwards the \nData_Reset_Complete Message to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nData_Reset_Complete Message information to the \nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a \nData_Reset_Complete Message has been received.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n26\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the \nData_Reset_Complete Message was successfully sent.\nThe Data Reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partners re-establish a USB data \nconnection.\nTable 8.53  Steps for a DFP Initiated Data Reset where the DFP is the VCONN Source\nStep\nDFP/VCONN Source (Reset Initiator)\nUFP (Reset Responder)\n","image_count":0,"table_count":2}
{"page":517,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 517\n8.3.2.5.2\n  DFP Receives Data Reset where the DFP is the VCONN Source\nThis is an example of a Data Reset operation where the DFP receives a Data_Reset Message and is the VCONN Source. \nFigure 8.27, \"DFP Receives Data Reset where the DFP is the VCONN Source\" shows the Messages as they flow across \nthe bus and within the devices to accomplish the Data Reset.\nFigure 8.27 DFP Receives Data Reset where the DFP is the VCONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_Reset\nStart CRCReceiveTimer\n5: Data_Reset received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection Established\nUFP (Reset Initiator)\nDFP/VCONN Source\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that Data_Reset \nhas been received\nTell DPM to perform a Data Reset\n19: Send Data_Reset_Complete\n20: Data_Reset_Complete\n21: Data_Reset_Complete + CRC\n22: Data_Reset_Complete\n23: Data_Reset_Complete received\nInform DPM Data Reset is \ncomplete\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: Data_Reset_Complete sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM Data Reset Message \nsent\nTell DPM indicates Data Reset \nprocess is complete\n","image_count":10,"table_count":18}
{"page":518,"text":"Page 518\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.54, \"Steps for a DFP Receiving a Data Reset where the DFP is the VCONNSource\" below provides a detailed \nexplanation of what happens at each labeled step in FFigure 8.27, \"DFP Receives Data Reset where the DFP is the \nVCONN Source\" above.\nTable 8.54  Steps for a DFP Receiving a Data Reset where the DFP is the VCONNSource\nStep\nUFP (Reset Initiator)\nDFP/VCONN Source (Reset Responder)\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset Message to request a Data Reset. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Data_Reset \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Data_Reset Message and \ncompares the CRC it calculated with the one sent to \nverify the Message.\n4\nPHY Layer removes the CRC and forwards the \nData_Reset Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset \nMessage has been received.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine stops the SenderResponseTimer.\nThe DPM proceeds to cycle VCONN and then reset the \ndata connection.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":519,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 519\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nThe Policy Engine tells the DPM to perform a Data \nReset.\n19\nThe DPM indicates that the Data Reset process is \ncomplete.\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset_Complete Message. \n20\nProtocol Layer creates the Message and passes to PHY \nLayer.\n21\nPHY Layer receives the Data_Reset_Complete \nMessage and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends CRC and sends the \nData_Reset_Complete Message. Starts \nCRCReceiveTimer.\n22\nPHY Layer removes the CRC and forwards the \nData_Reset_Complete Message to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nData_Reset_Complete Message information to the \nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a \nData_Reset_Complete Message has been received.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the \nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partners re-establish a USB data \nconnection.\nTable 8.54  Steps for a DFP Receiving a Data Reset where the DFP is the VCONNSource\nStep\nUFP (Reset Initiator)\nDFP/VCONN Source (Reset Responder)\n","image_count":0,"table_count":2}
{"page":520,"text":"Page 520\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.5.3\n  DFP Initiated Data Reset where the UFP is the VCONN Source\nThis is an example of a Data Reset operation where the DFP initiates a Data Reset and the UFP is the VCONN Source. \nFigure 8.28, \"DFP Initiated Data Reset where the UFP is the VCONN Source\" shows the Messages as they flow across \nthe bus and within the devices to accomplish the Data Reset.\nFigure 8.28 DFP Initiated Data Reset where the UFP is the VCONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_Reset\nStart CRCReceiveTimer\n5: Data_Reset received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection Established\nDFP\n(Reset Initiator)\nUFP/VCONN Source \n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that Data_Reset \nhas been received\nStop SenderResponseTimer\nStart VCONNDischargeTimer\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStop VCONNDischargeTimer\nRequest DPM to perform a Data Reset\nRequest DPM to turn off VCONN\nDPM indicates VCONN is off\n28: Send Data_Reset_Complete\n29: Data_Reset_Complete\n30: Data_Reset_Complete + CRC\n31: Data_Reset_Complete\nStart CRCReceiveTimer\n32: Data_Reset_Complete received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\n36: Data_Reset_Complete sent\nInform DPM that \nData_Reset_Complete has been sent\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that \nData_Reset_Complete has \nbeen received\nDPM indicates that Data \nReset process is complete\n","image_count":10,"table_count":17}
{"page":521,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 521\nTable 8.55, \"Steps for a DFP Initiated Data Reset where the UFP is the VCONN Source\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.28, \"DFP Initiated Data Reset where the UFP is the \nVCONN Source\" above. \nTable 8.55  Steps for a DFP Initiated Data Reset where the UFP is the VCONN Source\nStep\nDFP (Reset Initiator)\nUFP/VCONN Source (Reset Responder)\n1\nThe Policy Engine directs the Protocol Layer to generate \na Data_Reset Message to request a Soft Reset. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Data_Reset \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Data_Reset Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nData_Reset Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset \nMessage has been received.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept Message \ninformation to the Policy Engine that consumes it.\nThe Policy Engine stops the SenderResponseTimer and \nstarts the VCONNDischargeTimer.\n15\nProtocol Layer generates a GoodCRC Message and passes \nit PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":522,"text":"Page 522\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nThe Policy Engine requests the DPM to turn off VCONN.\n19\nWhen the DPM indicates VCONN has been turned off the \nPolicy Engine tells the Protocol Layer to form an \nPS_RDY Message.\n20\nProtocol Layer creates the Message and passes to PHY \nLayer.\n21\nPHY Layer receives the Message and compares the CRC it \ncalculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n22\nProtocol Layer stores the MessageID of the incoming \nMessage.\n23\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that consumes \nit.\nThe Policy Engine stops the VCONNDischargeTimer and \ntells the DPM to perform a Data Reset.\nThe DPM proceeds to turn on VCONN and then reset the \ndata connection.\n24\nProtocol Layer generates a GoodCRC Message and passes \nit PHY Layer.\n25\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\n28\nThe DPM indicates that the Data Reset process is \ncomplete.\nThe Policy Engine directs the Protocol Layer to generate \na Data_Reset_Complete Message. \n29\nProtocol Layer creates the Message and passes to PHY \nLayer.\n30\nPHY Layer appends CRC and sends the \nData_Reset_Complete Message. Starts CRCReceiveTimer.\nPHY Layer receives the Data_Reset_Complete Message \nand compares the CRC it calculated with the one sent to \nverify the Message.\n31\nPHY Layer removes the CRC and forwards the \nData_Reset_Complete Message to the Protocol Layer.\nTable 8.55  Steps for a DFP Initiated Data Reset where the UFP is the VCONN Source\nStep\nDFP (Reset Initiator)\nUFP/VCONN Source (Reset Responder)\n","image_count":0,"table_count":2}
{"page":523,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 523\n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nData_Reset_Complete Message information to the \nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a \nData_Reset_Complete Message has been received.\n33\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n34\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n35\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n36\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the \nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partners re-establish a USB data \nconnection.\nTable 8.55  Steps for a DFP Initiated Data Reset where the UFP is the VCONN Source\nStep\nDFP (Reset Initiator)\nUFP/VCONN Source (Reset Responder)\n","image_count":0,"table_count":2}
{"page":524,"text":"Page 524\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.5.4\n  DFP Receives Data Reset where the UFP is the VCONN Source\nThis is an example of a Data Reset operation where the DFP receives a Data_Reset Message and the UFP is the VCONN \nSource. Figure 8.29, \"DFP Receives a Data Reset where the UFP is the VCONN Source\" shows the Messages as they flow \nacross the bus and within the devices to accomplish the Data Reset.\nFigure 8.29 DFP Receives a Data Reset where the UFP is the VCONN Source\n: Protocol\n1: Send Data_Reset\n: PHY\n: PHY\n: Protocol\n2: Data_Reset\n3: Data_Reset + CRC\n4: Data_Reset\nStart CRCReceiveTimer\n5: Data_Reset received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Data_Reset sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\nTell DPM to turn off VCONN.\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nData_Reset Complete, USB Connection Established\nUFP/VCONN Source \n(Reset Initiator)\nDFP\n(Reset Responder)\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM that Data_Reset \nhas been received\nStart VCONNDischargeTimer\nDPM indicates that VCONN has \nbeen turned off.\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sent\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nReset MessageIDCounter, stored \nMessageID and RetryCounter\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStop VCONNDischargeTimer\nRequest DPM to perform a Data Reset\n28: Send Data_Reset_Complete\n29: Data_Reset_Complete\n30: Data_Reset_Complete + CRC\n31: Data_Reset_Complete\n32: Data_Reset_Complete received\nInform DPM Data Reset is \ncomplete\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\n36: Data_Reset_Complete sent\nStart CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nInform DPM Data Reset Message \nsent\nTell DPM indicates Data Reset \nprocess is complete\n","image_count":10,"table_count":12}
{"page":525,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 525\nTable 8.56, \"Steps for a DFP Receiving a Data Reset where the UFP is the VCONN Source\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.29, \"DFP Receives a Data Reset where the UFP is the \nVCONN Source\" above.\nTable 8.56  Steps for a DFP Receiving a Data Reset where the UFP is the VCONN Source\nStep\nUFP/VCONN Source (Reset Initiator)\nDFP (Reset Responder)\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset Message to request a Soft Reset. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Data_Reset \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Data_Reset Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nData_Reset Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Data_Reset \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine informs the DPM that a Data_Reset \nMessage has been received.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine stops the SenderResponseTimer \nand tells the DPM to turn off VCONN.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":526,"text":"Page 526\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nThe Policy Engine starts the VCONNDischargeTimer.\n19\nWhen the DPM indicates that VCONN has been turned off \nthe Policy Engine directs the Protocol Layer to \ngenerate a PS_RDY Message to request a Soft Reset. \n20\nProtocol Layer creates the Message and passes to PHY \nLayer.\n21\nPHY Layer appends CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it.\nThe Policy Engine stops the VCONNDischargeTimer \nand requests the DPM perform a Data Reset.\nThe DPM proceeds to turn on VCONN and then reset the \ndata connection.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\n28\nThe DPM indicates that the Data Reset process is \ncomplete.\nThe Policy Engine directs the Protocol Layer to \ngenerate a Data_Reset_Complete Message. \n29\nProtocol Layer creates the Message and passes to PHY \nLayer.\n30\nPHY Layer receives the Data_Reset_Complete \nMessage and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends CRC and sends the \nData_Reset_Complete Message. Starts \nCRCReceiveTimer.\n31\nPHY Layer removes the CRC and forwards the \nData_Reset_Complete Message to the Protocol Layer.\nTable 8.56  Steps for a DFP Receiving a Data Reset where the UFP is the VCONN Source\nStep\nUFP/VCONN Source (Reset Initiator)\nDFP (Reset Responder)\n","image_count":0,"table_count":2}
{"page":527,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 527\n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nData_Reset_Complete Message information to the \nPolicy Engine that consumes it.\nThe Policy Engine informs the DPM that a \nData_Reset_Complete Message has been received.\n33\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n34\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\n35\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n36\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nData_Reset_Complete Message was successfully sent.\nThe Policy Engine informs the DPM that the \nData_Reset_Complete Message was successfully sent.\nThe reset is complete as defined in Section 6.3.14, \"Data_Reset Message\" Step 5. Port Partners re-establish a USB data \nconnection.\nTable 8.56  Steps for a DFP Receiving a Data Reset where the UFP is the VCONN Source\nStep\nUFP/VCONN Source (Reset Initiator)\nDFP (Reset Responder)\n","image_count":0,"table_count":2}
{"page":528,"text":"Page 528\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.6\n  Hard Reset\nThe following sections describe the steps required for a USB Power Delivery Hard Reset. The Hard Reset returns \nthe operation of the USB Power Delivery to default Power Role/Data Role and operating voltage/current. During \nthe Hard Reset USB Power Delivery PHY Layer communications Shall be disabled preventing communication \nbetween the Port Partner.\nNote:\nHard Reset, in this case, is applied to the USB Power Delivery capability of an individual Port on which \nthe Hard Reset is requested. A side effect of the Hard Reset is that it might reset other functions on the \nPort such as USB.\n8.3.2.6.1\n  Source Initiated Hard Reset\nThis is an example of a Hard Reset operation when initiated by a Source. Figure 8.30, \"Source initiated Hard Reset\" \nshows the Messages as they flow across the bus and within the devices to accomplish the Hard Reset.\nFigure 8.30 Source initiated Hard Reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy Engine\nSource\nSink\nHard Reset Complete\nReset MessageIDCounter and \nRetryCounter\nReset MessageIDCounter and \nRetryCounter\n8: Power Supply Reset\n6: Power Sink Reset\n10: Send Capabilities\n11: Capabilities\n12: Capabilities + CRC\n13: Capabilities\nStart CRCReceiveTimer\nStore copy of MessageID\n14: Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Capabilities sent\nStop NoResponseTimer\nStart SenderResponseTimer\nEvaluate Capabilities\n7: Hard Reset Complete\nPower Sink Reset\nPower Supply Reset\nTurn on VCONN\n9: Hard Reset Complete\nChannel enabled\nChannel enabled\n1: Send Hard Reset\n2: Send Hard Reset\n3: Hard Reset\n4: Hard Reset received\nStart NoResponseTimer\nWait tPSHardReset\nReset Power Supply\nReset Port Data Role to DFP\nTurn off VCONN\n5: Hard Reset received\nReset Power Sink\nReset Port Data Role to UFP\nTurn off VCONN\nChannel disabled\nChannel disabled\n","image_count":6,"table_count":9}
{"page":529,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 529\nTable 8.57, \"Steps for Source initiated Hard Reset\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.30, \"Source initiated Hard Reset\" above.\nTable 8.57  Steps for Source initiated Hard Reset\nStep\nSource\nSink\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate Hard Reset Signaling.\nThe Policy Engine starts the NoResponseTimer and \nrequests the DPM to reset the power supply to USB \nDefault Operation. The Policy Engine requests the \nDPM to reset the Port Data Role to DFP and to turn off \nVCONN if this is on.\n2\nProtocol Layer resets MessageIDCounter and \nRetryCounter.\nProtocol Layer requests the PHY Layer send Hard Reset \nSignaling.\n3\nPHY Layer sends Hard Reset Signaling and then \ndisables the PHY Layer communications channel for \ntransmission and reception.\nPHY Layer receives the Hard Reset Signaling and \ndisables the PHY Layer communications channel for \ntransmission and reception.\n4\nPHY Layer informs the Protocol Layer of the Hard Reset.\nProtocol Layer resets MessageIDCounter and \nRetryCounter.\n5\nThe Protocol Layer informs the Policy Engine of the \nHard Reset.\nThe Policy Engine requests the DPM to reset the Power \nSink to USB Default Operation. The Policy Engine \nrequests the DPM to reset the Port Data Role to UFP \nand to turn off VCONN if this is on.\n6\nThe Power Sink returns to USB Default Operation.\nThe Policy Engine informs the Protocol Layer that the \nPower Sink has been reset.\n7\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete.\nThe PHY Layer enables the PHY Layer communications \nchannel for transmission and reception.\n8\nThe power supply is reset to USB Default Operation. and \nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the \npower supply has been reset.\n9\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete. The PHY Layer enables the PHY Layer \ncommunications channel for transmission and \nreception.\nThe reset is complete and protocol communication can restart.\n10\nPolicy Engine directs the Protocol Layer to send a \nSource_Capabilities Message that represents the \npower supply’s present capabilities.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n","image_count":0,"table_count":2}
{"page":530,"text":"Page 530\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n13\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n14\nProtocol Layer stores the MessageID of the incoming \nMessage.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent. \nPolicy Engine stops the NoResponseTimer and starts \nthe SenderResponseTimer.\nUSB Power Delivery communication is re-established.\nTable 8.57  Steps for Source initiated Hard Reset\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":531,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 531\n8.3.2.6.2\n  Sink Initiated Hard Reset\nThis is an example of a Hard Reset operation when initiated by a Sink. Figure 8.31, \"Sink Initiated Hard Reset\" shows \nthe Messages as they flow across the bus and within the devices to accomplish the Hard Reset.\nFigure 8.31 Sink Initiated Hard Reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy Engine\nSource\nSink\n1: Send Hard Reset\n3: Hard Reset\n4: Hard Reset received\nHard Reset Complete\nStart NoResponseTimer\nReset Power Supply\nReset Port Data Role to DFP\nTurn off VCONN\nReset MessageIDCounter, stored \ncopy of MessageID and \nRetryCounter\nReset MessageIDCounter, \nstored copy of MessageID and \nRetryCounter\nReset Power Sink\nReset Port Data Role to UFP\nTurn off VCONN\n8: Power Supply Reset\n6: Power Sink Reset\n10: Send Capabilities\n11: Capabilities\n12: Capabilities + CRC\n13: Capabilities\nStart CRCReceiveTimer\nStore copy of MessageID\n14: Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18: Capabilities sent\nStop NoResponseTimer\nStart SenderResponseTimer\nEvaluate Capabilities\n7: Hard Reset Complete\nPower Sink Reset\nPower Supply Reset\nTurn on VCONN\nChannel disabled\nChannel disabled\n9: Hard Reset Complete\nChannel enabled\n2: Send Hard Reset\n5: Hard Reset received\nChannel enabled\n","image_count":6,"table_count":12}
{"page":532,"text":"Page 532\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.58, \"Steps for Sink initiated Hard Reset\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.31, \"Sink Initiated Hard Reset\" above.\nTable 8.58  Steps for Sink initiated Hard Reset\nStep\nSource\nSink\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate Hard Reset Signaling. \nThe Policy Engine requests the DPM to reset the power \nsupply to USB Default Operation. The Policy Engine \nrequests the DPM to reset the Port Data Role to UFP \nand to turn off VCONN if this is on.\n2\nProtocol Layer resets MessageIDCounter, stored copy \nof MessageID and RetryCounter.\nProtocol Layer requests the PHY Layer send Hard Reset \nSignaling.\n3\nPHY Layer receives the Hard Reset Signaling and \ndisables the PHY Layer communications channel for \ntransmission and reception.\nPHY Layer sends the Hard Reset Signaling and then \ndisables the PHY Layer communications channel for \ntransmission and reception.\n4\nPHY Layer informs the Protocol Layer of the Hard \nReset.\nProtocol Layer resets MessageIDCounter, stored copy \nof MessageID and RetryCounter.\n5\nThe Protocol Layer Informs the Policy Engine of the \nHard Reset.\nThe Policy Engine starts the NoResponseTimer and \nrequests the DPM to reset the Power Sink to USB Default \nOperation. The Policy Engine requests the DPM to \nreset the Port Data Role to DFP and to turn off VCONN if \nthis is on.\n6\nThe Power Sink returns to USB Default Operation.\nThe Policy Engine informs the Protocol Layer that the \nPower Sink has been reset.\n7\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete.\nThe PHY Layer enables the PHY Layer communications \nchannel for transmission and reception.\n8\nThe power supply is reset to USB Default Operation and \nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the \npower supply has been reset.\n9\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete. The PHY Layer enables the PHY Layer \ncommunications channel for transmission and \nreception.\nThe reset is complete and protocol communication can restart.\n10\nPolicy Engine directs the Protocol Layer to send a \nSource_Capabilities Message that represents the \npower supply’s present capabilities.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n","image_count":0,"table_count":2}
{"page":533,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 533\n13\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n14\nProtocol Layer stores the MessageID of the incoming \nMessage.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent. \nPolicy Engine stops the NoResponseTimer and starts \nthe SenderResponseTimer.\nUSB Power Delivery communication is re-established.\nTable 8.58  Steps for Sink initiated Hard Reset\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":534,"text":"Page 534\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.6.3\n  Source Initiated Hard Reset - Sink Long Reset\nThis is an example of a Hard Reset operation when initiated by a Source. In this example the Sink is slow responding \nto the reset causing the Source to send multiple Source_Capabilities Messages before it receives a GoodCRC \nMessage response. Figure 8.32, \"Source initiated reset - Sink long reset\" shows the Messages as they flow across the \nbus and within the devices to accomplish the Hard Reset.\nFigure 8.32 Source initiated reset - Sink long reset\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\n: Policy Engine\nSource\nSink\n1: Send Hard Reset\n2: Send Hard Reset\n3: Hard Reset\n4: Hard Reset received\nHard Reset Complete\nStart NoResponseTimer\nWait tPSHardReset\nReset Power Supply\nReset Port Data Role to DFP\nTurn off VCONN\nReset MessageIDCounter, stored \ncopy of MessageID and \nRetryCounter\nReset MessageIDCounter, stored \ncopy of MessageID and \nRetryCounter\n5: Hard Reset received\nReset Power Sink\nReset Port Data Role to UFP\nTurn off VCONN\n6: Power Supply Reset\n11: Power Sink Reset\n13: Send Capabilities\n14: Capabilities\n15: Capabilities + CRC\n16: Capabilities\nStart CRCReceiveTimer\nStore copy of MessageID\n17: Capabilities received\n18: GoodCRC\n19: GoodCRC + CRC\n20: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n21: Capabilities sent\nStop SourceCapabilitiesTimer\nStop NoResponseTimer\nStart SenderResponseTimer\nEvaluate Capabilities\n8: Send Capabilities\n9: Capabilities\n10: Capabilities + CRC\nRun SourceCapabilityTimer\nSend Capabilities messages \nuntil GoodCRC response is \nreceived.\n12: Hard Reset Complete\nPower Sink Reset\nPower Supply Reset\nTurn on VCONN\nChannel disabled\nChannel disabled\n7: Hard Reset Complete\nChannel enabled\nChannel enabled\n","image_count":6,"table_count":12}
{"page":535,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 535\nTable 8.59, \"Steps for Source initiated Hard Reset - Sink long reset\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.32, \"Source initiated reset - Sink long reset\" above.\nTable 8.59  Steps for Source initiated Hard Reset - Sink long reset\nStep\nSource\nSink\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate Hard Reset Signaling. \nThe Policy Engine starts the NoResponseTimer and \nrequests the DPM to reset the power supply to USB \nDefault Operation. The Policy Engine requests the \nDPM to reset the Port Data Role to DFP and to turn off \nVCONN if this is on.\n2\nProtocol Layer resets MessageIDCounter, stored copy \nof MessageID and RetryCounter.\nProtocol Layer requests the PHY Layer send Hard Reset \nSignaling.\n3\nPHY Layer sends the Hard Reset Signaling and then \ndisables the PHY Layer communications channel for \ntransmission and reception.\nPHY Layer receives the Hard Reset Signaling and \ndisables the PHY Layer communications channel for \ntransmission and reception.\n4\nPHY Layer informs the Protocol Layer of the Hard Reset.\nProtocol Layer resets MessageIDCounter, stored copy \nof MessageID and RetryCounter.\n5\nThe Protocol Layer Informs the Policy Engine of the \nHard Reset.\nThe Policy Engine requests the DPM to reset the Power \nSink to USB Default Operation. The Policy Engine \nrequests the DPM to reset the Port Data Role to UFP \nand to turn off VCONN if this is on.\n6\nThe power supply is reset to USB Default Operation and \nVCONN is turned on.\nThe Policy Engine informs the Protocol Layer that the \npower supply has been reset.\n7\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete.\nThe PHY Layer enables the PHY Layer communications \nchannel for transmission and reception.\nThe reset is complete and protocol communication can restart.\n8\nPolicy Engine directs the Protocol Layer to send a \nSource_Capabilities Message that represents the \npower supply’s present capabilities. Policy Engine \nstarts the SourceCapabilityTimer. The \nSourceCapabilityTimer times out one or more times \nuntil a GoodCRC Message response is received.\n9\nProtocol Layer creates the Message and passes to PHY \nLayer.\n10\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nNote: Source_Capabilities Message not received since \nchannel is disabled.\n11\nThe Power Sink returns to USB Default Operation. The \nPolicy Engine informs the Protocol Layer that the \nPower Sink has been reset.\n","image_count":0,"table_count":2}
{"page":536,"text":"Page 536\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n12\nThe Protocol Layer informs the PHY Layer that the Hard \nReset is complete.\nThe PHY Layer enables the PHY Layer communications \nchannel for transmission and reception.\nThe reset is complete and protocol communication can restart.\n13\nPolicy Engine directs the Protocol Layer to send a \nSource_Capabilities Message that represents the \npower supply’s present capabilities. Starts the \nSourceCapabilityTimer.\n14\nProtocol Layer creates the Message and passes to PHY \nLayer.\n15\nPHY Layer appends CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\nPHY Layer receives the Source_Capabilities Message \nand checks the CRC to verify the Message.\n16\nPHY Layer removes the CRC and forwards the \nSource_Capabilities Message to the Protocol Layer.\n17\nProtocol Layer stores the MessageID of the incoming \nMessage.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n18\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n19\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n20\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n21\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent.\nPolicy Engine stops the SourceCapabilityTimer, stops \nthe NoResponseTimer and starts the \nSenderResponseTimer. \nUSB Power Delivery communication is re-established.\nTable 8.59  Steps for Source initiated Hard Reset - Sink long reset\nStep\nSource\nSink\n","image_count":0,"table_count":2}
{"page":537,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 537\n8.3.2.7\n  Power Role Swap\n8.3.2.7.1\n  Source Initiated Power Role Swap\n8.3.2.7.1.1\n  Source Initiated Power Role Swap (Accept)\nThis is an example of a successful Power Role Swap operation initiated by a Port which initially, at the start of this \nMessage sequence, is acting as a Source and therefore has Rp pulled up on its CC wire. It does not include any \nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2, \n\"Power Negotiation\").\nThere are four distinct phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nAn Accept Message in response to the PR_Swap Message.\n\nThe New Sink sets its power output to vSafe0V, then asserts Rd and sends a PS_RDY Message when this \nprocess is complete.\n\nThe New Source asserts Rp, then sets its power output to vSafe5V and sends a PS_RDY Message when it \nis ready to supply power.\nFigure 8.33, \"Successful Power Role Swap Sequence Initiated by the Source\" shows the Messages as they flow across \nthe bus and within the devices to accomplish the Power Role Swap sequence.\n","image_count":0,"table_count":1}
{"page":538,"text":"Page 538\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.33 Successful Power Role Swap Sequence Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nStop PSSourceOffTimer\nCC -> Rp\nSet Power Supply to 5V output\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Source Port\nInitial Sink Port\nStart PSSourceOffTimer\nTell Power Sink to stop \nsinking current\nPower Supply stops sourcing power\nCC -> Rd\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\n36: PS_RDY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimer\nStart PSSourceOnTimer\nPort Power Role -> Source\nPort Power Role -> Sink\nStop SenderResponseTimer\nTell Power Supply to stop sourcing power\nPower Supply reaches 5V \noutput\nStop PSSourceOnTimer\nTell Power Sink to start \nsinking power\nReset Protocol Layer\nNew Power Roles\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":13}
{"page":539,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 539\nTable 8.60, \"Steps for a Successful Source Initiated Power Role Swap Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.33, \"Successful Power Role Swap Sequence Initiated by \nthe Source\" above.\nTable 8.60  Steps for a Successful Source Initiated Power Role Swap Sequence\nStep\nInitial Source Port\nInitially Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Source and decides that it is able and willing to do the \nPower Role Swap. It tells the Protocol Layer to form an \nAccept Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Accept \nMessage.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine requests its power supply to stop \nsupplying power and stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":540,"text":"Page 540\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine starts the PSSourceOffTimer and tells the power \nsupply to stop sinking current.\n19\nThe Policy Engine determines its power supply is no \nlonger supplying VBUS. The Policy Engine requests the \nDPM to assert the Rd pull down on the CC wire. The \nPolicy Engine then directs the Protocol Layer to \ngenerate a PS_RDY Message, with the Port Power Role \nMessageset to Sink, to tell its Port Partner that it can \nbegin to source VBUS.\n20\nProtocol Layer sets the Port Power Role Message to \nSink, creates the Message and passes to PHY Layer.\n21\nPHY Layer appends CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and checks the \nCRC to verify the Message.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it. The Policy Engine stops the \nPSSourceOffTimer, directs the DPM to apply the Rp pull \nup and then starts switching the power supply to \nvSafe5V Source operation.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n26\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. Policy Engine \nstarts PSSourceOnTimer.\n28\nPolicy Engine, when its power supply is ready to supply \npower, tells the Protocol Layer to form a PS_RDY \nMessage. The Port Power Role Messageis set to Source.\n29\nProtocol Layer creates the PS_RDY Message and passes \nto PHY Layer.\nTable 8.60  Steps for a Successful Source Initiated Power Role Swap Sequence\nStep\nInitial Source Port\nInitially Sink Port\n","image_count":0,"table_count":2}
{"page":541,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 541\n30\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\n31\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer. \n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it.\n33\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n34\nPHY Layer appends a CRC and sends the GoodCRC \nMessage. The Policy Engine stops the \nPSSourceOnTimer, informs the power supply it can \nnow sink power and resets the Protocol Layer.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n35\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n36\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. The Policy \nEngine resets the CapsCounter, resets the Protocol \nLayer and starts the SwapSourceStartTimer which \nmust timeout before sending any Source_Capabilities \nMessages.\nThe Power Role Swap is complete, the Power Roles have been reversed and the Port Partners are free to Negotiate for more \npower.\nTable 8.60  Steps for a Successful Source Initiated Power Role Swap Sequence\nStep\nInitial Source Port\nInitially Sink Port\n","image_count":0,"table_count":2}
{"page":542,"text":"Page 542\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.7.1.2\n  Source Initiated Power Role Swap (Reject)\nThis is an example of a rejected Power Role Swap operation initiated by a Port which initially, at the start of this \nMessage sequence, is acting as a Source and therefore has Rp pulled up on its CC wire.\nThere are several phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nAn Reject Message in response to the PR_Swap Message.\nFigure 8.34, \"Rejected Power Role Swap Sequence Initiated by the Source\" shows the Messages as they flow across \nthe bus and within the devices.\nFigure 8.34 Rejected Power Role Swap Sequence Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Source Port\nInitial Sink Port\nStop SenderResponseTimer\nTell Power Supply to stop sourcing power\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":543,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 543\nTable 8.61, \"Steps for a Rejected Source Initiated Power Role Swap Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.34, \"Rejected Power Role Swap Sequence Initiated by the Source\" \nabove.\nTable 8.61  Steps for a Rejected Source Initiated Power Role Swap Sequence\nStep\nInitial Source Port\nInitially Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Source and decides that it is unable and unwilling to \ndo the Power Role Swap. It tells the Protocol Layer to \nform a Reject Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Reject \nMessage.\nPHY Layer appends a CRC and sends the Reject \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":544,"text":"Page 544\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent. \nTable 8.61  Steps for a Rejected Source Initiated Power Role Swap Sequence\nStep\nInitial Source Port\nInitially Sink Port\n","image_count":0,"table_count":2}
{"page":545,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 545\n8.3.2.7.1.3\n  Source Initiated Power Role Swap (Wait)\nThis is an example of a Power Role Swap operation, with a wait response, initiated by a Port which initially, at the \nstart of this Message sequence, is acting as a Source and therefore has Rp pulled up on its CC wire.\nThere are several phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nA Wait Message in response to the PR_Swap Message.\nFigure 8.35, \"Power Role Swap Sequence with wait Initiated by the Source\" shows the Messages as they flow across \nthe bus and within the devices.\nFigure 8.35 Power Role Swap Sequence with wait Initiated by the Source\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Source Port\nInitial Sink Port\nStop SenderResponseTimer\nTell Power Supply to stop sourcing power\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":546,"text":"Page 546\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.62, \"Steps for a Source Initiated Power Role Swap with Wait Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.35, \"Power Role Swap Sequence with wait Initiated by the Source\" \nabove.\nTable 8.62  Steps for a Source Initiated Power Role Swap with Wait Sequence\nStep\nInitial Source Port\nInitially Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Source and decides that it is able and willing to do the \nPower Role Swap but not at this time. It tells the Protocol \nLayer to form a Wait Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Wait \nMessage.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":547,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 547\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent. \nTable 8.62  Steps for a Source Initiated Power Role Swap with Wait Sequence\nStep\nInitial Source Port\nInitially Sink Port\n","image_count":0,"table_count":2}
{"page":548,"text":"Page 548\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.7.2\n  Sink Initiated Power Role Swap\n8.3.2.7.2.1\n  Sink Initiated Power Role Swap (Accept)\nThis is an example of a successful Power Role Swap operation initiated by a Port which initially, at the start of this \nMessage sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire. It does not include any \nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2, \n\"Power Negotiation\").\nThere are four distinct phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nAn Accept Message in response to the PR_Swap Message.\n\nThe New Sink sets its power output to vSafe0V, then asserts Rd and sends a PS_RDY Message when this \nprocess is complete.\n\nThe New Source asserts Rp, then sets its power output to vSafe5V and sends a PS_RDY Message when it \nis ready to supply power.\nFigure 8.36, \"Successful Power Role Swap Sequence Initiated by the Sink\" shows the Messages as they flow across the \nbus and within the devices to accomplish the Power Role Swap.\n","image_count":0,"table_count":1}
{"page":549,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 549\nFigure 8.36 Successful Power Role Swap Sequence Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sent\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Sink Port\nInitial Source Port\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimer\nStart PSSourceOnTimer\nPort Power Role -> Source\nPort Power Role -> Sink\nStop SenderResponseTimer\nStart PSSourceOffTimer\nTell Power Sink to stop \nsinking current\nPower Supply reaches 5V \noutput\nStop PSSourceOnTimer\nTell Power Supply to start \nsinking power\nReset Protocol Layer\nTell Power Supply to stop sourcing power\nPower Supply stops sourcing power\nCC -> Rd\nStop PSSourceOffTimer\nCC -> Rp\nSet Power Supply to 5V output\nNew Power Roles\nPort Power Role = Sink\nCC = Rd\nPort Power Role = Source\nCC = Rp\n","image_count":8,"table_count":16}
{"page":550,"text":"Page 550\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.63, \"Steps for a Successful Sink Initiated Power Role Swap Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.36, \"Successful Power Role Swap Sequence Initiated by the Sink\" \nabove.\nTable 8.63  Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Sink and decides that it is able and willing to do the \nPower Role Swap. It tells the Protocol Layer to form an \nAccept Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Accept \nMessage.\nPHY Layer appends a CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer, \nstarts the PSSourceOffTimer and tells the power supply \nto stop sinking current.\n","image_count":0,"table_count":2}
{"page":551,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 551\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine tells the power supply to stop supplying power.\n19\nThe Policy Engine determines its power supply is no \nlonger supplying VBUS. The Policy Engine requests the \nDPM to assert the Rd pull down on the CC wire. The \nPolicy Engine then directs the Protocol Layer to \ngenerate a PS_RDY Message, with the Port Power Role \nMessageset to Sink, to tell its Port Partner that it can \nbegin to source VBUS.\n20\nProtocol Layer sets the Port Power Role Messageto Sink, \ncreates the Message and passes to PHY Layer.\n21\nPHY Layer receives the PS_RDY Message and checks the \nCRC to verify the Message.\nPHY Layer appends CRC and sends the PS_RDY Message. \nStarts CRCReceiveTimer.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it. The Policy Engine stops the \nPSSourceOffTimer, directs the DPM to apply the Rp \npull up and then starts switching the power supply to \nvSafe5V Source operation.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. Policy Engine \nstarts PSSourceOnTimer.\n28\nPolicy Engine, when its power supply is ready to \nsupply power, tells the Protocol Layer to form a PS_RDY \nMessage. The Port Power Role Messageis set to Source.\n29\nProtocol Layer creates the PS_RDY Message and passes \nto PHY Layer.\nTable 8.63  Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":552,"text":"Page 552\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n30\nPHY Layer appends a CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n31\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer. \n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it. The Policy Engine stops the \nPSSourceOnTimer, informs the power supply that it can \nstart consuming power.\n33\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n34\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage. The Policy Engine stops the \nPSSourceOnTimer, informs the power supply it can \nnow sink power and resets the Protocol Layer.\n35\nPHY Layer removes the CRC and forwards the GoodCRC \nto the Protocol Layer. \n36\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. The Policy \nEngine resets the CapsCounter, resets the Protocol \nLayer and starts the SwapSourceStartTimer which \nmust timeout before sending any Source_Capabilities \nMessages.\nThe Power Role Swap is complete, the Power Roles have been reversed and the Port Partners are free to Negotiate for more \npower.\nTable 8.63  Steps for a Successful Sink Initiated Power Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":553,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 553\n8.3.2.7.2.2\n  Sink Initiated Power Role Swap (Reject)\nThis is an example of a rejected Power Role Swap operation initiated by a Port which initially, at the start of this \nMessage sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire. \nThere are several phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nA Reject Message in response to the PR_Swap Message.\nFigure 8.37, \"Rejected Power Role Swap Sequence Initiated by the Sink\" shows the Messages as they flow across the \nbus and within the devices.\nFigure 8.37 Rejected Power Role Swap Sequence Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Sink Port\nInitial Source Port\nStop SenderResponseTimer\nPort Power Role = Sink\nCC = Rd\nPort Power Role = Source\nCC = Rp\n","image_count":9,"table_count":12}
{"page":554,"text":"Page 554\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.64, \"Steps for a Rejected Sink Initiated Power Role Swap Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.37, \"Rejected Power Role Swap Sequence Initiated by the Sink\" above.\nTable 8.64  Steps for a Rejected Sink Initiated Power Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Sink and decides that it is unable and unwilling to do \nthe Power Role Swap. It tells the Protocol Layer to form a \nReject Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Reject \nMessage.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":555,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 555\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent\nTable 8.64  Steps for a Rejected Sink Initiated Power Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":556,"text":"Page 556\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.7.2.3\n  Sink Initiated Power Role Swap (Wait)\nThis is an example of a Power Role Swap operation, responded to with wait, initiated by a Port which initially, at the \nstart of this Message sequence, is acting as a Sink and therefore has Rd pulled down on its CC wire. \nThere are several phases to the Power Role Swap:\n\nA PR_Swap Message is sent.\n\nA Wait Message in response to the PR_Swap Message.\nFigure 8.38, \"Power Role Swap Sequence with wait Initiated by the Sink\" shows the Messages as they flow across the \nbus and within the devices.\nFigure 8.38 Power Role Swap Sequence with wait Initiated by the Sink\n: Protocol\n1: Send PR_Swap\n: PHY\n: PHY\n: Protocol\n2:PR_Swap\n3: PR_Swap + CRC\n4: PR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: PR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:PR_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate PR_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitial Sink Port\nInitial Source Port\nStop SenderResponseTimer\nPort Power Role = Sink\nCC = Rd\nPort Power Role = Source\nCC = Rp\n","image_count":9,"table_count":9}
{"page":557,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 557\nTable 8.65, \"Steps for a Sink Initiated Power Role Swap with Wait Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.38, \"Power Role Swap Sequence with wait Initiated by the Sink\" \nabove.\nTable 8.65  Steps for a Sink Initiated Power Role Swap with Wait Sequence\nStep\nInitial Sink Port\nInitial Source Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nPR_Swap Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the PR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Sink and decides that it is able and willing to do the \nPower Role Swap but not at this time. It tells the Protocol \nLayer to form a Wait Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Wait \nMessage.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":558,"text":"Page 558\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Wait \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent\nTable 8.65  Steps for a Sink Initiated Power Role Swap with Wait Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":559,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 559\n8.3.2.8\n  Fast Role Swap\nThis is an example of a successful Fast Role Swap operation initiated by a Port that is initially a Source and therefore \nhas Rp pulled up on its CC wire and which has lost power and needs to get vSafe5V quickly. It does not include any \nsubsequent Power Negotiation which is required in order to establish an Explicit Contract (see Section 8.3.2.2, \n\"Power Negotiation\"). \nThere are several distinct phases to the Fast Role Swap Negotiation:\n\nThe Initial Source stops driving its power output which starts transitioning to vSafe0V and send the \nFast Role Swap Request on the CC wire; these could occur in either order or simultaneously.\n\nThe Initial Sink stops sinking power. At this point the New Source still has Rd asserted and the New Sink \nstill has Rp asserted.\n\nAn FR_Swap Message is sent by the New Source within tFRSwapInit of detecting the Fast Swap signal.\n\nAn Accept Message is sent by the New Sink in response to the FR_Swap Message.\n\nThe New Sink asserts Rd and sends a PS_RDY Message indicating that the voltage on VBUS is at or below \nvSafe5V.\n\nThe New Source asserts Rp and sends a PS_RDY Message indicating that it is acting as a Source and is sup-\nplying vSafe5V.\nNote:\nThe New Source can start applying VBUS when VBUS is at or below vSafe5V (max) but will start driving \nVBUS to vSafe5V no later than tSrcFRSwap after detecting both the Fast Role Swap Request and that VBUS \nhas dropped below vSafe5V (min).\nFigure 8.39, \"Successful Fast Role Swap Sequence\" shows the Messages as they flow across the bus and within the \ndevices to accomplish the Fast Role Swap.\n","image_count":0,"table_count":1}
{"page":560,"text":"Page 560\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.39 Successful Fast Role Swap Sequence\n: Protocol\n1: Send FR_Swap\n: PHY\n: PHY\n: Protocol\n2:FR_Swap\n3: FR_Swap + CRC\n4: FR_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: FR_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:FR_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n28: Send PS_RDY\n29: PS_RDY\n30: PS_RDY + CRC\n31: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n32: PS_RDY received\n33: GoodCRC\n34: GoodCRC + CRC\n35: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n36: PS_RDY sent\nEvaluate FR_Swap request\n: Policy Engine\n: Policy Engine\nInitial Sink Port\nInitial Source Port\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimer\nStart PSSourceOnTimer\nPort Power Role -> Source\nPort Power Role -> Sink\nStop SenderResponseTimer\nStart PSSourceOffTimer\nStop PSSourceOnTimer\nReset Protocol Layer\nPower Supply acting as a Sink and \nVBUS at or below vSafe5V\nCC -> Rd\nvSafe5V is being sourced by the new Source\nStop PSSourceOffTimer\nCC -> Rp\nNew Power Roles\nPort Power Role = Sink\nCC = Rd\nPort Power Role = Source\nCC = Rp\nTell Power Supply to Stop sourcing power and\nswitch to Sink operation\nSignal Fast Swap on the CC Wire\nFast Role Swap signal detected on CC Wire\nTell Power Supply to stop sinking current.\nFast Swap signal \n(CC driven to Gnd through \nrFRSwapTx or \nrFRSwapCableTx)\n","image_count":8,"table_count":11}
{"page":561,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 561\nTable 8.66, \"Steps for a Successful Fast Role Swap Sequence\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.39, \"Successful Fast Role Swap Sequence\" above.\nTable 8.66  Steps for a Successful Fast Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nThe DPM detects Fast Swap on the CC wire and tells the \npower supply to stop sinking current. \nThe Policy Engine directs the Protocol Layer to send an \nFR_Swap Message within tFRSwapInit of detecting the \nFast Swap signal.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nThe DPM tells the Power Supply to stop sourcing power \nand switch to Sink operation.\nThe DPM signals Fast Swap on the CC wire by driving CC \nto ground with a resistance of less than rFRSwapTx for \nat least tFRSwapTx.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the FR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the FR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the PR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received FR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the PR_Swap Message sent by \nthe Sink and decides that it is able and willing to do the \nPower Role Swap. It tells the Protocol Layer to form an \nAccept Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Accept \nMessage.\nPHY Layer appends a CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer, \nstarts the PSSourceOffTimer.\n","image_count":0,"table_count":2}
{"page":562,"text":"Page 562\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\n19\nThe Policy Engine determines its power supply is no \nlonger supplying VBUS and is acting as a Sink. The Policy \nEngine requests the DPM to assert the Rd pull down on \nthe CC wire. The Policy Engine then directs the Protocol \nLayer to generate a PS_RDY Message, with the Port \nPower Role Messageset to Sink, to tell its Port Partner \nthat it can begin to source VBUS.\n20\nProtocol Layer sets the Port Power Role Messageto Sink, \ncreates the Message and passes to PHY Layer.\n21\nPHY Layer receives the PS_RDY Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the PS_RDY Message. \nStarts CRCReceiveTimer.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer.\n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it. The Policy Engine stops the \nPSSourceOffTimer.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. Policy Engine \nstarts PSSourceOnTimer.\nTable 8.66  Steps for a Successful Fast Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":563,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 563\n28\nThe Policy Engine directs the DPM to apply the Rp pull \nup.\nNote: At some point (either before or after receiving \nthe PS_RDY Message) the New Source has ap-\nplied vSafe5V no later than tSrcFRSwap after \ndetecting the Fast Role Swap Request and that \nVBUS has dropped below vSafe5V.\nPolicy Engine, when its power supply is ready to \nsupply power, tells the Protocol Layer to form a PS_RDY \nMessage. The Port Power Role Messageis set to Source.\n29\nProtocol Layer creates the PS_RDY Message and passes \nto PHY Layer.\n30\nPHY Layer appends a CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n31\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer. \n32\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it. The Policy Engine stops the \nPSSourceOnTimer.\n33\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n34\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage. The Policy Engine resets the Protocol Layer.\n35\nPHY Layer removes the CRC and forwards the \nGoodCRC to the Protocol Layer. \n36\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent. The Policy \nEngine resets the CapsCounter, resets the Protocol \nLayer and starts the SwapSourceStartTimer which \nmust timeout before sending any Source_Capabilities \nMessages.\nThe Fast Role Swap is complete, the Power Roles have been reversed and the Port Partners are free to Negotiate for more \npower.\nTable 8.66  Steps for a Successful Fast Role Swap Sequence\nStep\nInitial Sink Port\nInitial Source Port\n","image_count":0,"table_count":2}
{"page":564,"text":"Page 564\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9\n  Data Role Swap\n8.3.2.9.1\n  Data Role Swap, Initiated by UFP Operating as Sink\n8.3.2.9.1.1\n  Data Role Swap, Initiated by UFP Operating as Sink (Accept)\nFigure 8.40, \"Data Role Swap, UFP operating as Sink initiates\" shows an example sequence between a Port, which is \ninitially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP (Host) and a Source (Rp asserted). \nA Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their operation as either a \nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Roles between DFP (Host) and UFP (Device).\nFigure 8.40 Data Role Swap, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nNew Host/Device Roles\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":9}
{"page":565,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 565\nTable 8.67, \"Steps for Data Role Swap, UFP operating as Sink initiates\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.40, \"Data Role Swap, UFP operating as Sink initiates\" above.\nTable 8.67  Steps for Data Role Swap, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwap. It tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Accept Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Accept Message and checks \nthe CRC to verify the Message.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":566,"text":"Page 566\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nThe Policy Engine requests that Data Role is changed \nfrom UFP (Device) to DFP (Host).\nThe Power Delivery Data Role is now a DFP (Host), \nwith Port Data Role set to DFP, still operating as a Sink \n(Rd asserted).\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. \nThe Policy Engine requests that the Data Role is \nchanged to UFP (Device), with Port Data Role set to \nUFP and continues supplying power as a Source (Rp \nasserted).\nThe Data Role Swap is complete; the Data Roles have been reversed while maintaining the direction of power flow.\nTable 8.67  Steps for Data Role Swap, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":567,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 567\n8.3.2.9.1.2\n  Data Role Swap, Initiated by UFP Operating as Sink (Reject)\nFigure 8.41, \"Rejected Data Role Swap, UFP operating as Sink initiates\" shows an example sequence between a Port, \nwhich is initially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP (Host) and a Source (Rp \nasserted). A Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is rejected.\nFigure 8.41 Rejected Data Role Swap, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n","image_count":6,"table_count":10}
{"page":568,"text":"Page 568\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.68, \"Steps for Rejected Data Role Swap, UFP operating as Sink initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.41, \"Rejected Data Role Swap, UFP operating as Sink \ninitiates\" above.\nTable 8.68  Steps for Rejected Data Role Swap, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is unable and unwilling to do the Data \nRole Swap. It tells the Protocol Layer to form a Reject \nMessage.\n11\nProtocol Layer creates the Reject Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Reject Message and checks the \nCRC to verify the Message.\nPHY Layer appends a CRC and sends the Reject \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":569,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 569\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent. \nTable 8.68  Steps for Rejected Data Role Swap, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":570,"text":"Page 570\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9.1.3\n  Data Role Swap, Initiated by UFP Operating as Sink (Wait)\nFigure 8.42, \"Data Role Swap with Wait, UFP operating as Sink initiates\" shows an example sequence between a Port, \nwhich is initially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP (Host) and a Source (Rp \nasserted). A Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is delayed with a \nwait.\nFigure 8.42 Data Role Swap with Wait, UFP operating as Sink initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\n","image_count":6,"table_count":10}
{"page":571,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 571\nTable 8.69, \"Steps for Data Role Swap with Wait, UFP operating as Sink initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.42, \"Data Role Swap with Wait, UFP operating as Sink \ninitiates\" above.\nTable 8.69  Steps for Data Role Swap with Wait, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwap but not at this time. It tells the Protocol Layer \nto form a Wait Message.\n11\nProtocol Layer creates the Wait Message and passes to \nPHY Layer.\n12\nPHY Layer receives the Wait Message and checks the \nCRC to verify the Message.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":572,"text":"Page 572\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nWait Message was successfully sent. \nTable 8.69  Steps for Data Role Swap with Wait, UFP operating as Sink initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":573,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 573\n8.3.2.9.2\n  Data Role Swap, Initiated by UFP Operating as Source\n8.3.2.9.2.1\n  Data Role Swap, Initiated by UFP Operating as Source (Accept)\nFigure 8.43, \"Data Role Swap, UFP operating as Source initiates\" shows an example sequence between a Port, which \nis initially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink (Rd \nasserted). A Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) but exchange Data Roles between DFP (Host) and \nUFP (Device).\nFigure 8.43 Data Role Swap, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitially DFP Sink Port\nStop SenderResponseTimer\nNew Host/Device Roles\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":10}
{"page":574,"text":"Page 574\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.70, \"Steps for Data Role Swap, UFP operating as Source initiates\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.43, \"Data Role Swap, UFP operating as Source initiates\" above.\nTable 8.70  Steps for Data Role Swap, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwap. It tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Accept Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Accept Message and checks \nthe CRC to verify the Message.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":575,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 575\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nThe Policy Engine requests that Data Role is changed \nfrom UFP (Device) to DFP (Host).\nThe Power Delivery Data Role is now a DFP (Host), and \nPort Data Role set to DFP and continues supplying \npower as a Source (Rp asserted).\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine requests that the Data Role is changed to UFP \n(Device), with Port Data Role set to UFP and still \noperating as a Sink (Rp asserted).\nThe Data Role Swap is complete; the Data Roles have been reversed while maintaining the direction of power flow.\nTable 8.70  Steps for Data Role Swap, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":576,"text":"Page 576\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9.2.2\n  Data Role Swap, Initiated by UFP Operating as Source (Reject)\nFigure 8.44, \"Rejected Data Role Swap, UFP operating as Source initiates\" shows an example sequence between a \nPort, which is initially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink \n(Rd asserted). A Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their \noperation as either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is \nrejected.\nFigure 8.44 Rejected Data Role Swap, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitially DFP Sink Port\nStop SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\n","image_count":6,"table_count":9}
{"page":577,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 577\nTable 8.71, \"Steps for Rejected Data Role Swap, UFP operating as Source initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.44, \"Rejected Data Role Swap, UFP operating as Source \ninitiates\" above.\nTable 8.71  Steps for Rejected Data Role Swap, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is unable and unwilling to do the Data \nRole Swap. It tells the Protocol Layer to form a Reject \nMessage.\n11\nProtocol Layer creates the Reject Message and passes \nto PHY Layer.\n12\nPHY Layer receives the Reject Message and checks the \nCRC to verify the Message.\nPHY Layer appends a CRC and sends the Reject \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":578,"text":"Page 578\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent.\nTable 8.71  Steps for Rejected Data Role Swap, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":579,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 579\n8.3.2.9.2.3\n  Data Role Swap, Initiated by UFP Operating as Source (Wait)\nFigure 8.45, \"Data Role Swap with Wait, UFP operating as Source initiates\" shows an example sequence between a \nPort, which is initially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink \n(Rd asserted). A Data Role Swap is initiated by the UFP. During the process the Port Partners maintain their \noperation as either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is delayed \nwith a wait.\nFigure 8.45 Data Role Swap with Wait, UFP operating as Source initiates\n: Protocol\n1: Send Dr_Swap\n: PHY\n: PHY\n: Protocol\n2:Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Dr_Swap sent\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitially DFP Sink Port\nStop SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\n","image_count":6,"table_count":9}
{"page":580,"text":"Page 580\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.72, \"Steps for Data Role Swap with Wait, UFP operating as Source initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.45, \"Data Role Swap with Wait, UFP operating as Source \ninitiates\" above.\nTable 8.72  Steps for Data Role Swap with Wait, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwapbut not at this time. It tells the Protocol Layer to \nform a Wait Message.\n11\nProtocol Layer creates the Wait Message and passes to \nPHY Layer.\n12\nPHY Layer receives the Wait Message and checks the \nCRC to verify the Message.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":581,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 581\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nWait Message was successfully sent.\nTable 8.72  Steps for Data Role Swap with Wait, UFP operating as Source initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":582,"text":"Page 582\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9.3\n  Data Role Swap, Initiated by DFP Operating as Source\n8.3.2.9.3.1\n  Data Role Swap, Initiated by DFP Operating as Source (Accept)\nFigure 8.46, \"Data Role Swap, DFP operating as Source initiates\" shows an example sequence between a Port, which \nis initially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp asserted). A \nData Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation as either a \nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Roles between DFP (Host) and UFP (Device).\nFigure 8.46 Data Role Swap, DFP operating as Source initiates\n: Protocol\n10: Send Accept\n: PHY\n: PHY\n: Protocol\n11:Accept\n12: Accept + CRC\n13: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Accept sent\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nNew Host/Device Roles\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\n","image_count":6,"table_count":12}
{"page":583,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 583\nTable 8.73, \"Steps for Data Role Swap, DFP operating as Source initiates\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.46, \"Data Role Swap, DFP operating as Source initiates\" above.\nTable 8.73  Steps for Data Role Swap, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and passes \nto PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the DR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwap. It tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Accept Message and passes \nto PHY Layer.\n12\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Accept Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n","image_count":0,"table_count":2}
{"page":584,"text":"Page 584\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine requests that the Data Role is changed to DFP \n(Host), with Port Data Role set to DFP, still operating as \na Sink (Rd asserted).\nThe Policy Engine requests that Data Role is changed \nfrom DFP (Host) to UFP (Device).\nThe Power Delivery Data Role is now a UFP (Device), \nwith Port Data Role set to UFP and continues supplying \npower as a Source (Rp asserted).\nThe Data Role Swap is complete; the Data Roles have been reversed while maintaining the direction of power flow.\nTable 8.73  Steps for Data Role Swap, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":585,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 585\n8.3.2.9.3.2\n  Data Role Swap, Initiated by DFP Operating as Source (Reject)\nFigure 8.47, \"Rejected Data Role Swap, DFP operating as Source initiates\" shows an example sequence between a \nPort, which is initially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp \nasserted). A Data Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is rejected.\nFigure 8.47 Rejected Data Role Swap, DFP operating as Source initiates\n: Protocol\n10: Send Reject\n: PHY\n: PHY\n: Protocol\n11:Reject\n12: Reject + CRC\n13: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Reject sent\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":15}
{"page":586,"text":"Page 586\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.74, \"Steps for Rejected Data Role Swap, DFP operating as Source initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.47, \"Rejected Data Role Swap, DFP operating as Source \ninitiates\" above.\nTable 8.74  Steps for Rejected Data Role Swap, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and passes \nto PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the DR_Swap \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is unable and unwilling to do the Data \nRole Swap. It tells the Protocol Layer to form an Reject \nMessage.\n11\nProtocol Layer creates the Reject Message and passes to \nPHY Layer.\n12\nPHY Layer appends a CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Reject Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":587,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 587\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent.\nTable 8.74  Steps for Rejected Data Role Swap, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":588,"text":"Page 588\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9.3.3\n  Data Role Swap, Initiated by DFP Operating as Source (Wait)\nFigure 8.48, \"Data Role Swap with Wait, DFP operating as Source initiates\" shows an example sequence between a \nPort, which is initially a UFP (Device) and a Sink (Rd asserted), and a Port which is initially a DFP and a Source (Rp \nasserted). A Data Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is delayed by wait.\nFigure 8.48 Data Role Swap with Wait, DFP operating as Source initiates\n: Protocol\n10: Send Wait\n: PHY\n: PHY\n: Protocol\n11:Wait\n12: Wait + CRC\n13: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Wait sent\n: Policy Engine\n: Policy Engine\nInitial UFP Sink Port\nInitial DFP Source Port\nStop SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rd (Sink)\nPort Data Role =UFP (Device)\nStart SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role = UFP (Device)\nCC = Rp (Source)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":13}
{"page":589,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 589\nTable 8.75, \"Steps for Data Role Swap with Wait, DFP operating as Source initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.48, \"Data Role Swap with Wait, DFP operating as \nSource initiates\" above.\nTable 8.75  Steps for Data Role Swap with Wait, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n1\nPort starts as a UFP (Device) operating as a Sink with Rd \nasserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as Source with Rp \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and passes \nto PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy Engine \nstarts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwapbut not at this time. It tells the Protocol Layer to \nform an Wait Message.\n11\nProtocol Layer creates the Wait Message and passes to \nPHY Layer.\n12\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the Wait Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n","image_count":0,"table_count":2}
{"page":590,"text":"Page 590\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent.\nTable 8.75  Steps for Data Role Swap with Wait, DFP operating as Source initiates\nStep\nInitial UFP Sink Port\nInitial DFP Source Port\n","image_count":0,"table_count":2}
{"page":591,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 591\n8.3.2.9.4\n  Data Role Swap, Initiated by DFP Operating as Sink\n8.3.2.9.4.1\n  Data Role Swap, Initiated by DFP Operating as Sink (Accept)\nFigure 8.49, \"Data Role Swap, DFP operating as Sink initiates\" shows an example sequence between a Port, which is \ninitially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink (Rd asserted). \nA Data Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation as either a \nSource or a Sink (power and Rp/Rd remain constant) but exchange Data Roles between DFP (Host) and UFP (Device).\nFigure 8.49 Data Role Swap, DFP operating as Sink initiates\n: Protocol\n10: Send Accept\n: PHY\n: PHY\n: Protocol\n11:Accept\n12: Accept + CRC\n13: Accept\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Accept sent\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitial DFP Sink Port\nStop SenderResponseTimer\nNew Host/Device Roles\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> DFP (Host)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> UFP (Device)\n","image_count":6,"table_count":12}
{"page":592,"text":"Page 592\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.76, \"Steps for Data Role Swap, DFP operating as Sink initiates\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.49, \"Data Role Swap, DFP operating as Sink initiates\" above.\nTable 8.76  Steps for Data Role Swap, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwap. It tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Accept Message and passes \nto PHY Layer.\n12\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Accept Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer. \n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n","image_count":0,"table_count":2}
{"page":593,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 593\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine requests that the Data Role is changed to DFP \n(Host), with Port Data Role set to DFP and continues \nsupplying power as a Source (Rp asserted).\nThe Policy Engine requests that Data Role is changed \nfrom DFP (Host) to UFP (Device).\nThe Power Delivery Data Role is now a UFP (Device), \nwith Port Data Role set to UFP, still operating as a Sink \n(Rd asserted).\nThe Data Role Swap is complete; the Data Roles have been reversed while maintaining the direction of power flow.\nTable 8.76  Steps for Data Role Swap, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":594,"text":"Page 594\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.9.4.2\n  Data Role Swap, Initiated by DFP Operating as Sink (Reject)\nFigure 8.50, \"Rejected Data Role Swap, DFP operating as Sink initiates\" shows an example sequence between a Port, \nwhich is initially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink (Rd \nasserted). A Data Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is rejected.\nFigure 8.50 Rejected Data Role Swap, DFP operating as Sink initiates\n: Protocol\n10: Send Reject\n: PHY\n: PHY\n: Protocol\n11:Reject\n12: Reject + CRC\n13: Reject\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Reject sent\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitial DFP Sink Port\nStop SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":14}
{"page":595,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 595\nTable 8.77, \"Steps for Rejected Data Role Swap, DFP operating as Sink initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.50, \"Rejected Data Role Swap, DFP operating as Sink \ninitiates\" above.\nTable 8.77  Steps for Rejected Data Role Swap, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is unable and unwilling to do the Data \nRole Swap. It tells the Protocol Layer to form an Reject \nMessage.\n11\nProtocol Layer creates the Reject Message and passes \nto PHY Layer.\n12\nPHY Layer appends a CRC and sends the Reject \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Reject Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer. \n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":596,"text":"Page 596\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent.\nTable 8.77  Steps for Rejected Data Role Swap, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":597,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 597\n8.3.2.9.4.3\n  Data Role Swap, Initiated by DFP Operating as Sink (Wait)\nFigure 8.51, \"Data Role Swap with Wait, DFP operating as Sink initiates\" shows an example sequence between a Port, \nwhich is initially a UFP (Device) and a Source (Rp asserted), and a Port which is initially a DFP (Host) and a Sink (Rd \nasserted). A Data Role Swap is initiated by the DFP. During the process the Port Partners maintain their operation \nas either a Source or a Sink (power and Rp/Rd remain constant) and the exchange of Data Roles is delayed with a \nwait.\nFigure 8.51 Data Role Swap with Wait, DFP operating as Sink initiates\n: Protocol\n10: Send Wait\n: PHY\n: PHY\n: Protocol\n11:Wait\n12: Wait + CRC\n13: Wait\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n18:Wait sent\n: Policy Engine\n: Policy Engine\nInitial UFP Source Port\nInitial DFP Sink Port\nStop SenderResponseTimer\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rp (Source)\nPort Data Role -> UFP (Device)\n1: Send Dr_Swap\n2: Dr_Swap\n3: Dr_Swap + CRC\n4: Dr_Swap\nCheck MessageID against local copy\nStore copy of MessageID\n5: Dr_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Dr_Swap sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate Dr_Swap request\nCC = Rp (Source)\nPort Data Role = UFP (Device)\nStart SenderResponseTimer\nCC = Rd (Sink)\nPort Data Role = DFP (Host)\nCC = Rd (Sink)\nPort Data Role -> DFP (Host)\n","image_count":6,"table_count":13}
{"page":598,"text":"Page 598\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.78, \"Steps for Data Role Swap with Wait, DFP operating as Sink initiates\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.51, \"Data Role Swap with Wait, DFP operating as Sink \ninitiates\" above.\nTable 8.78  Steps for Data Role Swap with Wait, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n1\nPort starts as a UFP (Device) operating as Source with \nRp asserted and Port Data Role set to UFP.\nPort starts as a DFP (Host) operating as a Sink with Rd \nasserted and Port Data Role set to DFP. The Policy \nEngine directs the Protocol Layer to send a DR_Swap \nMessage.\n2\nProtocol Layer creates the DR_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer receives the DR_Swap Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the DR_Swap \nMessage. Starts CRCReceiveTimer.\n4\nPHY Layer removes the CRC and forwards the \nDR_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received DR_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDR_Swap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the DR_Swap Message and \ndecides that it is able and willing to do the Data Role \nSwapbut not at this time. It tells the Protocol Layer to \nform a Wait Message.\n11\nProtocol Layer creates the Wait Message and passes to \nPHY Layer.\n12\nPHY Layer appends a CRC and sends the Wait \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Wait Message and checks the \nCRC to verify the Message.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":599,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 599\n16\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer.\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nWait Message was successfully sent.\nTable 8.78  Steps for Data Role Swap with Wait, DFP operating as Sink initiates\nStep\nInitial UFP Source Port\nInitial DFP Sink Port\n","image_count":0,"table_count":2}
{"page":600,"text":"Page 600\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.10\n  VCONN Swap\n8.3.2.10.1\n  VCONN Source Swap, initiated by VCONN Source\n8.3.2.10.1.1\n  VCONN Source Swap, initiated by VCONN Source (Accept)\nFigure 8.52, \"Successful VCONN Source Swap, initiated by VCONN Source\" shows an example sequence where the \nVCONN Source and tells its Port Partner to supply VCONN. During the process the Port Partners, keep their Power Role \nas Source or Sink, maintain their operation as either a Source or a Sink (power remains constant) but exchange the \nVCONN Source role.\nFigure 8.52 Successful VCONN Source Swap, initiated by VCONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN Source Port\nInitially VCONN off\nVconn is on\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\n27: PS_RDY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStop SenderResponseTimer\nStart VCONNOnTimer\nStop VCONNOnTimer\nTell power supply to turn off VCONN\nVCONN has been swapped\nVCONN off\nVCONN Source\nTell power supply to \nstart supplying VCONN\nVCONN is off\n","image_count":8,"table_count":12}
{"page":601,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 601\nTable 8.79, \"Steps for Source to Sink VCONN Source Swap\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.52, \"Successful VCONN Source Swap, initiated by VCONN Source\" above.\nTable 8.79  Steps for Source to Sink VCONN Source Swap\nStep\nInitially VCONN Source\nInitially VCONN off\n1\nThe VCONN Source’s Policy Engine directs the Protocol \nLayer to send a VCONN_Swap Message.\nVCONN is off.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is able and willing to do \nthe VCONN Swap. It tells the Protocol Layer to form an \nAccept Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Accept Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Accept \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer \nand starts the VCONNOnTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":602,"text":"Page 602\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. The Policy \nEngine asks the DPM to turn on VCONN.\n19\nThe DPM informs the Policy Engine that its power \nsupply is supplying VCONN. The Policy Engine directs \nthe Protocol Layer to generate a PS_RDY Message to tell \nthe Source it can turn off VCONN.\n20\nProtocol Layer creates the PS_RDY Message and passes \nto PHY Layer.\n21\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer. \n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer appends a CRC and sends the GoodCRC \nMessage. The Policy Engine stops the VCONNOnTimer, \nand tells the power supply to stop sourcing VCONN.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nVCONN is off.\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\nThe Port Partners have swapped VCONN Source role.\nTable 8.79  Steps for Source to Sink VCONN Source Swap\nStep\nInitially VCONN Source\nInitially VCONN off\n","image_count":0,"table_count":2}
{"page":603,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 603\n8.3.2.10.1.2\n  VCONN Source Swap, initiated by VCONN Source (Reject)\nFigure 8.53, \"Rejected VCONN Source Swap, initiated by VCONN Source\" shows an example sequence where the VCONN \nSource and tells its Port Partner to supply VCONN and is rejected. During the process the Port Partners, keep their \nPower Role as Source or Sink, maintain their operation as either a Source or a Sink (power remains constant) and \ndon't exchange the VCONN Source role.\nFigure 8.53 Rejected VCONN Source Swap, initiated by VCONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN Source Port\nInitially VCONN off\nStop SenderResponseTimer\nVCONN off\nVCONN Source\n","image_count":8,"table_count":11}
{"page":604,"text":"Page 604\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.80, \"Steps for Rejected VCONN Source Swap\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.53, \"Rejected VCONN Source Swap, initiated by VCONN Source\" above.\nTable 8.80  Steps for Rejected VCONN Source Swap\nStep\nInitially VCONN Source\nInitially VCONN off\n1\nThe VCONN Source’s Policy Engine directs the Protocol \nLayer to send a VCONN_Swap Message.\nVCONN is off.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is unable and unwilling \nto do the VCONN Swap. It tells the Protocol Layer to form \nan Reject Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Reject Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer \nand starts the VCONNOnTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":605,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 605\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent\nTable 8.80  Steps for Rejected VCONN Source Swap\nStep\nInitially VCONN Source\nInitially VCONN off\n","image_count":0,"table_count":2}
{"page":606,"text":"Page 606\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.10.1.3\n  VCONN Source Swap, initiated by VCONN Source (Wait)\nFigure 8.54, \"VCONN Source Swap with Wait, initiated by VCONN Source\" shows an example sequence where the VCONN \nSource and tells its Port Partner to supply VCONN and is told to wait. During the process the Port Partners, keep their \nPower Role as Source or Sink, maintain their operation as either a Source or a Sink (power remains constant) and \ndon't exchange the VCONN Source role.\nFigure 8.54 VCONN Source Swap with Wait, initiated by VCONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN Source Port\nInitially VCONN off\nStop SenderResponseTimer\nVCONN off\nVCONN Source\n","image_count":8,"table_count":11}
{"page":607,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 607\nTable 8.81, \"Steps for VCONN Source Swap with Wait\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.54, \"VCONN Source Swap with Wait, initiated by VCONN Source\" above.\nTable 8.81  Steps for VCONN Source Swap with Wait\nStep\nInitially VCONN Source\nInitially VCONN off\n1\nThe VCONN Source’s Policy Engine directs the Protocol \nLayer to send a VCONN_Swap Message.\nVCONN is off.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is able and willing to do \nthe VCONN Swap but not at this time. It tells the Protocol \nLayer to form an Wait Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Wait Message and compares the \nCRC it calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer \nand starts the VCONNOnTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":608,"text":"Page 608\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent\nTable 8.81  Steps for VCONN Source Swap with Wait\nStep\nInitially VCONN Source\nInitially VCONN off\n","image_count":0,"table_count":2}
{"page":609,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 609\n8.3.2.10.2\n  VCONN Source Swap, initiated by non-VCONN Source\n8.3.2.10.2.1\n  VCONN Source Swap, initiated by non-VCONN Source (Accept)\nFigure 8.55, \"VCONN Source Swap, initiated by non-VCONN Source\" shows an example where the Port which is not \ninitially supplying VCONN and requests a VCONN Swap. During the process the Port Partners, keep their Power Role \nas Source or Sink, maintain their operation as either a Source or a Sink (power remains constant) but exchange the \nVCONN Source.\nFigure 8.55 VCONN Source Swap, initiated by non-VCONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\nCheck MessageID against local copy\nStore copy of MessageID\n14: Accept received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN off\nInitially VCONN Source Port\nVconn is on\nStart VCONNOnTimer\nVCONN Source\nVCONN Off\nStop SenderResponseTimer\nTell power supply to start \nsupplying VCONN\n19: Send PS_RDY\n20: PS_RDY\n21: PS_RDY + CRC\n22: PS_RDY\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: PS_RDY received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: PS_RDY sent\nSource is supplying VCONN\nStop VCONNOnTimer\nTell power supply to turn off VCONN\nVCONN is off\n","image_count":8,"table_count":13}
{"page":610,"text":"Page 610\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.82, \"Steps for VCONN Source Swap, Initiated by non-VCONN Source\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.55, \"VCONN Source Swap, initiated by non-VCONN Source\" above.\nTable 8.82  Steps for VCONN Source Swap, Initiated by non-VCONN Source\nStep\nInitially VCONN off\nInitially VCONN Source\n1\nThe Source starts with VCONN off. The Policy Engine \ndirects the Protocol Layer to send a VCONN_Swap \nMessage.\nThe Sink starts as the VCONN Source.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is able and willing to do \nthe VCONN Swap. It tells the Protocol Layer to form an \nAccept Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Accept Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Accept Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer. \nThe Policy Engine tells the DPM to turn on VCONN.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":611,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 611\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent. \nThe Policy Engine starts the VCONNOnTimer.\n19\nThe DPM tells the Policy Engine that its power supply \nis supplying VCONN. The Policy Engine directs the \nProtocol Layer to generate a PS_RDY Message to tell the \nSink it can turn off VCONN.\n20\nProtocol Layer creates the PS_RDY Message and passes \nto PHY Layer.\n21\nPHY Layer appends a CRC and sends the PS_RDY \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the PS_RDY Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n22\nPHY Layer removes the CRC and forwards the PS_RDY \nMessage to the Protocol Layer. \n23\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PS_RDY \nMessage information to the Policy Engine that \nconsumes it.\n24\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n25\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the GoodCRC \nMessage. The Policy Engine stops the VCONNOnTimer, \nand tells the power supply to stop sourcing VCONN.\n26\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n27\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPS_RDY Message was successfully sent.\nVCONN is off.\nThe Port Partners have swapped VCONN Source role.\nTable 8.82  Steps for VCONN Source Swap, Initiated by non-VCONN Source\nStep\nInitially VCONN off\nInitially VCONN Source\n","image_count":0,"table_count":2}
{"page":612,"text":"Page 612\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.10.2.2\n  VCONN Source Swap, initiated by non-VCONN Source (Reject)\nFigure 8.56, \"Rejected VCONN Source Swap, initiated by non-VCONN Source\" shows an example where the Port which \nis not initially supplying VCONN and requests a VCONN Swap which is rejected. During the process the Port Partners, \nkeep their Power Role as Source or Sink, maintain their operation as either a Source or a Sink (power remains \nconstant) and don't exchange the VCONN Source.\nFigure 8.56 Rejected VCONN Source Swap, initiated by non-VCONN Source\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\nCheck MessageID against local copy\nStore copy of MessageID\n14: Reject received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN off\nInitially VCONN Source Port\nVCONN Source\nVCONN Off\nStop SenderResponseTimer\n","image_count":8,"table_count":12}
{"page":613,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 613\nTable 8.83, \"Steps for Rejected VCONN Source Swap, Initiated by non-VCONN Source\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.56, \"Rejected VCONN Source Swap, initiated by non-\nVCONN Source\" above.\nTable 8.83  Steps for Rejected VCONN Source Swap, Initiated by non-VCONN Source\nStep\nInitially VCONN off\nInitially VCONN Source\n1\nThe Source starts with VCONN off. The Policy Engine \ndirects the Protocol Layer to send a VCONN_Swap \nMessage.\nThe Sink starts as the VCONN Source.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is unable and unwilling \nto do the VCONN Swap. It tells the Protocol Layer to form a \nReject Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Reject Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\nPHY Layer appends a CRC and sends the Reject Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer. \nThe Policy Engine tells the DPM to turn on VCONN.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":614,"text":"Page 614\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent. \nTable 8.83  Steps for Rejected VCONN Source Swap, Initiated by non-VCONN Source\nStep\nInitially VCONN off\nInitially VCONN Source\n","image_count":0,"table_count":2}
{"page":615,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 615\n8.3.2.10.2.3\n  VCONN Source Swap (Wait)\nFigure 8.57, \"VCONN Source Swap with Wait\" shows an example where the Port requests a VCONN Swap which is \ndelayed with a wait. During the process the Port Partners, keep their Power Role as Source or Sink, maintain their \noperation as either a Source or a Sink (power remains constant) and don't exchange the VCONN Source.\nFigure 8.57 VCONN Source Swap with Wait\n: Protocol\n1: Send VCONN_Swap\n: PHY\n: PHY\n: Protocol\n2:VCONN_Swap\n3: VCONN_Swap + CRC\n4: VCONN_Swap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: VCONN_Swap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:VCONN_Swap sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\nCheck MessageID against local copy\nStore copy of MessageID\n14: Wait received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nEvaluate VCONN_Swap \nrequest\n: Policy Engine\n: Policy Engine\nInitially VCONN off\nInitially VCONN Source Port\nVCONN Source\nVCONN Off\nStop SenderResponseTimer\n","image_count":8,"table_count":12}
{"page":616,"text":"Page 616\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.84, \"Steps for VCONN Source Swap with Wait\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.57, \"VCONN Source Swap with Wait\" above.\nTable 8.84  Steps for VCONN Source Swap with Wait\nStep\nInitially VCONN off\nInitially VCONN Source\n1\nThe Source starts with VCONN off. The Policy Engine \ndirects the Protocol Layer to send a VCONN_Swap \nMessage.\nThe Sink starts as the VCONN Source.\n2\nProtocol Layer creates the VCONN_Swap Message and \npasses to PHY Layer.\n3\nPHY Layer appends CRC and sends the VCONN_Swap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the VCONN_Swap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVCONN_Swap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received VCONN_Swap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVCONN_Swap Message was successfully sent.\nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine evaluates the VCONN_Swap Message sent \nby the Source and decides that it is able and willing to do \nthe VCONN Swap but not at this time. It tells the Protocol \nLayer to form a Wait Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Wait Message and compares the \nCRC it calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Wait Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer. \nThe Policy Engine tells the DPM to turn on VCONN.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":617,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 617\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent. \nTable 8.84  Steps for VCONN Source Swap with Wait\nStep\nInitially VCONN off\nInitially VCONN Source\n","image_count":0,"table_count":2}
{"page":618,"text":"Page 618\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11\n  Additional Capabilities, Status and Information\n8.3.2.11.1\n  Alert\n8.3.2.11.1.1\n  Source sends Alert to a Sink\nFigure 8.58, \"Source Alert to Sink\" shows an example sequence between a Source and a Sink where the Source alerts \nthe Sink that there has been a status change. This AMS will be followed by getting the Source status to determine \nfurther details of the alert (see Section 8.3.2.11.2, \"Status\").\nFigure 8.58 Source Alert to Sink\n: Sink Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Source Policy Engine\nSink Port\nSource Port\n1: Send Alert\n2: Alert\n3: Alert + CRC\n4: Alert\nCheck MessageID against local copy\nStore copy of MessageID\n5: Alert received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Alert sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":6,"table_count":3}
{"page":619,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 619\nTable 8.85, \"Steps for Source Alert to Sink\" below provides a detailed explanation of what happens at each labeled \nstep in Figure 8.58, \"Source Alert to Sink\" above.\nTable 8.85  Steps for Source Alert to Sink\nStep\nSink\nSource\n1\nThe DPM indicates a Source alert condition. The Policy \nEngine tells the Protocol Layer to form an Alert \nMessage.\n2\nProtocol Layer creates the Alert Message and passes to \nPHY Layer.\n3\nPHY Layer receives the Alert Message and compares the \nCRC it calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Alert Message. \nStarts CRCReceiveTimer.\n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Alert \nMessage to the Policy Engine that consumes it.\n5\nThe Policy Engine informs the DPM.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Alert \nMessage was successfully sent. \n","image_count":0,"table_count":2}
{"page":620,"text":"Page 620\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.1.2\n  Sink sends Alert to a Source\nFigure 8.59, \"Sink Alert to Source\" shows an example sequence between a Source and a Sink where the Sink alerts \nthe Source that there has been a status change. This AMS will be followed by getting the Sink status to determine \nfurther details of the alert (see Section 8.3.2.11.2, \"Status\").\nFigure 8.59 Sink Alert to Source\n: Source Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Sink Policy Engine\nSource Port\nSink Port\n1: Send Alert\n2: Alert\n3: Alert + CRC\n4: Alert\nCheck MessageID against local copy\nStore copy of MessageID\n5: Alert received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Alert sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":6,"table_count":3}
{"page":621,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 621\nTable 8.86, \"Steps for Sink Alert to Source\" below provides a detailed explanation of what happens at each labeled \nstep in Figure 8.59, \"Sink Alert to Source\" above.\nTable 8.86  Steps for Sink Alert to Source\nStep\nSource\nSink\n1\nThe DPM indicates a Sink alert condition. The Policy \nEngine tells the Protocol Layer to form an Alert \nMessage.\n2\nProtocol Layer creates the Alert Message and passes to \nPHY Layer.\n3\nPHY Layer receives the Alert Message and compares the \nCRC it calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Alert Message. \nStarts CRCReceiveTimer.\n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Alert \nMessage to the Policy Engine that consumes it.\n5\nThe Policy Engine informs the DPM.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Alert \nMessage was successfully sent. \n","image_count":0,"table_count":2}
{"page":622,"text":"Page 622\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.2\n  Status\n8.3.2.11.2.1\n  Sink Gets Source Status\nFigure 8.60, \"Sink Gets Source Status\" shows an example sequence between a Source and a Sink where, after the Sink \nhas received an alert (see Section 8.3.2.11.2, \"Status\") that there has been a status change, the Sink gets more details \non the change. \nFigure 8.60 Sink Gets Source Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source Status \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n18: Status sent\n","image_count":8,"table_count":9}
{"page":623,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 623\nTable 8.87, \"Steps for a Sink getting Source Status Sequence\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.60, \"Sink Gets Source Status\" above.\nTable 8.87  Steps for a Sink getting Source Status Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Status Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Status \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Status Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Status Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nstatus which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nStatus Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Status \nMessage.\nPHY Layer appends a CRC and sends the Status \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":624,"text":"Page 624\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nStatus Message was successfully sent.\nThe Source has informed the Sink of its present status.\nTable 8.87  Steps for a Sink getting Source Status Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":625,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 625\n8.3.2.11.2.2\n  Source Gets Sink Status\nFigure 8.61, \"Source Gets Sink Status\" shows an example sequence between a Source and a Sink where, after the \nSource has received an alert (see Section 8.3.2.11.2, \"Status\") that there has been a status change, the Source gets \nmore details on the change. \nFigure 8.61 Source Gets Sink Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Sink Status \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\nStop SenderResponseTimer\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n18: Status sent\n","image_count":8,"table_count":9}
{"page":626,"text":"Page 626\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.88, \"Steps for a Source getting Sink Status Sequence\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.61, \"Source Gets Sink Status\" above.\nTable 8.88  Steps for a Source getting Sink Status Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Status Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Status \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Status Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Status Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nstatus which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nStatus Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Status \nMessage.\nPHY Layer appends a CRC and sends the Status Message. \nStarts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":627,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 627\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nStatus Message was successfully sent.\nThe Sink has informed the Source of its present status.\nTable 8.88  Steps for a Source getting Sink Status Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":628,"text":"Page 628\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.2.3\n  VCONN Source Gets Cable Plug Status\nFigure 8.62, \"VCONN Source Gets Cable Plug Status\" shows an example sequence between a VCONN Source and a Cable \nPlug where, after the VCONN Source has received an alert (see Section 8.3.2.11.2, \"Status\") that there has been a \nstatus change, the VCONN Source gets more details on the change. \nFigure 8.62 VCONN Source Gets Cable Plug Status\n: Protocol\n1: Send Get_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Status\n3: Get_Status + CRC\n4: Get_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Status sent\nStart SenderResponseTimer\n10: Send Status\n11: Status\n12: Status + CRC\n13: Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Status Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nVCONN Source Port\nCable Plug\nStop SenderResponseTimer\n18: Status sent\n","image_count":8,"table_count":7}
{"page":629,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 629\nTable 8.89, \"Steps for a VCONN Source getting Cable Plug Status Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.62, \"VCONN Source Gets Cable Plug Status\" above.\nTable 8.89  Steps for a VCONN Source getting Cable Plug Status Sequence\nStep\nVCONN Source Port\nCable Plug\n1\nPolicy Engine directs the Protocol Layer to send a \nGet_Status Message.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Status \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Status Message and checks \nthe CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Status \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Status Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nstatus which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nStatus Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Status \nMessage.\nPHY Layer appends a CRC and sends the Status \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Status \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":630,"text":"Page 630\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nStatus Message was successfully sent.\nThe Cable Plug has informed the VCONN Source of its present status.\nTable 8.89  Steps for a VCONN Source getting Cable Plug Status Sequence\nStep\nVCONN Source Port\nCable Plug\n","image_count":0,"table_count":2}
{"page":631,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 631\n8.3.2.11.2.4\n  Sink Gets Source PPS Status\nFigure 8.63, \"Sink Gets Source PPS Status\" shows an example sequence between a Source and a Sink where, after the \nSink has received an alert (see Section 8.3.2.11.2, \"Status\") that there has been a PPS status change, the Sink gets \nmore details on the change. \nFigure 8.63 Sink Gets Source PPS Status\n: Protocol\n1: Send Get_PPS_Status\n: PHY\n: PHY\n: Protocol\n2:Get_PPS_Status\n3: Get_PPS_Status + CRC\n4: Get_PPS_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_PPS_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_PPS_Status sent\nStart SenderResponseTimer\n10: Send PPS_Status\n11: PPS_Status\n12: PPS_Status + CRC\n13: PPS_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: PPS_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source PPS Status \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n18: PPS_Status sent\n","image_count":8,"table_count":9}
{"page":632,"text":"Page 632\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.90, \"Steps for a Sink getting Source PPS status Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.63, \"Sink Gets Source PPS Status\" above.\nTable 8.90  Steps for a Sink getting Source PPS status Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_PPS_Status Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_PPS_Status \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_PPS_Status Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_PPS_Status Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_PPS_Status Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nstatus which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nPPS_Status Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the PPS_Status \nMessage.\nPHY Layer appends a CRC and sends the PPS_Status \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received PPS_Status \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":633,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 633\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nPPS_Status Message was successfully sent.\nThe Source has informed the Sink of its present PPS status.\nTable 8.90  Steps for a Sink getting Source PPS status Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":634,"text":"Page 634\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.3\n  Source/Sink Capabilities\n8.3.2.11.3.1\n  SPR\n8.3.2.11.3.1.1\n  Sink Gets Source Capabilities\nFigure 8.64, \"Sink Gets Source's Capabilities\" shows an example sequence between a Source and a Sink when the Sink \ngets the Source Capabilities.\nFigure 8.64 Sink Gets Source's Capabilities\n: Protocol\n1: Send Get_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap\n3: Get_Source_Cap + CRC\n4: Get_Source_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap sent\nStart SenderResponseTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n13: Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n18: Source_Capabilities sent\n","image_count":8,"table_count":10}
{"page":635,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 635\nTable 8.91, \"Steps for a Sink getting Source Capabilities Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.64, \"Sink Gets Source's Capabilities\" above.\nTable 8.91  Steps for a Sink getting Source Capabilities Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Cap Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Source_Cap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Source_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nCapabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSource_Capabilities Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":636,"text":"Page 636\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent.\nThe Source has informed the Sink of its capabilities.\nTable 8.91  Steps for a Sink getting Source Capabilities Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":637,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 637\n8.3.2.11.3.1.2\n  Dual-Role Source Gets Source Capabilities from a Dual-Role Sink\nFigure 8.65, \"Dual-Role Source Gets Dual-Role Sink's Capabilities as a Source\" shows an example sequence between \na Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink Capabilities as a Source.\nFigure 8.65 Dual-Role Source Gets Dual-Role Sink's Capabilities as a Source\n: Protocol\n1: Send Get_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap\n3: Get_Source_Cap + CRC\n4: Get_Source_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap sent\nStart SenderResponseTimer\n10: Send Source_Capabilities\n11: Source_Capabilities\n12: Source_Capabilities + CRC\n13: Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nDual-Role Source Port\nDual-Role Sink Port\nStop SenderResponseTimer\n18: Source_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":638,"text":"Page 638\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.92, \"Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\" below provides \na detailed explanation of what happens at each labeled step in Figure 8.65, \"Dual-Role Source Gets Dual-Role Sink's \nCapabilities as a Source\" above.\nTable 8.92  Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Cap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Cap Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Source_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nCapabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSource_Capabilities Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":639,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 639\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its capabilities.\nTable 8.92  Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as a Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n","image_count":0,"table_count":2}
{"page":640,"text":"Page 640\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.3.1.3\n  Source Gets Sink Capabilities\nFigure 8.66, \"Source Gets Sink's Capabilities\" shows an example sequence between a Source and a Sink when the \nSource gets the Sink Capabilities. \nFigure 8.66 Source Gets Sink's Capabilities\n: Protocol\n1: Send Get_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap\n3: Get_Sink_Cap + CRC\n4: Get_Sink_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities\n11: Sink_Capabilities\n12: Sink_Capabilities + CRC\n13: Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Sink capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\nStop SenderResponseTimer\n18: Sink_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":641,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 641\nTable 8.93, \"Steps for a Source getting Sink Capabilities Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.66, \"Source Gets Sink's Capabilities\" above.\nTable 8.93  Steps for a Source getting Sink Capabilities Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Sink_Cap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Sink_Cap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Sink_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Sink_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Sink_Cap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Sink_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Sink \nCapabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSink_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSink_Capabilities Message.\nPHY Layer appends a CRC and sends the \nSink_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSink_Capabilities Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":642,"text":"Page 642\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSink_Capabilities Message was successfully sent.\nThe Sink has informed the Source of its capabilities.\nTable 8.93  Steps for a Source getting Sink Capabilities Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":643,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 643\n8.3.2.11.3.1.4\n  Dual-Role Sink Get Sink Capabilities from a Dual-Role Source\nFigure 8.67, \"Dual-Role Sink Gets Dual-Role Source's Capabilities as a Sink\" shows an example sequence between a \nDual-Role Power Source and a Dual-Role Power Sink when the Dual-Role Power Sink gets the Dual-Role Power Source \nCapabilities as a Sink. \nFigure 8.67 Dual-Role Sink Gets Dual-Role Source's Capabilities as a Sink\n: Protocol\n1: Send Get_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap\n3: Get_Sink_Cap + CRC\n4: Get_Sink_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities\n11: Sink_Capabilities\n12: Sink_Capabilities + CRC\n13: Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Sink capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nDual-Role Sink Port\nDual-Role Source Port\nStop SenderResponseTimer\n18: Sink_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":644,"text":"Page 644\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.94, \"Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.67, \"Dual-Role Sink Gets Dual-Role Source's \nCapabilities as a Sink\" above.\nTable 8.94  Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\nStep\nDual-Role Sink Port\nDual-Role Source Port\n1\nThe Port has Port Power Role set to Dual-Role Power \nSink with the Rd pull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Sink_Cap Message.\nThe Port has Port Power Role set to Dual-Role Power \nSource and the Rp pull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Sink_Cap \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Sink_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Sink_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Sink_Cap \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Sink_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Dual-\nRole Power Source Capabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSink_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSink_Capabilities Message.\nPHY Layer appends a CRC and sends the \nSink_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSink_Capabilities Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":645,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 645\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSink_Capabilities Message was successfully sent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Capabilities as a Sink.\nTable 8.94  Steps for a Dual-Role Sink getting Dual-Role Source capabilities as a Sink Sequence\nStep\nDual-Role Sink Port\nDual-Role Source Port\n","image_count":0,"table_count":2}
{"page":646,"text":"Page 646\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.3.2\n  EPR\n8.3.2.11.3.2.1\n  Sink Gets EPR Source Capabilities\nFigure 8.68, \"Sink Gets Source's EPR Capabilities\" shows an example sequence between a Source and a Sink when \nthe Sink gets the Source's EPR Capabilities. \nFigure 8.68 Sink Gets Source's EPR Capabilities\n: Protocol\n1: Send EPR_Get_EPR_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Source_Cap\n3: EPR_Get_EPR_Source_Cap + CRC\n4: EPR_Get_EPR_Source_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Source_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Source_Capabilities\n11: EPR_Source_Capabilities\n12: EPR_Source_Capabilities + CRC\n13: EPR_Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet EPR Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: EPR_Source_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":8}
{"page":647,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 647\nTable 8.95, \"Steps for a Sink getting EPR Source Capabilities Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.68, \"Sink Gets Source's EPR Capabilities\" above.\nTable 8.95  Steps for a Sink getting EPR Source Capabilities Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nEPR_Get_Source_Cap Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nEPR_Get_Source_Cap Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the EPR_Get_Source_Cap Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Get_Source_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Get_Source_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Get_Source_Cap Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present EPR \nSource Capabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form an \nEPR_Source_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nEPR_Source_Capabilities Message.\nPHY Layer appends a CRC and sends the \nEPR_Source_Capabilities Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Source_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":648,"text":"Page 648\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities Message was successfully sent.\nThe Source has informed the Sink of its EPR Capabilities.\nTable 8.95  Steps for a Sink getting EPR Source Capabilities Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":649,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 649\n8.3.2.11.3.2.2\n  Dual-Role Source Gets Source Capabilities from a Dual-Role EPR \nSink\nFigure 8.69, \"Dual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source\" shows an example sequence \nbetween a Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink Capabilities as an EPR \nSource. \nFigure 8.69 Dual-Role Source Gets Dual-Role Sink's Capabilities as an EPR Source\n: Protocol\n1: Send EPR_Get_EPR_Source_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Source_Cap\n3: EPR_Get_EPR_Source_Cap + CRC\n4: EPR_Get_EPR_Source_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Source_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Source_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Source_Capabilities\n11: EPR_Source_Capabilities\n12: EPR_Source_Capabilities + CRC\n13: EPR_Source_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Source_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet EPR Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nDual-Role Source Port\nDual-Role Sink Port\nStop SenderResponseTimer\n18: EPR_Source_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":8}
{"page":650,"text":"Page 650\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.96, \"Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\" below \nprovides a detailed explanation of what happens at each labeled step in Figure 8.69, \"Dual-Role Source Gets Dual-\nRole Sink's Capabilities as an EPR Source\" above.\nTable 8.96  Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nEPR_Get_Source_Cap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nEPR_Get_Source_Cap Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the EPR_Get_Source_Cap Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Get_Source_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Get_Source_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Get_Source_Cap Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nCapabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form an \nEPR_Source_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nEPR_Source_Capabilities Message.\nPHY Layer appends a CRC and sends the \nEPR_Source_Capabilities Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Source_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":651,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 651\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Source_Capabilities Message was successfully \nsent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its EPR Capabilities.\nTable 8.96  Steps for a Dual-Role Source getting Dual-Role Sink's capabilities as an EPR Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n","image_count":0,"table_count":2}
{"page":652,"text":"Page 652\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.3.2.3\n  Source Gets Sink EPR Capabilities\nFigure 8.70, \"Source Gets Sink's EPR Capabilities\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's EPR Capabilities. \nFigure 8.70 Source Gets Sink's EPR Capabilities\n: Protocol\n1: Send EPR_Get_EPR_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Sink_Cap\n3: EPR_Get_EPR_Sink_Cap + CRC\n4: EPR_Get_EPR_Sink_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Sink_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Sink_Capabilities\n11: EPR_Sink_Capabilities\n12: EPR_Sink_Capabilities + CRC\n13: EPR_Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet EPR Sink capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\nStop SenderResponseTimer\n18: EPR_Sink_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":7}
{"page":653,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 653\nTable 8.97, \"Steps for a Source getting Sink EPR Capabilities Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.70, \"Source Gets Sink's EPR Capabilities\" above.\nTable 8.97  Steps for a Source getting Sink EPR Capabilities Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nEPR_Get_Sink_Cap Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nEPR_Get_Sink_Cap Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Get_Sink_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Get_Sink_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Get_Sink_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Get_Sink_Cap Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Sink \nCapabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form an \nEPR_Sink_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nEPR_Sink_Capabilities Message.\nPHY Layer appends a CRC and sends the \nEPR_Sink_Capabilities Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Sink_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":654,"text":"Page 654\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Sink_Capabilities Message was successfully sent.\nThe Sink has informed the Source of its EPR Capabilities.\nTable 8.97  Steps for a Source getting Sink EPR Capabilities Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":655,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 655\n8.3.2.11.3.2.4\n  Dual-Role Sink Get Sink EPR Capabilities from a Dual-Role \nSource\nFigure 8.71, \"Dual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink\" shows an example sequence \nbetween a Dual-Role Power Source and a Dual-Role Power Sink when the Dual-Role Power Sink gets the Dual-Role \nPower Source Capabilities as a Sink. \nFigure 8.71 Dual-Role Sink Gets Dual-Role Source's Capabilities as an EPR Sink\n: Protocol\n1: Send EPR_Get_EPR_Sink_Cap\n: PHY\n: PHY\n: Protocol\n2:EPR_Get_EPR_Sink_Cap\n3: EPR_Get_EPR_Sink_Cap + CRC\n4: EPR_Get_EPR_Sink_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: EPR_Get_EPR_Sink_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:EPR_Get_EPR_Sink_Cap sent\nStart SenderResponseTimer\n10: Send EPR_Sink_Capabilities\n11: EPR_Sink_Capabilities\n12: EPR_Sink_Capabilities + CRC\n13: EPR_Sink_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: EPR_Sink_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet EPR Sink capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nDual-Role Sink Port\nDual-Role Source Port\nStop SenderResponseTimer\n18: EPR_Sink_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":656,"text":"Page 656\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.98, \"Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\" below \nprovides a detailed explanation of what happens at each labeled step in Figure 8.71, \"Dual-Role Sink Gets Dual-Role \nSource's Capabilities as an EPR Sink\" above.\nTable 8.98  Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\nStep\nDual-Role Sink Port\nDual-Role Source Port\n1\nThe Port has Port Power Role set to Dual-Role Power \nSink with the Rd pull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nEPR_Get_Sink_Cap Message.\nThe Port has Port Power Role set to Dual-Role Power \nSource and the Rp pull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nEPR_Get_Sink_Cap Message. Starts CRCReceiveTimer.\nPHY Layer receives the EPR_Get_Sink_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nEPR_Get_Sink_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Get_Sink_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Get_Sink_Cap Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Dual-\nRole Power Source Capabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form an \nEPR_Sink_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nEPR_Sink_Capabilities Message.\nPHY Layer appends a CRC and sends the \nEPR_Sink_Capabilities Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nEPR_Sink_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":657,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 657\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEPR_Sink_Capabilities Message was successfully sent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Capabilities as an EPR Sink.\nTable 8.98  Steps for a Dual-Role Sink getting Dual-Role Source Capabilities as an EPR Sink Sequence\nStep\nDual-Role Sink Port\nDual-Role Source Port\n","image_count":0,"table_count":2}
{"page":658,"text":"Page 658\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.4\n  Extended Capabilities\n8.3.2.11.4.1\n  Sink Gets Source Extended Capabilities\nFigure 8.72, \"Sink Gets Source's Extended Capabilities\" shows an example sequence between a Source and a Sink \nwhen the Sink gets the Source's Extended Capabilities. \nFigure 8.72 Sink Gets Source's Extended Capabilities\n: Protocol\n1: Send Get_Source_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap_Extended\n3: Get_Source_Cap_Extended + CRC\n4: Get_Source_Cap_Extended\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap_Extended \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Source_Capabilities_Extended\n11: Source_Capabilities_Extended\n12: Source_Capabilities_Extended\n+ CRC\n13: Source_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet extended Source \ncapability Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Source_Capabilities_Extended sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":7}
{"page":659,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 659\nTable 8.99, \"Steps for a Sink getting Source Extended Capabilities Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.72, \"Sink Gets Source's Extended Capabilities\" above.\nTable 8.99  Steps for a Sink getting Source Extended Capabilities Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Cap_Extended Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Cap_Extended Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Source_Cap_Extended \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Cap_Extended Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Cap_Extended Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Cap_Extended Message was successfully \nsent. Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nExtended Capabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Capabilities_Extended Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSource_Capabilities_Extended Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities_Extended Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities_Extended Message information to \nthe Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":660,"text":"Page 660\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities_Extended Message was \nsuccessfully sent.\nThe Source has informed the Sink of its Extended Capabilities.\nTable 8.99  Steps for a Sink getting Source Extended Capabilities Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":661,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 661\n8.3.2.11.4.2\n  Dual-Role Source Gets Source Capabilities Extended from a Dual-\nRole Sink\nFigure 8.73, \"Dual-Role Source Gets Dual-Role Sink's Extended Capabilities\" shows an example sequence between a \nSource and a Sink when the Dual-Role Power Source gets the Dual-Role Power Sink's Extended Capabilities as a \nSource. \nFigure 8.73 Dual-Role Source Gets Dual-Role Sink's Extended Capabilities\n: Protocol\n1: Send Get_Source_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Cap_Extended\n3: Get_Source_Cap_Extended + CRC\n4: Get_Source_Cap_Extended\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Cap_Extended \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Source_Capabilities_Extended\n11: Source_Capabilities_Extended\n12: Source_Capabilities_Extended\n+ CRC\n13: Source_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet extended Source \ncapability Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nDual-Role Source Port\nDual-Role Sink Port\nStop SenderResponseTimer\n18: Source_Capabilities_Extended sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":8}
{"page":662,"text":"Page 662\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.100, \"Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.73, \"Dual-Role Source Gets Dual-Role Sink's \nExtended Capabilities\" above.\nTable 8.100  Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Cap_Extended Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Cap_Extended Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Source_Cap_Extended \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Cap_Extended Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Cap_Extended Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Cap_Extended Message was successfully \nsent. Policy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Extended \nCapabilities as a Source which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Capabilities_Extended Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSource_Capabilities_Extended Message.\nPHY Layer appends a CRC and sends the \nSource_Capabilities_Extended Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSource_Capabilities_Extended Message information to \nthe Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":663,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 663\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Capabilities_Extended Message was \nsuccessfully sent.\nThe Dual-Role Power Sink has informed the Dual-Role Power Source of its Extended Capabilities as a Source.\nTable 8.100  Steps for a Dual-Role Source getting Dual-Role Sink Extended Capabilities Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n","image_count":0,"table_count":2}
{"page":664,"text":"Page 664\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.4.3\n  Source Gets Sink Extended Capabilities\nFigure 8.74, \"Source Gets Sink's Extended Capabilities\" shows an example sequence between a Source and a Sink \nwhen the Source gets the Sink's Extended Capabilities. \nFigure 8.74 Source Gets Sink's Extended Capabilities\n: Protocol\n1: Send Get_Sink_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap_Extended\n3: Get_Sink_Cap_Extended + CRC\n4: Get_Sink_Cap_Extended\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap_Extended \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities_Extended\n11: Sink_Capabilities_Extended\n12: Sink_Capabilities_Extended\n+ CRC\n13: Sink_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet extended Sink \ncapability Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Sink_Capabilities_Extended sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":10}
{"page":665,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 665\nTable 8.101, \"Steps for a Source getting Sink Extended Capabilities Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.74, \"Source Gets Sink's Extended Capabilities\" above.\nTable 8.101  Steps for a Source getting Sink Extended Capabilities Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Sink_Cap_Extended Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Cap_Extended Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Sink_Cap_Extended \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Sink_Cap_Extended Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Sink_Cap_Extended Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Sink_Cap_Extended Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Sink \nExtended Capabilities which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSink_Capabilities_Extended Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSink_Capabilities_Extended Message.\nPHY Layer appends a CRC and sends the \nSink_Capabilities_Extended Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSink_Capabilities_Extended Message information to \nthe Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":666,"text":"Page 666\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSink_Capabilities_Extended Message was successfully \nsent.\nThe Sink has informed the Source of its Extended Capabilities.\nTable 8.101  Steps for a Source getting Sink Extended Capabilities Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":667,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 667\n8.3.2.11.4.4\n  Dual-Role Sink Gets Sink Capabilities Extended from a Dual-Role \nSource\nFigure 8.75, \"Dual-Role Sink Gets Dual-Role Source's Extended Capabilities\" shows an example sequence between a \nSource and a Sink when the Dual-Role Power Sink gets the Dual-Role Power Source's Extended Capabilities as a Sink. \nFigure 8.75 Dual-Role Sink Gets Dual-Role Source's Extended Capabilities\n: Protocol\n1: Send Get_Sink_Cap_Extended\n: PHY\n: PHY\n: Protocol\n2:Get_Sink_Cap_Extended\n3: Get_Sink_Cap_Extended + CRC\n4: Get_Sink_Cap_Extended\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Sink_Cap_Extended \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Sink_Cap_Extended sent\nStart SenderResponseTimer\n10: Send Sink_Capabilities_Extended\n11: Sink_Capabilities_Extended\n12: Sink_Capabilities_Extended\n+ CRC\n13: Sink_Capabilities_Extended\nCheck MessageID against local copy\nStore copy of MessageID\n14: Sink_Capabilities_Extended\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet extended Sink \ncapability Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nDual-Role Sink Port\nDual-Role Source Port\nStop SenderResponseTimer\n18: Sink_Capabilities_Extended sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":8}
{"page":668,"text":"Page 668\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.102, \"Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.75, \"Dual-Role Sink Gets Dual-Role Source's \nExtended Capabilities\" above.\nTable 8.102  Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Sink_Cap_Extended Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Sink_Cap_Extended Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Sink_Cap_Extended \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Sink_Cap_Extended Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Sink_Cap_Extended Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Sink_Cap_Extended Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Extended \nCapabilities as a Sink which are provided. \nThe Policy Engine tells the Protocol Layer to form a \nSink_Capabilities_Extended Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSink_Capabilities_Extended Message.\nPHY Layer appends a CRC and sends the \nSink_Capabilities_Extended Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSink_Capabilities_Extended Message information to \nthe Policy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":669,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 669\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSink_Capabilities_Extended Message was successfully \nsent.\nThe Dual-Role Power Source has informed the Dual-Role Power Sink of its Extended Capabilities as a Sink.\nTable 8.102  Steps for a Dual-Role Sink getting Dual-Role Source Extended Capabilities Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n","image_count":0,"table_count":2}
{"page":670,"text":"Page 670\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.5\n  Battery Capabilities and Status\n8.3.2.11.5.1\n  Sink Gets Battery Capabilities\nFigure 8.76, \"Sink Gets Source's Battery Capabilities\" shows an example sequence between a Source and a Sink when \nthe Sink gets the Source's Battery capabilities for a given Battery. \nFigure 8.76 Sink Gets Source's Battery Capabilities\n: Protocol\n1: Send Get_Battery_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Cap\n3: Get_Battery_Cap + CRC\n4: Get_Battery_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Cap sent\nStart SenderResponseTimer\n10: Send Battery_Capabilities\n11: Battery_Capabilities\n12: Battery_Capabilities + CRC\n13: Battery_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Battery capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Battery_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":671,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 671\nTable 8.103, \"Steps for a Sink getting Source Battery capabilities Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.76, \"Sink Gets Source's Battery Capabilities\" above.\nTable 8.103  Steps for a Sink getting Source Battery capabilities Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Battery_Cap Message containing the number of the \nBattery for which capabilities are being requested.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Battery_Cap Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Battery_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Battery_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Battery_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Battery_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nBattery capabilities, for the requested Battery number, \nwhich are provided. \nThe Policy Engine tells the Protocol Layer to form a \nBattery_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nBattery_Capabilities Message.\nPHY Layer appends a CRC and sends the \nBattery_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nBattery_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":672,"text":"Page 672\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nBattery_Capabilities Message was successfully sent.\nThe Source has informed the Sink of the Battery capabilities for the requested Battery.\nTable 8.103  Steps for a Sink getting Source Battery capabilities Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":673,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 673\n8.3.2.11.5.2\n  Source Gets Battery Capabilities\nFigure 8.77, \"Source Gets Sink's Battery Capabilities\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's Battery capabilities for a given Battery.\nFigure 8.77 Source Gets Sink's Battery Capabilities\n: Protocol\n1: Send Get_Battery_Cap\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Cap\n3: Get_Battery_Cap + CRC\n4: Get_Battery_Cap\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Cap received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Cap sent\nStart SenderResponseTimer\n10: Send Battery_Capabilities\n11: Battery_Capabilities\n12: Battery_Capabilities + CRC\n13: Battery_Capabilities\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Capabilities received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Battery capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\nStop SenderResponseTimer\n18: Battery_Capabilities sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":674,"text":"Page 674\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.104, \"Steps for a Source getting Sink Battery capabilities Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.77, \"Source Gets Sink's Battery Capabilities\" above.\nTable 8.104  Steps for a Source getting Sink Battery capabilities Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Battery_Cap Message containing the number of the \nBattery for which capabilities are being requested.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Battery_Cap Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Battery_Cap Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Battery_Cap Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Battery_Cap Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Battery_Cap Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nBattery capabilities, for the requested Battery number, \nwhich are provided. \nThe Policy Engine tells the Protocol Layer to form a \nBattery_Capabilities Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nBattery_Capabilities Message.\nPHY Layer appends a CRC and sends the \nBattery_Capabilities Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nBattery_Capabilities Message information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":675,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 675\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nBattery_Capabilities Message was successfully sent.\nThe Sink has informed the Source of the Battery capabilities for the requested Battery.\nTable 8.104  Steps for a Source getting Sink Battery capabilities Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":676,"text":"Page 676\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.5.3\n  Sink Gets Battery Status\nFigure 8.78, \"Sink Gets Source's Battery Status\" shows an example sequence between a Source and a Sink when the \nSink gets the Source's Battery status for a given Battery. \nFigure 8.78 Sink Gets Source's Battery Status\n: Protocol\n1: Send Get_Battery_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Status\n3: Get_Battery_Status + CRC\n4: Get_Battery_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Status sent\nStart SenderResponseTimer\n10: Send Battery_Status\n11: Battery_Status\n12: Battery_Status + CRC\n13: Battery_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Battery status \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Battery_Status sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":677,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 677\nTable 8.105, \"Steps for a Sink getting Source Battery status Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.78, \"Sink Gets Source's Battery Status\" above.\nTable 8.105  Steps for a Sink getting Source Battery status Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Battery_Status Message containing the number of \nthe Battery for which status is being requested.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Battery_Status Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Battery_Status Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Battery_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Battery_Status Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Battery_Status Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nBattery status, for the requested Battery number, which \nare provided. \nThe Policy Engine tells the Protocol Layer to form a \nBattery_Status Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nBattery_Status Message.\nPHY Layer appends a CRC and sends the Battery_Status \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nBattery_Status Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":678,"text":"Page 678\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nBattery_Status Message was successfully sent.\nThe Source has informed the Sink of the Battery status for the requested Battery.\nTable 8.105  Steps for a Sink getting Source Battery status Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":679,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 679\n8.3.2.11.5.4\n  Source Gets Battery Status\nFigure 8.79, \"Source Gets Sink's Battery Status\" shows an example sequence between a Source and a Sink when the \nSource gets the Sink's Battery status for a given Battery. \nFigure 8.79 Source Gets Sink's Battery Status\n: Protocol\n1: Send Get_Battery_Status\n: PHY\n: PHY\n: Protocol\n2:Get_Battery_Status\n3: Get_Battery_Status + CRC\n4: Get_Battery_Status\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Battery_Status received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Battery_Status sent\nStart SenderResponseTimer\n10: Send Battery_Status\n11: Battery_Status\n12: Battery_Status + CRC\n13: Battery_Status\nCheck MessageID against local copy\nStore copy of MessageID\n14: Battery_Status received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Battery status \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\nStop SenderResponseTimer\n18: Battery_Status sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":10}
{"page":680,"text":"Page 680\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.106, \"Steps for a Source getting Sink Battery status Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.79, \"Source Gets Sink's Battery Status\" above.\nTable 8.106  Steps for a Source getting Sink Battery status Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Battery_Status Message containing the number of \nthe Battery for which status is being requested.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Battery_Status Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Battery_Status Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Battery_Status Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Battery_Status Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Battery_Status Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \nBattery status, for the requested Battery number, which \nare provided. \nThe Policy Engine tells the Protocol Layer to form a \nBattery_Status Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nBattery_Status Message.\nPHY Layer appends a CRC and sends the Battery_Status \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nBattery_Status Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":681,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 681\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nBattery_Status Message was successfully sent.\nThe Sink has informed the Source of the Battery status for the requested Battery.\nTable 8.106  Steps for a Source getting Sink Battery status Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":682,"text":"Page 682\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.6\n  Manufacturer Information\n8.3.2.11.6.1\n  Source Gets Port Manufacturer Information from a Sink\nFigure 8.80, \"Source Gets Sink's Port Manufacturer Information\" shows an example sequence between a Source and \na Sink when the Source gets the Sink's Manufacturer information for the Port. \nFigure 8.80 Source Gets Sink's Port Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info\n12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Manufacturer \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":10}
{"page":683,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 683\nTable 8.107, \"Steps for a Source getting Sink's Port Manufacturer Information Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.80, \"Source Gets Sink's Port Manufacturer Information\" \nabove.\nTable 8.107  Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Manufacturer_Info Message with a request for \nPort information.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Manufacturer_Info Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Manufacturer_Info Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Manufacturer_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Manufacturer_Info Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Manufacturer_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nManufacturer_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nManufacturer_Info Message.\nPHY Layer appends a CRC and sends the \nManufacturer_Info Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nManufacturer_Info Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":684,"text":"Page 684\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the Port.\nTable 8.107  Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":685,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 685\n8.3.2.11.6.2\n  Sink Gets Port Manufacturer Information from a Source\nFigure 8.81, \"Sink Gets Source's Port Manufacturer Information\" shows an example sequence between a Source and \na Sink when the Source gets the Sink's Manufacturer information for the Port. \nFigure 8.81 Sink Gets Source's Port Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info\n12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Manufacturer \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":8}
{"page":686,"text":"Page 686\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.108, \"Steps for a Source getting Sink's Port Manufacturer Information Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.81, \"Sink Gets Source's Port Manufacturer Information\" \nabove.\nTable 8.108  Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Manufacturer_Info Message with a request for \nPort information.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Manufacturer_Info Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Manufacturer_Info Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Manufacturer_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Manufacturer_Info Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Manufacturer_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nManufacturer_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nManufacturer_Info Message.\nPHY Layer appends a CRC and sends the \nManufacturer_Info Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nManufacturer_Info Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":687,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 687\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the Port.\nTable 8.108  Steps for a Source getting Sink's Port Manufacturer Information Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":688,"text":"Page 688\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.6.3\n  Source Gets Battery Manufacturer Information from a Sink\nFigure 8.82, \"Source Gets Sink's Battery Manufacturer Information\" shows an example sequence between a Source \nand a Sink when the Source gets the Sink's Manufacturer information for one of its Batteries. \nFigure 8.82 Source Gets Sink's Battery Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info\n12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Manufacturer \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":10}
{"page":689,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 689\nTable 8.109, \"Steps for a Source getting Sink's Battery Manufacturer Information Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.82, \"Source Gets Sink's Battery Manufacturer \nInformation\" above.\nTable 8.109  Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Manufacturer_Info Message with a request for \nBattery information for a given Battery.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Manufacturer_Info Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Manufacturer_Info \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Manufacturer_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Manufacturer_Info Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Manufacturer_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Battery’s \nmanufacturer information for a given Battery which is \nprovided. \nThe Policy Engine tells the Protocol Layer to form a \nManufacturer_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nManufacturer_Info Message.\nPHY Layer appends a CRC and sends the \nManufacturer_Info Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nManufacturer_Info Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":690,"text":"Page 690\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the requested Battery.\nTable 8.109  Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":691,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 691\n8.3.2.11.6.4\n  Sink Gets Battery Manufacturer Information from a Source\nFigure 8.83, \"Sink Gets Source's Battery Manufacturer Information\" shows an example sequence between a Source \nand a Sink when the Source gets the Sink's Manufacturer information for the Port. \nFigure 8.83 Sink Gets Source's Battery Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info\n12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Manufacturer \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":9}
{"page":692,"text":"Page 692\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.110, \"Steps for a Source getting Sink's Battery Manufacturer Information Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.83, \"Sink Gets Source's Battery Manufacturer \nInformation\" above.\nTable 8.110  Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Manufacturer_Info Message with a request for \nBattery information for a given Battery.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Manufacturer_Info Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Manufacturer_Info \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Manufacturer_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Manufacturer_Info Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Manufacturer_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Battery’s \nmanufacturer information for a given Battery which is \nprovided. \nThe Policy Engine tells the Protocol Layer to form a \nManufacturer_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nManufacturer_Info Message.\nPHY Layer appends a CRC and sends the \nManufacturer_Info Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nManufacturer_Info Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n","image_count":0,"table_count":2}
{"page":693,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 693\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nManufacturer_Info Message was successfully sent.\nThe Sink has informed the Source of the manufacturer information for the requested Battery.\nTable 8.110  Steps for a Source getting Sink's Battery Manufacturer Information Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":694,"text":"Page 694\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.6.5\n  VCONN Source Gets Manufacturer Information from a Cable Plug\nFigure 8.84, \"VCONN Source Gets Cable Plug's Manufacturer Information\" shows an example sequence between a \nVCONN Source (Source or Sink) and a Cable Plug when the VCONN Source gets the Cable Plug's Manufacturer \ninformation. \nFigure 8.84 VCONN Source Gets Cable Plug's Manufacturer Information\n: Protocol\n1: Send Get_Manufacturer_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Manufacturer_Info\n3: Get_Manufacturer_Info + CRC\n4: Get_Manufacturer_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Manufacturer_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Manufacturer_Info sent\nStart SenderResponseTimer\n10: Send Manufacturer_Info\n11: Manufacturer_Info\n12: Manufacturer_Info\n+ CRC\n13: Manufacturer_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Manufacturer_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Manufacturer \nInformation from DPM\n: Policy Engine\n: Policy Engine\nCable Plug\nVCONN Source Port\nStop SenderResponseTimer\n18: Manufacturer_Info sent\n","image_count":7,"table_count":8}
{"page":695,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 695\nTable 8.111, \"Steps for a VCONN Source getting Sink's Port Manufacturer Information Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.84, \"VCONN Source Gets Cable Plug's \nManufacturer Information\" above.\nTable 8.111  Steps for a VCONN Source getting Sink's Port Manufacturer Information Sequence\nStep\nVCONN Source\nCable Plug\n1\nThe Port is currently acting as the VCONN Source.\nPolicy Engine directs the Protocol Layer to send a \nGet_Manufacturer_Info Message with a request for \nPort information.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Manufacturer_Info Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Get_Manufacturer_Info \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Manufacturer_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Manufacturer_Info Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Manufacturer_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Cable Plug’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nManufacturer_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nManufacturer_Info Message.\nPHY Layer appends a CRC and sends the \nManufacturer_Info Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nManufacturer_Info Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":696,"text":"Page 696\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nManufacturer_Info Message was successfully sent.\nThe Cable Plug has informed the Source of its manufacturer information.\nTable 8.111  Steps for a VCONN Source getting Sink's Port Manufacturer Information Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":697,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 697\n8.3.2.11.7\n  Country Codes\n8.3.2.11.7.1\n  8.3.2.12.7.1Source Gets Country Codes from a Sink\nFigure 8.85, \"Source Gets Sink's Country Codes\" shows an example sequence between a Source and a Sink when the \nSource gets the Sink's Country Codes. \nFigure 8.85 Source Gets Sink's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes\n12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Country Codes \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Country_Codes sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":10}
{"page":698,"text":"Page 698\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.112, \"Steps for a Source getting Country Codes Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.85, \"Source Gets Sink's Country Codes\" above.\nTable 8.112  Steps for a Source getting Country Codes Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Codes Message with a request for Port \ninformation.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Codes Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Codes Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Codes Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Codes Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Codes Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Codes Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Codes Message.\nPHY Layer appends a CRC and sends the \nCountry_Codes Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nCountry_Codes Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":699,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 699\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Codes Message was successfully sent.\nThe Sink has informed the Source of the country codes.\nTable 8.112  Steps for a Source getting Country Codes Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":700,"text":"Page 700\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.7.2\n  Sink Gets Country Codes from a Source\nFigure 8.86, \"Sink Gets Source's Country Codes\" shows an example sequence between a Source and a Sink when the \nSource gets the Sink's country codes. \nFigure 8.86 Sink Gets Source's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes\n12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet country codes \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Country_Codes sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":701,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 701\nTable 8.113, \"Steps for a Source getting Sink's Country Codes Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.86, \"Sink Gets Source's Country Codes\" above.\nTable 8.113  Steps for a Source getting Sink's Country Codes Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Codes Message with a request for Port \ninformation.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Codes Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Codes Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Codes Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Codes Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Codes Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Codes Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Codes Message.\nPHY Layer appends a CRC and sends the \nCountry_Codes Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nCountry_Codes Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":702,"text":"Page 702\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Codes Message was successfully sent.\nThe Sink has informed the Source of the country codes.\nTable 8.113  Steps for a Source getting Sink's Country Codes Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":703,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 703\n8.3.2.11.7.3\n  VCONN Source Gets Country Codes from a Cable Plug\nFigure 8.87, \"VCONN Source Gets Cable Plug's Country Codes\" shows an example sequence between a VCONN Source \n(Source or Sink) and a Cable Plug when the VCONN Source gets the Cable Plug's Country Codes. \nFigure 8.87 VCONN Source Gets Cable Plug's Country Codes\n: Protocol\n1: Send Get_Country_Codes\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Codes\n3: Get_Country_Codes + CRC\n4: Get_Country_Codes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Codes \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Codes sent\nStart SenderResponseTimer\n10: Send Country_Codes\n11: Country_Codes\n12: Country_Codes\n+ CRC\n13: Country_Codes\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Codes\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet country codes from \nDPM\n: Policy Engine\n: Policy Engine\nCable Plug\nVCONN Source Port\nStop SenderResponseTimer\n18: Country_Codes sent\n","image_count":7,"table_count":8}
{"page":704,"text":"Page 704\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.114, \"Steps for a VCONN Source getting Sink's Country Codes Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.87, \"VCONN Source Gets Cable Plug's Country Codes\" above.\nTable 8.114  Steps for a VCONN Source getting Sink's Country Codes Sequence\nStep\nVCONN Source\nCable Plug\n1\nThe Port is currently acting as the VCONN Source.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Codes Message with a request for Port \ninformation.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Codes Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Codes Message \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Codes Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Codes Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Codes Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Cable Plug’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Codes Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Codes Message.\nPHY Layer appends a CRC and sends the Country_Codes \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nCountry_Codes Message information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":705,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 705\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Codes Message was successfully sent.\nThe Cable Plug has informed the Source of its country codes.\nTable 8.114  Steps for a VCONN Source getting Sink's Country Codes Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":706,"text":"Page 706\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.8\n  Country Information\n8.3.2.11.8.1\n  Source Gets Country Information from a Sink\nFigure 8.88, \"Source Gets Sink's Country Information\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's country information. \nFigure 8.88 Source Gets Sink's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info\n12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Country Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Country_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":10}
{"page":707,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 707\nTable 8.115, \"Steps for a Source getting Country Information Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.88, \"Source Gets Sink's Country Information\" above.\nTable 8.115  Steps for a Source getting Country Information Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Info Message with a request for Port \ninformation for a specific Country Code.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Info Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Info Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Info Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Info Message.\nPHY Layer appends a CRC and sends the Country_Info \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":708,"text":"Page 708\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Info Message was successfully sent.\nThe Sink has informed the Source of the country information.\nTable 8.115  Steps for a Source getting Country Information Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":709,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 709\n8.3.2.11.8.2\n  Sink Gets Country Information from a Source\nFigure 8.89, \"Sink Gets Source's Country Information\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's country codes. \nFigure 8.89 Sink Gets Source's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info\n12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet country information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Country_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":9}
{"page":710,"text":"Page 710\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.116, \"Steps for a Source getting Sink's Country Information Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.89, \"Sink Gets Source's Country Information\" above.\nTable 8.116  Steps for a Source getting Sink's Country Information Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Info Message with a request for Port \ninformation for a specific country code.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Info Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Info Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Info Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Info Message.\nPHY Layer appends a CRC and sends the Country_Info \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":711,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 711\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Info Message was successfully sent.\nThe Sink has informed the Source of the country information.\nTable 8.116  Steps for a Source getting Sink's Country Information Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":712,"text":"Page 712\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.8.3\n  VCONN Source Gets Country Information from a Cable Plug\nFigure 8.90, \"VCONN Source Gets Cable Plug's Country Information\" shows an example sequence between a VCONN \nSource (Source or Sink) and a Cable Plug when the VCONN Source gets the Cable Plug's country information. \nFigure 8.90 VCONN Source Gets Cable Plug's Country Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info\n12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Country Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nCable Plug\nVCONN Source Port\nStop SenderResponseTimer\n18: Country_Info sent\n","image_count":7,"table_count":8}
{"page":713,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 713\nTable 8.117, \"Steps for a VCONN Source getting Sink's Country Information Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.90, \"VCONN Source Gets Cable Plug's Country \nInformation\" above.\nTable 8.117  Steps for a VCONN Source getting Sink's Country Information Sequence\nStep\nVCONN Source\nCable Plug\n1\nThe Port is currently acting as the VCONN Source.\nPolicy Engine directs the Protocol Layer to send a \nGet_Country_Info Message with a request for Port \ninformation for a specific country code.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Country_Info Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Country_Info Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Country_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Country_Info Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Country_Info Message was successfully sent. \nPolicy Engine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Cable Plug’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nCountry_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nCountry_Info Message.\nPHY Layer appends a CRC and sends the Country_Info \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Country_Info \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":714,"text":"Page 714\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nCountry_Info Message was successfully sent.\nThe Cable Plug has informed the Source of its country information.\nTable 8.117  Steps for a VCONN Source getting Sink's Country Information Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":715,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 715\n8.3.2.11.9\n  Revision Information\n8.3.2.11.9.1\n  Source Gets Revision Information from a Sink\nFigure 8.91, \"Source Gets Sink's Revision Information\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's Revision information. \nFigure 8.91 Source Gets Sink's Revision Information\n: Protocol\n1: Send Get_Revision\n: PHY\n: PHY\n: Protocol\n2:Get_Revision\n3: Get_Revision + CRC\n4: Get_Revision\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Revision \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Revision sent\nStart SenderResponseTimer\n10: Send Revision\n11: Revision\n12: Revision\n+ CRC\n13: Revision\nCheck MessageID against local copy\nStore copy of MessageID\n14: Revision\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Country Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Revision sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":9}
{"page":716,"text":"Page 716\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.118, \"Steps for a Source getting Revision Information Sequence\" below provides a detailed explanation of \nwhat happens at each labeled step in Figure 8.91, \"Source Gets Sink's Revision Information\" above.\nTable 8.118  Steps for a Source getting Revision Information Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Revision Message with a request for Port \ninformation for a specific Revision Code.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Revision \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Revision Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Revision Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Revision Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nRevision Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nRevision_Info Message.\nPHY Layer appends a CRC and sends the Revision \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":717,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 717\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nRevision Message was successfully sent.\nThe Sink has informed the Source of the Revision information.\nTable 8.118  Steps for a Source getting Revision Information Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":718,"text":"Page 718\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.9.2\n  Sink Gets Revision Information from a Source\nFigure 8.92, \"Sink Gets Source's Revision Information\" shows an example sequence between a Source and a Sink when \nthe Source gets the Sink's Revision codes. \nFigure 8.92 Sink Gets Source's Revision Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info\n12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet country information \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Country_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":9}
{"page":719,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 719\nTable 8.119, \"Steps for a Source getting Sink's Revision Information Sequence\" below provides a detailed explanation \nof what happens at each labeled step in Figure 8.92, \"Sink Gets Source's Revision Information\" above.\nTable 8.119  Steps for a Source getting Sink's Revision Information Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Revision Message with a request for Port \ninformation for a specific Revision code.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Revision \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Revision Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Revision Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Revision Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Port’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nRevision Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nRevision_Info Message.\nPHY Layer appends a CRC and sends the Revision \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":720,"text":"Page 720\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nRevision Message was successfully sent.\nThe Sink has informed the Source of the Revision information.\nTable 8.119  Steps for a Source getting Sink's Revision Information Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":721,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 721\n8.3.2.11.9.3\n  VCONN Source Gets Revision Information from a Cable Plug\nFigure 8.93, \"VCONN Source Gets Cable Plug's Revision Information\" shows an example sequence between a VCONN \nSource (Source or Sink) and a Cable Plug when the VCONN Source gets the Cable Plug's Revision information. \nFigure 8.93 VCONN Source Gets Cable Plug's Revision Information\n: Protocol\n1: Send Get_Country_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Country_Info\n3: Get_Country_Info + CRC\n4: Get_Country_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Country_Info \nreceived\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Country_Info sent\nStart SenderResponseTimer\n10: Send Country_Info\n11: Country_Info\n12: Country_Info\n+ CRC\n13: Country_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Country_Info\nreceived\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Country Information \nfrom DPM\n: Policy Engine\n: Policy Engine\nCable Plug\nVCONN Source Port\nStop SenderResponseTimer\n18: Country_Info sent\n","image_count":7,"table_count":8}
{"page":722,"text":"Page 722\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.120, \"Steps for a VCONN Source getting Sink's Revision Information Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.93, \"VCONN Source Gets Cable Plug's Revision \nInformation\" above.\nTable 8.120  Steps for a VCONN Source getting Sink's Revision Information Sequence\nStep\nVCONN Source\nCable Plug\n1\nThe Port is currently acting as the VCONN Source.\nPolicy Engine directs the Protocol Layer to send a \nGet_Revision Message with a request for Port \ninformation for a specific Revision code.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Get_Revision \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Revision Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Revision Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Get_Revision \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Revision Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the Cable Plug’s \nmanufacturer information which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nRevision Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Revision \nMessage.\nPHY Layer appends a CRC and sends the Revision \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Revision \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":723,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 723\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nRevision Message was successfully sent.\nThe Cable Plug has informed the Source of its Revision information.\nTable 8.120  Steps for a VCONN Source getting Sink's Revision Information Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":724,"text":"Page 724\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.11.10\n  Source Information\n8.3.2.11.10.1\n  Sink Gets Source Information\nFigure 8.94, \"Sink Gets Source's Information\" shows an example sequence between a Source and a Sink when the Sink \ngets the Source's information. \nFigure 8.94 Sink Gets Source's Information\n: Protocol\n1: Send Get_Source_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Info\n3: Get_Source_Info + CRC\n4: Get_Source_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Info received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Info sent\nStart SenderResponseTimer\n10: Send Source_Info\n11: Source_Info\n12: Source_Info + CRC\n13: Source_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Info received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\nStop SenderResponseTimer\n18: Source_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":725,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 725\nTable 8.121, \"Steps for a Sink getting Source Information Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.94, \"Sink Gets Source's Information\" above.\nTable 8.121  Steps for a Sink getting Source Information Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Info Message.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Info Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Source_Info Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Info Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Info Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \ninformation which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Source_Info \nMessage.\nPHY Layer appends a CRC and sends the Source_Info \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Source_Info \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":726,"text":"Page 726\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Info Message was successfully sent.\nThe Source has provided the Sink with its information.\nTable 8.121  Steps for a Sink getting Source Information Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":727,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 727\n8.3.2.11.10.2\n  Dual-Role Source Gets Source Information from a Dual-Role Sink\nFigure 8.95, \"Dual-Role Source Gets Dual-Role Sink's Information as a Source\" shows an example sequence between \na Dual-Role Power Source and a Dual-Role Power Sink when the Source gets the Sink's Information as a Source. \nFigure 8.95 Dual-Role Source Gets Dual-Role Sink's Information as a Source\n: Protocol\n1: Send Get_Source_Info\n: PHY\n: PHY\n: Protocol\n2:Get_Source_Info\n3: Get_Source_Info + CRC\n4: Get_Source_Info\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Get_Source_Info received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Get_Source_Info sent\nStart SenderResponseTimer\n10: Send Source_Info\n11: Source_Info\n12: Source_Info + CRC\n13: Source_Info\nCheck MessageID against local copy\nStore copy of MessageID\n14: Source_Info received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet Source capability \nInformation from DPM\n: Policy Engine\n: Policy Engine\nDual-Role Source Port\nDual-Role Sink Port\nStop SenderResponseTimer\n18: Source_Info sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":9}
{"page":728,"text":"Page 728\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.122, \"Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\" below \nprovides a detailed explanation of what happens at each labeled step in Figure 8.95, \"Dual-Role Source Gets Dual-\nRole Sink's Information as a Source\" above.\nTable 8.122  Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nGet_Source_Info Message.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nGet_Source_Info Message. Starts CRCReceiveTimer.\nPHY Layer receives the Get_Source_Info Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nGet_Source_Info Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nGet_Source_Info Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nGet_Source_Info Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine requests the DPM for the present Source \ninformation which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nSource_Info Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Source_Info \nMessage.\nPHY Layer appends a CRC and sends the Source_Info \nMessage. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Source_Info \nMessage information to the Policy Engine that \nconsumes it.\n14\nThe Policy Engine stops the SenderResponseTimer.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":729,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 729\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSource_Info Message was successfully sent.\nThe Dual-Role Power Sink has provided the Dual-Role Power Source with its information.\nTable 8.122  Steps for a Dual-Role Source getting Dual-Role Sink's Information as a Source Sequence\nStep\nDual-Role Source Port\nDual-Role Sink Port\n","image_count":0,"table_count":2}
{"page":730,"text":"Page 730\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.12\n  Security\n8.3.2.12.1\n  Source requests security exchange with Sink\nFigure 8.96, \"Source requests security exchange with Sink\" shows an example sequence for a security exchange \nbetween a Source and a Sink. \nFigure 8.96 Source requests security exchange with Sink\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet security response \nfrom DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\n18: Security_Response sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":11}
{"page":731,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 731\nTable 8.123, \"Steps for a Source requesting a security exchange with a Sink Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.96, \"Source requests security exchange with Sink\" \nabove.\nTable 8.123  Steps for a Source requesting a security exchange with a Sink Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nSecurity_Request Message using a Payload supplied by \nthe DPM.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSecurity_Request Message. Starts CRCReceiveTimer.\nPHY Layer receives the Security_Request Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSecurity_Request Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Request Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Request Message was successfully sent. \n10\nPolicy Engine requests the DPM for the response to the \nsecurity request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nSecurity_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSecurity_Response Message.\nPHY Layer appends a CRC and sends the \nSecurity_Response Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Response Message information to the Policy \nEngine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":732,"text":"Page 732\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Response Message was successfully sent.\nThe security exchange is complete.\nTable 8.123  Steps for a Source requesting a security exchange with a Sink Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":733,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 733\n8.3.2.12.2\n  Sink requests security exchange with Source\nFigure 8.97, \"Sink requests security exchange with Source\" shows an example sequence for a security exchange \nbetween a Sink and a Source. \nFigure 8.97 Sink requests security exchange with Source\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet security response \nfrom DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\n18: Security_Response sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":8,"table_count":12}
{"page":734,"text":"Page 734\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.124, \"Steps for a Sink requesting a security exchange with a Source Sequence\" below provides a detailed \nexplanation of what happens at each labeled step in Figure 8.97, \"Sink requests security exchange with Source\" \nabove.\nTable 8.124  Steps for a Sink requesting a security exchange with a Source Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nSecurity_Request Message using a Payload supplied by \nthe DPM.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSecurity_Request Message. Starts CRCReceiveTimer.\nPHY Layer receives the Security_Request Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSecurity_Request Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Request Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Request Message was successfully sent. \n10\nPolicy Engine requests the DPM for the response to the \nsecurity request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nSecurity_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSecurity_Response Message.\nPHY Layer appends a CRC and sends the \nSecurity_Response Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Response Message information to the Policy \nEngine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":735,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 735\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Response Message was successfully sent.\nThe security exchange is complete.\nTable 8.124  Steps for a Sink requesting a security exchange with a Source Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":736,"text":"Page 736\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.12.3\n  VCONN Source requests security exchange with Cable Plug\nFigure 8.98, \"VCONN Source requests security exchange with Cable Plug\" shows an example sequence for a security \nexchange between a VCONN Source and a Cable Plug. \nFigure 8.98 VCONN Source requests security exchange with Cable Plug\n: Protocol\n1: Send Security_Request\n: PHY\n: PHY\n: Protocol\n2:Security_Request\n3: Security_Request + CRC\n4: Security_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Security_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Security_Request sent\n10: Send Security_Response\n11: Security_Response\n12: Security_Response + CRC\n13: Security_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Security_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet security response \nfrom DPM\n: Policy Engine\n: Policy Engine\nVconn Source\nCable Plug\n18: Security_Response sent\n","image_count":8,"table_count":9}
{"page":737,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 737\nTable 8.125, \"Steps for a VCONN Source requesting a security exchange with a Cable Plug Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.98, \"VCONN Source requests security exchange \nwith Cable Plug\" above.\nTable 8.125  Steps for a VCONN Source requesting a security exchange with a Cable Plug Sequence\nStep\nVCONN Source\nCable Plug\n1\nPolicy Engine directs the Protocol Layer to send a \nSecurity_Request Message using a Payload supplied by \nthe DPM.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nSecurity_Request Message. Starts CRCReceiveTimer.\nPHY Layer receives the Security_Request Message and \nchecks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nSecurity_Request Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Request Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Request Message was successfully sent. \n10\nPolicy Engine requests the DPM for the response to the \nsecurity request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nSecurity_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nSecurity_Response Message.\nPHY Layer appends a CRC and sends the \nSecurity_Response Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nSecurity_Response Message information to the Policy \nEngine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":738,"text":"Page 738\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nSecurity_Response Message was successfully sent.\nThe security exchange is complete.\nTable 8.125  Steps for a VCONN Source requesting a security exchange with a Cable Plug Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":739,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 739\n8.3.2.13\n  Firmware Update\n8.3.2.13.1\n  Source requests firmware update exchange with Sink\nFigure 8.99, \"Source requests firmware update exchange with Sink\" shows an example sequence for a firmware \nupdate exchange between a Source and a Sink. \nFigure 8.99 Source requests firmware update exchange with Sink\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC\n4: Firmware_Update_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet firmware update \nresponse from DPM\n: Policy Engine\n: Policy Engine\nSource Port\nSink Port\n18: Firmware_Update_Response sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":6}
{"page":740,"text":"Page 740\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.126, \"Steps for a Source requesting a firmware update exchange with a Sink Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.99, \"Source requests firmware update \nexchange with Sink\" above.\nTable 8.126  Steps for a Source requesting a firmware update exchange with a Sink Sequence\nStep\nSource Port\nSink Port\n1\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nFirmware_Update_Request Message using a Payload \nsupplied by the DPM.\nThe Port has Port Power Role set to Sink with the Rd pull \ndown on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nFirmware_Update_Request Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Firmware_Update_Request \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nFirmware_Update_Request Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Request Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Request Message was successfully \nsent.\n10\nPolicy Engine requests the DPM for the response to the \nfirmware update request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nFirmware_Update_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nFirmware_Update_Response Message.\nPHY Layer appends a CRC and sends the \nFirmware_Update_Response Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Response Message information to \nthe Policy Engine that consumes it.\n","image_count":0,"table_count":2}
{"page":741,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 741\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Response Message was successfully \nsent.\nThe firmware update exchange is complete.\nTable 8.126  Steps for a Source requesting a firmware update exchange with a Sink Sequence\nStep\nSource Port\nSink Port\n","image_count":0,"table_count":2}
{"page":742,"text":"Page 742\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.13.2\n  Sink requests firmware update exchange with Source\nFigure 8.100, \"Sink requests firmware update exchange with Source\" shows an example sequence for a firmware \nupdate exchange between a Sink and a Source. \nFigure 8.100 Sink requests firmware update exchange with Source\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC\n4: Firmware_Update_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet firmware update \nresponse from DPM\n: Policy Engine\n: Policy Engine\nSink Port\nSource Port\n18: Firmware_Update_Response sent\nPort Power Role = Source\nCC = Rp\nPort Power Role = Sink\nCC = Rd\n","image_count":7,"table_count":6}
{"page":743,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 743\nTable 8.127, \"Steps for a Sink requesting a firmware update exchange with a Source Sequence\" below provides a \ndetailed explanation of what happens at each labeled step in Figure 8.100, \"Sink requests firmware update exchange \nwith Source\" above.\nTable 8.127  Steps for a Sink requesting a firmware update exchange with a Source Sequence\nStep\nSink Port\nSource Port\n1\nThe Port has Port Power Role set to Sink with the Rd \npull down on its CC wire.\nPolicy Engine directs the Protocol Layer to send a \nFirmware_Update_Request Message using a Payload \nsupplied by the DPM.\nThe Port has Port Power Role set to Source and the Rp \npull up on its CC wire.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nFirmware_Update_Request Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Firmware_Update_Request \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nFirmware_Update_Request Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Request Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Request Message was successfully \nsent.\n10\nPolicy Engine requests the DPM for the response to the \nfirmware update request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nFirmware_Update_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nFirmware_Update_Response Message.\nPHY Layer appends a CRC and sends the \nFirmware_Update_Response Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Response Message information to \nthe Policy Engine that consumes it.\n","image_count":0,"table_count":2}
{"page":744,"text":"Page 744\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Response Message was successfully \nsent.\nThe firmware update exchange is complete.\nTable 8.127  Steps for a Sink requesting a firmware update exchange with a Source Sequence\nStep\nSink Port\nSource Port\n","image_count":0,"table_count":2}
{"page":745,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 745\n8.3.2.13.3\n  VCONN Source requests firmware update exchange with Cable \nPlug\nFigure 8.101, \"VCONN Source requests firmware update exchange with Cable Plug\" shows an example sequence for a \nfirmware update exchange between a VCONN Source and a Cable Plug. \nFigure 8.101 VCONN Source requests firmware update exchange with Cable Plug\n: Protocol\n1: Send Firmware_Update_Request\n: PHY\n: PHY\n: Protocol\n2:Firmware_Update_Request\n3: Firmware_Update_Request + CRC\n4: Firmware_Update_Request\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Firmware_Update_Request received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9:Firmware_Update_Request sent\n10: Send Firmware_Update_Response\n11: Firmware_Update_Response\n12: Firmware_Update_Response + CRC\n13: Firmware_Update_Response\nCheck MessageID against local copy\nStore copy of MessageID\n14: Firmware_Update_Response received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nGet firmware update \nresponse from DPM\n: Policy Engine\n: Policy Engine\nVCONN Source\nCable Plug\n18: Firmware_Update_Response sent\n","image_count":7,"table_count":4}
{"page":746,"text":"Page 746\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.128, \"Steps for a VCONN Source requesting a firmware update exchange with a Cable Plug Sequence\" below \nprovides a detailed explanation of what happens at each labeled step in Figure 8.101, \"VCONN Source requests \nfirmware update exchange with Cable Plug\" above.\nTable 8.128  Steps for a VCONN Source requesting a firmware update exchange with a Cable Plug Sequence\nStep\nVCONN Source\nCable Plug\n1\nPolicy Engine directs the Protocol Layer to send a \nFirmware_Update_Request Message using a Payload \nsupplied by the DPM.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the \nFirmware_Update_Request Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Firmware_Update_Request \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nFirmware_Update_Request Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Request Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Request Message was successfully \nsent.\n10\nPolicy Engine requests the DPM for the response to the \nfirmware update request which is provided. \nThe Policy Engine tells the Protocol Layer to form a \nFirmware_Update_Response Message.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the \nFirmware_Update_Response Message.\nPHY Layer appends a CRC and sends the \nFirmware_Update_Response Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received \nFirmware_Update_Response Message information to \nthe Policy Engine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":747,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 747\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nFirmware_Update_Response Message was successfully \nsent.\nThe firmware update exchange is complete.\nTable 8.128  Steps for a VCONN Source requesting a firmware update exchange with a Cable Plug Sequence\nStep\nVCONN Source\nCable Plug\n","image_count":0,"table_count":2}
{"page":748,"text":"Page 748\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14\n  Structured VDM\n8.3.2.14.1\n  Discover Identity\n8.3.2.14.1.1\n  Initiator to Responder Discover Identity (ACK)\nFigure 8.102, \"Initiator to Responder Discover Identity (ACK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator discovers identity information \nfrom the Responder.\nFigure 8.102 Initiator to Responder Discover Identity (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity ACK\n11: Discover Identity ACK\n12: Discover Identity ACK + CRC\n13: Discover Identity ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity ACK received\nStop VDMResponseTimer\nDPM evaluates Identity \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Identity information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":749,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 749\nTable 8.129, \"Steps for Initiator to UFP Discover Identity (ACK)\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.102, \"Initiator to Responder Discover Identity (ACK)\" above.\nTable 8.129  Steps for Initiator to UFP Discover Identity (ACK)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nIdentity Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover Identity Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover \nIdentity Command request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Identity Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nIdentity Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Identity Command ACK response.\n11\nProtocol Layer creates the Discover Identity Command \nACK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Identity Command \nACK response and compares the CRC it calculated with \nthe one sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover \nIdentity Command ACK response. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command ACK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":750,"text":"Page 750\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command ACK response was \nsuccessfully sent.\nTable 8.129  Steps for Initiator to UFP Discover Identity (ACK)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":751,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 751\n8.3.2.14.1.2\n  Initiator to Responder Discover Identity (NAK)\nFigure 8.103, \"Initiator to Responder Discover Identity (NAK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover identity \ninformation from the Responder but receives a NAK.\nFigure 8.103 Initiator to Responder Discover Identity (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity NAK\n11: Discover Identity NAK\n12: Discover Identity NAK + CRC\n13: Discover Identity NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity NAK received\nStop VDMResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity NAK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Identity information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":752,"text":"Page 752\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.130, \"Steps for Initiator to UFP Discover Identity (NAK)\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.103, \"Initiator to Responder Discover Identity (NAK)\" above.\nTable 8.130  Steps for Initiator to UFP Discover Identity (NAK)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nIdentity Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover Identity Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover \nIdentity Command request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Identity Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nIdentity Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Identity Command NAK response.\n11\nProtocol Layer creates the Discover Identity Command \nNAK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Identity Command \nNAK response and compares the CRC it calculated with \nthe one sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover \nIdentity Command NAK response. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command NAK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":753,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 753\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command NAK response was \nsuccessfully sent.\nTable 8.130  Steps for Initiator to UFP Discover Identity (NAK)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":754,"text":"Page 754\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.1.3\n  Initiator to Responder Discover Identity (BUSY)\nFigure 8.104, \"Initiator to Responder Discover Identity (BUSY)\" shows an example sequence between an Initiator \nand Responder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover identity \ninformation from the Responder but receives a BUSY.\nFigure 8.104 Initiator to Responder Discover Identity (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover Identity\n2: Discover Identity\n3: Discover Identity + CRC\n4: Discover Identity\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover Identity received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover Identity sent\nStart VDMResponseTimer\n10: Send Discover Identity BUSY\n11: Discover Identity BUSY\n12: Discover Identity BUSY + CRC\n13: Discover Identity BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover Identity BUSY received\nStop VDMResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover Identity BUSY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Identity information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":755,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 755\nTable 8.131, \"Steps for Initiator to UFP Discover Identity (BUSY)\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.104, \"Initiator to Responder Discover Identity (BUSY)\" above.\nTable 8.131  Steps for Initiator to UFP Discover Identity (BUSY)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nIdentity Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover Identity Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover \nIdentity Command request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Identity Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nIdentity Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Identity Command BUSY response.\n11\nProtocol Layer creates the Discover Identity Command \nBUSY response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Identity Command \nBUSY response and compares the CRC it calculated with \nthe one sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover \nIdentity Command BUSY response. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nIdentity Command BUSY response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":756,"text":"Page 756\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Identity Command NAK response was \nsuccessfully sent.\nTable 8.131  Steps for Initiator to UFP Discover Identity (BUSY)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":757,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 757\n8.3.2.14.2\n  Discover SVIDs\n8.3.2.14.2.1\n  Initiator to Responder Discover SVIDs (ACK)\nFigure 8.105, \"Initiator to Responder Discover SVIDs (ACK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator discovers SVID information from \nthe Responder.\nFigure 8.105 Initiator to Responder Discover SVIDs (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs ACK\n11: Discover_SVIDs ACK\n12: Discover_SVIDs ACK + CRC\n13: Discover_SVIDs ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs ACK received\nStop VDMResponseTimer\nDPM evaluates SVIDs \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest SVIDs from Device Policy \nManager\n","image_count":6,"table_count":12}
{"page":758,"text":"Page 758\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.132, \"Steps for DFP to UFP Discover SVIDs (ACK)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.105, \"Initiator to Responder Discover SVIDs (ACK)\" above.\nTable 8.132  Steps for DFP to UFP Discover SVIDs (ACK)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nSVIDs Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover SVIDs Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover SVIDs \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover SVIDs Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nSVIDs Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover SVIDs Command ACK response.\n11\nProtocol Layer creates the Discover SVIDs Command \nACK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover SVIDs Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover SVIDs \nCommand ACK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command ACK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":759,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 759\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command ACK response was \nsuccessfully sent.\nTable 8.132  Steps for DFP to UFP Discover SVIDs (ACK)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":760,"text":"Page 760\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.2.2\n  Initiator to Responder Discover SVIDs (NAK)\nFigure 8.106, \"Initiator to Responder Discover SVIDs (NAK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover SVID \ninformation from the Responder but receives a NAK.\nFigure 8.106 Initiator to Responder Discover SVIDs (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs NAK\n11: Discover_SVIDs NAK\n12: Discover_SVIDs NAK + CRC\n13: Discover_SVIDs NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs NAK received\nStop VDMResponseTimer\nDPM evaluates SVIDs \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs NAK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest SVIDs from Device Policy \nManager\n","image_count":6,"table_count":12}
{"page":761,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 761\nTable 8.133, \"Steps for DFP to UFP Discover SVIDs (NAK)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.106, \"Initiator to Responder Discover SVIDs (NAK)\" above.\nTable 8.133  Steps for DFP to UFP Discover SVIDs (NAK)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nSVIDs Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover SVIDs Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover SVIDs \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover SVIDs Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nSVIDs Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover SVIDs Command NAK response.\n11\nProtocol Layer creates the Discover SVIDs Command \nNAK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover SVIDs Command NAK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover SVIDs \nCommand NAK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command NAK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n","image_count":0,"table_count":2}
{"page":762,"text":"Page 762\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command NAK response was \nsuccessfully sent.\nTable 8.133  Steps for DFP to UFP Discover SVIDs (NAK)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":763,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 763\n8.3.2.14.2.3\n  Initiator to Responder Discover SVIDs (BUSY)\nFigure 8.107, \"Initiator to Responder Discover SVIDs (BUSY)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover SVID \ninformation from the Responder but receives a BUSY.\nFigure 8.107 Initiator to Responder Discover SVIDs (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_SVIDs\n2: Discover_SVIDs\n3: Discover_SVIDs + CRC\n4: Discover_SVIDs\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_SVIDs received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_SVIDs sent\nStart VDMResponseTimer\n10: Send Discover_SVIDs BUSY\n11: Discover_SVIDs BUSY\n12: Discover_SVIDs BUSY + CRC\n13: Discover_SVIDs BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_SVIDs BUSY received\nStop VDMResponseTimer\nDPM evaluates SVIDs \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_SVIDs BUSY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest SVIDs from Device Policy \nManager\n","image_count":6,"table_count":12}
{"page":764,"text":"Page 764\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.134, \"Steps for DFP to UFP Discover SVIDs (BUSY)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.107, \"Initiator to Responder Discover SVIDs (BUSY)\" above.\nTable 8.134  Steps for DFP to UFP Discover SVIDs (BUSY)\nStep\nInitiator\nResponder\n1\nThe Initiator has an Explicit Contract. The Policy \nEngine directs the Protocol Layer to send a Discover \nSVIDs Command request.\nThe Responder has an Explicit Contract.\n2\nProtocol Layer creates the Discover SVIDs Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover SVIDs \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover SVIDs Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nSVIDs Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover SVIDs Command BUSY response.\n11\nProtocol Layer creates the Discover SVIDs Command \nBUSY response and passes to PHY Layer.\n12\nPHY Layer receives the Discover SVIDs Command BUSY \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover SVIDs \nCommand BUSY response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nSVIDs Command BUSY response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":765,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 765\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover SVIDs Command BUSY response was \nsuccessfully sent.\nTable 8.134  Steps for DFP to UFP Discover SVIDs (BUSY)\nStep\nInitiator\nResponder\n","image_count":0,"table_count":2}
{"page":766,"text":"Page 766\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.3\n  Discover Modes\n8.3.2.14.3.1\n  Initiator to Responder Discover Modes (ACK)\nFigure 8.108, \"Initiator to Responder Discover Modes (ACK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator discovers Mode information from \nthe Responder.\nFigure 8.108 Initiator to Responder Discover Modes (ACK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes ACK\n11: Discover_Modes ACK\n12: Discover_Modes ACK + CRC\n13: Discover_Modes ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes ACK received\nStop VDMResponseTimer\nDPM evaluates Modes \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Modes information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":767,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 767\nTable 8.135, \"Steps for DFP to UFP Discover Modes (ACK)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.108, \"Initiator to Responder Discover Modes (ACK)\".\nTable 8.135  Steps for DFP to UFP Discover Modes (ACK)\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract. The Policy Engine \ndirects the Protocol Layer to send a Discover Modes \nCommand request.\nThe UFP has an Explicit Contract.\n2\nProtocol Layer creates the Discover Modes Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover \nModes Command request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Modes Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nModes Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Modes Command ACK response.\n11\nProtocol Layer creates the Discover Modes Command \nACK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Modes Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover \nModes Command ACK response. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command ACK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":768,"text":"Page 768\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command ACK response was \nsuccessfully sent.\nTable 8.135  Steps for DFP to UFP Discover Modes (ACK)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":769,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 769\n8.3.2.14.3.2\n  Initiator to Responder Discover Modes (NAK)\nFigure 8.109, \"Initiator to Responder Discover Modes (NAK)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover Mode \ninformation from the Responder but receives a NAK.\nFigure 8.109 Initiator to Responder Discover Modes (NAK)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes NAK\n11: Discover_Modes NAK\n12: Discover_Modes NAK + CRC\n13: Discover_Modes NAK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes NAK received\nStop VDMResponseTimer\nDPM evaluates Modes \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes NAK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Modes information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":770,"text":"Page 770\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.136, \"Steps for DFP to UFP Discover Modes (NAK)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.109, \"Initiator to Responder Discover Modes (NAK)\".\nTable 8.136  Steps for DFP to UFP Discover Modes (NAK)\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract. The Policy Engine \ndirects the Protocol Layer to send a Discover Modes \nCommand request.\nThe UFP has an Explicit Contract.\n2\nProtocol Layer creates the Discover Modes Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover \nModes Command request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Modes Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nModes Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Modes Command NAK response.\n11\nProtocol Layer creates the Discover Modes Command \nNAK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Modes Command \nNAK response and compares the CRC it calculated with \nthe one sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover Modes \nCommand NAK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command NAK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":771,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 771\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command NAK response was \nsuccessfully sent.\nTable 8.136  Steps for DFP to UFP Discover Modes (NAK)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":772,"text":"Page 772\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.3.3\n  Initiator to Responder Discover Modes (BUSY)\nFigure 8.110, \"Initiator to Responder Discover Modes (BUSY)\" shows an example sequence between an Initiator and \nResponder, where both Port Partners are in an Explicit Contract and the Initiator attempts to discover Mode \ninformation from the Responder but receives a BUSY.\nFigure 8.110 Initiator to Responder Discover Modes (BUSY)\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nInitiator\nResponder\n1: Send Discover_Modes\n2: Discover_Modes\n3: Discover_Modes + CRC\n4: Discover_Modes\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Discover_Modes received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Discover_Modes sent\nStart VDMResponseTimer\n10: Send Discover_Modes BUSY\n11: Discover_Modes BUSY\n12: Discover_Modes BUSY + CRC\n13: Discover_Modes BUSY\nCheck MessageID against local copy\nStore copy of MessageID\n14: Discover_Modes BUSY received\nStop VDMResponseTimer\nDPM evaluates Modes \ninformation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Discover_Modes BUSY sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nExplicit PD Contract\nExplicit PD Contract\nRequest Modes information from \nDevice Policy Manager\n","image_count":6,"table_count":12}
{"page":773,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 773\nTable 8.137, \"Steps for DFP to UFP Discover Modes (BUSY)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.110, \"Initiator to Responder Discover Modes (BUSY)\".\nTable 8.137  Steps for DFP to UFP Discover Modes (BUSY)\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract. The Policy Engine \ndirects the Protocol Layer to send a Discover Modes \nCommand request.\nThe UFP has an Explicit Contract.\n2\nProtocol Layer creates the Discover Modes Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Discover Modes \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Discover Modes Command \nrequest and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Discover \nModes Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command request information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command request was successfully \nsent.\nPolicy Engine starts the VDMResponseTimer.\n10\nPolicy Engine requests the identity information from \nthe DPM. The Policy Engine tells the Protocol Layer to \nform a Discover Modes Command NAK response.\n11\nProtocol Layer creates the Discover Modes Command \nNAK response and passes to PHY Layer.\n12\nPHY Layer receives the Discover Modes Command \nNAK response and compares the CRC it calculated with \nthe one sent to verify the Message.\nPHY Layer appends a CRC and sends the Discover Modes \nCommand NAK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Discover \nModes Command NAK response information to the \nPolicy Engine that consumes it.\n14\nThe Policy Engine stops the VDMResponseTimer and \npassed the Identity information to the DPM for \nevaluation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":774,"text":"Page 774\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nDiscover Modes Command NAK response was \nsuccessfully sent.\nTable 8.137  Steps for DFP to UFP Discover Modes (BUSY)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":775,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 775\n8.3.2.14.4\n  Enter/Exit Mode\n8.3.2.14.4.1\n  DFP to UFP Enter Mode\nFigure 8.111, \"DFP to UFP Enter Mode\" shows an example sequence between a DFP and a UFP that occurs after the \nDFP has discovered supported SVIDs and Modes at which point it selects and enters a Mode.\nFigure 8.111 DFP to UFP Enter Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nDFP\nUFP\nSupported SVIDS/Modes discovered\nEnter USB Safe State\n37: Send Enter Mode\n38: Enter Mode\n39: Enter Mode + CRC\n40: Enter Mode\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n41: Enter Mode received\n42: GoodCRC\n43: GoodCRC + CRC\n44: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n45: Enter Mode sent\nStart VDMModeEntryTimer\n46: Send Enter Mode ACK\n47: Enter Mode ACK\n48: Enter Mode ACK + CRC\n49: Enter Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n50: Enter Mode ACK received\nStop VDMModeEntryTimer\nEnter New Mode\n51: GoodCRC\n52: GoodCRC + CRC\n53: GoodCRC\n54: Enter Mode ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUSB Operation\nUSB Operation\nEvaluate Enter Mode request\nEnter New Mode\nNew Mode Entered\n","image_count":6,"table_count":12}
{"page":776,"text":"Page 776\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.138, \"Steps for DFP to UFP Enter Mode\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.111, \"DFP to UFP Enter Mode\" above.\nTable 8.138  Steps for DFP to UFP Enter Mode\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract \nThe DFP has discovered the supported SVIDS using the \nDiscover SVIDs Command request and the supported \nModes using the Discover Modes Command request\nThe DFP goes to USB Safe State. The DPM requests the \nPolicy Engine to enter a Mode.\nThe Policy Engine directs the Protocol Layer to send an \nEnter Mode Command request.\nThe UFP has an Explicit Contract.\n2\nProtocol Layer creates the Enter Mode Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Enter Mode \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Enter Mode Command request \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Enter \nMode Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode \nCommand request information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter Mode Command request was successfully sent.\nPolicy Engine starts the VDMModeEntryTimer.\n10\nPolicy Engine requests the DPM to enter the new \nMode. The Policy Engine tells the Protocol Layer to \nform an Enter Mode Command ACK response.\n11\nProtocol Layer creates the Enter Mode Command ACK \nresponse and passes to PHY Layer.\n12\nPHY Layer receives the Enter Mode Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Enter Mode \nCommand ACK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode \nCommand ACK response information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the VDMModeEntryTimer \nand requests the DPM to enter the new Mode.\n","image_count":0,"table_count":2}
{"page":777,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 777\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Enter \nMode Command ACK response was successfully sent.\nDFP and UFP are operating in the new Mode\nTable 8.138  Steps for DFP to UFP Enter Mode\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":778,"text":"Page 778\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.4.2\n  DFP to UFP Exit Mode\nFigure 8.112, \"DFP to UFP Exit Mode\" shows an example sequence between a DFP and a UFP, where the DFP \ncommands the UFP to exit the only Active Mode.\nFigure 8.112 DFP to UFP Exit Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nDFP\nUFP\n1: Send Exit Mode\n2: Exit Mode\n3: Exit Mode + CRC\n4: Exit Mode\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Exit Mode received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Exit Mode sent\nStart VDMModeExitTimer\n10: Send Exit Mode ACK\n11: Exit Mode ACK\n12: Exit Mode ACK + CRC\n13: Exit Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Exit Mode ACK received\nStop VDMModeExitTimer\nEnter USB Operation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Exit Mode ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nIn Mode\nIn Mode\nEnter USB Safe State\nEvaluate Exit Mode request\nEnter USB Operation\nUSB operation\n","image_count":6,"table_count":12}
{"page":779,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 779\nTable 8.139, \"Steps for DFP to UFP Exit Mode\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.112, \"DFP to UFP Exit Mode\" above.\nTable 8.139  Steps for DFP to UFP Exit Mode\nStep\nDFP\nUFP\n1\nThe DFP is in a Mode and then enters USB Safe State. \nThe Policy Engine directs the Protocol Layer to send an \nExit Mode Command request.\nThe UFP is in a Mode.\n2\nProtocol Layer creates the Exit Mode Command request \nand passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Exit Mode \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Exit Mode Command request \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Exit \nMode Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode \nCommand request information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Exit \nMode Command request was successfully sent.\nPolicy Engine starts the VDMModeExitTimer.\n10\nPolicy Engine requests the DPM to enter USB \noperation. The Policy Engine tells the Protocol Layer to \nform an Exit Mode Command ACK response.\n11\nProtocol Layer creates the Exit Mode Command ACK \nresponse and passes to PHY Layer.\n12\nPHY Layer receives the Exit Mode Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Exit Mode \nCommand ACK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode \nCommand ACK response information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the VDMModeExitTimer and \nrequests the DPM to enter USB Operation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":780,"text":"Page 780\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Exit \nMode Command ACK response was successfully sent.\nBoth DFP and UFP are in USB Operation\nTable 8.139  Steps for DFP to UFP Exit Mode\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":781,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 781\n8.3.2.14.4.3\n  DFP to Cable Plug Enter Mode\nFigure 8.113, \"DFP to Cable Plug Enter Mode\" shows an example sequence between a DFP and a Cable Plug that \noccurs after the DFP has discovered supported SVIDs and Modes at which point it selects and enters a Mode.\nFigure 8.113 DFP to Cable Plug Enter Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Cable Plug Policy Engine\nDFP\nCable Plug\nSupported SVIDs/Modes Discovered\nEnter USB Safe Mode\nWait tCableMessage before \ntransmission\n19: Send Enter Mode\n20: Enter Mode\n21: Enter Mode + CRC\n22: Enter Mode\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n23: Enter Mode received\n24: GoodCRC\n25: GoodCRC + CRC\n26: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n27: Enter Mode sent\nStart VDMModeEntryTimer\n10: Send Enter Mode ACK\n11: Enter Mode ACK\n12: Enter Mode ACK + CRC\n13: Enter Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Enter Mode ACK received\nStop VDMModeEntryTimer\nEnter New Mode\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Enter Mode ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nUSB Mode\nUSB Mode\nEvaluate Enter Mode request\nEnter New Mode\nWait tCableMessage before transmission\nNew Mode Entered\n","image_count":6,"table_count":8}
{"page":782,"text":"Page 782\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.140, \"Steps for DFP to Cable Plug Enter Mode\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.113, \"DFP to Cable Plug Enter Mode\" above.\nTable 8.140  Steps for DFP to Cable Plug Enter Mode\nStep\nDFP\nCable Plug\n1\nThe DFP has an Explicit Contract \nThe DFP has discovered the supported SVIDS using the \nDiscover SVIDs Command request and the supported \nModes using the Discover Modes Command request\nThe DFP goes to USB Safe State. The DPM requests the \nPolicy Engine to enter a Mode.\ntCableMessage after the last GoodCRC Message was \nsent the Policy Engine directs the Protocol Layer to \nsend an Enter Mode Command request.\n2\nProtocol Layer creates the Enter Mode Command \nrequest and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Enter Mode \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Enter Mode Command request \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Enter \nMode Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode \nCommand request information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter Mode Command request was successfully sent.\nPolicy Engine starts the VDMModeEntryTimer.\n10\nPolicy Engine requests the DPM to enter the new \nMode. tCableMessage after the GoodCRC Message was \nsent the Policy Engine tells the Protocol Layer to form \nan Enter Mode Command ACK response.\n11\nProtocol Layer creates the Enter Mode Command ACK \nresponse and passes to PHY Layer.\n12\nPHY Layer receives the Enter Mode Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Enter Mode \nCommand ACK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter Mode \nCommand ACK response information to the Policy \nEngine that consumes it.\n","image_count":0,"table_count":2}
{"page":783,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 783\n14\nThe Policy Engine stops the VDMModeEntryTimer \nand requests the DPM to enter the new Mode.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Enter \nMode Command ACK response was successfully sent. \nDFP and Cable Plug are operating in the new Mode\nTable 8.140  Steps for DFP to Cable Plug Enter Mode\nStep\nDFP\nCable Plug\n","image_count":0,"table_count":2}
{"page":784,"text":"Page 784\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.14.4.4\n  DFP to Cable Plug Exit Mode\nFigure 8.114, \"DFP to Cable Plug Exit Mode\" shows an example sequence between a USB Type-C® DFP and a Cable \nPlug, where the DFP commands the Cable Plug to exit an Active Mode.\nFigure 8.114 DFP to Cable Plug Exit Mode\n: DFP Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Cable Plug Policy Engine\nDFP\nCable Plug\n1: Send Exit Mode\n2: Exit Mode\n3: Exit Mode + CRC\n4: Exit Mode\nStart CRCReceiveTimer\nCheck MessageID against local copy\nStore copy of MessageID\n5: Exit Mode received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n9: Exit Mode sent\nStart VDMModeExitTimer\n10: Send Exit Mode ACK\n11: Exit Mode ACK\n12: Exit Mode ACK + CRC\n13: Exit Mode ACK\nCheck MessageID against local copy\nStore copy of MessageID\n14: Exit Mode ACK received\nStop VDMModeExitTimer\nEnter USB Operation\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Exit Mode ACK sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nIn Mode\nIn Mode\nEnter USB Safe State\nEvaluate Exit Mode request\nEnter USB Operation\nWait tCableMessage before transmission\nUSB operation\n","image_count":6,"table_count":11}
{"page":785,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 785\nTable 8.141, \"Steps for DFP to Cable Plug Exit Mode\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.114, \"DFP to Cable Plug Exit Mode\" above.\nTable 8.141  Steps for DFP to Cable Plug Exit Mode\nStep\nDFP\nCable Plug\n1\nThe DFP is in a Mode and then enters USB Safe State. \nThe Policy Engine directs the Protocol Layer to send an \nExit Mode Command request.\nThe Cable Plug is in a Mode.\n2\nProtocol Layer creates the Exit Mode Command request \nand passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Exit Mode \nCommand request. Starts CRCReceiveTimer.\nPHY Layer receives the Exit Mode Command request \nand checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the Exit \nMode Command request to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode \nCommand request information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Exit \nMode Command request was successfully sent.\nPolicy Engine starts the VDMModeExitTimer.\n10\nPolicy Engine requests the DPM to enter USB \noperation. tCableMessage after the GoodCRC Message \nwas sent the Policy Engine tells the Protocol Layer to \nform an Exit Mode Command ACK response.\n11\nProtocol Layer creates the Exit Mode Command ACK \nresponse and passes to PHY Layer.\n12\nPHY Layer receives the Exit Mode Command ACK \nresponse and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Exit Mode \nCommand ACK response. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Exit Mode \nCommand ACK response information to the Policy \nEngine that consumes it.\n14\nThe Policy Engine stops the VDMModeExitTimer and \nrequests the DPM to enter USB Operation.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":786,"text":"Page 786\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Exit \nMode Command ACK response was successfully sent.\nBoth DFP and Cable Plug are in USB Operation\nTable 8.141  Steps for DFP to Cable Plug Exit Mode\nStep\nDFP\nCable Plug\n","image_count":0,"table_count":2}
{"page":787,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 787\n8.3.2.14.4.5\n  Initiator to Responder Attention\nFigure 8.115, \"Initiator to Responder Attention\" shows an example sequence between an Initiator and a Responder, \nwhere the Initiator requests attention from the Responder.\nFigure 8.115 Initiator to Responder Attention\n: Policy Engine\n: Protocol\n: PHY\n: PHY\n: Protocol\n: Policy Engine\nResponder\nInitiator\n1: Send Attention\n2: Attention\n3: Attention + CRC\n4: Attention\nCheck MessageID against local copy\nStore copy of MessageID\n5: Attention received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Attention sent\nStart CRCReceiveTimer\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":6,"table_count":3}
{"page":788,"text":"Page 788\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.142, \"Steps for Initiator to Responder Attention\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.115, \"Initiator to Responder Attention\" above.\nTable 8.142  Steps for Initiator to Responder Attention\nStep\nResponder\nInitiator\n1\nThe DPM requests attention. The Policy Engine tells \nthe Protocol Layer to form an Attention Command \nrequest.\n2\nProtocol Layer creates the Attention Command request \nand passes to PHY Layer.\n3\nPHY Layer receives the Attention Command request \nand compares the CRC it calculated with the one sent to \nverify the Message.\nPHY Layer appends a CRC and sends the Attention \nCommand request. Starts CRCReceiveTimer.\n4\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Attention \nCommand request information to the Policy Engine \nthat consumes it.\n5\nThe Policy Engine informs the DPM\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAttention Command request was successfully sent.\n","image_count":0,"table_count":2}
{"page":789,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 789\n8.3.2.15\n  Built in Self-Test (BIST)\n8.3.2.15.1\n  BIST Carrier Mode\nThe following is an example of a BIST Carrier Mode test between a Tester and a UUT. When the UUT is connected to \nthe Tester the sequence below is executed. \nFigure 8.116, \"BIST Carrier Mode Test\" shows the Messages as they flow across the bus and within the devices. This \ntest enables the measurement of power supply noise and frequency drift.\n1)\nConnection is established and stable.\n2)\nTester sends a BIST Message with a BIST Carrier Mode BIST Data Object.\n3)\nUUT answers with a GoodCRC Message.\n4)\nUUT starts sending the Test Pattern.\n5)\nOperator does the measurements.\n6)\nThe test ends after tBISTContMode.\nSee also Section 5.9.1, \"BIST Carrier Mode\" and Section 6.4.3.1, \"BIST Carrier Mode\".\nFigure 8.116 BIST Carrier Mode Test\n: Protocol\n1: Send BIST(Carrier Mode)\n: PHY\n: PHY\n: Protocol\n2: BIST(Carrier Mode)\n3: BIST(Carrier Mode) + CRC\n4: BIST(Carrier Mode)\nStart CRCReceiveTimer\n5: BIST(Carrier Mode) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Carrier Mode) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Carrier Mode\nTester\nUUT\n12: Send Test Pattern\n13: Send Test Pattern\n14: Test Pattern\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\nEnd of Test (after tBISTContMode)\nEnter BIST Carrier Mode mode\n10: Go to BIST Carrier Mode\n11: Go to BIST Carrier Mode\n","image_count":6,"table_count":6}
{"page":790,"text":"Page 790\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.143, \"Steps for BIST Carrier Mode Test\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.116, \"BIST Carrier Mode Test\" above.\nTable 8.143  Steps for BIST Carrier Mode Test\nStep\nTester\nUUT\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a BIST Message, with a BIST Data Object of \nBIST Carrier Mode, to put the UUT into BIST Carrier \nMode.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the BIST Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the BIST Message and checks the \nCRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the BIST \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message \ninformation to the Policy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the BIST \nMessage was successfully sent. \n10\nPolicy Engine tells Protocol Layer to go into BIST \nCarrier Mode. The Policy Engine goes to BIST Carrier \nMode.\n11\nProtocol Layer tells PHY Layer to go into BIST Carrier \nMode.\nUUT enters BIST Carrier Mode.\n12\nThe Policy Engine directs the Protocol Layer to start \ngeneration of the Test Pattern.\n13\nProtocol Layer directs the PHY Layer to generate the Test \nPattern.\n14\nPHY Layer receives the Test Pattern stream.\nPHY Layer generates a continuous Test Pattern stream.\nThe UUT exits BIST Carrier Mode after tBISTContMode.\n","image_count":0,"table_count":2}
{"page":791,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 791\n8.3.2.15.2\n  BIST Test Data Mode\nThe following is an example of a BIST Test Data Mode test between a Tester and a UUT. When the UUT is connected \nto the Tester the sequence below is executed. \nFigure 8.117, \"BIST Test Data Test\" shows the Messages as they flow across the bus and within the devices.\n1)\nConnection is established and stable.\n2)\nTester sends a BIST Message with a BIST Test Data BIST Data Object.\n3)\nUUT answers with a GoodCRC Message.\n4)\nSteps 2and 3 are repeated any number of times.\n5)\nThe test ends after Hard Reset Signaling is issued.\nSee also Section 5.9.2, \"BIST Test Data Mode\" and Section 6.4.3.2, \"BIST Test Data Mode\".\n","image_count":0,"table_count":1}
{"page":792,"text":"Page 792\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.117 BIST Test Data Test\n: Protocol\n1: Send BIST(Test Data)\n: PHY\n: PHY\n: Protocol\n2: BIST(Test Data)\n3: BIST(Test Data) + CRC\n4: BIST(Test Data)\nStart CRCReceiveTimer\n5: BIST(Test Data) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Test Data) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Test Data mode\nTester\nUUT\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\nEnd of Test (Hard Reset)\nEnter BIST Test Data mode\n10: Send BIST(Test Data)\n11: BIST(Test Data)\n12: BIST(Test Data) + CRC\n13: BIST(Test Data)\nStart CRCReceiveTimer\n14: BIST(Test Data) received\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: BIST(Test Data) sent\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\n","image_count":7,"table_count":8}
{"page":793,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 793\nTable 8.144, \"Steps for BIST Test Data Test\" below provides a detailed explanation of what happens at each labeled \nstep in Figure 8.117, \"BIST Test Data Test\" above.\nTable 8.144  Steps for BIST Test Data Test\nStep\nTester\nUUT\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a BIST Message, with a BIST Data Object of \nBIST Test Data, to put the UUT into BIST Test Data \nMode.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the BIST Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the BIST Message and checks the CRC \nto verify the Message.\n4\nPHY Layer removes the CRC and forwards the BIST \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message \ninformation to the Policy Engine that consumes it.\nThe Policy Engine goes into BIST Test Data Mode Mode \nwhere it sends no further Messages except for GoodCRC \nMessages in response to received Messages (see Section \n6.4.3.2, \"BIST Test Data Mode\").\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the BIST \nMessage was successfully sent. \nUUT enters BIST Test Data Mode.\n10\nThe Policy Engine directs the Protocol Layer to \ngenerate a BIST Message, with a BIST Data Object of \nBIST Test Data, to put the UUT into BIST Test Data \nMode.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer appends CRC and sends the BIST Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the BIST Message and checks the CRC \nto verify the Message.\n13\nPHY Layer removes the CRC and forwards the BIST \nMessage to the Protocol Layer.\n","image_count":0,"table_count":2}
{"page":794,"text":"Page 794\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n14\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message \ninformation to the Policy Engine that consumes it.\nThe Policy Engine goes into BIST Test Data Mode Mode \nwhere it sends no further Messages except for GoodCRC \nMessages in response to received Messages (see Section \n6.4.3.2, \"BIST Test Data Mode\").\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n17\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the BIST \nMessage was successfully sent. \nRepeat steps 10-18 any number of times\nThe UUT exits BIST Test Data Mode after a Hard Reset\nTable 8.144  Steps for BIST Test Data Test\nStep\nTester\nUUT\n","image_count":0,"table_count":2}
{"page":795,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 795\n8.3.2.15.3\n  BIST Shared Capacity Test Mode\nThe following is an example of a BIST Shared Capacity Test Mode test between a Tester and a UUT. When the UUT \nis connected to the Tester the sequence below is executed. \nFigure 8.118, \"BIST Share Capacity Mode Test\" shows the Messages as they flow across the bus and within the \ndevices. This test places the UUT in a compliance test mode where the maximum Source capability is always offered \non every Port, regardless of the availability of shared power i.e., all shared power management is disabled.\n1)\nConnection is established and stable.\n2)\nTester sends a BIST Message with a BIST Shared Test Mode Entry BIST Data Object.\n3)\nUUT answers with a GoodCRC Message.\n4)\nUUT enters BIST Shared Capacity Test Mode.\n5)\nOperator does the measurements.\n6)\nTester sends a BIST Message with a BIST Shared Test Mode Exit BIST Data Object.\n7)\nUUT answers with a GoodCRC Message.\n8)\nUUT exits BIST Shared Capacity Test Mode.\nSee also Section 5.9.1, \"BIST Carrier Mode\" and Section 6.4.3.3, \"BIST Shared Capacity Test Mode\".\nFigure 8.118 BIST Share Capacity Mode Test\n12: Send BIST(Shared Capacity Test Mode Exit)\n13: BIST(Shared Capacity Test Mode Exit)\n14: BIST(Shared Capacity Test Mode Exit) + CRC\n15: BIST(Shared Capacity Test Mode Exit)\nStart CRCReceiveTimer\n16: BIST(Shared Capacity Test Mode Exit) received\n17: GoodCRC\n18: GoodCRC + CRC\n19: GoodCRC\n20: BIST(Shared Capacity Test Mode) sent\nGo to BIST Shared Capacity \nTest Mode\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\nEXit BIST Shared Capacity Test Mode mode\n21: Exit BIST Shared Capacity Test Mode\n22: Exit BIST Shared Capacity Test Mode\n: Protocol\n1: Send BIST(Shared Capacity Test Mode Entry)\n: PHY\n: PHY\n: Protocol\n2: BIST(Shared Capacity Test Mode Entry)\n3: BIST(Shared Capacity Test Mode Entry) + CRC\n4: BIST(Shared Capacity Test Mode Entry)\nStart CRCReceiveTimer\n5: BIST(Shared Capacity Test Mode Entry) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: BIST(Shared Capacity Test Mode) sent\n: Policy Engine\n: Policy Engine\nGo to BIST Shared Capacity \nTest Mode\nTester\nUUT\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nCheck MessageID against \nlocal copy\nStore copy of MessageID\nEnter BIST Shared Capacity Test Mode mode\n10: Go to BIST Shared Capacity Test Mode\n11: Go to BIST Shared Capacity Test Mode\nTester Performs Tests\n","image_count":7,"table_count":4}
{"page":796,"text":"Page 796\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.145, \"Steps for BIST Shared Capacity Test Mode Test\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.118, \"BIST Share Capacity Mode Test\" above.\nTable 8.145  Steps for BIST Shared Capacity Test Mode Test\nStep\nTester\nUUT\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate a BIST Message, with a BIST Data Object of \nBIST Shared Test Mode Entry, to put the UUT into BIST \nShared Capacity Test Mode.\n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the BIST Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the BIST Message and checks the CRC \nto verify the Message.\n4\nPHY Layer removes the CRC and forwards the BIST \nMessage to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message \ninformation to the Policy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY LayerPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the BIST \nMessage was successfully sent. \n10\nPolicy Engine tells Protocol Layer to go into BIST \nShared Capacity Test Mode. The Policy Engine goes to \nBIST Shared Capacity Test Mode.\n11\nProtocol Layer tells PHY Layer to go into BIST Shared \nCapacity Test Mode.\nUUT enters BIST Shared Capacity Test Mode. Tester performs tests.\n12\nThe Policy Engine directs the Protocol Layer to \ngenerate a BIST Message, with a BIST Data Object of \nBIST Shared Test Mode Exit, to take the UUT out of BIST \nShared Capacity Test Mode.\n13\nProtocol Layer creates the Message and passes to PHY \nLayer.\n14\nPHY Layer appends CRC and sends the BIST Message. \nStarts CRCReceiveTimer.\nPHY Layer receives the BIST Message and checks the \nCRC to verify the Message.\n15\nPHY Layer removes the CRC and forwards the BIST \nMessage to the Protocol Layer.\n16\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received BIST Message \ninformation to the Policy Engine that consumes it.\n","image_count":0,"table_count":2}
{"page":797,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 797\n17\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n18\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n19\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n20\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the BIST \nMessage was successfully sent. \n21\nPolicy Engine tells Protocol Layer to exit BIST Shared \nCapacity Test Mode. The Policy Engine exits to BIST \nShared Capacity Test Mode.\n22\nProtocol Layer tells PHY Layer to exit BIST Shared \nCapacity Test Mode.\nUUT exits BIST Shared Capacity Test Mode.\nTable 8.145  Steps for BIST Shared Capacity Test Mode Test\nStep\nTester\nUUT\n","image_count":0,"table_count":2}
{"page":798,"text":"Page 798\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.16\n  Enter USB\n8.3.2.16.1\n  UFP Entering USB4 Mode\n8.3.2.16.1.1\n  UFP Entering USB4 Mode (Accept)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is a Valid mode of \noperation for the UFP. Figure 8.119, \"UFP Entering USB4 Mode (Accept)\" shows the Messages as they flow across the \nbus and within the devices to accomplish the Enter USB process.\nFigure 8.119 UFP Entering USB4 Mode (Accept)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode entered\nDFP\nUFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":9}
{"page":799,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 799\nTable 8.146, \"Steps for UFP USB4 Mode Entry (Accept)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.119, \"UFP Entering USB4 Mode (Accept)\" above.\nTable 8.146  Steps for UFP USB4 Mode Entry (Accept)\nStep\nDFP\nUFP\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":800,"text":"Page 800\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nBoth Port Partners enter [USB4] operation.\nTable 8.146  Steps for UFP USB4 Mode Entry (Accept)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":801,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 801\n8.3.2.16.1.2\n  UFP Entering USB4 Mode (Reject)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is an Invalid mode \nof operation for the UFP. Figure 8.120, \"UFP Entering USB4 Mode (Reject)\" shows the Messages as they flow across \nthe bus and within the devices to accomplish the Enter USB process.\nFigure 8.120 UFP Entering USB4 Mode (Reject)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanisms\nDFP\nUFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":11}
{"page":802,"text":"Page 802\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.147, \"Steps for UFP USB4 Mode Entry (Reject)\" below provides a detailed explanation of what happens at \neach labeled step in Figure 8.120, \"UFP Entering USB4 Mode (Reject)\" above.\nTable 8.147  Steps for UFP USB4 Mode Entry (Reject)\nStep\nDFP\nUFP\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Reject \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":803,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 803\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent.\nPort Partners do not enter [USB4] operation.\nTable 8.147  Steps for UFP USB4 Mode Entry (Reject)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":804,"text":"Page 804\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.16.1.3\n  UFP Entering USB4 Mode (Wait)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is not possible for \nthe UFP at this time. Figure 8.121, \"UFP Entering USB4 Mode (Wait)\" shows the Messages as they flow across the bus \nand within the devices to accomplish the Enter USB process.\nFigure 8.121 UFP Entering USB4 Mode (Wait)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Wait\n11: Wait\n12: Wait + CRC\n13: Wait\n14: Wait received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Wait sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanisms\nDFP\nUFP\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":11}
{"page":805,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 805\nTable 8.148, \"Steps for UFP USB4 Mode Entry (Wait)\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.121, \"UFP Entering USB4 Mode (Wait)\" above.\nTable 8.148  Steps for UFP USB4 Mode Entry (Wait)\nStep\nDFP\nUFP\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Wait \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":806,"text":"Page 806\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent.\nPort Partners do not enter [USB4] operation.\nTable 8.148  Steps for UFP USB4 Mode Entry (Wait)\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":807,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 807\n8.3.2.16.2\n  Cable Plug Entering USB4 Mode\n8.3.2.16.2.1\n  Cable Plug Entering USB4 Mode (Accept)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is a Valid mode of \noperation for the Cable Plug. Figure 8.122, \"Cable Plug Entering USB4 Mode (Accept)\" shows the Messages as they \nflow across the bus and within the devices to accomplish the Enter USB process.\nFigure 8.122 Cable Plug Entering USB4 Mode (Accept)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Accept\n11: Accept\n12: Accept + CRC\n13: Accept\n14: Accept received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Accept sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode entered\nDFP\nCable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":10}
{"page":808,"text":"Page 808\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.149, \"Steps for Cable Plug USB4 Mode Entry (Accept)\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.122, \"Cable Plug Entering USB4 Mode (Accept)\" above.\nTable 8.149  Steps for Cable Plug USB4 Mode Entry (Accept)\nStep\nDFP\nCable Plug\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC to \nverify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer.\n10\nPolicy Engine tells the Protocol Layer to form an Accept \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Accept \nMessage information to the Policy Engine that \nconsumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":809,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 809\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nAccept Message was successfully sent.\nCable Plug enters [USB4] operation.\nTable 8.149  Steps for Cable Plug USB4 Mode Entry (Accept)\nStep\nDFP\nCable Plug\n","image_count":0,"table_count":2}
{"page":810,"text":"Page 810\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.16.2.2\n  Cable Plug Entering USB4 Mode (Reject)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is an Invalid mode \nof operation for the Cable Plug. Figure 8.123, \"Cable Plug Entering USB4 Mode (Reject)\" shows the Messages as they \nflow across the bus and within the devices to accomplish the Enter USB process.\nFigure 8.123 Cable Plug Entering USB4 Mode (Reject)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanisms\nDFP\nCable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":12}
{"page":811,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 811\nTable 8.150, \"Steps for Cable Plug USB4 Mode Entry (Reject)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.123, \"Cable Plug Entering USB4 Mode (Reject)\" above.\nTable 8.150  Steps for Cable Plug USB4 Mode Entry (Reject)\nStep\nDFP\nCable Plug\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Reject \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Reject \nMessage information to the Policy Engine that \nconsumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":812,"text":"Page 812\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nReject Message was successfully sent.\nCable Plug does not enter [USB4] operation.\nTable 8.150  Steps for Cable Plug USB4 Mode Entry (Reject)\nStep\nDFP\nCable Plug\n","image_count":0,"table_count":2}
{"page":813,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 813\n8.3.2.16.2.3\n  Cable Plug Entering USB4 Mode (Wait)\nThis is an example of an Enter USB operation where the DFP requests [USB4] mode when this is not possible for \nthe Cable Plug at this time. Figure 8.124, \"Cable Plug Entering USB4 Mode (Wait)\" shows the Messages as they flow \nacross the bus and within the devices to accomplish the Enter USB process.\nFigure 8.124 Cable Plug Entering USB4 Mode (Wait)\n: Protocol\n1: Send Enter_USB (USB4)\n: PHY\n: PHY\n: Protocol\n2: Enter_USB (USB4)\n3: Enter_USB (USB4) + CRC\n4: Enter_USB (USB4)\nStart CRCReceiveTimer\n5: Enter_USB (USB4) received\n6: GoodCRC\n7: GoodCRC + CRC\n8: GoodCRC\n9: Enter_USB (USB4) sent\nStart SenderResponseTimer\n10: Send Reject\n11: Reject\n12: Reject + CRC\n13: Reject\n14: Reject received\nStop SenderResponseTimer\n15: GoodCRC\n16: GoodCRC + CRC\n17: GoodCRC\n18: Reject sent\nStart CRCReceiveTimer\n: Policy Engine\n: Policy Engine\nUSB4 Mode not entered; USB link is negotiated via legacy mechanisms\nDFP\nCable Plug\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\nStore copy of MessageID\nCheck and increment MessageIDCounter\nStop CRCReceiveTimer\n","image_count":9,"table_count":12}
{"page":814,"text":"Page 814\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.151, \"Steps for Cable Plug USB4 Mode Entry (Wait)\" below provides a detailed explanation of what happens \nat each labeled step in Figure 8.124, \"Cable Plug Entering USB4 Mode (Wait)\" above.\nTable 8.151  Steps for Cable Plug USB4 Mode Entry (Wait)\nStep\nDFP\nCable Plug\n1\nThe Policy Engine directs the Protocol Layer to \ngenerate an Enter_USB Message to request entry to \n[USB4] mode. \n2\nProtocol Layer creates the Message and passes to PHY \nLayer.\n3\nPHY Layer appends CRC and sends the Enter_USB \nMessage. Starts CRCReceiveTimer.\nPHY Layer receives the Enter_USB Message and \ncompares the CRC it calculated with the one sent to verify \nthe Message.\n4\nPHY Layer removes the CRC and forwards the \nEnter_USB Message to the Protocol Layer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the received Enter_USB \nMessage information to the Policy Engine that \nconsumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC and checks the CRC \nto verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nEnter_USB Message was successfully sent. Policy \nEngine starts SenderResponseTimer. \n10\nPolicy Engine tells the Protocol Layer to form an Wait \nMessage.\n11\nProtocol Layer creates the Message and passes to PHY \nLayer.\n12\nPHY Layer receives the Message and compares the CRC \nit calculated with the one sent to verify the Message.\nPHY Layer appends a CRC and sends the Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer stores the MessageID of the incoming \nMessage.\n14\nThe Protocol Layer forwards the received Wait Message \ninformation to the Policy Engine that consumes it.\n15\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n16\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n17\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n","image_count":0,"table_count":2}
{"page":815,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 815\n18\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the Wait \nMessage was successfully sent.\nCable Plug does not enter [USB4] operation.\nTable 8.151  Steps for Cable Plug USB4 Mode Entry (Wait)\nStep\nDFP\nCable Plug\n","image_count":0,"table_count":2}
{"page":816,"text":"Page 816\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.2.17\n  Unstructured Vendor Defined Messages\n8.3.2.17.1\n  Unstructured VDM\nFigure 8.125, \"Unstructured VDM Message Sequence\" shows an example sequence of an Unstructured VDM \nTransaction between a DFP and UFP. The figure below shows the Messages as they flow across the bus after UFP \nEnters into Modal Operation.\nFigure 8.125 Unstructured VDM Message Sequence\n: Protocol\n: DFP Policy Engine\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nNew Mode Entered\n20 : Send Unstructured VDM\nStart CRCReceive Timer\n21 : Unstructured VDM\n22 : Unstructured VDM + \nCRC\n23 : Unstructured VDM\nCheck MessageID against local copy \nStore Copy of MessageID\n23 : Unstructured VDM Received\nEvaluate Unstructured VDM \nReply with the application specific \nresponse which can be again a \nUnstructured VDM \nStart CRCReceive Timer\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send Unstructured VDM\n11:  Unstructured VDM\n18:  Unstructured VDM Sent\n17: GoodCRC\nCheck MessageID against local copy \nStore Copy of MessageID\n12 : Unstructured VDM + CRC\n16: GoodCRC + CRC\n11:  Unstructured VDM\n15: GoodCRC\n14:  Unstructured VDM Received\nProcess Unstructured VDM as required\n24 : GoodCRC\n25 : GoodCRC + CRC\n26 : GoodCRC\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer\n27 : Unstructured VDM Sent\n","image_count":73,"table_count":9}
{"page":817,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 817\nTable 8.152, \"Steps for Unstructured VDM Message Sequence\" below provides a detailed explanation of what \nhappens at each labeled step in Figure 8.125, \"Unstructured VDM Message Sequence\" above.\nTable 8.152  Steps for Unstructured VDM Message Sequence\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract and has entered an \nActive Mode with the UFP. The Policy Engine directs \nthe Protocol Layer to send an Unstructured \nVendor_Defined Message.\nThe UFP has an Explicit Contract and has entered an \nActive Mode with the UFP\n2\nProtocol Layer creates the Unstructured \nVendor_Defined Message and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the Unstructured \nVendor_Defined Message. Starts CRCReceiveTimer.\nPHY Layer receives the Unstructured Vendor_Defined \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nUnstructured Vendor_Defined Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the Unstructured \nVendor_Defined Message information to the Policy \nEngine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY Layer receives the GoodCRC Message and checks \nthe CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nUnstructured Vendor_Defined Message was \nsuccessfully sent.\n10\nIn this example the Vendor protocol requires a \nresponse. The Policy Engine tells the Protocol Layer to \nform an Unstructured Vendor_Defined Message.\n11\nProtocol Layer creates the Unstructured \nVendor_Defined Message and passes to PHY Layer.\n12\nPHY Layer receives the Unstructured Vendor_Defined \nMessage and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the Unstructured \nVendor_Defined Message. Starts CRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the Unstructured \nVendor_Defined Message information to the Policy \nEngine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n","image_count":0,"table_count":2}
{"page":818,"text":"Page 818\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares the \nCRC it calculated with the one sent to verify the Message.\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nUnstructured Vendor_Defined Message was successfully \nsent.\nTable 8.152  Steps for Unstructured VDM Message Sequence\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":819,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 819\n8.3.2.17.2\n  VDEM\nFigure 8.126, \"VDEM Message Sequence\" shows an example sequence of an VDEM transaction between a DFP and \nUFP. The figure below shows the Messages as they flow across the bus after UFP Enters into Modal Operation.\nFigure 8.126 VDEM Message Sequence\n: Protocol\n: DFP Policy Engine\n: PHY\n: PHY\n: Protocol\n: UFP Policy Engine\nNew Mode Entered\n20 : Send VDEM\nStart CRCReceive Timer\n21 : VDEM\n22 : VDEM + CRC\n23 : VDEM\nCheck MessageID against local copy \nStore Copy of MessageID\n23 : VDEM Received\nEvaluate VDEM \nReply with the application specific \nresponse which can be again a VDEM \nStart CRCReceive Timer\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer\n10: Send VDEM\n11:  VDEM\n18:  VDEM Sent\n17: GoodCRC\nCheck MessageID against local copy \nStore Copy of MessageID\n12 : VDEM + CRC\n16: GoodCRC + CRC\n11:  VDEM\n15: GoodCRC\n14:  VDEM Received\nProcess VDEM as required\n24 : GoodCRC\n25 : GoodCRC + CRC\n26 : GoodCRC\nCheck and Increment MessageIDCounter\nStop CRCReceiveTimer\n27 : VDEM Sent\n","image_count":73,"table_count":9}
{"page":820,"text":"Page 820\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nTable 8.153, \"Steps for VDEM Message Sequence\" below provides a detailed explanation of what happens at each \nlabeled step in Figure 8.126, \"VDEM Message Sequence\" above.\nTable 8.153  Steps for VDEM Message Sequence\nStep\nDFP\nUFP\n1\nThe DFP has an Explicit Contract and has entered an \nActive Mode with the UFP. The Policy Engine directs \nthe Protocol Layer to send a Vendor_Defined_Extended \nMessage.\nThe UFP has an Explicit Contract and has entered an \nActive Mode with the UFP\n2\nProtocol Layer creates the Vendor_Defined_Extended \nMessage and passes to PHY Layer.\n3\nPHY Layer appends CRC and sends the \nVendor_Defined_Extended Message. Starts \nCRCReceiveTimer.\nPHY Layer receives the Vendor_Defined_Extended \nMessage and checks the CRC to verify the Message.\n4\nPHY Layer removes the CRC and forwards the \nVendor_Defined_Extended Message to the Protocol \nLayer.\n5\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the \nVendor_Defined_Extended Message information to the \nPolicy Engine that consumes it.\n6\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n7\nPHY LayerPHY Layer receives the GoodCRC Message \nand checks the CRC to verify the Message.\nPHY Layer appends CRC and sends the GoodCRC \nMessage.\n8\nPHY Layer removes the CRC and forwards the \nGoodCRC Message to the Protocol Layer. \n9\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVendor_Defined_Extended Message was successfully \nsent.\n10\nIn this example the Vendor protocol requires a \nresponse. The Policy Engine tells the Protocol Layer to \nform a Vendor_Defined_Extended Message.\n11\nProtocol Layer creates the Vendor_Defined_Extended \nMessage and passes to PHY Layer.\n12\nPHY Layer receives the Vendor_Defined_Extended \nMessage and compares the CRC it calculated with the \none sent to verify the Message.\nPHY Layer appends a CRC and sends the \nVendor_Defined_Extended Message. Starts \nCRCReceiveTimer.\n13\nProtocol Layer checks the MessageID in the incoming \nMessage is different from the previously stored value \nand then stores a copy of the new value.\nThe Protocol Layer forwards the \nVendor_Defined_Extended Message information to the \nPolicy Engine that consumes it.\n14\nProtocol Layer generates a GoodCRC Message and \npasses it PHY Layer.\n15\nPHY Layer appends a CRC and sends the GoodCRC \nMessage.\nPHY Layer receives GoodCRC Message and compares \nthe CRC it calculated with the one sent to verify the \nMessage.\n","image_count":0,"table_count":2}
{"page":821,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 821\n16\nPHY Layer removes the CRC and forwards the GoodCRC \nMessage to the Protocol Layer. \n17\nProtocol Layer verifies and increments the \nMessageIDCounter and stops CRCReceiveTimer. \nProtocol Layer informs the Policy Engine that the \nVendor_Defined_Extended Message was successfully \nsent.\nTable 8.153  Steps for VDEM Message Sequence\nStep\nDFP\nUFP\n","image_count":0,"table_count":2}
{"page":822,"text":"Page 822\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3\n  State Diagrams\n8.3.3.1\n  Introduction to state diagrams used in Chapter 8\nThe state diagrams defined in Section 8.3.3, \"State Diagrams\" are Normative and Shall define the operation of the \nPower Delivery Policy Engine.\nNote:\nThese state diagrams are not intended to replace a well written and robust design.\nFigure 8.127 Outline of States\nFigure 8.127, \"Outline of States\" shows an outline of the states defined in the following sections. At the top there is \nthe name of the state. This is followed by \"Actions on entry\" a list of actions carried out on entering the state. If \nthere are also \"Actions on exit\" a list of actions carried out on exiting the state, then these are listed as well; \notherwise, this box is omitted from the state. At the bottom the status of PD is listed: \n\n“Power\" which indicates the present output power for a Source Port or input power for a Sink Port.\n\n“PD\" which indicates the present Attachment status either \"Attached\", \"Detached\", or \"unknown\".\nTransitions from one state to another are indicated by arrows with the conditions listed on the arrow. Where there \nare multiple conditions, these are connected using either a logical OR \"|\" or a logical AND \"&\".\nIn some cases, there are transitions which can occur from any state to a particular state. These are indicated by an \narrow which is unconnected to a state at one end, but with the other end (the point) connected to the final state.\nIn some state diagrams it is necessary to enter or exit from states in other diagrams (e.g., Source Port or Sink Port \nstate diagrams). Figure 8.128, \"References to states\" indicates how such references are made. The reference is \nindicated with a hatched box. The box contains the name of the state and whether the state is a DFP or UFP. It has \nalso been necessary to indicate conditional entry to either Source Port or Sink Port state diagrams. This is achieved \nby the use of a bulleted list indicating the preconditions (see example in Figure 8.129, \"Example of state reference \nwith conditions\"). It is also possible that the entry and return states are the same. Figure 8.130, \"Example of state \nreference with the same entry and exit\" indicates a state reference where each referenced state corresponds to \neither the entry state or the exit state.\n<Name of State>\nActions on entry:\n“List of actions to carry out on entering the \nstate”\nPower (VI) = “Present power level” \nPD = “attachment status”\nActions on exit:\n“List of actions to carry out on exiting the \nstate”\n","image_count":0,"table_count":1}
{"page":823,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 823\nFigure 8.128 References to states\nFigure 8.129 Example of state reference with conditions\nFigure 8.130 Example of state reference with the same entry and exit\nTimers are included in many of the states. Timers are initialized (set to their starting condition) and run (timer is \ncounting) in the particular state it is referenced. As soon as the state is exited then the timer is no longer active. \nWhere the timers continue to run outside of the state (such as the NoResponseTimer), this is called out in the text. \nTimeouts of the timers are listed as conditions on state transitions.\nThe SenderResponseTimer is a special case, as it May be stopped and started from outside the states in which it \nis used. To allow this to be done without over-complicating the state diagrams, the SenderResponseTimer is \ndescribed with its own state diagram (Figure 8.131, \"SenderResponseTimer Policy Engine State Diagram\"). The \ncontrol of this Timer is shared between the Policy Engine and the Chunking Layer.\n<Name of reference state> \n(<DFP | UFP>)\nHard Reset:\n• Consumer or \nConsumer/Provider -> \nPE_SNK_....\n• Provider/Consumer in \nSource role -> \nPE_SRC_...\n<Name of reference state 1> or \n<Name of reference state 2> \n(<DFP | UFP>)\n","image_count":48,"table_count":1}
{"page":824,"text":"Page 824\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nConditions listed on state transitions will come from one of three sources and, when there is a conflict, Should be \nserviced in the following order:\n1)\nMessage and related indications passed up to the Policy Engine from the Protocol Layer (Message sent; \nMessage received etc.).\n2)\nEvents triggered within the Policy Engine e.g., timer timeouts.\n3)\nInformation and requests coming from the Device Policy Manager relating either to Local Policy, or to \nother modules which the Device Policy Manager controls such as power supply and USB-C® Port Control.\nNote:\nThe following state diagrams are not intended to cover all possible corner cases that could be \nencountered. For example, where an outgoing Message is Discarded, due to an incoming Message by the \nProtocol Layer (see Section 6.12.2.3, \"Protocol Layer Message Reception\") it will be necessary for the \nhigher layers of the system to handle a retry of the AMS that was being initiated, after first handling the \nincoming Message.\n","image_count":0,"table_count":1}
{"page":825,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 825\n8.3.3.1.1\n  SenderResponseTimer State Diagram\nFigure 8.131, \"SenderResponseTimer Policy Engine State Diagram\" below shows the state diagram for the Policy \nEngine in a Source Port or a Sink Port. The following sections describe operation in each of the states.\nFigure 8.131 SenderResponseTimer Policy Engine State Diagram\n8.3.3.1.1.1\n  SRT_Stopped State\nThe SRT_Stopped State Shall be the starting state for the SenderResponseTimer either on power up or after a \nHard Reset. On entry to this state the Policy Engine Shall stop incrementing the SR_Timer. \nThe Policy Engine Shall transition to the SRT_Running State:\n\nWhen the SenderResponseTimer is started from within a Policy Engine state, or\n\nWhen a Start_SRT is requested from the Chunking Layer.\n8.3.3.1.1.2\n  SRT_Running State\nOn entry to the SRT_Running State the SenderResponseTimer state machine Shall:\n\nSet the SR_Timer to zero\n\nStart running SR_Timer.\nThe SenderResponseTimer state machine Shall transition to the SRT_Expired State:\n\nWhen the SR_Timer reaches its maximum count\nThe SenderResponseTimer state machine Shall transition to the SRT_Stopped State:\n\nWhen the SenderResponseTimer is stopped by exiting a Policy Engine state, or\n\nWhen a Stop_SRT is requested from the Chunking Layer\nSRT_Stopped\nActions on entry:\nStop Incrementing SR_Timer1\nPower-up |\nHard Reset |\nSenderResponseTimer stopped on exit from Policy Engine State |\nStop_SRT requested from Chunking Layer\nActions on entry:\nZero SR_Timer\nStart Incrementing SR_Timer1\nSRT_Running\nSenderResponseTimer started \nfrom within Policy Engine State |\nStart_SRT requested from Chunking Layer\nActions on entry:\nInform Policy Engine of \nSenderResponseTimer timeout\nSRT_Expired\nSR_Timer1 reached\n maximum count\nPolicy Engine informed\n1)\nThe SR_Timer is regarded as the mechanism within the SenderResponseTimer state diagram that implements the SenderResponseTimer.  \n","image_count":0,"table_count":3}
{"page":826,"text":"Page 826\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.1.1.3\n  SRT_Expired State\nOn entry to the SRT_Running State the SenderResponseTimer state machine Shall Inform Policy Engine of \nSenderResponseTimer timeout\nThe Policy Engine Shall then transition to the SRT_Stopped state:\n\nWhen the Policy Engine has been informed.\n","image_count":0,"table_count":1}
{"page":827,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 827\n8.3.3.2\n  Policy Engine Source Port State Diagram\nFigure 8.132, \"Source Port State Diagram\" below shows the state diagram for the Policy Engine in a Source Port. The \nfollowing sections describe operation in each of the states.\nFigure 8.132 Source Port State Diagram\n1)\nImplementation of the CapsCounter is Optional. In the case where this is not implemented the Source Shall continue \nto send Source_Capabilities Messages each time the SourceCapabilityTimer times out.\n2)\nSince the Sink is required to make a Valid request from the offered capabilities the expected transition is via \"Request \ncan be met\" unless the Source Capabilities have changed since the last offer.\n3)\n“Contract Invalid\" means that the previously Negotiated voltage and Current values are no longer included in the \nSource's new Capabilities. If the Sink fails to make a Valid Request in this case, then Power Delivery operation is no lon-\nger possible and Power Delivery mode is exited with a Hard Reset.\nProtocol LayerReset4 | \nSwapSourceStartTimer timeout\nPE_SRC_Discovery\nActions on entry:\nInitialize and run SourceCapabilityTimer\nPower = Default (5V) or Implicit Contract\nPD = not Connected\nPE_SRC_Ready\nActions on entry:\nNotify Protocol Layer of end of AMS8\nInitialize and run DiscoverIdentityTimer7\nInitialize and run SourcePPSCommTimer10\nInitialize and run SourceEPRKeepAliveTimer11\nPower = Explicit Contract \nPD = Connected\nPE_SRC_Transition_Supply\nActions on entry:\nSend Accept message (within tReceiverResponse)\nRequest Device Policy Manager to transition Power Supply \nPower = transition\nPD = Connected\nActions on exit:\nSend PS_RDY message\n(In SPR Mode & Request Message) |\n(In EPR Mode & EPR_Request Message)\nPE_SRC_Negotiate_Capability\nActions on entry:\nGet Device Policy Manager evaluation of sink request:\n• Can be met\n• Can’t be met\n• Could be met later from Power Reserve\nIf the sink request for Operating Current or Operating Power can be \nmet, but the sink still requires more power (“Capability Mismatch”) \nthis information will be passed to Device Policy Manager4\nPower = DefauIt (5V) or Implicit/Explicit Contract  \nPD = Connected\nPE_SRC_Capability_Response\nActions on entry:\nSend Reject message if request can’t be met\nSend Wait message if request could be met \nlater from the Power Reserve and present \nContract is still valid\nPower = DefauIt (5V) or Implicit/\nExplicit Contract \nPD = Connected\nStart\nExplicit Contract\n(Reject message sent &\nContract still valid) |\nWait message sent\nPE_SRC_Send_Capabilities\nActions on entry:\nRequest present source capabilities from Device Policy Manager\nIn SPR Mode Send Source_Capabilities Message\nIn EPR Mode Send EPR_Source_Capabilities Message\nIncrement CapsCounter (optional)1\nIf GoodCRC received:\n• stop NoResponseTimer\n• reset HardResetCounter and CapsCounter\n• initialize and run SenderResponseTimer\nPower = DefauIt (5V) or Implicit/Explicit Contract \nPD = Connected/not Connected\nPE_SRC_Hard_Reset\nActions on entry:\nGenerate Hard Reset signalling\nInitialize and start NoResponseTimer\nStart PSHardResetTimer\nIncrement HardResetCounter\nPower = DefauIt (5V) or \nImplicit/Explicit Contract\nPD = Connected/not Connected\nRequest can’t be met | \nRequest met later\nfrom Power Reserve\nExplicit Contract &\nReject message sent &\nContract Invalid4\nPSHardResetTimer \ntimeout\nRequest can be met\nPower supply ready\nPower source at default\n(SourceCapabilityTimer timeout & \nCapsCounter � nCapsCount1)\nCapabilities message sending failure \n(without GoodCRC) &not presently PD Connected6\nIn SPR Mode Request Message received |\nIn EPR Mode EPR_Request Message received \nPE_SRC_Get_Sink_Cap\nActions on entry:\nIf SPR Mode capabilities requested send \nGet_Sink_Cap Message\nIf EPR Mode capabilities requested send \nEPR_Get_Sink_Cap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nget sink capabilities request \nfrom Device Policy Manager12\n(SPR Sink Capabilities requested \n& Sink_Capabilities Message) |\n(EPR Sink Capabilities requested \n& EPR_Sink_Capabilities Message) |\nSenderResponseTimer timeout\nActions on exit:\nPass sink capabilities/outcome to Device Policy \nManager\nHard reset signalling received\nSenderResponseTimer timeout\nnot previously PD Connected6&\nNoResponseTimer timeout &\nHardResetCounter > nHardResetCount1\nPSHardResetTimer \ntimeout\n(SourceCapabilityTimer timeout & CapsCounter > nCapsCount1) |\n(not previously PD Connected6  &\nNoResponseTimer timeout & \nHardResetCounter > nHardResetCount1)\nPE_SRC_Startup\nActions on entry:\nReset CapsCounter\nReset Protocol Layer\nStart SwapSourceStartTimer (only after Swap)\nPower = DefauIt (0V or 5V) or Implicit Contract\nPD = Connected/not Connected\nPE_SRC_Transition_to_default\nActions on entry:\nRequest Device Policy Manager to request power \nsupply Hard Resets to vSafe5V via vSafe0V\nReset local HW\nRequest Device Policy Manager to set Port Data \nRole to DFP and turn off VCONN\nPower = rising/falling to default (5V)\nPD = not Connected\nPE_SRC_Disabled\nActions on entry:\nDisable Power Delivery\nPower = DefauIt (5V)\nPD =not Connected\nActions on exit:\nRequest Device Policy Manager to turn on VCONN\nInform Protocol Layer Hard Reset complete\nErrorRecovery\npreviously PD Connected6 &\nNoResponseTimer timeout &\nHardResetCount\n> nHardResetCount\nPE_SRC_Wait_New_Capabilities\nActions on entry:\nWait for new Source Capabilities9\nPower = DefauIt (5V)\nPD =Connected\nPE_SRC_Hard_Reset_Received\nActions on entry:\nStart PSHardResetTimer\nInitialize and start NoResponseTimer\nPower = DefauIt (5V) or \nImplicit/Explicit Contract\nPD = Connected/not Connected\nSource capability \nchange\n(from Device \nPolicy Manager)\nno Explicit Contract &\n(Reject message sent |\nWait message sent)\nSource capability change\n(from Device Policy Manager) |\n(In SPR Mode & Get_Source_Cap Message) |\n(In EPR Mode & EPR_Get_Source_Cap Message)\nProtocol Error\nActions on exit:\nIf the Source is initiating an AMS then notify the \nProtocol Layer than the first Message in an AMS \nwill follow8\nSourcePPSCommTimer timeout |\nSourceEPRKeepAliveTimer timeout\nPE_SRC_EPR_Keep_Alive\nActions on entry:\nSend EPR_Keep_Alive_Ack Message\nPower = Explicit Contract \nPD = Connected\nEPR_Keep_Alive Message\nEPR_Keep_Alive_Ack Sent\nHard Reset request from \nDevice Policy Manager |\nEPR Mode & Request Message received |\nEPR Capable & SPR Mode & EPR_Request Message received\n(In EPR Mode & Get_Source_Cap Message) |\n(In SPR Mode & EPR_Get_Source_Cap Message)\nSource capabilities \nmessage sent\nPE_SRC_Give_Source_Cap\nActions on entry:\nGet present Source capabilities from Device Policy Manager\nSend Capabilities message (based on Device Policy Manager response):\n• If Get_Source_Cap Message received send Source_Capabilities Message.\n• In EPR_Get_Source_Cap Message received send EPR_Source_Capabilities Message\nPower = Explicit Contract\nPD = Connected\n","image_count":23,"table_count":10}
{"page":828,"text":"Page 828\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n4)\nAfter a Power Swap the New Source is required to wait an additional tSwapSourceStart before sending a \nSource_Capabilities Message. This delay is not required when first starting up a system.\n5)\nPD Connected is defined as a situation when the Port Partners are actively communicating. The Port Partners remain PD \nConnected after a Swap until there is a transition to Disabled or the connector is able to identify a Detach. \n6)\nPort Partners are no longer PD Connected after a Hard Reset, but consideration needs to be given as to whether there has \nbeen a PD Connection while the Ports have been Attached to prevent unnecessary USB Type-C Error Recovery.\n7)\nThe DiscoverIdentityTimer is run when this is a VCONN Source and a PD Connection with a Cable Plug needs to be es-\ntablished i.e. no GoodCRC Message has yet been received in response to a Discover Identity Command.\n8)\nSee Section 5.7, \"Collision Avoidance\", Section 6.6.16, \"Collision Avoidance Timers\" and Section 6.10, \"Collision Avoidance\".\n9)\nIn the PE_SRC_Wait_New_Capabilities State the Device Policy Manager Should either decide to send no further Source \nCapabilities or Should send a different set of Source Capabilities. Continuing to send the same set of Source Capabilities \ncould result in a live lock situation.\n10)\nThe SourcePPSCommTimer is only initialized and run when the present Explicit Contract is for an SPR PPS APDO. Sourc-\nes that do not support SPR PPS do not need to implement the SourcePPSCommTimer.\n11)\nThe SourceEPRKeepAliveTimer is only initialized and run when the Source is in EPR Mode; Sources that do not support \nEPR Mode do not need to implement the SourceEPRKeepAliveTimer.\n12)\nEither SPR or EPR Sink Capabilities May be requested, regardless of whether or not the Source is currently operating in \nSPR or EPR Mode.\n8.3.3.2.1\n  PE_SRC_Startup State\nPE_SRC_Startup Shall be the starting state for a Source Policy Engine either on power up or after a Hard Reset. On \nentry to this state the Policy Engine Shall reset the CapsCounter and reset the Protocol Layer.\nNote:\nResetting the Protocol Layer will also reset the MessageIDCounter and stored MessageID (see Section \n6.12.2.3, \"Protocol Layer Message Reception\").\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state:\n\nWhen the Protocol Layer reset has completed if the PE_SRC_Startup state was entered due to the \nsystem first starting up.\n\nWhen the SwapSourceStartTimer times out if the PE_SRC_Startup state was entered as the result of a \nPower Role Swap.\nNote:\nSources Shall remain in the PE_SRC_Startup state, without sending any Source_Capabilities Messages \nuntil a plug is Attached.\n8.3.3.2.2\n  PE_SRC_Discovery State\nOn entry to the PE_SRC_Discovery state the Policy Engine Shall initialize and run the SourceCapabilityTimer in \norder to trigger sending a Source_Capabilities Message.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nThe SourceCapabilityTimer times out and CapsCounter ≤ nCapsCount.\nThe Policy Engine May Optionally go to the PE_SRC_Disabled state when:\n\nThe Port Partners are not presently PD Connected\n\nAnd the SourceCapabilityTimer times out \n\nAnd CapsCounter > nCapsCount.\nThe Policy Engine Shall go to the PE_SRC_Disabled state when:\n\nThe Port Partners have not been PD Connected (the Source Port remains Attached to a Port it has not \nhad a PD Connection with during this Attachment)\n","image_count":0,"table_count":1}
{"page":829,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 829\n\nAnd the NoResponseTimer times out \n\nAnd the HardResetCounter > nHardResetCount. \nNote:\nIn the PE_SRC_Disabled state the Attached device is assumed to be unresponsive. The Policy Engine \noperates as if the device is Detached until such time as a Detach/Re-attach is detected.\n8.3.3.2.3\n  PE_SRC_Send_Capabilities State\nNote:\nThis state can be entered from the PE_SRC_Soft_Reset state.\nOn entry to the PE_SRC_Send_Capabilities state the Policy Engine Shall request the present Port capabilities from \nthe Device Policy Manager. The Policy Engine Shall then request the Protocol Layer to send a capabilities Message \ncontaining these capabilities. The Policy Engine Shall request:\n\nA Source_Capabilities Message if the Source is in SPR Mode or\n\nAn EPR_Source_Capabilities Message if the Source is in EPR Mode.\nThe Policy Engine Shall then increment the CapsCounter (if implemented). \nIf a GoodCRC Message is received, then the Policy Engine Shall:\n\nStop the NoResponseTimer.\n\nReset the HardResetCounter and CapsCounter to zero.\nNote:\nThe HardResetCounter Shall only be set to zero in this state and at power up; its value Shall be \nmaintained during a Hard Reset.\n\nInitialize and run the SenderResponseTimer.\nOnce a Source_Capabilities Message has been received and acknowledged by a GoodCRC Message, the Sink is \nrequired to then send a Request Message within tSenderResponse.\nThe Policy Engine Shall transition to the PE_SRC_Negotiate_Capability state when:\n\nA Request Message is received from the Sink and the Source is operating in SPR Mode or\n\nAn EPR_Request Message is received from the Sink and the Source is operating in EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Discovery state when:\n\nThe Protocol Layer indicates that the Message has not been sent and we are presently not Connected. \nThis is part of the Capabilities sending process whereby successful Message sending indicates \nconnection to a PD Sink Port.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThe SenderResponseTimer times out. In this case a transition back to USB Default Operation is \nrequired.\nWhen:\n\nThe Port Partners have not been PD Connected (the Source Port remains Attached to a Port it has not \nhad a PD Connection with during this Attachment)\n\nAnd the NoResponseTimer times out \n\nAnd the HardResetCounter > nHardResetCount. \nThe Policy Engine Shall do one of the following:\n\nTransition to the PE_SRC_Discovery state.\n\nTransition to the PE_SRC_Disabled state.\n","image_count":0,"table_count":1}
{"page":830,"text":"Page 830\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nNote:\nThat in either case the Attached device is assumed to be unresponsive. The Policy Engine Should operate \nas if the device is Detached until such time as a Detach/Re-attach is detected.\nThe Policy Engine Shall go to the ErrorRecovery state when:\n\nThe Port Partners have previously been PD Connected (the Source Port remains Attached to a Port it has \nhad a PD Connection with during this Attachment)\n\nAnd the NoResponseTimer times out.\n\nAnd the HardResetCounter > nHardResetCount.\n8.3.3.2.4\n  PE_SRC_Negotiate_Capability State\nOn entry to the PE_SRC_Negotiate_Capability state the Policy Engine Shall ask the Device Policy Manager to \nevaluate the Request from the Attached Sink. The response from the Device Policy Manager Shall be one of the \nfollowing:\n\nThe Request can be met.\n\nThe Request cannot be met\n\nThe Request could be met later from the Power Reserve.\nThe Policy Engine Shall transition to the PE_SRC_Transition_Supply state when:\n\nThe Request can be met.\nThe Policy Engine Shall transition to the PE_SRC_Capability_Response state when:\n\nThe Request cannot be met.\n\nOr the Request can be met later from the Power Reserve.\n8.3.3.2.5\n  PE_SRC_Transition_Supply State\nThe Policy Engine Shall be in the PE_SRC_Transition_Supply state while the power supply is transitioning from one \npower to another.\nOn entry to the PE_SRC_Transition_Supply state, the Policy Engine Shall request the Protocol Layer to send an \nAccept Message and inform the Device Policy Manager that it Shall transition the power supply to the Requested \npower level.\nNote:\nIf the power supply is currently operating at the requested power no change will be necessary.\nOn exit from the PE_SRC_Transition_Supply state the Policy Engine Shall request the Protocol Layer to send a \nPS_RDY Message.\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nThe Device Policy Manager informs the Policy Engine that the power supply is ready.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nA Protocol Error occurs.\n8.3.3.2.6\n  PE_SRC_Ready State\nIn the PE_SRC_Ready state the PD Source Shall be operating at a stable power with no ongoing Negotiation. It Shall \nrespond to requests from the Sink, events from the Device Policy Manager.\nOn entry to the PE_SRC_Ready state the Source Shall notify the Protocol Layer of the end of the Atomic Message \nSequence (AMS). If the transition into PE_SRC_Ready is the result of Protocol Error that has not caused a Soft Reset \n(see Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\") then the notification to the \nProtocol Layer of the end of the AMS Shall Not be sent since there is a Message to be processed.\n","image_count":0,"table_count":1}
{"page":831,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 831\nOn entry to the PE_SRC_Ready state if this is a VCONN Source which needs to establish communication with a Cable \nPlug, the Policy Engine Shall:\n\nInitialize and run the DiscoverIdentityTimer (no GoodCRC Message response yet received to Discover \nIdentity Message).\nOn entry to the PE_SRC_Ready state if the current Explicit Contract is for an SPR PPS APDO, then the Policy Engine \nShall do the following: \n\nInitialize and run the SourcePPSCommTimer.\nOn entry to the PE_SRC_Ready state if the current Explicit Contract is for EPR Mode, then the Policy Engine Shall do \nthe following:\n\nInitialize and run the SourceEPRKeepAliveTimer.\nOn exit from the PE_SRC_Ready, if the Source is initiating an AMS, then the Policy Engine Shall notify the Protocol \nLayer that the first Message in an AMS will follow.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nThe Device Policy Manager indicates that Source Capabilities have changed or\n\nA Get_Source_Cap Message is received, and the Source is in SPR Mode or\n\nAn EPR_Get_Source_Cap Message is received, and the Source is in EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Negotiate_Capability state when:\n\nA Request Message is received, and the Source is in SPR Mode or\n\nAn EPR_Request Message is received, and the Source is in EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Get_Sink_Cap state when:\n\nThe Device Policy Manager asks for the Sink Capabilities.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThe Source is operating as an SPR PPS and the SourcePPSCommTimer Timer times-out or\n\nThe Source is in EPR Mode and the SourceEPRKeepAliveTimer Timer times-out.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Keep_Alive state when:\n\nAn EPR_KeepAlive Message is received.\nThe Policy Engine Shall transition to the PE_SRC_Give_Source_Cap State when:\n\nIn EPR Mode and a Get_Source_Cap Message is received or\n\nIn SPR Mode and an EPR_Get_Source_Cap Message is received.\n8.3.3.2.7\n  PE_SRC_Disabled State\nIn the PE_SRC_Disabled state the PD Source supplies default power and is unresponsive to USB Power Delivery \nmessaging, but not to Hard Reset Signaling.\n8.3.3.2.8\n  PE_SRC_Capability_Response State\nThe Policy Engine Shall enter the PE_SRC_Capability_Response state if there is a Request received from the Sink \nthat cannot be met based on the present capabilities. When the present Explicit Contract is not within the present \ncapabilities it is regarded as Invalid and a Hard Reset will be triggered.\nOn entry to the PE_SRC_Hard_Reset state the Policy Engine Shall request the Protocol Layer to send one of the \nfollowing:\n","image_count":0,"table_count":1}
{"page":832,"text":"Page 832\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nReject Message - if the request cannot be met or the present Explicit Contract is Invalid.\n\nWait Message - if the request could be met later from the Power Reserve. A Wait Message Shall Not be \nsent if the present Explicit Contract is Invalid.\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nThere is an Explicit Contract and\n\nA Reject Message has been sent and the present Explicit Contract is still Valid or\n\nA Wait Message has been sent.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThere is an Explicit Contract and\n\nThe Reject Message has been sent and the present Explicit Contract is Invalid (i.e., the Sink had to \nrequest a new value so instead we will return to USB Default Operation).\nThe Policy Engine Shall transition to the PE_SRC_Wait_New_Capabilities state when:\n\nThere is no Explicit Contract and\n\nA Reject Message has been sent or\n\nA Wait Message has been sent.\n8.3.3.2.9\n  PE_SRC_Hard_Reset State\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state from any state when:\n\nHard Reset request from Device Policy Manager or\n\nIn EPR Mode and a Request Message is received or\n\nEPR Capable and in SPR Mode and an EPR_Request Message is received.\nOn entry to the PE_SRC_Hard_Reset state the Policy Engine Shall: \n\nrequest the generation of Hard Reset Signaling by the PHY Layer\n\ninitialize and run the NoResponseTimer.\nNote:\nThe NoResponseTimer Shall continue to run in every state until it is stopped or times out.\n\ninitialize and run the PSHardResetTimer and increment the HardResetCounter.\nThe Policy Engine Shall transition to the PE_SRC_Transition_to_default state when:\n\nThe PSHardResetTimer times out.\n8.3.3.2.10\n  PE_SRC_Hard_Reset_Received State\nThe Policy Engine Shall transition from any state to the PE_SRC_Hard_Reset_Received state when:\n\nHard Reset Signaling is detected.\nOn entry to the PE_SRC_Hard_Reset_Received state the Policy Engine Shall:\n\ninitialize and run the PSHardResetTimer\n\ninitialize and run the NoResponseTimer.\nNote:\nThe NoResponseTimer Shall continue to run in every state until it is stopped or times out.\nThe Policy Engine Shall transition to the PE_SRC_Transition_to_default state when:\n","image_count":0,"table_count":1}
{"page":833,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 833\n\nThe PSHardResetTimer times out.\n8.3.3.2.11\n  PE_SRC_Transition_to_default State\nOn entry to the PE_SRC_Transition_to_default state the Policy Engine Shall:\n\nindicate to the Device Policy Manager that the power supply Shall Hard Reset (see Section 7.1.5, \n\"Response to Hard Resets\").\n\nrequest a reset of the local hardware \n\nrequest the Device Policy Manager to set the Port Data Role to DFP and turn off VCONN.\nOn exit from the PE_SRC_Transition_to_default state the Policy Engine Shall:\n\nrequest the Device Policy Manager to turn on VCONN\n\ninform the Protocol Layer that the Hard Reset is complete.\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n\nThe Device Policy Manager indicates that the power supply has reached the default level.\n8.3.3.2.12\n  PE_SRC_Get_Sink_Cap State\nIn this state the Policy Engine, due to a request from the Device Policy Manager, Shall request the capabilities from \nthe Attached Sink.\nOn entry to the PE_SRC_Get_Sink_Cap state the Policy Engine Shall request the Protocol Layer to send a \nGet_Sink_Cap Message in order to retrieve the Sink Capabilities. The Policy Engine Shall send:\n\nA Get_Sink_Cap Message when the Device Policy Manager requests SPR capabilities or\n\nAn EPR_Get_Sink_Cap Message when the Device Policy Manager requests EPR Capabilities.\nThe Policy Engine Shall then start the SenderResponseTimer.\nOn exit from the PE_SRC_Get_Sink_Cap state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nSPR Sink Capabilities were requested and a Sink_Capabilities Message is received or\n\nEPR Sink Capabilities were requested and an EPR_Sink_Capabilities Message is received or\n\nThe SenderResponseTimer times out.\n8.3.3.2.13\n  PE_SRC_Wait_New_Capabilities State\nIn this state the Policy Engine has been unable to Negotiate an Explicit Contract and is waiting for new Capabilities \nfrom the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nThe Device Policy Manager indicates that Source Capabilities have changed.\n8.3.3.2.14\n  PE_SRC_EPR_Keep_Alive State\nOn entry to the PE_SRC_EPR_Keep_Alive State the Policy Engine Shall send a EPR_KeepAlive_Ack Message.\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nThe EPR_KeepAlive_Ack Message has been sent.\n","image_count":0,"table_count":1}
{"page":834,"text":"Page 834\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.2.15\n  8.3.3.2.15PE_SRC_Give_Source_Cap State\n\nOn entry to the PE_SRC_Give_Source_Cap State the Policy Engine Shall request the Device Policy \nManager for the current system capabilities. \nThe Policy Engine Shall then request the Protocol Layer to send a Source Capabilities Message containing these \ncapabilities. \n The Policy Engine Shall send:\n\nA Source_Capabilities Message when a Get_Source_Cap Message is received or\n\nAn EPR_Source_Capabilities Message when a EPR_Get_Source_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nThe Source Capabilities Message has been successfully sent.\n","image_count":0,"table_count":1}
{"page":835,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 835\n8.3.3.3\n  Policy Engine Sink Port State Diagram\nFigure 8.133, \"Sink Port State Diagram\" below shows the state diagram for the Policy Engine in a Sink Port. The \nfollowing sections describe operation in each of the states.\nFigure 8.133 Sink Port State Diagram\n1)\nSource Capabilities Messages received in States other than PE_SNK_Wait_for_Capabilities, PE_SNK_Ready or \nPE_SNK_Get_Source_Cap constitute a Protocol Error.\n2)\nThe SinkRequestTimer Should Not be stopped if a Ping (Deprecated) Message is received in the PE_SNK_Ready state \nsince it represents the maximum time between requests after a Wait Message which is not reset by a Ping (Deprecat-\ned) Message.\n3)\nDuring a Hard Reset the Source voltage will transition to vSafe0V and then transition to vSafe5V. Sinks need to ensure \nthat VBUS present is not indicated until after the Source has completed the Hard Reset process by detecting both of these \ntransitions.\nNew power required |\nSinkRequestTimer\nTimeout |\nSinkPPSPeriodicTimer \nTimeout\nStart\nExplicit Contract &\n(Reject message received | \nWait message received)\nHard reset signalling received\nPower Sink\n at default\nProtocol Layer Reset\nHard Reset complete\nVBUS\n6 present3\n((SPR Mode & Source_Capabilities Message) | \n(EPR Mode & EPR_Source_Capabilities Message received))1\nDevice Policy Manager Response received\nAccept message received\nPS_RDY message\nreceived\nGet_Sink_Cap Message |\nEPR_Get_Sink_Cap Message\nSink capabilities \nmessage sent\n((SinkWaitCapTimer timeout |\nPSTransitionTimer timeout) &\n(HardResetCounter � nHardResetCount)) |\nHard Reset request from \nDevice Policy Manager |\nEPR Mode & (EPR_Source _Capabilites message \nwith An EPR PDO in positions 1..7 |\nSource_Capabilities Message not \nrequested by Get_Source_caps)\nPE_SNK_Startup\nActions on entry:\nReset Protocol Layer\nPower = DefauIt (0V or 5V) or Implicit Contract\nPD = Connected/not Connected\nSenderResponseTimer\nTimeout\nPE_SNK_Discovery\nActions on entry:\nWait for VBUS\n6\nPower = Default (0V or 5V) or Implicit Contract\nPD = Connected/not Connected\nPE_SNK_Wait_for_Capabilities\nActions on entry:\nInitialize and run SinkWaitCapTimer\nPower = Default (5V) or Implicit Contract\nPD = Connected/not Connected\nPE_SNK_Evaluate_Capability\nActions on entry:\nReset HardResetCounter to zero.\nAsk Device Policy Manager to evaluate the options based on supplied \ncapabilities, any Power Reserve that it needs, and respond indicating \nthe selected capability and, Optionally, a “Capability Mismatch”.\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected\nPE_SNK_Select_Capability\nActions on entry:\nSend Request based on Device Policy Manager response:\n• Request from present capabilities\n• Optionally Indicate that other capabilities would be preferred \n(“Capability Mismatch”)\nInitialize and run SenderResponseTimer\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected\nPE_SNK_Transition_Sink\nActions on entry:\nInitialize and run PSTransitionTimer\nPower = transition\nPD = Connected\nActions on exit:\nRequest Device Policy Manager transitions sink power \nsupply to new power (if required)\nPE_SNK_Ready\nActions on entry:\nInitialize and run SinkRequestTimer2 (on receiving Wait)\nInitialize and run DiscoverIdentityTimer4\nInitialize and run the SinkPPSPeriodicTimer5\nIn EPR Mode Initialize and run the SinkEPRKeepAliveTimer8\nIf Sink supports Fast Role Swap send Get_Sink_Cap Message7\nPower = Explicit Contract\nPD = Connected\nPE_SNK_Give_Sink_Cap\nActions on entry:\nGet present sink capabilities from Device Policy Manager\nSend Capabilities message (based on Device Policy Manager response):\n• If Get_Sink_Cap Message received send Sink_Capabilities Message.\n• In EPR_Get_Sink Cap Message received send EPR_Sink_Capabilities Message\nPower = Explicit Contract\nPD = Connected\nPE_SNK_Hard_Reset\nActions on entry:\nGenerate Hard Reset signalling.\nIncrement HardResetCounter.\nPower = DefauIt (5V) or Implicit/Explicit Contract\nPD = Connected/not Connected\nPE_SNK_Transition_to_default\nActions on entry:\nRequest Device Policy Manager to request power \nsink transition to default\nReset local HW\nSet Port Data Role to UFP and turn off VCONN\nPower = rising/falling to default (5V)\nPD = not Connected\nActions on exit:\nInform Protocol Layer Hard Reset complete\nno Explicit Contract &\n(Reject message received | \nWait message received)\n((SPR Mode & Source_Capabilities Message) |\n(EPR Mode & EPR_Source Capabilities Message))1\nActions on exit:\nIf the Sink is initiating an AMS then notify the Protocol Layer that the first Message \nin the AMS will follow.\nProtocol Error\nPE_SNK_EPR_Keep_Alive\nActions on entry:\nSend EPR_KeepAlive Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nSinkEPRKeepAliveTimer Timeout\nEPR_KeepAlive_Ack Message\nSenderResponseTimer Timeout\nPE_SNK_Get_Source_Cap\nActions on entry:\nIf SPR Mode capabilities requested send \nGet_Source_Cap Message\nIf EPR Mode capabilities requested send \nEPR_Get_Source_Cap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nget source capabilities request \nfrom Device Policy Manager\n(EPR Mode &\nSPR Source Capabilities requested &\nSource_Capabilities Message\n received) |\n(SPR MODE & \nEPR Source Capabilities requested &\nEPR_Source_Capabilities Message\nreceived) |\nSenderResponseTimer timeout\nActions on exit:\nPass Source capabilities/outcome to Device \nPolicy Manager\n(SPR Mode &\nSPR Source Capabilities requested &\nSource_Capabilities Message) |\n(EPR MODE & \nEPR Source Capabilities requested &\nEPR_Source_Capabilities Message)\n","image_count":0,"table_count":12}
{"page":836,"text":"Page 836\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n4)\nThe DiscoverIdentityTimer is run when this is a VCONN Source and a PD Connection with a Cable Plug needs to be es-\ntablished i.e. no GoodCRC Message has yet been received in response to a Discover Identity Command.\n5)\nThe SinkPPSPeriodicTimer is only initialized and run when the present Explicit Contract is for an SPR PPS APDO. \nSinks that do not support PPS do not need to implement the SinkPPSPeriodicTimer.\n6)\nA Sink that is a VPD May use VCONN as a proxy for VBUS.\n7)\nTo be sent once, and only required if Fast Role Swap is supported by the Sink.\n8.3.3.3.1\n  PE_SNK_Startup State\nPE_SNK_Startup Shall be the starting state for a Sink Policy Engine either on power up or after a Hard Reset. On \nentry to this state the Policy Engine Shall reset the Protocol Layer.\nNote:\nResetting the Protocol Layer will also reset the MessageIDCounter and stored MessageID (see Section \n6.12.2.3, \"Protocol Layer Message Reception\").\nOnce the reset process completes, the Policy Engine Shall transition to the PE_SNK_Discovery state.\n8.3.3.3.2\n  PE_SNK_Discovery State\nIn the PE_SNK_Discovery state the Sink Policy Engine waits for VBUS to be present.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nThe Device Policy Manager indicates that VBUS has been detected.\n8.3.3.3.3\n  PE_SNK_Wait_for_Capabilities State\nOn entry to the PE_SNK_Wait_for_Capabilities state the Policy Engine Shall initialize and start the \nSinkWaitCapTimer.\nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability state when:\n\nThe Sink is in SPR Mode and a Source_Capabilities Message is received or\n\nThe Sink is in EPR Mode and an EPR_Source_Capabilities Message is received.\nWhen the SinkWaitCapTimer times out, the Policy Engine will perform a Hard Reset.\n8.3.3.3.4\n  PE_SNK_Evaluate_Capability State\nThe PE_SNK_Evaluate_Capability state is first entered when the Sink receives its first Source_Capabilities \nMessage from the Source. At this point the Sink knows that it is Attached to and communicating with a PD capable \nSource.\nOn entry to the PE_SNK_Evaluate_Capability state the Policy Engine Shall request the Device Policy Manager to \nevaluate the supplied Source Capabilities based on Local Policy. The Device Policy Manager Shall indicate to the \nPolicy Engine the new power level required, selected from the present offered capabilities. The Device Policy \nManager Shall also indicate to the Policy Engine a Capabilities Mismatch if the offered power does not meet the \ndevice's requirements.\nThe Policy Engine Shall transition to the PE_SNK_Select_Capability state when:\n\nA response is received from the Device Policy Manager.\n8.3.3.3.5\n  PE_SNK_Select_Capability State\nOn entry to the PE_SNK_Select_Capability state the Policy Engine Shall request the Protocol Layer to send a \nresponse Message, based on the evaluation from the Device Policy Manager. The Message Shall be one of the \nfollowing:\n\nA Request from the offered Source Capabilities.\n","image_count":0,"table_count":1}
{"page":837,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 837\n\nA Request from the offered Source Capabilities with an indication that another power level would be \npreferred (Capability Mismatch bit set).\nWhen in SPR Mode a Request Message Shall be sent.\nWhen in EPR Mode an EPR_Request Message Shall be sent.\nThe Policy Engine Shall initialize and run the SenderResponseTimer.\nThe Policy Engine Shall transition to the PE_SNK_Transition_Sink state when:\n\nAn Accept Message is received from the Source.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nThere is no Explicit Contract in place and\n\nA Reject Message is received from the Source or\n\nA Wait Message is received from the Source.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nThere is an Explicit Contract in place and\n\nA Reject Message is received from the Source or\n\nA Wait Message is received from the Source.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nA SenderResponseTimer timeout occurs.\n8.3.3.3.6\n  PE_SNK_Transition_Sink State\nOn entry to the PE_SNK_Transition_Sink state the Policy Engine Shall initialize and run the PSTransitionTimer \n(timeout will lead to a Hard Reset see Section 8.3.3.3.8, \"PE_SNK_Hard_Reset State\" and Shall then request the Device \nPolicy Manager to transition the Sink's power supply to the new power level.\nNote:\nIf there is no power level change the Device Policy Manager Should Not affect any change to the power \nsupply.\nOn exit from the PE_SNK_Transition_Sink state the Policy Engine Shall request the Device Policy Manager to \ntransition the Sink's power supply to the new power level.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nA PS_RDY Message is received from the Source.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nA Protocol Error occurs.\n8.3.3.3.7\n  PE_SNK_Ready State\nIn the PE_SNK_Ready state the PD Sink Shall be operating at a stable power level with no ongoing Negotiation. It \nShall respond to requests from the Source, events from the Device Policy Manager. \nOn entry to the PE_SNK_Ready state as the result of a wait the Policy Engine Should do the following:\n\nInitialize and run the SinkRequestTimer.\nOn entry to the PE_SNK_Ready state if this is a VCONN Source which needs to establish communication with a Cable \nPlug, then the Policy Engine Shall do the following: \n\nInitialize and run the DiscoverIdentityTimer (no GoodCRC Message response yet received to Discover \nIdentity Message).\n","image_count":0,"table_count":1}
{"page":838,"text":"Page 838\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nOn entry to the PE_SNK_Ready state if the current Explicit Contract is for an SPR PPS APDO, then the Policy Engine \nShall do the following: \n\nInitialize and run the SinkPPSPeriodicTimer.\nOn entry to the PE_SNK_Ready state if the Sink supports Fast Role Swap, then the Policy Engine Shall do the \nfollowing:\n\nSend a Get_Sink_Cap Message.\nOn exit from the PE_SNK_Ready state, if the transition is as a result of a DPM request to start a new Atomic Message \nSequence (AMS) then the Policy Engine Shall notify the Protocol Layer that the first Message in an AMS will follow. \nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability state when:\n\nIn SPR Mode and a Source_Capabilities Message is received or\n\nIn EPR Mode and an EPR_Source_Capabilities Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Select_Capability state when:\n\nA new power level is requested by the Device Policy Manager or\n\nA SinkRequestTimer timeout occurs or\n\nA SinkPPSPeriodicTimer timeout occurs.\nThe Policy Engine Shall transition to the PE_SNK_Give_Sink_Cap state when:\n\nGet_Sink_Cap Message is received or\n\nEPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Get_Source_Cap state when:\n\nThe Device Policy Manager requests an update of the remote Source Capabilities. \nThe Policy Engine Shall transition to the PE_SNK_EPR_Keep_Alive state when:\n\nThe SinkEPRKeepAliveTimer timeouts out. \n8.3.3.3.8\n  PE_SNK_Hard_Reset State\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state from any state when:\n\n(PSTransitionTimer times out) and\n\n(HardResetCounter ≤ nHardResetCount)) |\n\nHard Reset request from Device Policy Manager or\n\nIn EPR Mode and\n\nAn EPR_Source_Capabilities Message is received with an EPR (A)PDO in object positions 1…7 or\n\nA Source_Capabilities Message is received that has not been requested using a Get_Source_Cap \nMessage.\nThe Policy Engine May transition to the PE_SNK_Hard_Reset state from any state when:\n\nSinkWaitCapTimer times out\nNote:\nIf the SinkWaitCapTimer times out and the HardResetCounter is greater than nHardResetCount the \nSink Shall assume that the Source is non-responsive.\nNote:\nThe HardResetCounter is reset on a power cycle or Detach. \n","image_count":0,"table_count":1}
{"page":839,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 839\nOn entry to the PE_SNK_Hard_Reset state the Policy Engine Shall request the generation of Hard Reset Signaling \nby the PHY Layer and increment the HardResetCounter.\nThe Policy Engine Shall transition to the PE_SNK_Transition_to_default state when:\n\nThe Hard Reset is complete.\n8.3.3.3.9\n  PE_SNK_Transition_to_default State\nThe Policy Engine Shall transition from any state to PE_SNK_Transition_to_default state when:\n\nHard Reset Signaling is detected.\nWhen Hard Reset Signaling is received or transmitted then the Policy Engine Shall transition from any state to \nPE_SNK_Transition_to_default. This state can also be entered from the PE_SNK_Hard_Reset state.\nOn entry to the PE_SNK_Transition_to_default state the Policy Engine Shall:\n\nindicate to the Device Policy Manager that the Sink Shall transition to default \n\nrequest a reset of the local hardware\n\nrequest the Device Policy Manager that the Port Data Role is set to UFP.\nThe Policy Engine Shall transition to the PE_SNK_Startup state when:\n\nThe Device Policy Manager indicates that the Sink has reached the default level.\n8.3.3.3.10\n  PE_SNK_Give_Sink_Cap State\n\nOn entry to the PE_SNK_Give_Sink_Cap state the Policy Engine Shall request the Device Policy Manager \nfor the current system capabilities. The Policy Engine Shall then request the Protocol Layer to send a \nSink_Capabilities Message containing these capabilities. The Policy Engine Shall send:\n\nA Sink_Capabilities Message when a Get_Sink_Cap Message is received or\n\nAn EPR_Sink_Capabilities Message when a EPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nThe Sink_Capabilities Message has been successfully sent.\n8.3.3.3.11\n  PE_SNK_EPR_Keep_Alive\nOn entry to the PE_SNK_EPR_Keep_Alive State the Policy Engine Shall send an EPR_KeepAlive Message and \ninitialize and run the SenderResponseTimer.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nA EPR_KeepAlive_Ack Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nThe SenderResponseTimer times out.\n8.3.3.3.12\n  PE_SNK_Get_Source_Cap State\n\nOn entry to the PE_SNK_Get_Source_Cap state the Policy Engine Shall request the Protocol Layer to send \na get Source Capabilities Message in order to retrieve the Source Capabilities. The Policy Engine Shall \nsend:\n\nA Get_Source_Cap Message when the Device Policy Manager requests SPR capabilities or\n\nAn EPR_Get_Source_Cap Message when the Device Policy Manager requests EPR Capabilities.\nThe Policy Engine Shall then start the SenderResponseTimer.\n","image_count":0,"table_count":1}
{"page":840,"text":"Page 840\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nOn exit from the PE_SNK_Get_Source_Cap State the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nIn EPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received \nor\n\nIn SPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is \nreceived or\n\nThe SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_SNK_Evaluate_Capability State when:\n\nIn SPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received \nor\n\nIn EPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is \nreceived.\n","image_count":0,"table_count":1}
{"page":841,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 841\n8.3.3.4\n  SOP Soft Reset and Protocol Error State Diagrams\n8.3.3.4.1\n  SOP Source Port Soft Reset and Protocol Error State Diagram\nFigure 8.134, \"SOP Source Port Soft Reset and Protocol Error State Diagram\" below shows the state diagram for the \nPolicy Engine in a Source Port when performing a Soft Reset of its Port Partner i.e., using SOP. The following sections \ndescribe operation in each of the states.\nFigure 8.134 SOP Source Port Soft Reset and Protocol Error State Diagram\n8.3.3.4.1.1\n  PE_SRC_Send_Soft_Reset State\nThe PE_SRC_Send_Soft_Reset state Shall be entered from any state when:\n\nA Protocol Error on SOP is detected by the Protocol Layer during a Non-interruptible AMS (see Section \n6.8.1, \"Soft Reset and Protocol Error\") or\n\nA Message has not been sent after retries to the Sink or\n\nWhen not in an Explicit Contract and Protocol Errors occurred on SOP during any AMS where the first \nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected \nGoodCRC Message response or\n\nWhen in SPR Mode and the EPR Mode entry process fails.\nThe main exceptions to this rule are when: \n\nThe Source is in the PE_SRC_Send_Capabilities state, there is a Source_Capabilities Message sending \nfailure on SOP (without a GoodCRC Message) and the Source is not presently Attached (as indicated in \nFigure 8.132, \"Source Port State Diagram\"). In this case, the PE_SRC_Discovery state is entered (see \nSection 8.3.3.2.2, \"PE_SRC_Discovery State\"). \n\nWhen the voltage is in transition due to a new Explicit Contract being Negotiated (see Section 8.3.3.2, \n\"Policy Engine Source Port State Diagram\"). In this case Hard Reset Signaling will be generated.\n\nDuring a Power Role Swap when the power supply is in transition (see Section 8.3.3.19.3, \"Policy Engine \nin Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to Source \nPower Role Swap State Diagram\"). In this case USB Type-C Error Recovery will be triggered directly.\n\nDuring a Data Role Swap when there is a mismatch in the Port Data Role field (see Section 6.2.1.1.6, \n\"Port Data Role\"). In this case USB Type-C Error Recovery will be triggered directly.\nPE_SRC_Send_Soft_Reset\nActions on entry:\nReset Protocol Layer\nSend Soft Reset message to SOP\nInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP (no GoodCRC received)1  |\nProtocol Error2 on SOP during AMS |\n(Not in Explicit Contract &\nProtocol Error2 on SOP before first Message \nin AMS sent (no GoodCRC received) |\n(SPR Mode & EPR Mode Entry process fails)3\nSenderResponseTimer\nTimeout |\nTransmission\nError indication \nfrom Protocol Layer\nAccept message\nReceived from SOP\nAccept message\nSent to SOP\nSoft Reset message \nReceived on SOP\nPE_SRC_Soft_Reset\nActions on entry:\nReset Protocol Layer\nSend Accept message to SOP\nPower = DefauIt/Implicit or \nExplicit Contract \nPD = Connected\nPE_SRC_Send_Capabilities\nTransmission\nError indication \nfrom Protocol Layer\nPE_SRC_Ready\nIn Explicit Contract &\nProtocol Error2 before first Message \nin AMS sent (no GoodCRC received)\nPE_SRC_Hard_Reset\n1)\nExcludes the Soft_Reset Message itself.\n2)\nAn Unrecognized or Unsupported Message received on SOP will result in a Not_Supported Message response being generated on SOP (see Section 6.3.16 “Not_Supported Message”).\n3)\nSee Section 6.4.10.1 “Process to enter EPR Mode” for the conditions when a Soft_Reset Message Shall be sent by the Source during the EPR Mode entry process.\n","image_count":33,"table_count":4}
{"page":842,"text":"Page 842\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nProtocol Errors occurring in the following situations Shall Not lead to a Soft Reset, but Shall result in a transition \nto the PE_SRC_Ready state where the Message received will be handled as if it had been received in the \nPE_SRC_Ready state:\n\nWhen in an Explicit Contract and Protocol Errors occurred on SOP during any AMS where the first \nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected \nGoodCRC Message response.\nOn entry to the PE_SRC_Send_Soft_Reset state the Policy Engine Shall request the SOP Protocol Layer to perform a \nSoft Reset, then Shall send a Soft_Reset Message to the Sink on SOP, and initialize and run the \nSenderResponseTimer. \nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nAn Accept Message has been received on SOP.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nA SenderResponseTimer timeout occurs.\n\nOr the Protocol Layer indicates that a transmission error has occurred.\n8.3.3.4.1.2\n  PE_SRC_Soft_Reset State\nThe PE_SRC_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received on SOP from \nthe Protocol Layer.\nOn entry to the PE_SRC_Soft_Reset state the Policy Engine Shall reset the SOP Protocol Layer and Shall then request \nthe Protocol Layer to send an Accept Message on SOP.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state (see Section 8.3.3.2.3, \n\"PE_SRC_Send_Capabilities State\") when:\n\nThe Accept Message has been sent on SOP.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThe Protocol Layer indicates that a transmission error has occurred.\n","image_count":0,"table_count":1}
{"page":843,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 843\n8.3.3.4.2\n  SOP Sink Port Soft Reset and Protocol Error State Diagram\nFigure 8.135, \"Sink Port Soft Reset and Protocol Error Diagram\" below shows the state diagram for the Policy Engine \nin a Sink Port when performing a Soft Reset of its Port Partner i.e., using SOP. The following sections describe \noperation in each of the states.\nFigure 8.135 Sink Port Soft Reset and Protocol Error Diagram\n8.3.3.4.2.1\n  PE_SNK_Send_Soft_Reset State\nThe PE_SNK_Send_Soft_Reset state Shall be entered from any state when:\n\nA Protocol Error on SOP is detected by the Protocol Layer during an AMS (see Section 6.8.1, \"Soft Reset \nand Protocol Error\") or\n\nA Message has not been sent after retries to the Sink or\n\nWhen not in an Explicit Contract and Protocol Errors occurred on SOP during any AMS where the first \nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected \nGoodCRC Message response.\n\nWhen in SPR Mode and the EPR Mode entry process fails.\nThe main exceptions to this rule are when:\n\nWhen the voltage is in transition due to a new Explicit Contract being Negotiated (see Section 8.3.3.3, \n\"Policy Engine Sink Port State Diagram\"). In this case a Hard Reset will be generated.\n\nDuring a Power Role Swap when the power supply is in transition (see Section 8.3.3.19.3, \"Policy Engine \nin Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to Source \nPower Role Swap State Diagram\"). In this case a Hard Reset will be triggered directly.\n\nDuring a Data Role Swap when the DFP/UFP Data Roles are changing. In this case USB Type-C Error \nRecovery will be triggered directly.\nNote:\nProtocol Errors occurring in the following situations Shall Not lead to a Soft Reset, but Shall result in a \ntransition to the PE_SNK_Ready state where the Message received will be handled as if it had been \nreceived in the PE_SNK_Ready state:\n\nWhen in an Explicit Contract and Protocol Errors occurred on SOP during any AMS where the first \nMessage in the AMS has not yet been sent i.e., an unexpected Message is received instead of the expected \nGoodCRC Message response.\nPE_SNK_Send_Soft_Reset\nActions on entry:\nReset SOP Protocol Layer\nSend Soft Reset Message to SOP\nInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP (no GoodCRC received)1  |\nProtocol Error2 on SOP during AMS |\n(Not in Explicit Contract &\nProtocol Error on SOP before first Message \nin AMS sent (no GoodCRC received) |\n(SPR Mode & EPR Mode Entry process fails)3\nSenderResponseTimer\nTimeout |\nTransmission\nError indication \nfrom Protocol Layer\nAccept Message\nReceived on SOP\nAccept Message\nSent to SOP\nSoft Reset Message \nReceived on SOP\nPE_SNK_Soft_Reset\nActions on entry:\nReset SOP Protocol Layer\nSend Accept Message to SOP\nPower = DefauIt/Implicit or \nExplicit Contract \nPD = Connected\nPE_SNK_Wait_for_Capabilities\nTransmission\nError indication \nfrom Protocol Layer\nPE_SNK_Ready\nIn Explicit Contract &\nProtocol Error2 on SOP before first Message \nin AMS sent (no GoodCRC received)\nPE_SNK_Hard_Reset\n1)\nExcludes the Soft_Reset Message itself.\n2)\nAn Unrecognized or Unsupported Message will result in a Not_Supported Message response being generated (see Section 6.3.16 “Not_Supported Message”).\n3)\nSee Section 6.4.10.1 “Process to enter EPR Mode” for the conditions when a Soft_Reset Message Shall be sent by the Sink during the EPR Mode entry process.\n","image_count":47,"table_count":4}
{"page":844,"text":"Page 844\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nOn entry to the PE_SNK_Send_Soft_Reset state the Policy Engine Shall request the SOP Protocol Layer to perform a \nSoft Reset, then Shall send a Soft_Reset Message on SOP to the Source, and initialize and run the \nSenderResponseTimer. \nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nAn Accept Message has been received on SOP.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nA SenderResponseTimer timeout occurs.\n\nOr the Protocol Layer indicates that a transmission error has occurred.\n8.3.3.4.2.2\n  PE_SNK_Soft_Reset State\nThe PE_SNK_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received on SOP from \nthe Protocol Layer.\nOn entry to the PE_SNK_Soft_Reset state the Policy Engine Shall reset the SOP Protocol Layer and Shall then request \nthe Protocol Layer to send an Accept Message on SOP.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nThe Accept Message has been sent on SOP.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nThe Protocol Layer indicates that a transmission error has occurred.\n","image_count":0,"table_count":1}
{"page":845,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 845\n8.3.3.5\n  Data Reset State Diagrams\n8.3.3.5.1\n  DFP Data_Reset Message State Diagrams\nFigure 8.136, \"DFP Data_Reset Message State Diagram\" shows the state diagram for a Data_Reset Message sent or \nreceived by a DFP.\nFigure 8.136 DFP Data_Reset Message State Diagram\n8.3.3.5.1.1\n  PE_DDR_Send_Data_Reset State\nThe PE_DDR_Send_Data_Reset State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when \nrequested by the Device Policy Manager.\nOn entry to the PE_DDR_Send_Data_Reset State the Policy Engine Shall request the Protocol Layer to send a \nData_Reset Message and then initialize and start the SenderResponseTimer.\nOn exit from the PE_DDR_Send_Data_Reset State the Policy Engine Shall initialize and start the \nDataResetFailTimer.\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n\nAn Accept Message has been received and\n\nThe DFP is presently the VCONN Source.\nThe Policy Engine Shall transition to the PE_DDR_Wait_For_VCONN_Off State when:\n\nAn Accept Message has been received and\nPE_DDR_Send_Data_Reset\nActions on entry:\nSend Data_Reset Message\nInitialize and start SenderResponseTimer\nPower = Explicit Contract \nPD = connected\nData Reset request from DPM\nAccept Message Received & \nVCONN Source\nPE_SRC_Ready or \nPE_SNK_Ready (DFP)\nPE_DDR_Data_Reset_Received\nActions on entry:\nInform Device Policy Manager of \nData_Reset Message\nSend Accept Message\nPower = Explicit Contract \nPD = connected\nData_Reset Message \nreceived\nAccept Message Sent &\nVCONN Source\nErrorRecovery\nSenderResponseTimer Timeout | \nProtocol Error\nPE_DDR_Wait_for_VCONN_Off\nActions on entry:\nInitialize and start VCONNDischargeTimer\nPower = Explicit Contract \nPD = connected\nAccept Message Received & \nNot VCONN Source\nVCONNDischargeTimer Timeout |\nProtocol Error\nPS_RDY Received\nPE_DDR_Perform_Data_Reset\nActions on entry:\nTell Device Policy Manager to perform Data Reset\nPower = Explicit Contract \nPD = connected\nPE_SRC_Ready or \nPE_SNK_Ready (DFP)\nData Reset process is complete\nAccept Message Sent & \nNot VCONN Source\nProtocol Error\nDataResetFailTimer Timeout |\nProtocol Error\nActions on exit:\nStop DataResetFailTimer\nSend Data_Reset_Complete Message\nActions on exit:\nInitialize and start DataResetFailTimer1\nActions on exit:\nInitialize and start DataResetFailTimer1\n1)\nNote that the DataResetFailTimer Shall continue to run in every state until it is stopped or times out.\n","image_count":56,"table_count":7}
{"page":846,"text":"Page 846\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe DFP is not presently the VCONN Source.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nA SenderResponseTimer timeout occurs or\n\nA Protocol Error occurs.\n8.3.3.5.1.2\n  PE_DDR_Data_Reset_Received State\nThe PE_DDR_Data_Reset_Received State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when a \nData_Reset Message is received.\nOn entry to the PE_DDR_Data_Reset_Received State the Policy Engine Shall inform the Device Policy Manager and \nthen Shall send an Accept Message.\nOn exit from the PE_DDR_Data_Reset_Received State the Policy Engine Shall initialize and start the \nDataResetFailTimer.\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n\nAn Accept Message has been sent and\n\nThe DFP is presently the VCONN Source.\nThe Policy Engine Shall transition to the PE_DDR_Wait_For_VCONN_Off State when:\n\nAn Accept Message has been sent and\n\nThe DFP is not presently the VCONN Source.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nA Protocol Error occurs.\n8.3.3.5.1.3\n  PE_DDR_Wait_For_VCONN_Off State\nOn entry to the PE_DDR_Wait_For_VCONN_Off State the Policy Engine Shall initialize and start the \nVCONNDischargeTimer.\nThe Policy Engine Shall transition to the PE_DDR_Perform_Data_Reset State when:\n\nA PS_RDY Message is received.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nThe VCONNDischargeTimer has timed out or\n\nA Protocol Error occurs.\n8.3.3.5.1.4\n  PE_DDR_Perform_Data_Reset State\nOn entry to the PE_DDR_Perform_Data_Reset State the Policy Engine Shall request the Device Policy Manager to \ncomplete the Data Reset process as defined in Section 6.3.14, \"Data_Reset Message\".\nOn exit from the PE_DDR_Perform_Data_Reset State the Policy Engine Shall stop the DataResetFailTimer and \nsend a Data_Reset_Complete Message.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State depending on the DFP's \nPower Role when:\n\nThe DPM indicates that Data Reset process is complete (see Section 6.3.14, \"Data_Reset Message\").\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nThe DataResetFailTimer times out\n\nA Protocol Error occurs.\n","image_count":0,"table_count":1}
{"page":847,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 847\n8.3.3.5.2\n  UFP Data_Reset Message State Diagrams\nFigure 8.137, \"UFP Data_Reset Message State Diagram\" shows the state diagram for a Data_Reset Message sent or \nreceived by a UFP.\nFigure 8.137 UFP Data_Reset Message State Diagram\n8.3.3.5.2.1\n  PE_UDR_Send_Data_Reset State\nThe PE_UDR_Send_Data_Reset State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when \nrequested by the Device Policy Manager.\nOn entry to the PE_UDR_Send_Data_Reset State the Policy Engine Shall request the Protocol Layer to send a \nData_Reset Message and then initialize and run the SenderResponseTimer.\nOn exit from the PE_UDR_Send_Data_Reset State the Policy Engine Shall initialize and run the \nDataResetFailUFPTimer.\nThe Policy Engine Shall transition to the PE_UDR_Turn_Off_VCONN State when:\n\nAn Accept Message has been received and\n\nThe UFP is presently the VCONN Source.\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n\nAn Accept Message has been received and\n\nThe UFP is not presently the VCONN Source.\nThe Policy Engine Shall transition to ErrorRecovery when:\nPE_UDR_Send_Data_Reset\nActions on entry:\nSend Data_Reset Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = connected\nData Reset request from DPM\nAccept Message Received & \nVCONN Source\nPE_SRC_Ready or \nPE_SNK_Ready (UFP)\nPE_UDR_Data_Reset_Received\nActions on entry:\nInform Device Policy Manager of Data_Reset Message\nSend Accept Message\nPower = Explicit Contract \nPD = connected\nData_Reset Message \nreceived\nAccept Message Sent &\nVCONN Source\nErrorRecovery\nSenderResponseTimer Timeout |\nProtocol Error\nPE_UDR_Turn_Off_VCONN\nActions on entry:\nTell Device Policy Manager to turn off VCONN\nPower = Explicit Contract \nPD = connected\nPE_UDR_Send_Ps_Rdy\nActions on entry:\nSend PS_RDY Message\nPower = Explicit Contract \nPD = connected\nVCONN Off1\nPE_SRC_Ready or \nPE_SNK_Ready (UFP)\nAccept Message Received & \nNot VCONN Source\nPS_RDY Message Sent\nAccept Message Sent &\nNot VCONN Source\nProtocol Error\nPE_UDR_Wait_For_Data_Reset_Complete\nActions on entry:\nWait for Data_Reset_Complete Message\nPower = Explicit Contract \nPD = connected\nData_Reset_Complete Message\nreceived\nProtocol Error\nProtocol Error\nDataResetFailUFPTimer Timeout2 |\nProtocol Error\nActions on exit:\nStop DataResetFailUFPTimer2\nActions on exit:\nInitialize and run DataResetFailUFPTimer2\nActions on exit:\nInitialize and run DataResetFailUFPTimer2\n1)\nVCONN Shall be fully discharged see Section 7.1.15 “Vconn Power Cycle”.\n2)\nNote that the DataResetFailUFPTimer Shall continue to run in every state until it is stopped or times out.\n","image_count":50,"table_count":4}
{"page":848,"text":"Page 848\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe SenderResponseTimer has timed out or\n\nA Protocol Error occurs.\n8.3.3.5.2.2\n  PE_UDR_Data_Reset_Received State\nThe PE_UDR_Data_Reset_Received State Shall be entered from either the PE_SRC_Ready or PE_SNK_Ready State \nwhen a Data_Reset Message is received.\nOn entry to the PE_UDR_Data_Reset_Received State the Policy Engine Shall inform the Device Policy Manager and \nthen Shall send an Accept Message.\nOn exit from the PE_UDR_Data_Reset_Received State the Policy Engine Shall initialize and run the \nDataResetFailUFPTimer.\nThe Policy Engine Shall transition to the PE_UDR_Turn_Off_VCONN State when:\n\nAn Accept Message has been sent and\n\nThe UFP is presently the VCONN Source.\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n\nAn Accept Message has been sent and\n\nThe UFP is not presently the VCONN Source.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nA Protocol Error occurs.\n8.3.3.5.2.3\n  PE_UDR_Turn_Off_VCONN State\nOn entry to the PE_UDR_Turn_Off_VCONN State the Policy Engine Shall request the Device Policy Manager to turn off \nVCONN.\nThe Policy Engine Shall transition to the PE_UDR_Send_Ps_Rdy State when:\n\nThe DPM indicates that VCONN has been turned off (VCONN below vRaReconnect see [USB Type-C 2.4]).\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nA Protocol Error occurs.\n8.3.3.5.2.4\n  PE_UDR_Send_Ps_Rdy State\nOn entry to the PE_UDR_Send_Ps_Rdy State the Policy Engine Shall send a PS_RDY Message.\nThe Policy Engine Shall transition to the PE_UDR_Wait_For_Data_Reset_Complete State when:\n\nThe PS_RDY Message has been sent.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nA Protocol Error occurs.\n8.3.3.5.2.5\n  PE_UDR_Wait_For_Data_Reset_Complete State\nOn entry to the PE_UDR_Wait_For_Data_Reset_Complete State the Policy Engine Shall wait for the \nData_Reset_Complete Message.\nOn exit from the PE_UDR_Wait_For_Data_Reset_Complete State the Policy Engine Shall stop the \nDataResetFailUFPTimer.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State depending on the UFP's \nPower Role when:\n","image_count":0,"table_count":1}
{"page":849,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 849\n\nThe Data_Reset_Complete Message is received.\nThe Policy Engine Shall transition to ErrorRecovery when:\n\nThe DataResetFailUFPTimer times out or\n\nA Protocol Error occurs.\n","image_count":0,"table_count":1}
{"page":850,"text":"Page 850\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.6\n  Not Supported Message State Diagrams\n8.3.3.6.1\n  Source Port Not Supported Message State Diagram\nFigure 8.138, \"Source Port Not Supported Message State Diagram\" shows the state diagram for a Not_Supported \nMessage sent or received by a Source Port.\nFigure 8.138 Source Port Not Supported Message State Diagram\n8.3.3.6.1.1\n  PE_SRC_Send_Not_Supported State\nThe PE_SRC_Send_Not_Supported state Shall be entered from the PE_SRC_Ready state either as the result of a \nProtocol Error received during an interruptible AMS or as a result of an Unsupported Message being received in the \nPE_SRC_Ready state directly except for the first Chunk in a multi-Chunk Message (see also Section 6.12.2.1, \"Protocol \nLayer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\").\nOn entry to the PE_SRC_Send_Not_Supported state (from the PE_SRC_Ready state) the Policy Engine Shall request \nthe Protocol Layer to send a Not_Supported Message.\nThe Policy Engine Shall transition back to the previous state (PE_SRC_Ready see Figure 8.132, \"Source Port State \nDiagram\") when:\n\nThe Not_Supported Message has been successfully sent.\n8.3.3.6.1.2\n  PE_SRC_Not_Supported_Received State\nThe PE_SRC_Not_Supported_Received state Shall be entered from the PE_SRC_Ready state when a Not_Supported \nMessage is received.\nOn entry to the PE_SRC_Not_Supported_Received state the Policy Engine Shall inform the Device Policy Manager.\nThe Policy Engine Shall transition back to the previous state (PE_SRC_Ready see Figure 8.132, \"Source Port State \nDiagram\") when:\n\nThe Device Policy Manager has been informed.\n8.3.3.6.1.3\n  PE_SRC_Chunk_Received State\nThe PE_SRC_Chunk_Received state Shall be entered from the PE_SRC_Ready state as a result of an Unsupported \nMessage being received in the PE_SRC_Ready state directly where the Message is a Chunk in a multi-Chunk Message \n(see also Section 6.12.2.1, \"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol \nError State Diagram\").\nPE_SRC_Send_Not_Supported\nActions on entry:\nSend Not_Supported Message\nPower = Explicit Contract \nPD = connected\nProtocol Error1 &\nnot a Chunk from \na multi-Chunk Message\nNot_Supported \nMessage sent \nPE_SRC_Ready\nPE_SRC_Not_Supported_Received\nActions on entry:\nInform Device Policy Manager of Not_Supported Message\nPower = Explicit Contract \nPD = connected\nNot_Supported Message \nreceived1\nDPM informed\nPE_SRC_Chunk_Received\nActions on entry:\nStart ChunkingNotSupportedTimer\nPower = Explicit Contract \nPD = connected\nProtocol Error1 &\nChunk from \na multi-Chunk Message2\nChunkingNotSupportedTimer\ntimeout\n1)\nTransition as a result of an unsupported Message being received in the PE_SRC_Ready state directly \n(see also Section 8.3.3.4.1 “SOP Source Port Soft Reset and Protocol Error State Diagram”).\n2)\nTransition can only occur where a manufacturer has opted not to implement a Chunking state machine (see Section 6.12.2.1 “Protocol Layer Chunking”)\nand is communicating with a system which is attempting to send it Chunks.\n","image_count":31,"table_count":1}
{"page":851,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 851\nOn entry to the PE_SRC_Chunk_Received state (from the PE_SRC_Ready state) the Policy Engine Shall initialize and \nrun the ChunkingNotSupportedTimer.\nThe Policy Engine Shall transition to PE_SRC_Send_Not_Supported when:\n\nThe ChunkingNotSupportedTimer has timed out.\n","image_count":0,"table_count":1}
{"page":852,"text":"Page 852\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.6.2\n  Sink Port Not Supported Message State Diagram\nFigure 8.139, \"Sink Port Not Supported Message State Diagram\" shows the state diagram for a Not_Supported \nMessage sent or received by a Sink Port.\nFigure 8.139 Sink Port Not Supported Message State Diagram\n8.3.3.6.2.1\n  PE_SNK_Send_Not_Supported State\nThe PE_SNK_Send_Not_Supported state Shall be entered from the PE_SNK_Ready state either as the result of a \nProtocol Error received during an interruptible AMS or as a result of an Unsupported Message being received in the \nPE_SNK_Ready state directly except for the first Chunk in a multi-Chunk Message (see also Section 6.12.2.1, \n\"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol Error State Diagram\").\nOn entry to the PE_SNK_Send_Not_Supported state (from the PE_SNK_Ready state) the Policy Engine Shall request \nthe Protocol Layer to send a Not_Supported Message.\nThe Policy Engine Shall transition back to the previous state (PE_SNK_Ready see Figure 8.133, \"Sink Port State \nDiagram\") when:\n\nThe Not_Supported Message has been successfully sent.\n8.3.3.6.2.2\n  PE_SNK_Not_Supported_Received State\nThe PE_SNK_Not_Supported_Received state Shall be entered from the PE_SNK_Ready state when a \nNot_Supported Message is received.\nOn entry to the PE_SNK_Not_Supported_Received state the Policy Engine Shall inform the Device Policy Manager.\nThe Policy Engine Shall transition back to the previous state (PE_SNK_Ready see Figure 8.133, \"Sink Port State \nDiagram\") when:\n\nThe Device Policy Manager has been informed.\n8.3.3.6.2.3\n  PE_SNK_Chunk_Received State\nThe PE_SNK_Chunk_Received state Shall be entered from the PE_SNK_Ready state as a result of an Unsupported \nMessage being received in the PE_SNK_Ready state directly where the Message is a Chunk in a multi-Chunk Message \n(see also Section 6.12.2.1, \"Protocol Layer Chunking\" and Section 8.3.3.4.1, \"SOP Source Port Soft Reset and Protocol \nError State Diagram\").\nOn entry to the PE_SNK_Chunk_Received state (from the PE_SNK_Ready state) the Policy Engine Shall initialize and \nrun the ChunkingNotSupportedTimer.\nThe Policy Engine Shall transition to PE_SNK_Send_Not_Supported when:\nPE_SNK_Send_Not_Supported\nActions on entry:\nSend Not_Supported Message\nPower = Explicit Contract \nPD = connected\nProtocol Error1 &\nnot a Chunk from \na multi-Chunk Message\nNot_Supported \nMessage sent \nPE_SNK_Ready\nPE_SNK_Not_Supported_Received\nActions on entry:\nInform Device Policy Manager of Not_Supported Message\nPower = Explicit Contract \nPD = connected\nNot_Supported Message \nreceived1\nDPM informed\nPE_SNK_Chunk_Received\nActions on entry:\nStart ChunkingNotSupportedTimer\nPower = Explicit Contract \nPD = connected\nProtocol Error1 &\nChunk from \na multi-Chunk Message2\nChunkingNotSupportedTimer\ntimeout\n1)\nTransition as a result of an unsupported Message being received in the PE_SNK_Ready state directly \n(see also Section 8.3.3.4.2 “SOP Sink Port Soft Reset and Protocol Error State Diagram”).\n2)\nTransition can only occur where a manufacturer has opted not to implement a Chunking state machine (see Section 6.12.2.1 “Protocol Layer Chunking”)\nand is communicating with a system which is attempting to send it Chunks.\n","image_count":25,"table_count":1}
{"page":853,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 853\n\nThe ChunkingNotSupportedTimer has timed out.\n","image_count":0,"table_count":1}
{"page":854,"text":"Page 854\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.7\n  Alert State Diagrams\n8.3.3.7.1\n  Source Port Source Alert State Diagram\nFigure 8.140, \"Source Port Source Alert State Diagram\" shows the state diagram for an Alert Message sent by a \nSource Port.\nFigure 8.140 Source Port Source Alert State Diagram\n8.3.3.7.1.1\n  PE_SRC_Send_Source_Alert State\nThe PE_SRC_Send_Source_Alert state Shall be entered from the PE_SRC_Ready state when the Device Policy \nManager indicates that there is a Source alert condition to be reported.\nOn entry to the PE_SRC_Send_Source_Alert state the Policy Engine Shall request the Protocol Layer to send an Alert \nMessage.\nThe Policy Engine Shall transition to the PE_SRC_Wait_for_Get_Status State when:\n\nThe Alert Message has been successfully sent.\n8.3.3.7.1.2\n  PE_SRC_Wait_for_Get_Status State\nOn entry to the PE_SRC_Wait_for_Get_Status State the Policy Engine Shall initialize and run the \nSenderResponseTimer.\nThe Policy Engine Shall transition back to the PE_Give_Status State (see Figure 8.151, \"Give Status State Diagram\") \nwhen:\n\nA Get_Status Message is received.\nThe Policy Engine Shall transition back to PE_SRC_Ready (see Figure 8.132, \"Source Port State Diagram\") when:\n\nThe SenderResponseTimer times out.\nPE_SRC_Send_Source_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract \nPD = connected\nDPM indicates Source \nalert condition\nAlert \nMessage sent \nPE_SRC_Ready\nSenderResponseTimer\nTimeout\nPE_SRC_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nPE_Give_Status\nGet_Status\nMessage received\n","image_count":29,"table_count":2}
{"page":855,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 855\n8.3.3.7.2\n  Sink Port Source Alert State Diagram\nFigure 8.141, \"Sink Port Source Alert State Diagram\" shows the state diagram for an Alert Message received by a \nSink Port.\nFigure 8.141 Sink Port Source Alert State Diagram\n8.3.3.7.2.1\n  PE_SNK_Source_Alert_Received State\nThe PE_SNK_Source_Alert_Received state Shall be entered from the PE_SNK_Ready state when an Alert Message \nis received.\nOn entry to the PE_SNK_Source_Alert_Received state the Policy Engine Shall inform the Device Policy Manager of \nthe details of the Source alert.\nThe Policy Engine Shall transition to the PE_Get_Status State (see Figure 8.150, \"Get Status State Diagram\") when:\n\nThe DPM requests status.\nThe Policy Engine Shall transition back to the PE_SNK_Ready State (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nThe DPM does not request status.\nPE_SRC_Send_Source_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract \nPD = connected\nDPM indicates Source \nalert condition\nAlert \nMessage sent \nPE_SRC_Ready\nSenderResponseTimer\nTimeout\nPE_SRC_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nPE_Give_Status\nGet_Status\nMessage received\n","image_count":29,"table_count":2}
{"page":856,"text":"Page 856\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.7.3\n  Sink Port Sink Alert State Diagram\nFigure 8.142, \"Sink Port Sink Alert State Diagram\" shows the state diagram for an Alert Message sent by a Sink Port.\nFigure 8.142 Sink Port Sink Alert State Diagram\n8.3.3.7.3.1\n  PE_SNK_Send_Sink_Alert State\nThe PE_SNK_Send_Sink_Alert state Shall be entered from the PE_SNK_Ready state when the Device Policy Manager \nindicates that there is a Source alert condition to be reported.\nOn entry to the PE_SNK_Send_Sink_Alert state the Policy Engine Shall request the Protocol Layer to send an Alert \nMessage.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Get_Status State when:\n\nThe Alert Message has been successfully sent.\n8.3.3.7.3.2\n  PE_SNK_Wait_for_Get_Status State\nOn entry to the PE_SNK_Wait_for_Get_Status State the Policy Engine Shall initialize and run the \nSenderResponseTimer.\nThe Policy Engine Shall transition back to the PE_Give_Status State (see Figure 8.151, \"Give Status State Diagram\") \nwhen:\n\nA Get_Status Message is received.\nThe Policy Engine Shall transition back to the PE_SNK_Ready (see Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe SenderResponseTimer times out.\nPE_SNK_Send_Sink_Alert\nActions on entry:\nSend Alert Message\nPower = Explicit Contract \nPD = connected\nDPM indicates Sink \nalert condition\nAlert \nMessage sent \nPE_SNK_Ready\nSenderResponseTimer\nTimeout\nPE_SNK_Wait_for_Get_Status\nActions on entry:\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nPE_Give_Status\nGet_Status\nMessage received\n","image_count":27,"table_count":2}
{"page":857,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 857\n8.3.3.7.4\n  Source Port Sink Alert State Diagram\nFigure 8.143, \"Source Port Sink Alert State Diagram\" shows the state diagram for an Alert Message received by a \nSource Port.\nFigure 8.143 Source Port Sink Alert State Diagram\n8.3.3.7.4.1\n  PE_SRC_Sink_Alert_Received State\nThe PE_SRC_Sink_Alert_Received state Shall be entered from the PE_SRC_Ready state when an Alert Message is \nreceived.\nOn entry to the PE_SRC_Sink_Alert_Received state the Policy Engine Shall inform the Device Policy Manager of the \ndetails of the Source alert.\nThe Policy Engine Shall transition to the PE_Get_Status State (see Figure 8.150, \"Get Status State Diagram\") when:\n\nThe DPM requests status.\nThe Policy Engine Shall transition back to the PE_SRC_Ready (see Figure 8.132, \"Source Port State Diagram\") when:\n\nThe DPM does not request status.\nPE_SRC_Sink_Alert_Received\nActions on entry:\nInform DPM of the detail of the alert\nPower = Explicit Contract \nPD = connected\nSink Alert Message\nreceived\nDPM does not\nrequest status\nPE_SRC_Ready\nPE_Get_Status\nDPM Requests Status\n","image_count":28,"table_count":2}
{"page":858,"text":"Page 858\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.8\n  Source/Sink Capabilities Extended State Diagrams\n8.3.3.8.1\n  Sink Port Get Source Capabilities Extended State Diagram\nFigure 8.144, \"Sink Port Get Source Capabilities Extended State Diagram\" shows the state diagram for a Sink on \nreceiving a request from the Device Policy Manager to get the Port Partner's extended Source Capabilities. See also \nSection 6.5.1, \"Source_Capabilities_Extended Message\".\nFigure 8.144 Sink Port Get Source Capabilities Extended State Diagram\n8.3.3.8.1.1\n  PE_SNK_Get_Source_Cap_Ext State\nThe Policy Engine Shall transition to the PE_SNK_Get_Source_Cap_Ext state, from the PE_SNK_Ready state, due to \na request to get the remote extended Source Capabilities from the Device Policy Manager. \nOn entry to the PE_SNK_Get_Source_Cap_Ext state the Policy Engine Shall send a Get_Source_Cap_Extended \nMessage and initialize and run the SenderResponseTimer.\nOn exit from the PE_SNK_Get_Source_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nA Source_Capabilities_Extended Message is received\n\nOr SenderResponseTimer times out.\nget extended source capabilities \nrequest \nfrom Device Policy Manager\nSource_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready\nPE_SNK_Get_Source_Cap_Ext\nActions on entry:\nSend Get_Source_Cap_Extended Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass source extended capabilities/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":859,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 859\n8.3.3.8.2\n  Source Give Source Capabilities Extended State Diagram\nFigure 8.145, \"Source Give Source Capabilities Extended State Diagram\" shows the state diagram for a Source on \nreceiving a Get_Source_Cap_Extended Message. See also Section 6.5.1, \"Source_Capabilities_Extended Message\".\nFigure 8.145 Source Give Source Capabilities Extended State Diagram\n8.3.3.8.2.1\n  PE_SRC_Give_Source_Cap_Ext State\nThe Policy Engine Shall transition to the PE_SRC_Give_Source_Cap_Ext state, from the PE_SRC_Ready state, when \na Get_Source_Cap_Extended Message is received. \nOn entry to the PE_SRC_Give_Source_Cap_Ext state the Policy Engine Shall request the present extended Source \nCapabilities from the Device Policy Manager and then send a Source_Capabilities_Extended Message based on \nthese capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nThe Source_Capabilities_Extended Message has been successfully sent.\nGet_Source_Cap_Extended Message\nreceived\nSource_Capabilities_Extended\nMessage sent\nPE_SRC_Ready\nPE_SRC_Give_Source_Cap_Ext\nActions on entry:\nGet present extended source capabilities from Device Policy Manager\nSend Source_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":31,"table_count":1}
{"page":860,"text":"Page 860\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.8.3\n  Source Port Get Sink Capabilities Extended State Diagram\nFigure 8.146, \"Source Port Get Sink Capabilities Extended State Diagram\" shows the state diagram for a Source on \nreceiving a request from the Device Policy Manager to get the Port Partner's extended Sink Capabilities. See also \nSection 6.5.13, \"Sink_Capabilities_Extended Message\".\nFigure 8.146 Source Port Get Sink Capabilities Extended State Diagram\n8.3.3.8.3.1\n  PE_SRC_Get_Sink_Cap_Ext State\nThe Policy Engine Shall transition to the PE_SRC_Get_Sink_Cap_Ext state, from the PE_SRC_Ready state, due to a \nrequest to get the remote extended Source Capabilities from the Device Policy Manager. \nOn entry to the PE_SRC_Get_Sink_Cap_Ext state the Policy Engine Shall send a Get_Sink_Cap_Extended Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_SRC_Get_Sink_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nA Sink_Capabilities_Extended Message is received\n\nOr SenderResponseTimer times out.\nget extended Sink capabilities \nrequest \nfrom Device Policy Manager\nSink_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready\nPE_SRC_Get_Sink_Cap_Ext\nActions on entry:\nSend Get_Sink_Cap_Extended Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass sink extended capabilities/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":861,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 861\n8.3.3.8.4\n  Sink Give Sink Capabilities Extended State Diagram\nFigure 8.147, \"Sink Give Sink Capabilities Extended State Diagram\" shows the state diagram for a Source on receiving \na Get_Sink_Cap_Extended Message. See also Section 6.5.13, \"Sink_Capabilities_Extended Message\".\nFigure 8.147 Sink Give Sink Capabilities Extended State Diagram\n8.3.3.8.4.1\n  PE_SNK_Give_Sink_Cap_Ext State\nThe Policy Engine Shall transition to the PE_SNK_Give_Sink_Cap_Ext state, from the PE_SNK_Ready state, when a \nGet_Sink_Cap_Extended Message is received. \nOn entry to the PE_SNK_Give_Sink_Cap_Ext state the Policy Engine Shall request the present extended Source \nCapabilities from the Device Policy Manager and then send a Sink_Capabilities_Extended Message based on these \ncapabilities.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nThe Sink_Capabilities_Extended Message has been successfully sent.\nGet_Sink_Cap_Extended Message\nreceived\nSink_Capabilities_Extended\nMessage sent\nPE_SNK_Ready\nPE_SNK_Give_Sink_Cap_Ext\nActions on entry:\nGet present extended Sink capabilities from Device Policy Manager\nSend Sink_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":862,"text":"Page 862\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.9\n  Source Information State Diagrams\n8.3.3.9.1\n  Sink Port Get Source Information State Diagram\nFigure 8.148, \"Sink Port Get Source Information State Diagram\" shows the state diagram for a Sink on receiving a \nrequest from the Device Policy Manager to get the Port Partner's Source information. See also Section 6.3.23, \n\"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info Message\".\nFigure 8.148 Sink Port Get Source Information State Diagram\n8.3.3.9.1.1\n  PE_SNK_Get_Source_Info State\nThe Policy Engine Shall transition to the PE_SNK_Get_Source_Info state, from the PE_SNK_Ready state, due to a \nrequest to get the remote Source information from the Device Policy Manager. \nOn entry to the PE_SNK_Get_Source_Info state the Policy Engine Shall send a Get_Source_Info Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_SNK_Get_Source_Info state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (information or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nA Source_Info Message is received\n\nOr SenderResponseTimer times out.\nget source information request \nfrom Device Policy Manager\nSource_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready\nPE_SNK_Get_Source_Info\nActions on entry:\nSend Get_Source_Info Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass source information/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":863,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 863\n8.3.3.9.2\n  Source Give Source Information State Diagram\nFigure 8.149, \"Source Give Source Information State Diagram\" shows the state diagram for a Source on receiving a \nGet_Source_Info Message. See also Section 6.3.23, \"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info \nMessage\".\nFigure 8.149 Source Give Source Information State Diagram\n8.3.3.9.2.1\n  PE_SRC_Give_Source_Info State\nThe Policy Engine Shall transition to the PE_SRC_Give_Source_Info state, from the PE_SRC_Ready state, when a \nGet_Source_Info Message is received. \nOn entry to the PE_SRC_Give_Source_Info state the Policy Engine Shall request the present Source information \nfrom the Device Policy Manager and then send a Source_Info Message based on this information.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nThe Source_Info Message has been successfully sent.\nGet_Source_Info Message\nreceived\nSource_Info Message sent\nPE_SRC_Ready\nPE_SRC_Give_Source_Info\nActions on entry:\nGet present source information from Device Policy Manager\nSend Source_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":30,"table_count":1}
{"page":864,"text":"Page 864\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.10\n  Status State Diagrams\n8.3.3.10.1\n  Get Status State Diagram\nFigure 8.150, \"Get Status State Diagram\" shows the state diagram for a Port on receiving a request from the Device \nPolicy Manager to get the Port Partner or Cable Plug's Status. See also Section 6.5.2, \"Status Message\".\nFigure 8.150 Get Status State Diagram\n8.3.3.10.1.1\n  PE_Get_Status State\nThe Policy Engine Shall transition to the PE_Get_Status state, from the PE_SRC_Ready or PE_SNK_Ready States, due \nto a request to get the Port Partner or Cable Plug's status from the Device Policy Manager. \nOn entry to the PE_Get_Status state the Policy Engine Shall send a Get_Status Message and initialize and run the \nSenderResponseTimer.\nOn exit from the PE_Get_Status state the Policy Engine Shall inform the Device Policy Manager of the outcome \n(status or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready or PE_SNK_Ready States as appropriate (see Figure \n8.132, \"Source Port State Diagram\" or Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Status Message is received\n\nOr SenderResponseTimer times out.\nget status request \nfrom Device Policy Manager\nStatus\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready,\nPE_SRC_Ready\nPE_Get_Status\nActions on entry:\nSend Get_Status Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Source status/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":865,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 865\n8.3.3.10.2\n  Give Status State Diagram\nFigure 8.151, \"Give Status State Diagram\" shows the state diagram for a Source on receiving a Get_Status Message. \nSee also Section 6.5.2, \"Status Message\".\nFigure 8.151 Give Status State Diagram\n8.3.3.10.2.1\n  PE_Give_Status State\nThe Policy Engine Shall transition to the PE_Give_Status state, from the PE_SRC_Ready, PE_SNK_Ready or \nPE_CBL_Ready States, when a Get_Status Message is received. \nOn entry to the PE_Give_Status state the Policy Engine Shall request the present Source status from the Device \nPolicy Manager and then send a Status Message based on these capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready States as \nappropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\"and Figure \n8.203, \"Cable Ready State Diagram\") when:\n\nThe Status Message has been successfully sent.\nGet_Status Message\nreceived\nStatus\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready,\nPE_CBL_Ready\nPE_Give_Status\nActions on entry:\nGet present Status from Device Policy Manager\nSend Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":28,"table_count":1}
{"page":866,"text":"Page 866\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.10.3\n  Sink Port Get Source PPS Status State Diagram\nFigure 8.152, \"Sink Port Get Source PPS Status State Diagram\" shows the state diagram for a Sink on receiving a \nrequest from the Device Policy Manager to get the Port Partner's Source status when operating as a PPS. See also \nSection 6.5.10, \"PPS_Status Message\".\nFigure 8.152 Sink Port Get Source PPS Status State Diagram\n8.3.3.10.3.1\n  PE_SNK_Get_PPS_Status State\nThe Policy Engine Shall transition to the PE_SNK_Get_PPS_Status state, from the PE_SNK_Ready state, due to a \nrequest to get the remote Source PPS status from the Device Policy Manager. \nOn entry to the PE_SNK_Get_PPS_Status state the Policy Engine Shall send a Get_PPS_Status Message and initialize \nand run the SenderResponseTimer.\nOn exit from the PE_SNK_Get_PPS_Status state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (status or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nA PPS_Status Message is received\n\nOr SenderResponseTimer times out.\nget PPS status request \nfrom Device Policy Manager\nPPS_Status\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready\nPE_SNK_Get_PPS_Status\nActions on entry:\nSend Get_PPS_Status Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Source status/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":867,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 867\n8.3.3.10.4\n  Source Give Source PPS Status State Diagram\nFigure 8.153, \"Source Give Source PPS Status State Diagram\" shows the state diagram for a Source on receiving a \nGet_PPS_Status Message. See also Section 6.5.10, \"PPS_Status Message\".\nFigure 8.153 Source Give Source PPS Status State Diagram\n8.3.3.10.4.1\n  PE_SRC_Give_PPS_Status State\nThe Policy Engine Shall transition to the PE_SRC_Give_PPS_Status state, from the PE_SRC_Ready state, when a \nGet_PPS_Status Message is received. \nOn entry to the PE_SRC_Give_PPS_Status state the Policy Engine Shall request the present Source PPS status from \nthe Device Policy Manager and then send a PPS_Status Message based on these capabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nThe PPS_Status Message has been successfully sent.\nGet_PPS_Status Message\nreceived\nPPS_Status\nMessage sent\nPE_SRC_Ready\nPE_SRC_Give_PPS_Status\nActions on entry:\nGet present Source PPS status from Device Policy Manager\nSend PPS_Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":868,"text":"Page 868\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.11\n  Battery Capabilities State Diagrams\n8.3.3.11.1\n  Get Battery Capabilities State Diagram\nFigure 8.154, \"Get Battery Capabilities State Diagram\" shows the state diagram for a Source or Sink on receiving a \nrequest from the Device Policy Manager to get the Port Partner's Battery capabilities for a specified Battery. See also \nSection 6.5.5, \"Battery_Capabilities Message\".\nFigure 8.154 Get Battery Capabilities State Diagram\n8.3.3.11.1.1\n  PE_Get_Battery_Cap State\nThe Policy Engine Shall transition to the PE_Get_Battery_Cap state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to get the remote Battery capabilities, for a specified Battery, from the Device \nPolicy Manager. \nOn entry to the PE_Get_Battery_Cap state the Policy Engine Shall send a Get_Battery_Cap Message and initialize \nand run the SenderResponseTimer.\nOn exit from the PE_Get_Battery_Cap state the Policy Engine Shall inform the Device Policy Manager of the outcome \n(capabilities or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Battery_Capabilities Message is received\n\nOr SenderResponseTimer times out.\nget Battery capabilities \nrequest \nfrom Device Policy Manager\nBattery_Capabilities\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Get_Battery_Cap\nActions on entry:\nSend Get_Battery_Cap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Battery capabilities/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":869,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 869\n8.3.3.11.2\n  Give Battery Capabilities State Diagram\nFigure 8.155, \"Give Battery Capabilities State Diagram\" shows the state diagram for a Source or Sink on receiving a \nGet_Battery_Cap Message. See also Section 6.5.5, \"Battery_Capabilities Message\".\nFigure 8.155 Give Battery Capabilities State Diagram\n8.3.3.11.2.1\n  PE_Give_Battery_Cap State\nThe Policy Engine Shall transition to the PE_Give_Battery_Cap state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, when a Get_Battery_Cap Message is received. \nOn entry to the PE_Give_Battery_Cap state the Policy Engine Shall request the present Battery capabilities, for the \nrequested Battery, from the Device Policy Manager and then send a Battery_Capabilities Message based on these \ncapabilities.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Battery_Capabilities Message has been successfully sent.\nGet_Battery_Cap Message\nreceived\nBattery_Capabilities\nMessage sent\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Give_Battery_Cap\nActions on entry:\nGet present Battery capabilities from Device Policy Manager\nSend Battery_Capabilities Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":870,"text":"Page 870\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.12\n  Battery Status State Diagrams\n8.3.3.12.1\n  Get Battery Status State Diagram\nFigure 8.156, \"Get Battery Status State Diagram\" shows the state diagram for a Source or Sink on receiving a request \nfrom the Device Policy Manager to get the Port Partner's Battery status for a specified Battery. See also Section 6.5.4, \n\"Get_Battery_Status Message\".\nFigure 8.156 Get Battery Status State Diagram\n8.3.3.12.1.1\n  PE_Get_Battery_Status State\nThe Policy Engine Shall transition to the PE_Get_Battery_Status state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to get the remote Battery status, for a specified Battery, from the Device \nPolicy Manager. \nOn entry to the PE_Get_Battery_Status state the Policy Engine Shall send a Get_Battery_Status Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_Get_Battery_Status state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (status or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Battery_Status Message is received\n\nOr SenderResponseTimer times out.\nget Battery status\nrequest \nfrom Device Policy Manager\nBattery_Status\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Get_Battery_Status\nActions on entry:\nSend Get_Battery_Status Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Battery status/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":871,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 871\n8.3.3.12.2\n  Give Battery Status State Diagram\nFigure 8.157, \"Give Battery Status State Diagram\" shows the state diagram for a Source or Sink on receiving a \nGet_Battery_Status Message. See also Section 6.5.4, \"Get_Battery_Status Message\".\nFigure 8.157 Give Battery Status State Diagram\n8.3.3.12.2.1\n  PE_Give_Battery_Status State\nThe Policy Engine Shall transition to the PE_Give_Battery_Status state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, when a Get_Battery_Status Message is received. \nOn entry to the PE_Give_Battery_Status state the Policy Engine Shall request the present Battery status, for the \nrequested Battery, from the Device Policy Manager and then send a Battery_Status Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Battery_Status Message has been successfully sent.\nGet_Battery_Status Message\nreceived\nBattery_Status\nMessage sent\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Give_Battery_Status\nActions on entry:\nGet present Battery status from Device Policy Manager\nSend Battery_Status Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":872,"text":"Page 872\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.13\n  Manufacturer Information State Diagrams\n8.3.3.13.1\n  Get Manufacturer Information State Diagram\nFigure 8.158, \"Get Manufacturer Information State Diagram\" shows the state diagram for a Source or Sink on \nreceiving a request from the Device Policy Manager to get the Port Partner or Cable Plug's Manufacturer \nInformation. See also Section 6.5.6, \"Get_Manufacturer_Info Message\".\nFigure 8.158 Get Manufacturer Information State Diagram\n8.3.3.13.1.1\n  PE_Get_Manufacturer_Info State\nThe Policy Engine Shall transition to the PE_Get_Manufacturer_Info state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to get the remote Manufacturer Information from the Device Policy Manager. \nOn entry to the PE_Get_Manufacturer_Info state the Policy Engine Shall send a Get_Manufacturer_Info Message \nand initialize and run the SenderResponseTimer.\nOn exit from the PE_Get_Manufacturer_Info state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Manufacturer_Info Message is received\n\nOr SenderResponseTimer times out.\nget manufacturer information\nrequest \nfrom Device Policy Manager\nManufacturer_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Get_Manfacturer_Info\nActions on entry:\nSend Get_Manfacturer_Info Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Manufacturer Information/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":873,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 873\n8.3.3.13.2\n  Give Manufacturer Information State Diagram\nFigure 8.159, \"Give Manufacturer Information State Diagram\" shows the state diagram for a Source, Sink or Cable \nPlug on receiving a Get_Manufacturer_Info Message. See also Section 6.5.6, \"Get_Manufacturer_Info Message\".\nFigure 8.159 Give Manufacturer Information State Diagram\n8.3.3.13.2.1\n  PE_Give_Manufacturer_Info State\nThe Policy Engine Shall transition to the PE_Give_Manufacturer_Info state, from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state, when a Get_Manufacturer_Info Message is received. \nOn entry to the PE_Give_Manufacturer_Info state the Policy Engine Shall request the manufacturer information \nfrom the Device Policy Manager and then send a Manufacturer_Info Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state as \nappropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure \n8.203, \"Cable Ready State Diagram\") when:\n\nThe Manufacturer_Info Message has been successfully sent.\nGet_Manufacturer_Info Message\nreceived\nManufacturer_Info\nMessage sent\nPE_SRC_Ready, \nPE_SNK_Ready or \nPE_CBL_Ready\nPE_Give_Manufacturer_Info\nActions on entry:\nGet present Manufacturer Information from Device Policy Manager\nSend Manufacturer_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":874,"text":"Page 874\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.14\n  Country Codes and Information State Diagrams\n8.3.3.14.1\n  Get Country Codes State Diagram\nFigure 8.160, \"Get Country Codes State Diagram\" shows the state diagram for a Source or Sink on receiving a request \nfrom the Device Policy Manager to get the Port Partner or Cable Plug's Country Codes. See also Section 6.5.11, \n\"Country_Codes Message\".\nFigure 8.160 Get Country Codes State Diagram\n8.3.3.14.1.1\n  PE_Get_Country_Codes State\nThe Policy Engine Shall transition to the PE_Get_Country_Codes state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to get the remote Country Codes from the Device Policy Manager. \nOn entry to the PE_Get_Country_Codes state the Policy Engine Shall send a Get_Country_Codes Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_Get_Country_Codes state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (Country Codes or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Country_Codes Message is received\n\nOr SenderResponseTimer times out.\nget country codes request \nfrom Device Policy Manager\nCountry_Codes\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Get_Country_Codes\nActions on entry:\nSend Get_Country_Codes Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Country Codes/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":875,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 875\n8.3.3.14.2\n  Give Country Codes State Diagram\nFigure 8.161, \"Give Country Codes State Diagram\" shows the state diagram for a Source or Sink on receiving a \nGet_Country_Codes Message. See also Section 6.5.11, \"Country_Codes Message\".\nFigure 8.161 Give Country Codes State Diagram\n8.3.3.14.2.1\n  PE_Give_Country_Codes State\nThe Policy Engine Shall transition to the PE_Give_Country_Codes state, from either the PE_SRC_Ready or \nPE_SNK_Ready State, when a Get_Country_Codes Message is received. \nOn entry to the PE_Give_Country_Codes state the Policy Engine Shall request the country codes from the Device \nPolicy Manager and then send a Country_Codes Message containing these codes.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Country_Codes Message has been successfully sent.\nGet_Country_Codes Message\nreceived\nCountry_Codes\nMessage sent\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Give_Country_Codes\nActions on entry:\nGet present Country Codes from Device Policy Manager\nSend Country_Codes Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":876,"text":"Page 876\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.14.3\n  Get Country Information State Diagram\nFigure 8.162, \"Get Country Information State Diagram\" shows the state diagram for a Source or Sink on receiving a \nrequest from the Device Policy Manager to get the Port Partner or Cable Plug's Country Information. See also Section \n6.5.12, \"Country_Info Message\".\nFigure 8.162 Get Country Information State Diagram\n8.3.3.14.3.1\n  PE_Get_Country_Info State\nThe Policy Engine Shall transition to the PE_Get_Country_Info state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to get the remote Manufacturer Information from the Device Policy Manager. \nOn entry to the PE_Get_Country_Info state the Policy Engine Shall send a Get_Manufacturer_Info Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_Get_Country_Info state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (country information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Country_Info Message is received\n\nOr SenderResponseTimer times out.\nget country information\nrequest \nfrom Device Policy Manager\nCountry_Info\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Get_Country_Info\nActions on entry:\nSend Get_Country_Info Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Country Information/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":877,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 877\n8.3.3.14.4\n  Give Country Information State Diagram\nFigure 8.163, \"Give Country Information State Diagram\" shows the state diagram for a Source or Sink on receiving a \nGet_Country_Info Message. See also Section 6.5.12, \"Country_Info Message\".\nFigure 8.163 Give Country Information State Diagram\n8.3.3.14.4.1\n  PE_Give_Country_Info State\nThe Policy Engine Shall transition to the PE_Give_Country_Info state, from either the PE_SRC_Ready or \nPE_SNK_Ready State, when a Get_Country_Info Message is received. \nOn entry to the PE_Give_Country_Info state the Policy Engine Shall request the country information from the \nDevice Policy Manager and then send a Country_Info Message containing this country information.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready State as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Country_Info Message has been successfully sent.\nGet_Country_Info Message\nreceived\nCountry_Info\nMessage sent\nPE_SRC_Ready or \nPE_SNK_Ready\nPE_Give_Country_Info\nActions on entry:\nGet present Country Information from Device Policy Manager\nSend Country_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":30,"table_count":1}
{"page":878,"text":"Page 878\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.15\n  Revision State Diagrams\n8.3.3.15.1\n  Get Revision State Diagram\nFigure 8.164, \"Get Revision State Diagram\" shows the state diagram for a Source or Sink on receiving a request from \nthe Device Policy Manager to get the Port Partner or Cable Plug's Revision Information. See also Section 6.3.24, \n\"Get_Revision Message\" and Section 6.4.12, \"Revision Message\".\nFigure 8.164 Get Revision State Diagram\n8.3.3.15.1.1\n  PE_Get_Revision State\nThe Policy Engine Shall transition to the PE_Get_Revision state, from either the PE_SRC_Ready or PE_SNK_Ready \nstate, due to a request to get the remote Revision Information from the Device Policy Manager. \nOn entry to the PE_Get_Revision state the Policy Engine Shall send a Get_Revision Message and initialize and run \nthe SenderResponseTimer.\nOn exit from the PE_Get_Revision state the Policy Engine Shall inform the Device Policy Manager of the outcome \n(Revision information or response timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nA Revision Message is received\n\nOr SenderResponseTimer times out.\nget Revision\nrequest \nfrom Device Policy Manager\nRevision\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Get_Revision\nActions on entry:\nSend Get_Revision Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Revision Information/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":879,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 879\n8.3.3.15.2\n  Give Revision State Diagram\nFigure 8.165, \"Give Revision State Diagram\" shows the state diagram for a Source, Sink or Cable Plug on receiving a \nGet_Revision Message. See also Section 6.3.24, \"Get_Revision Message\" and Section 6.4.12, \"Revision Message\".\nFigure 8.165 Give Revision State Diagram\n8.3.3.15.2.1\n  PE_Give_Revision State\nThe Policy Engine Shall transition to the PE_Give_Revision state, from either the PE_SRC_Ready, PE_SNK_Ready or \nPE_CBL_Ready state, when a Get_Revision Message is received. \nOn entry to the PE_Give_Revision state the Policy Engine Shall request the Revision information from the Device \nPolicy Manager and then send a Revision Message based on this information.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state as \nappropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure \n8.203, \"Cable Ready State Diagram\") when:\n\nThe Revision Message has been successfully sent.\nGet_Revision Message\nreceived\nRevision\nMessage sent\nPE_SRC_Ready, \nPE_SNK_Ready or \nPE_CBL_Ready\nPE_Give_Revision\nActions on entry:\nGet present Revision Information from Device Policy Manager\nSend Revision Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":28,"table_count":1}
{"page":880,"text":"Page 880\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.16\n  Enter_USB Message State Diagrams\n8.3.3.16.1\n  DFP Enter_USB Message State Diagrams\nFigure 8.166, \"DFP Enter_USB Message State Diagram\" shows the state diagram for an Enter_USB Message sent by \na DFP.\nFigure 8.166 DFP Enter_USB Message State Diagram\n8.3.3.16.1.1\n  PE_DEU_Send_Enter_USB State\nThe PE_DEU_Send_Enter_USB State Shall be entered from the PE_SRC_Ready or PE_SNK_Ready State when \nrequested by the Device Policy Manager and the Port is operating as a DFP.\nOn entry to the PE_DEU_Send_Enter_USB State the Policy Engine Shall request the Protocol Layer to send an \nEnter_USB Message and then initialize and run the SenderResponseTimer.\nOn exit from the PE_DEU_Send_Enter_USB state the Policy Engine Shall inform the Device Policy Manager of the \noutcome: Accept Message received, Reject Message received, SenderResponseTimer timeout.\nThe Policy Engine Shall transition back to the PE_SRC_Ready or PE_SNK_Ready State depending on the Ports Power \nRole when:\n\nAn Accept Message has been received or\n\nA Wait Message has been received or\n\nA Reject Message has been received\n\nThere is a SenderResponseTimer timeout.\nPE_DEU_Send_Enter_USB\nActions on entry:\nSend Enter_USB Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = connected\nEnter USB (USB Mode)\nrequest from DPM\nAccept Message Received |\nReject Message Received |\nWait Message Received |\nSenderResponseTimer timeout\nPE_SRC_Ready or \nPE_SNK_Ready (DFP)\nActions on exit:\nInform Device Policy Manager of Accept,  \nWait, Reject or timeout.\n","image_count":24,"table_count":1}
{"page":881,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 881\n8.3.3.16.2\n  UFP or Cable Plug Enter_USB Message State Diagrams\nFigure 8.167, \"UFP Enter_USB Message State Diagram\" shows the state diagram for an Enter_USB Message received \nby a UFP or Cable Plug.\nFigure 8.167 UFP Enter_USB Message State Diagram\n8.3.3.16.2.1\n  PE_UEU_Enter_USB_Received State\nThe PE_UEU_Enter_USB_Received state Shall be entered from the PE_SRC_Ready, PE_SNK_Ready or \nPE_CBL_Ready state as appropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State \nDiagram\" and Figure 8.203, \"Cable Ready State Diagram\") when an Enter_USB Message is received and the Port is \noperating as a UFP or is a Cable Plug.\nOn entry to the PE_UEU_Enter_USB_Received state the Policy Engine Shall inform the Device Policy Manager. The \nDevice Policy Manager responds with an indication of whether the Enter_USB Message is to be accepted or rejected. \nThe Policy Engine Shall send either an Accept Message, a Wait Message or a Reject Message as appropriate.\nThe Policy Engine Shall transition back to the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state as \nappropriate when:\n\nEither an Accept Message, a Wait Message or a Reject Message has been sent.\nPE_SRC_Ready (UFP), \nPE_SNK_Ready (UFP) or\nPE_CBL_Ready\nPE_UEU_Enter_USB_Received\nActions on entry:\nInform Device Policy Manager of Enter_USB Message\nSend Accept/Wait/Reject Message based on DPM response\nPower = Explicit Contract \nPD = connected\nEnter_USB Message \nReceived\nAccept/Wait/Reject\nMessage sent\n","image_count":29,"table_count":1}
{"page":882,"text":"Page 882\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.17\n  Security State Diagrams\n8.3.3.17.1\n  Send Security Request State Diagram\nFigure 8.168, \"Send security request State Diagram\" shows the state diagram for a Source or Sink on receiving a \nrequest from the Device Policy Manager to send a security request. See also Section 6.5.8, \"Security Messages\".\nFigure 8.168 Send security request State Diagram\n8.3.3.17.1.1\n  PE_Send_Security_Request State\nThe Policy Engine Shall transition to the PE_Send_Security_Request state, from either the PE_SRC_Ready or \nPE_SNK_Ready state, due to a request to send a security request from the Device Policy Manager. \nOn entry to the PE_Send_Security_Request state the Policy Engine Shall send a Security_Request Message.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Security_Request Message has been sent.\nSend security request \nfrom Device Policy Manager\nSecurity_Request\nMessage sent\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Send_Security_Request\nActions on entry:\nSend Security_Request Message\nPower = Explicit Contract \nPD = Connected\n","image_count":30,"table_count":1}
{"page":883,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 883\n8.3.3.17.2\n  Send Security Response State Diagram\nFigure 8.169, \"Send security response State Diagram\" shows the state diagram for a Source, Sink or Cable Plug on \nreceiving a Security_Request Message. See also Section 6.5.8, \"Security Messages\".\nFigure 8.169 Send security response State Diagram\n8.3.3.17.2.1\n  PE_Send_Security_Response State\nThe Policy Engine Shall transition to the PE_Send_Security_Response state, from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state, when a Security_Request Message is received. \nOn entry to the PE_Send_Security_Response state the Policy Engine Shall request the appropriate response from \nthe Device Policy Manager and then send a Security_Response Message based on this status.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state as \nappropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure \n8.203, \"Cable Ready State Diagram\") when:\n\nThe Security_Response Message has been successfully sent.\nSecurity_Request Message\nreceived\nSecurity_Response\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or \nPE_CBL_Ready\nPE_Send_Security_Response\nActions on entry:\nGet present Security response from Device Policy Manager\nSend Security_Response Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":884,"text":"Page 884\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.17.3\n  Security Response Received State Diagram\nFigure 8.170, \"Security response received State Diagram\" shows the state diagram for a Source or Sink on receiving \na Security_Response Message. See also Section 6.5.8, \"Security Messages\".\nFigure 8.170 Security response received State Diagram\n8.3.3.17.3.1\n  PE_Security_Response_Received State\nThe Policy Engine Shall transition to the PE_Security_Response_Received state, from either the PE_SRC_Ready or \nPE_SNK_Ready when a Security_Response Message is received. \nOn entry to the PE_Security_Response_Received state the Policy Engine Shall inform the Device Policy Manager of \nthe details of the security response.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure 8.203, \"Cable Ready \nState Diagram\") when:\n\nThe Device Policy Manager has been informed.\nSecurity_Response Message\nreceived\nDPM informed\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Security_Response_Received\nActions on entry:\nInform Device Policy Manager of the security response \ndetails.\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":885,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 885\n8.3.3.18\n  Firmware Update State Diagrams\n8.3.3.18.1\n  Send Firmware Update Request State Diagram\nFigure 8.171, \"Send firmware update request State Diagram\" shows the state diagram for a Source or Sink on \nreceiving a request from the Device Policy Manager to send a firmware update request. See also Section 6.5.9, \n\"Firmware Update Messages\".\nFigure 8.171 Send firmware update request State Diagram\n8.3.3.18.1.1\n  PE_Send_Firmware_Update_Request State\nThe Policy Engine Shall transition to the PE_Send_Firmware_Update_Request state, from either the \nPE_SRC_Ready or PE_SNK_Ready state, due to a request to send a firmware update request from the Device Policy \nManager. \nOn entry to the PE_Send_Firmware_Update_Request state the Policy Engine Shall send a \nFirmware_Update_Request Message.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\" and Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Firmware_Update_Request Message has been sent.\nSend firmware update request \nfrom Device Policy Manager\nFirmware_Update_Request\nMessage sent\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Send_Firmware_Update_Request\nActions on entry:\nSend Firmware_Update_Request Message\nPower = Explicit Contract \nPD = Connected\n","image_count":30,"table_count":1}
{"page":886,"text":"Page 886\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.18.2\n  Send Firmware Update Response State Diagram\nFigure 8.172, \"Send firmware update response State Diagram\" shows the state diagram for a Source, Sink or Cable \nPlug on receiving a Firmware_Update_Request Message. See also Section 6.5.9, \"Firmware Update Messages\".\nFigure 8.172 Send firmware update response State Diagram\n8.3.3.18.2.1\n  PE_Send_Firmware_Update_Response State\nThe Policy Engine Shall transition to the PE_Send_Firmware_Update_Response state, from either the \nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state, when a Firmware_Update_Request Message is received. \nOn entry to the PE_Send_Firmware_Update_Response state the Policy Engine Shall request the appropriate \nresponse from the Device Policy Manager and then send a Firmware_Update_Response Message based on this \nstatus.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state as \nappropriate (see Figure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure \n8.203, \"Cable Ready State Diagram\") when:\n\nThe Firmware_Update_Response Message has been successfully sent.\nFirmware_Update_Request \nMessage received\nFirmware_Update_Response\nMessage sent\nPE_SRC_Ready,\nPE_SNK_Ready or \nPE_CBL_Ready\nPE_Send_Firmware_Update_Response\nActions on entry:\nGet present firmware update response from Device Policy Manager\nSend Firmware_Update_Response Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":887,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 887\n8.3.3.18.3\n  Firmware Update Response Received State Diagram\nFigure 8.173, \"Firmware update response received State Diagram\" shows the state diagram for a Source or Sink on \nreceiving a Firmware_Update_Response Message. See also Section 6.5.9, \"Firmware Update Messages\".\nFigure 8.173 Firmware update response received State Diagram\n8.3.3.18.3.1\n  PE_Firmware_Update_Response_Received State\nThe Policy Engine Shall transition to the PE_Firmware_Update_Response_Received state, from either the \nPE_SRC_Ready or PE_SNK_Ready when a Firmware_Update_Response Message is received. \nOn entry to the PE_Firmware_Update_Response_Received state the Policy Engine Shall inform the Device Policy \nManager of the details of the firmware update response.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready or PE_SNK_Ready state as appropriate (see \nFigure 8.132, \"Source Port State Diagram\", Figure 8.133, \"Sink Port State Diagram\" and Figure 8.203, \"Cable Ready \nState Diagram\") when:\n\nThe Device Policy Manager has been informed.\nFirmware_Update_Response \nMessage received\nDPM informed\nPE_SRC_Ready or\nPE_SNK_Ready\nPE_Firmware_Update_Response_Received\nActions on entry:\nInform Device Policy Manager of the firmware update \nresponse details.\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":888,"text":"Page 888\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19\n  Dual-Role Port State Diagrams\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state \nmachines. In addition they Shall have the capability to perform a Power Role Swap from the PE_SRC_Ready or \nPE_SNK_Ready states and Shall return to USB Default Operation on a Hard Reset. \nThe State Diagrams in this section Shall apply to every [USB Type-C 2.4] DRP.\n8.3.3.19.1\n  DFP to UFP Data Role Swap State Diagram\nFigure 8.174, \"DFP to UFP Data Role Swap State Diagram\" shows the additional state diagram required to perform \na Data Role Swap from DFP to UFP operation and the changes that Shall be followed for error and Hard Reset \nhandling.\nFigure 8.174 DFP to UFP Data Role Swap State Diagram\n8.3.3.19.1.1\n  PE_SRC_Ready or PE_SNK_Ready State\nThe Data Role Swap process Shall start only from either the PE_SRC_Ready or PE_SNK_Ready state where power \nis stable.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Evaluate_Swap state when:\n\nA DR_Swap Message is received and\nPE_SRC_Ready  or \nPE_SNK_Ready\n(DFP)\nPE_DRS_DFP_UFP_Evaluate_Swap\nActions on entry:\nGet evaluation of Data Role Swap \nrequest from Device Policy Manager\nPE_DRS_DFP_UFP_\nChange_to_UFP\nActions on entry:\nRequest Device Policy Manager to \nchange port to UFP\nData Role Swap required \n(indication from \nDevice Policy Manager)\nPE_DRS_DFP_UFP_\nSend_Swap\nActions on entry:\nSend Swap DR message\nInitialize and run \nSenderResponseTimer\nReject message received |\nWait message received |\nSenderResponseTimer \ntimeout\nPE_DRS_DFP_UFP_\nAccept_Swap\nActions on entry:\nSend Accept Message\nAccept received\nPE_DRS_DFP_UFP_\nReject_Swap\nActions on entry:\nSend Reject or Wait \nMessage as appropriate\nPower = Explicit Contract\nPD = Connected\nMessage sent\nDR_Swap message received &\nnot in Modal Operation\nData Role Swap ok\nData Role Swap not ok |\nFurther evaluation \nrequired\nAccept message\nsent\nPort changed to UFP\nPE_SRC_Ready  or \nPE_SNK_Ready\n(UFP)\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPE_SRC_Hard_Reset  or \nPE_SNK_Hard_Reset\nDR_Swap message received &\nin Modal Operation\n","image_count":43,"table_count":9}
{"page":889,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 889\n\nThere are no Active Modes (not in Modal Operation).\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset states when:\n\nA DR_Swap Message is received and\n\nThere are one or more Active Modes (Modal Operation).\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Send_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is required.\n8.3.3.19.1.2\n  PE_DRS_DFP_UFP_Evaluate_Swap State\nOn entry to the PE_DRS_DFP_UFP_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager \nwhether a Data Role Swap can be made.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is OK.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Reject_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is not OK.\n\nOr further evaluation of the Data Role Swap request is needed.\n8.3.3.19.1.3\n  PE_DRS_DFP_UFP_Accept_Swap State\nOn entry to the PE_DRS_DFP_UFP_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an \nAccept Message.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Change_to_UFP state when:\n\nThe Accept Message has been sent.\n8.3.3.19.1.4\n  PE_DRS_DFP_UFP_Change_to_UFP State\nOn entry to the PE_DRS_DFP_UFP_Change_to_UFP state the Policy Engine Shall request the Device Policy Manager \nto change the Port from a DFP to a UFP.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Device Policy Manager indicates that the Port has been changed to a UFP.\n8.3.3.19.1.5\n  PE_DRS_DFP_UFP_Send_Swap State\nOn entry to the PE_DRS_DFP_UFP_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a \nDR_Swap Message and Shall start the SenderResponseTimer.\nOn exit from the PE_DRS_DFP_UFP_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer.\nThe Policy Engine Shall continue as a DFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state \nwhen:\n\nA Reject Message is received.\n\nOr a Wait Message is received.\n\nOr the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_DRS_DFP_UFP_Change_to_UFP state when:\n\nAn Accept Message is received.\n8.3.3.19.1.6\n  PE_DRS_DFP_UFP_Reject_Swap State\nOn entry to the PE_DRS_DFP_UFP_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n","image_count":0,"table_count":1}
{"page":890,"text":"Page 890\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nA Reject Message if the device is unable to perform a Data Role Swap at this time.\n\nA Wait Message if further evaluation of the Data Role Swap request is required.\nNote:\nIn this case it is expected that one of the Port Partners will send a DR_Swap Message at a later time (see \nSection 6.3.12.3, \"Wait in response to a DR_Swap Message\").\nThe Policy Engine Shall continue as a DFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state \nwhen:\n\nThe Reject or Wait Message has been sent.\n","image_count":0,"table_count":1}
{"page":891,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 891\n8.3.3.19.2\n  UFP to DFP Data Role Swap State Diagram\nFigure 8.175, \"UFP to DFP Data Role Swap State Diagram\" shows the additional state diagram required to perform \na Data Role Swap from DRP UFP to DFP operation and the changes that Shall be followed for error and Hard Reset \nhandling.\nFigure 8.175 UFP to DFP Data Role Swap State Diagram\n8.3.3.19.2.1\n  PE_SRC_Ready or PE_SNK_Ready State\nThe Data Role Swap process Shall start only from the either the PE_SRC_Ready or PE_SNK_Ready state where \npower is stable.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Evaluate_Swap state when:\n\nA DR_Swap Message is received and\n\nThere are no Active Modes (not in Modal Operation).\nPE_SRC_Ready or \nPE_SNK_Ready\n(UFP)\nPE_DRS_UFP_DFP_Evaluate_Swap\nActions on entry:\nGet evaluation of Data Role Swap \nrequest from Device Policy Manager\nPE_DRS_UFP_DFP_\nChange_to_DFP\nActions on entry:\nRequest Device Policy Manager to \nchange port to DFP\nData Role Swap required \n(indication from \nDevice Policy Manager)\nPE_DRS_UFP_DFP_\nSend_Swap\nActions on entry:\nSend Swap DR Message\nInitialize and run \nSenderResponseTimer\nReject Message received |\nWait Message received |\nSenderResponseTimer \ntimeout\nPE_DRS_UFP_DFP_\nAccept_Swap\nActions on entry:\nSend Accept Message\nAccept received\nPE_DRS_UFP_DFP_\nReject_Swap\nActions on entry:\nSend Reject or Wait Message as \nappropriate\nPower = Explicit Contract\nPD = Connected\nMessage sent\nDR_Swap Message received &\nnot in Modal Operation\nData Role Swap ok\nData Role Swap not ok |\nFurther evaluation \nrequired\nAccept Message\nsent\nPort changed to DFP\nPE_SRC_Ready or \nPE_SNK_Ready\n(DFP)\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPE_SRC_Hard_Reset or \nPE_SNK_Hard_Reset\nDR_Swap Message received &\nin Modal Operation\n","image_count":51,"table_count":9}
{"page":892,"text":"Page 892\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset states when:\n\nA DR_Swap Message is received and\n\nThere are one or more Active Modes (Modal Operation).\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Send_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is required.\n8.3.3.19.2.2\n  PE_DRS_UFP_DFP_Evaluate_Swap State\nOn entry to the PE_DRS_UFP_DFP_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager \nwhether a Data Role Swap can be made.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is OK.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Reject_Swap state when:\n\nThe Device Policy Manager indicates that a Data Role Swap is not OK.\n\nOr further evaluation of the Data Role Swap request is needed.\n8.3.3.19.2.3\n  PE_DRS_UFP_DFP_Accept_Swap State\nOn entry to the PE_DRS_UFP_DFP_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an \nAccept Message.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Change_to_DFP state when:\n\nThe Accept Message has been sent.\n8.3.3.19.2.4\n  PE_DRS_UFP_DFP_Change_to_DFP State\nOn entry to the PE_DRS_UFP_DFP_Change_to_DFP state the Policy Engine Shall request the Device Policy Manager \nto change the Port from a UFP to a DFP.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Device Policy Manager indicates that the Port has been changed to a DFP.\n8.3.3.19.2.5\n  PE_DRS_UFP_DFP_Send_Swap State\nOn entry to the PE_DRS_UFP_DFP_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a \nDR_Swap Message and Shall start the SenderResponseTimer.\nOn exit from the PE_DRS_UFP_DFP_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer.\nThe Policy Engine Shall continue as a UFP and Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state \nwhen:\n\nA Reject Message is received.\n\nOr a Wait Message is received.\n\nOr the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_DRS_UFP_DFP_Change_to_DFP state when:\n\nAn Accept Message is received.\n8.3.3.19.2.6\n  PE_DRS_UFP_DFP_Reject_Swap State\nOn entry to the PE_DRS_UFP_DFP_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n\nA Reject Message if the device is unable to perform a Data Role Swap at this time.\n","image_count":0,"table_count":1}
{"page":893,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 893\n\nA Wait Message if further evaluation of the Data Role Swap request is required.\nNote:\nIn this case it is expected that one of the Port Partners will send a DR_Swap Message at a later time (see \nSection 6.3.12.3, \"Wait in response to a DR_Swap Message\").\nThe Policy Engine Shall continue as a UFP and Shall transition to the either the PE_SRC_Ready or PE_SNK_Ready \nstate when:\n\nThe Reject or Wait Message has been sent.\n","image_count":0,"table_count":1}
{"page":894,"text":"Page 894\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.3\n  Policy Engine in Source to Sink Power Role Swap State Diagram\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state \nmachines. In addition, they Shall have the capability to do a Power Role Swap from the PE_SRC_Ready state and \nShall return to USB Default Operation on a Hard Reset.\nFigure 8.176, \"Dual-Role Port in Source to Sink Power Role Swap State Diagram\" shows the additional state diagram \nrequired to perform a Power Role Swap from Source to Sink Power Roles and the changes that Shall be followed for \nerror handling.\nFigure 8.176 Dual-Role Port in Source to Sink Power Role Swap State Diagram\nPE_SRC_Ready\nPE_PRS_SRC_SNK_\nEvaluate_Swap\nActions on entry:\nGet evaluation of swap request \nfrom Device Policy Manager\nPower = Explicit Contract\nPD = Connected\nPE_PRS_SRC_SNK_\nTransition_to_off\nActions on entry:\nTell Device Policy Manager to turn off \npower supply\nPower = Transition to stop sourcing\nPD = Connected\nPE_PRS_SRC_SNK_\nWait_Source_on\nActions on entry:\nSend PS_RDY Message\nInitialize and run PSSourceOnTimer\nPower = Source off\nPD = Connected\nPower Role Swap required \n(indication from \nDevice Policy Manager)\nPE_PRS_SRC_SNK_\nSend_Swap\nActions on entry:\nSend PR_Swap Message\nInitialize and run \nSenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nReject Message received |\nWait Message received |\nSenderResponseTimer \ntimeout\nPE_PRS_SRC_SNK_\nAccept_Swap\nActions on entry:\nSend Accept Message\nPower = Explicit Contract\nPD = Connected\nAccept received\nPE_PRS_SRC_SNK_\nReject_PR_Swap\nActions on entry:\nSend Reject or Wait Message as \nappropriate\nPower = Explicit Contract\nPD = Connected\nMessage sent\nPR_Swap Message received\nPower Role Swap ok\nPower Role Swap not ok |\nFurther evaluation \nrequired\nAccept Message\nsent\nPS_RDY Message\nreceived\nPE_SNK_Startup\nPE_PRS_SRC_SNK_\nAssert_Rd\nActions on entry:\nRequest DPM to assert Rd\nPower = Source off\nPD = Connected\nSource turned off\nRd asserted\nErrorRecovery\nPSSourceOnTimer Timeout |\nPS_RDY Message not sent after retries (no GoodCRC received)\n","image_count":32,"table_count":10}
{"page":895,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 895\n8.3.3.19.3.1\n  PE_SRC_Ready State\nThe Power Role Swap process Shall start only from the PE_SRC_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Evaluate_Swap state when:\n\nA PR_Swap Message is received.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Send_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is required.\n8.3.3.19.3.2\n  PE_PRS_SRC_SNK_Evaluate_Swap State\nOn entry to the PE_PRS_SRC_SNK_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager \nwhether a Power Role Swap can be made.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is OK.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Reject_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is not OK.\n\nOr further evaluation of the Power Role Swap request is needed.\n8.3.3.19.3.3\n  PE_PRS_SRC_SNK_Accept_Swap State\nOn entry to the PE_PRS_SRC_SNK_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an \nAccept Message.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Transition_to_off state when:\n\nThe Accept Message has been sent.\n8.3.3.19.3.4\n  PE_PRS_SRC_SNK_Transition_to_off State\nOn entry to the PE_PRS_SRC_SNK_Transition_to_off state the Policy Engine Shall request the Device Policy Manager \nto turn off the Source.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Assert_Rd state when:\n\nThe Device Policy Manager indicates that the Source has been turned off.\n8.3.3.19.3.5\n  PE_PRS_SRC_SNK_Assert_Rd State\nOn entry to the PE_PRS_SRC_SNK_Assert_Rd state the Policy Engine Shall request the Device Policy Manager to \nchange the resistor asserted on the CC wire from Rp to Rd.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Wait_Source_on state when:\n\nThe Device Policy Manager indicates that Rd is asserted.\n8.3.3.19.3.6\n  PE_PRS_SRC_SNK_Wait_Source_on State\nOn entry to the PE_PRS_SRC_SNK_Wait_Source_on state the Policy Engine Shall request the Protocol Layer to send \na PS_RDY Message and Shall start the PSSourceOnTimer.\nOn exit from the Source off state the Policy Engine Shall stop the PSSourceOnTimer.\nThe Policy Engine Shall transition to the PE_SNK_Startup when:\n\nA PS_RDY Message is received indicating that the remote Source is now supplying power.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n","image_count":0,"table_count":1}
{"page":896,"text":"Page 896\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe PSSourceOnTimer times out or\n\nThe PS_RDY Message is not sent after retries (a GoodCRC Message has not been received).\nNote:\nA Soft Reset Shall Not be initiated in this case.\n8.3.3.19.3.7\n  PE_PRS_SRC_SNK_Send_Swap State\nOn entry to the PE_PRS_SRC_SNK_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a \nPR_Swap Message and Shall start the SenderResponseTimer.\nOn exit from the PE_PRS_SRC_SNK_Send_Swap state the Policy Engine Shall stop the SenderResponseTimer.\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nA Reject Message is received.\n\nOr a Wait Message is received.\n\nOr the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SRC_SNK_Transition_to_off state when:\n\nAn Accept Message is received.\n8.3.3.19.3.8\n  PE_PRS_SRC_SNK_Reject_Swap State\nOn entry to the PE_PRS_SRC_SNK_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n\nA Reject Message if the device is unable to perform a Power Role Swap at this time.\n\nA Wait Message if further evaluation of the Power Role Swap request is required.\nNote:\nIn this case it is expected that one of the Port Partners will send a PR_Swap Message at a later time (see \nSection 6.3.12.2, \"Wait in response to a PR_Swap Message\").\nThe Policy Engine Shall transition to the PE_SRC_Ready when:\n\nThe Reject or Wait Message has been sent.\n","image_count":0,"table_count":1}
{"page":897,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 897\n8.3.3.19.4\n  Policy Engine in Sink to Source Power Role Swap State Diagram\nDual-Role Ports that combine Sink and Source functionality Shall comprise Sink and Source Policy Engine state \nmachines. In addition, they Shall have the capability to do a Power Role Swap from the PE_SNK_Ready state and \nShall return to USB Default Operation on a Hard Reset.\nFigure 8.177, \"Dual-role Port in Sink to Source Power Role Swap State Diagram\" shows the additional state diagram \nrequired to perform a Power Role Swap from Sink to Source Power Roles and the changes that Shall be followed for \nerror handling.\n","image_count":0,"table_count":1}
{"page":898,"text":"Page 898\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.177 Dual-role Port in Sink to Source Power Role Swap State Diagram\n8.3.3.19.4.1\n  PE_SNK_Ready State\nThe Power Role Swap process Shall start only from the PE_SNK_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Evaluate_Swap state when:\nPE_SNK_Ready\nPE_PRS_SNK_SRC_\nEvaluate_Swap\nActions on entry:\nGet evaluation of swap request \nfrom Device Policy Manager\nPower = Explicit Contract\nPD = Connected\nPE_PRS_SNK_SRC_\nTransition_to_off\nActions on entry:\nInitialize and run PSSourceOffTimer\nTell Device Policy Manager to turn off \nPower Sink.\nPower = Transition to stop sinking\nPD = Connected\nPower Role Swap required \n(indication from \nDevice Policy Manager)\nPE_PRS_SNK_SRC_\nSend_Swap\nActions on entry:\nSend PR_Swap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nReject Message received |\nWait Message received |\nSenderResponseTimer \ntimeout\nPE_PRS_SNK_SRC_Accept_Swap\nActions on entry:\nSend Accept Message\nDisable Fast Role Swap Receiver if enabled\nPower = Explicit Contract\nPD = Connected\nAccept Message\nreceived\nPE_PRS_SNK_SRC_\nReject_Swap\nActions on entry:\nSend Reject or Wait Message \nas appropriate\nPower = Explicit Contract\nPD = Connected\nPR_Swap Message received\nPower Role Swap ok\nPower Role Swap not ok |\nFurther evaluation\nrequired\nAccept Message sent\nPE_PRS_SNK_SRC_\nSource_on\nActions on entry:\nTell Device Policy Manager to turn on \nSource\nPower = Transition to source on\nPD = Connected\nVBUS is at vSafe5V\nActions on exit:\nSend PS_RDY Message\nPE_SRC_Startup\nMessage sent\nPE_PRS_SNK_SRC_\nAssert_Rp\nActions on entry:\nRequest DPM to assert Rp\nPower = Source off\nPD = Connected\nPS_RDY Message received\nRp asserted\nErrorRecovery\nPS_RDY Message not sent \nafter retries (no GoodCRC received)\nPSSourceOffTimer timeout\n","image_count":25,"table_count":10}
{"page":899,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 899\n\nA PR_Swap Message is received.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Send_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is required.\n8.3.3.19.4.2\n  PE_PRS_SNK_SRC_Evaluate_Swap State\nOn entry to the PE_PRS_SNK_SRC_Send_Swap state the Policy Engine Shall ask the Device Policy Manager whether \na Power Role Swap can be made.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is OK.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Reject_Swap state when:\n\nThe Device Policy Manager indicates that a Power Role Swap is not OK.\n8.3.3.19.4.3\n  PE_PRS_SNK_SRC_Accept_Swap State\nOn entry to the PE_PRS_SNK_SRC_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an \nAccept Message and Shall disable the Fast Role Swap receiver if this is enabled.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Transition_to_off state when:\n\nThe Accept Message has been sent.\n8.3.3.19.4.4\n  PE_PRS_SNK_SRC_Transition_to_off State\nOn entry to the PE_PRS_SNK_SRC_Transition_to_off state the Policy Engine Shall initialize and run the \nPSSourceOffTimer and then request the Device Policy Manager to turn off the Sink.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n\nThe PSSourceOffTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Assert_Rp state when:\n\nA PS_RDY Message is received.\n8.3.3.19.4.5\n  PE_PRS_SNK_SRC_Assert_Rp State\nOn entry to the PE_PRS_SNK_SRC_Assert_Rp state the Policy Engine Shall request the Device Policy Manager to \nchange the resistor asserted on the CC wire from Rd to Rp.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Source_on state when:\n\nThe Device Policy Manager indicates that Rd is asserted.\n8.3.3.19.4.6\n  PE_PRS_SNK_SRC_Source_on State\nOn entry to the PE_PRS_SNK_SRC_Source_on state the Policy Engine Shall request the Device Policy Manager to turn \non the Source.\nOn exit from the PE_PRS_SNK_SRC_Source_on state the Policy Engine Shall send a PS_RDY Message.\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n\nThe Source Port VBUS is at vSafe5V.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n\nThe PS_RDY Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset \nShall Not be initiated in this case.\n","image_count":0,"table_count":1}
{"page":900,"text":"Page 900\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.4.7\n  PE_PRS_SNK_SRC_Send_Swap State\nOn entry to the PE_PRS_SNK_SRC_Send_Swap state the Policy Engine Shall request the Protocol Layer to send a \nPR_Swap Message and Shall initialize and run the SenderResponseTimer.\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nA Reject Message is received.\n\nOr a Wait Message is received.\n\nOr the SenderResponseTimer times out.\nThe Policy Engine Shall transition to the PE_PRS_SNK_SRC_Transition_to_off state when:\n\nAn Accept Message is received.\n8.3.3.19.4.8\n  PE_PRS_SNK_SRC_Reject_Swap State\nOn entry to the PE_PRS_SNK_SRC_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send: \n\nA Reject Message if the device is unable to perform a Power Role Swap at this time.\n\nA Wait Message if further evaluation of the Power Role Swap request is required.\nNote:\nIn this case it is expected that one of the Port Partners will send a PR_Swap Message at a later time (see \nSection 6.3.12.2, \"Wait in response to a PR_Swap Message\").\nThe Policy Engine Shall transition to the PE_SNK_Ready state when:\n\nThe Reject or Wait Message has been sent.\n","image_count":0,"table_count":1}
{"page":901,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 901\n8.3.3.19.5\n  Policy Engine in Source to Sink Fast Role Swap State Diagram\nDual-Role Ports that combine Source and Sink functionality Shall comprise Source and Sink Policy Engine state \nmachines. In addition, they Should have the capability to do a Fast Role Swap from the PE_SRC_Ready state and \nShall return to USB Default Operation on a Hard Reset.\nFigure 8.178, \"Dual-Role Port in Source to Sink Fast Role Swap State Diagram\" shows the additional state diagram \nrequired to perform a Fast Role Swap from Source to Sink Power Roles and the changes that Shall be followed for \nerror handling.\n","image_count":0,"table_count":1}
{"page":902,"text":"Page 902\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.178 Dual-Role Port in Source to Sink Fast Role Swap State Diagram\nPE_SRC_Ready\nPE_FRS_SRC_SNK_\nEvaluate_Swap\nActions on entry:\nAsk Device Policy Manager if Fast \nRole Swap signaled on CC wire\nPower = Implicit Contract\nPD = Connected\nPE_FRS_SRC_SNK_\nTransition_to_off\nActions on entry:\nWait for VBUS to reach vSafe5V\nPower = Implicit contract\nPD = Connected\nPE_FRS_SRC_SNK_\nWait_Source_on\nActions on entry:\nSend PS_RDY Message\nInitialize and run PSSourceOnTimer\nPower = Implicit contract\nPD = Connected\nPE_FRS_SRC_SNK_\nAccept_Swap\nActions on entry:\nSend Accept Message\nPower = Implicit Contract\nPD = Connected\nFast Role Swap signaled\nAccept Message\nsent\nPS_RDY Message\nreceived\nPE_SNK_Startup\nPE_FRS_SRC_SNK_\nAssert_Rd\nActions on entry:\nRequest DPM to assert Rd\nPower = Implicit contract\nPD = Connected\nVBUS at vSafe5V\nRd asserted\nErrorRecovery\nPSSourceOnTimer Timeout |\nPS_RDY Message not sent after \nretries (no GoodCRC received)\nAccept Message not sent after \nretries (no GoodCRC received)\nPE_SRC_Hard_Reset\nFR_Swap Message received\nFast Role Swap not signaled\n","image_count":33,"table_count":8}
{"page":903,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 903\n8.3.3.19.5.1\n  PE_SRC_Ready State\nThe Fast Role Swap process Shall start only from the PE_SRC_Ready state where power is stable.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Evaluate_Swap state when:\n\nAn FR_Swap Message is received.\n8.3.3.19.5.2\n  PE_FRS_SRC_SNK_Evaluate_Swap State\nOn entry to the PE_FRS_SRC_SNK_Evaluate_Swap state the Policy Engine Shall ask the Device Policy Manager \nwhether Fast Role Swap has been signaled on the CC wire.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a Fast Role Swap has been signaled.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThe Device Policy Manager indicates that a Fast Role Swap is not being signaled.\n8.3.3.19.5.3\n  PE_FRS_SRC_SNK_Accept_Swap State\nOn entry to the PE_FRS_SRC_SNK_Accept_Swap state the Policy Engine Shall request the Protocol Layer to send an \nAccept Message.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Transition_to_off state when:\n\nThe Accept Message has been sent.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nThe Accept Message is not sent after retries (a GoodCRC Message has not been received).\nNote:\nA Soft Reset Shall Not be initiated in this case.\n8.3.3.19.5.4\n  PE_FRS_SRC_SNK_Transition_to_off State\nOn entry to the PE_FRS_SRC_SNK_Transition_to_off state the Policy Engine Shall wait until VBUS has discharged to \nvSafe5V.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Assert_Rd state when:\n\nThe Device Policy Manager indicates that VBUS has discharged to vSafe5V.\n8.3.3.19.5.5\n  PE_FRS_SRC_SNK_Assert_Rd State\nOn entry to the PE_FRS_SRC_SNK_Assert_Rd state the Policy Engine Shall request the Device Policy Manager to \nchange the resistor asserted on the CC wire from Rp to Rd.\nThe Policy Engine Shall transition to the PE_FRS_SRC_SNK_Wait_Source_on state when:\n\nThe Device Policy Manager indicates that Rd is asserted.\n8.3.3.19.5.6\n  PE_FRS_SRC_SNK_Wait_Source_on State\nOn entry to the PE_FRS_SRC_SNK_Wait_Source_on state the Policy Engine Shall request the Protocol Layer to send \na PS_RDY Message and Shall start the PSSourceOnTimer.\nOn exit from the Source off state the Policy Engine Shall stop the PSSourceOnTimer.\nThe Policy Engine Shall transition to the PE_SNK_Startup when:\n\nA PS_RDY Message is received indicating that the New Source is now applying Rp.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n","image_count":0,"table_count":1}
{"page":904,"text":"Page 904\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe PSSourceOnTimer times out or\n\nThe PS_RDY Message is not sent after retries (a GoodCRC Message has not been received).\nNote:\nA Soft Reset Shall Not be initiated in this case.\n","image_count":0,"table_count":1}
{"page":905,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 905\n8.3.3.19.6\n  Policy Engine in Sink to Source Fast Role Swap State Diagram\nDual-Role Ports that combine Sink and Source functionality Shall comprise Sink and Source Policy Engine state \nmachines. In addition, they Should have the capability to do a Fast Role Swap from the PE_SNK_Ready state and \nShall return to USB Default Operation on a Hard Reset.\nFigure 8.179, \"Dual-role Port in Sink to Source Fast Role Swap State Diagram\" shows the additional state diagram \nrequired to perform a Fast Role Swap from Sink to Source Power Roles and the changes that Shall be followed for \nerror handling.\n","image_count":0,"table_count":1}
{"page":906,"text":"Page 906\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 8.179 Dual-role Port in Sink to Source Fast Role Swap State Diagram\nPE_FRS_SNK_SRC_\nTransition_to_off\nActions on entry:\nInitialize and run PSSourceOffTimer\nPower = Implicit Contract\nPD = Connected\nFast Swap signal detected on CC Wire\nPE_FRS_SNK_SRC_\nSend_Swap\nActions on entry:\nSend FR_Swap Message\nInitialize and run \nSenderResponseTimer\nPower = Implicit Contract\nPD = Connected\nAccept Message\nreceived\nPE_FRS_SNK_SRC_\nSource_on\nActions on entry:\nSend PS_RDY Message\nPower = Transition to source on\nPD = Connected\nPS_RDY Message sent\nPE_SRC_Startup\nPE_FRS_SNK_SRC_\nAssert_Rp\nActions on entry:\nRequest DPM to assert Rp\nPower = Implicit Contract\nPD = Connected\nPS_RDY Message received\nRp asserted\nErrorRecovery\nPS_RDY Message not sent \nafter retries (no GoodCRC received)\nPSSourceOffTimer timeout\nSenderResponseTimer timeout |\nFR_Swap Message not sent \nafter retries (no GoodCRC received)\nPE_FRS_SNK_SRC_Vbus_Applied\nActions on entry:\nRequest Device Policy Manager to notify \nwhen vSafe5v is being applied by the local \npower source.\nPower = Implicit Contract\nPD = Connected\nNew Source is applying vSafe5V\nPE_FRS_SNK_SRC_\nStart_AMS\nActions on entry:\nNotify the Protocol Layer that the first \nMessage in the AMS will follow.\nPower = Implicit Contract\nPD = Connected\nProtocol Layer notified\n","image_count":28,"table_count":8}
{"page":907,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 907\n8.3.3.19.6.1\n  PE_FRS_SNK_SRC_Start_AMS State\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Start_AMS state from any other state provided there is \nan Explicit Contract in place when:\n\nThe Sink Capabilities received from the Initial Source by the Policy Engine has at least one of the Fast \nRole Swap bits set.\n\nThe system has sufficient reserve power to provide the requested current to the Initial Source, as \nrequested in the Fast Role Swap bits in the Sink Capabilities, and is willing to dedicate it to the Port\n\nThe Device Policy Manager indicates that a Fast Role Swap signal has been detected on the CC wire.\nOn entry to the PE_FRS_SNK_SRC_Start_AMS state the Policy Engine Shall notify the Protocol Layer that the first \nMessage in an AMS will follow.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Send_Swap state when:\n\nThe Protocol Layer has been notified.\n8.3.3.19.6.2\n  PE_FRS_SNK_SRC_Send_Swap State\nOn entry to the PE_FRS_SNK_SRC_Send_Swap state the Policy Engine Shall request the Protocol Layer to send an \nFR_Swap Message and Shall initialize and run the SenderResponseTimer.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Transition_to_off state when:\n\nAn Accept Message is received.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n\nThe SenderResponseTimer times out or\n\nThe FR_Swap Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset \nShall Not be initiated in this case.\n8.3.3.19.6.3\n  PE_FRS_SNK_SRC_Transition_to_off State\nOn entry to the PE_FRS_SNK_SRC_Transition_to_off state the Policy Engine Shall initialize and run the \nPSSourceOffTimer and then request the Device Policy Manager to turn off the Sink.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n\nThe PSSourceOffTimer times out.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_VBUS_Applied state when:\n\nA PS_RDY Message is received.\n8.3.3.19.6.4\n  PE_FRS_SNK_SRC_VBUS_Applied State\nOn entry to the PE_FRS_SNK_SRC_VBUS_Applied state the Policy Engine waits for a notification from the Device \nPolicy Manager that the local power source has applied vSafe5V to VBUS (see Section 5.8.6.3, \"Fast Role Swap \nDetection\").\nNote:\nThis could have already been applied prior to entering this state or could be applied while waiting in this \nstate.\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Assert_Rp state when:\n\nThe Device Policy Manager indicates that vSafe5V is being applied.\n8.3.3.19.6.5\n  PE_FRS_SNK_SRC_Assert_Rp State\nOn entry to the PE_FRS_SNK_SRC_Assert_Rp state the Policy Engine Shall request the Device Policy Manager to \nchange the resistor asserted on the CC wire from Rd to Rp.\n","image_count":0,"table_count":1}
{"page":908,"text":"Page 908\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Policy Engine Shall transition to the PE_FRS_SNK_SRC_Source_on state when:\n\nThe Device Policy Manager indicates that Rp is asserted.\n8.3.3.19.6.6\n  PE_FRS_SNK_SRC_Source_on State\nOn entry to the PE_FRS_SNK_SRC_Source_on state the Policy Engine Shall request the Device Policy Manager to turn \non the Source.\nOn exit from the PE_FRS_SNK_SRC_Source_on state the Policy Engine Shall send a PS_RDY Message.\nThe Policy Engine Shall transition to the PE_SRC_Startup state when:\n\nThe PS_RDY Message has been sent.\nThe Policy Engine Shall transition to the ErrorRecovery state when:\n\nThe PS_RDY Message is not sent after retries (a GoodCRC Message has not been received). A Soft Reset \nShall Not be initiated in this case.\n","image_count":0,"table_count":1}
{"page":909,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 909\n8.3.3.19.7\n  Dual-Role (Source Port) Get Source Capabilities State Diagram\nFigure 8.180, \"Dual-Role (Source) Get Source Capabilities diagram\" shows the state diagram for a Dual-Role device, \npresently operating as a Source, on receiving a request from the Device Policy Manager to get the Port Partner's \nSource Capabilities. See also Section , \"A Source Port Shall report its Capabilities in a series of 32-bit Power Data \nObjects (see Table 6.7, \"Power Data Object\") as part of a Source_Capabilities Message (see Figure 6.13, \"Example \nCapabilities Message with 2 Power Data Objects\"). Power Data Objects are used to convey a Source Port's Capabilities \nto provide power including Dual-Role Power ports presently operating as a Sink.\".\nFigure 8.180 Dual-Role (Source) Get Source Capabilities diagram\n8.3.3.19.7.1\n  PE_DR_SRC_Get_Source_Cap State\nThe Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Cap state, from the PE_SRC_Ready state, due to a \nrequest to get the remote Source Capabilities from the Device Policy Manager. \n\nOn entry to the PE_DR_SRC_Get_Source_Cap state the Policy Engine Shall request the Protocol Layer to \nsend a get Source Capabilities Message in order to retrieve the Source Capabilities. The Policy Engine \nShall send:\n\nA Get_Source_Cap Message when the Device Policy Manager requests SPR capabilities or\n\nAn EPR_Get_Source_Cap Message when the Device Policy Manager requests EPR Capabilities.\nThe Policy Engine Shall then start the SenderResponseTimer.\nOn exit from the PE_DR_SRC_Get_Source_Cap state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready State (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nIn SPR Mode and SPR Source Capabilities were requested and a Source_Capabilities Message is received \nor\n\nIn EPR Mode and EPR Source Capabilities were requested and an EPR_Source_Capabilities Message is \nreceived or\n\nThe SenderResponseTimer times out.\nget source capabilities request \nfrom Device Policy Manager\nSPR Souce Capabilities requested & Source_Capabilities Message received |\nEPR Souce Capabilities requested & EPR_Source_Capabilities Message received |\nSenderResponseTimer Timeout\nPE_SRC_Ready\nPE_DR_SRC_Get_Source_Cap\nActions on entry:\nIf SPR Source Capabilities requested Send Get_Source_Cap Message1\nIf EPR Source Capabilities requested Send EPR_Get_Source_Cap Message1\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass source capabilities/outcome to Device Policy Manager\n1)\nEither SPR or EPR Source Capabilities May be requested, regardless of whether or not the Source is currently operating in SPR or EPR Mode.\n","image_count":32,"table_count":1}
{"page":910,"text":"Page 910\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.8\n  Dual-Role (Source Port) Give Sink Capabilities State Diagram\nFigure 8.181, \"Dual-Role (Source) Give Sink Capabilities diagram\" shows the state diagram for a Dual-Role device, \npresently operating as a Source, on receiving a Get_Sink_Cap Message. See also Section , \"A Source Port Shall report \nits Capabilities in a series of 32-bit Power Data Objects (see Table 6.7, \"Power Data Object\") as part of a \nSource_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\"). Power \nData Objects are used to convey a Source Port's Capabilities to provide power including Dual-Role Power ports \npresently operating as a Sink.\".\nFigure 8.181 Dual-Role (Source) Give Sink Capabilities diagram\n8.3.3.19.8.1\n  PE_DR_SRC_Give_Sink_Cap State\nThe Policy Engine Shall transition to the PE_DR_SRC_Give_Sink_Cap state, from the PE_SRC_Ready state, when a \nGet_Sink_Cap Message or EPR_Get_Sink_Cap Message is received. \n\nOn entry to the PE_DR_SRC_Give_Sink_Cap state the Policy Engine Shall request the Device Policy \nManager for the current system capabilities. The Policy Engine Shall then request the Protocol Layer to \nsend a Sink_Capabilities Message containing these capabilities. The Policy Engine Shall send:\n\nA Sink_Capabilities Message when a Get_Sink_Cap Message is received or\n\nAn EPR_Sink_Capabilities Message when a EPR_Get_Sink_Cap Message is received.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nThe Sink_Capabilities Message has been successfully sent.\nGet_Sink_Cap_Extended Message\nreceived\nSink_Capabilities_Extended\nMessage sent\nPE_SRC_Ready\nPE_DR_SRC_Give_Sink_Cap_Ext\nActions on entry:\nGet present extended sink capabilities from Device Policy Manager\nSend Sink_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":911,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 911\n8.3.3.19.9\n  Dual-Role (Sink Port) Get Sink Capabilities State Diagram\nFigure 8.182, \"Dual-Role (Sink) Get Sink Capabilities State Diagram\" shows the state diagram for a Dual-Role device, \npresently operating as a Sink, on receiving a request from the Device Policy Manager to get the Port Partner's Sink \nCapabilities. See also Section , \"A Source Port Shall report its Capabilities in a series of 32-bit Power Data Objects (see \nTable 6.7, \"Power Data Object\") as part of a Source_Capabilities Message (see Figure 6.13, \"Example Capabilities \nMessage with 2 Power Data Objects\"). Power Data Objects are used to convey a Source Port's Capabilities to provide \npower including Dual-Role Power ports presently operating as a Sink.\".\nFigure 8.182 Dual-Role (Sink) Get Sink Capabilities State Diagram\n8.3.3.19.9.1\n  PE_DR_SNK_Get_Sink_Cap State\nThe Policy Engine Shall transition to the PE_DR_SNK_Get_Sink_Cap state, from the PE_SNK_Ready state, due to a \nrequest to get the remote Source Capabilities from the Device Policy Manager. \n\nOn entry to the PE_DR_SNK_Get_Sink_Cap state the Policy Engine Shall request the Protocol Layer to \nsend a Get_Sink_Cap Message in order to retrieve the Sink Capabilities. The Policy Engine Shall send:\n\nA Get_Sink_Cap Message when the Device Policy Manager requests SPR capabilities or\n\nAn EPR_Get_Sink_Cap Message when the Device Policy Manager requests EPR Capabilities.\nThe Policy Engine Shall then start the SenderResponseTimer.\nOn exit from the PE_SRC_Get_Sink_Cap state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (capabilities or response timeout). If Fast Role Swap is supported, request Device Policy Manager prepare \nor disable 5V source and configure the Fast Role Swap receiver based on the Fast Role Swap required USB Type-\nC Current bits in the received Sink Capabilities.\nThe Policy Engine Shall transition to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") when:\n\nSPR Sink Capabilities were requested and a Sink_Capabilities Message is received or\n\nEPR Sink Capabilities were requested and an EPR_Sink_Capabilities Message is received or\n\nThe SenderResponseTimer times out.\nPE_SNK_Ready\nPE_DR_SNK_Get_Sink_Cap\nActions on entry:\nIf SPR Mode capabilities requested send Get_Sink_Cap Message\nIf EPR Mode capabilities requested send EPR_Get_Sink_Cap Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nget sink capabilities request \nfrom Device Policy Manager1\n(SPR Sink Capabilities requested \n& Sink_Capabilities Message) |\n(EPR Sink Capabilities requested \n& EPR_Sink_Capabilities Message) |\nSenderResponseTimer timeout\nActions on exit:\nPass sink capabilities/outcome to Device Policy Manager\nRequest Device Policy Manager to configure Fast Role Swap if supported\n1)\nEither SPR or EPR Sink Capabilities May be requested, regardless of whether or not the Sink is currently operating in SPR or EPR Mode.\n","image_count":27,"table_count":1}
{"page":912,"text":"Page 912\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.10\n  Dual-Role (Sink Port) Give Source Capabilities State Diagram\nFigure 8.182, \"Dual-Role (Sink) Get Sink Capabilities State Diagram\" shows the state diagram for a Dual-Role device, \npresently operating as a Sink, on receiving a Get_Source_Cap Message. See also Section , \"A Source Port Shall report \nits Capabilities in a series of 32-bit Power Data Objects (see Table 6.7, \"Power Data Object\") as part of a \nSource_Capabilities Message (see Figure 6.13, \"Example Capabilities Message with 2 Power Data Objects\"). Power \nData Objects are used to convey a Source Port's Capabilities to provide power including Dual-Role Power ports \npresently operating as a Sink.\".\nFigure 8.183 Dual-Role (Sink) Give Source Capabilities State Diagram\n8.3.3.19.10.1\n  PE_DR_SNK_Give_Source_Cap State\nThe Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Cap state, from the PE_SNK_Ready state, when \na Get_Source_Cap Message is received. \n\nOn entry to the PE_DR_SNK_Give_Source_Cap State the Policy Engine Shall request the Device Policy \nManager for the current system capabilities. The Policy Engine Shall then request the Protocol Layer to \nsend a Source Capabilities Message containing these capabilities. \n\nThe Policy Engine Shall send:\n\nA Source_Capabilities Message when a Get_Source_Cap Message is received or\n\nAn EPR_Source_Capabilities Message when a EPR_Get_Source_Cap Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") when:\n\nThe Source Capabilities Message has been successfully sent.\n(In EPR Mode & Get_Source_Cap Message) |\n(In SPR Mode & EPR_Get_Source_Cap Message)\nSource capabilities Message sent\nPE_SNK_Ready\nPE_DR_SNK_Give_Source_Cap\nActions on entry:\nGet present Source capabilities from Device Policy Manager\nSend Capabilities Message (based on Device Policy Manager response):\n• If Get_Source_Cap Message received send Source_Capabilities Message.\n• In EPR_Get_Source_Cap Message received send EPR_Source_Capabilities Message\nPower = Explicit Contract\nPD = Connected\n","image_count":28,"table_count":1}
{"page":913,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 913\n8.3.3.19.11\n  Dual-Role (Source Port) Get Source Capabilities Extended State \nDiagram\nFigure 8.184, \"Dual-Role (Source) Get Source Capabilities Extended State Diagram\" shows the state diagram for a \nDual-Role device, presently operating as a Source, on receiving a request from the Device Policy Manager to get the \nPort Partner's extended Source Capabilities. See also Section 6.5.1, \"Source_Capabilities_Extended Message\".\nFigure 8.184 Dual-Role (Source) Get Source Capabilities Extended State Diagram\n8.3.3.19.11.1\n  PE_DR_SRC_Get_Source_Cap_Ext State\nThe Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Cap_Ext state, from the PE_SRC_Ready state, due \nto a request to get the remote extended Source Capabilities from the Device Policy Manager. \nOn entry to the PE_DR_SRC_Get_Source_Cap_Ext state the Policy Engine Shall send a Get_Source_Cap_Extended \nMessage and initialize and run the SenderResponseTimer.\nOn exit from the PE_DR_SRC_Get_Source_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of \nthe outcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nA Source_Capabilities_Extended Message is received\n\nOr SenderResponseTimer times out.\nget extended source capabilities \nrequest \nfrom Device Policy Manager\nSource_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready\nPE_DR_SRC_Get_Source_Cap_Ext\nActions on entry:\nSend Get_Source_Cap_Extended Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass source extended capabilities/outcome to Device Policy Manager\n","image_count":31,"table_count":1}
{"page":914,"text":"Page 914\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.12\n  Dual-Role (Sink Port) Give Source Capabilities Extended State \nDiagram\nFigure 8.185, \"Dual-Role (Sink) Give Source Capabilities Extended diagram\" shows the state diagram for a Dual-Role \ndevice, presently operating as a Sink, on receiving a Get_Source_Cap_Extended Message. See also Section 6.5.1, \n\"Source_Capabilities_Extended Message\".\nFigure 8.185 Dual-Role (Sink) Give Source Capabilities Extended diagram\n8.3.3.19.12.1\n  PE_DR_SNK_Give_Source_Cap_Ext State\nThe Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Cap_Ext state, from the PE_SNK_Ready state, \nwhen a Get_Source_Cap_Extended Message is received. \nOn entry to the PE_DR_SNK_Give_Source_Cap_Ext state the Policy Engine Shall request the present extended \nSource Capabilities from the Device Policy Manager and then send a Source_Capabilities_Extended Message based \non these capabilities.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nThe Source_Capabilities_Extended Message has been successfully sent.\nGet_Source_Cap_Extended Message\nreceived\nSource_Capabilities_Extended\nMessage sent\nPE_SNK_Ready\nPE_DR_SNK_Give_Source_Cap_Ext\nActions on entry:\nGet present extended source capabilities from Device Policy Manager\nSend Source_Capabilities_Extended Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":31,"table_count":1}
{"page":915,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 915\n8.3.3.19.13\n  Dual-Role (Sink Port) Get Sink Capabilities Extended State Dia-\ngram\nFigure 8.186, \"Dual-Role (Sink) Get Sink Capabilities Extended State Diagram\" shows the state diagram for a Dual-\nRole device, presently operating as a Sink, on receiving a request from the Device Policy Manager to get the Port \nPartner's extended Sink Capabilities. See also Section 6.5.13, \"Sink_Capabilities_Extended Message\".\nFigure 8.186 Dual-Role (Sink) Get Sink Capabilities Extended State Diagram\n8.3.3.19.13.1\n  PE_DR_SNK_Get_Sink_Cap_Ext State\nThe Policy Engine Shall transition to the PE_DR_SNK_Get_Sink_Cap_Ext state, from the PE_SNK_Ready state, due to \na request to get the remote extended Source Capabilities from the Device Policy Manager. \nOn entry to the PE_DR_SNK_Get_Sink_Cap_Ext state the Policy Engine Shall send a Get_Sink_Cap_Extended \nMessage and initialize and run the SenderResponseTimer.\nOn exit from the PE_DR_SNK_Get_Sink_Cap_Ext state the Policy Engine Shall inform the Device Policy Manager of \nthe outcome (capabilities or response timeout).\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nA Sink_Capabilities_Extended Message is received.\n\nOr SenderResponseTimer times out.\nget extended Sink capabilities \nrequest \nfrom Device Policy Manager\nSink_Capabilities_Extended\nMessage received |\nSenderResponseTimer\nTimeout\nPE_SNK_Ready\nPE_DR_SNK_Get_Sink_Cap_Ext\nActions on entry:\nSend Get_Sink_Cap_Extended Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass Sink extended capabilities/outcome to Device \nPolicy Manager\n","image_count":31,"table_count":1}
{"page":916,"text":"Page 916\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.14\n  Dual-Role (Source Port) Give Sink Capabilities Extended State \nDiagram\nFigure 8.187, \"Dual-Role (Source) Give Sink Capabilities Extended diagram\" shows the state diagram for a Dual-Role \ndevice, presently operating as a Sink, on receiving a Get_Sink_Cap_Extended Message. See also Section 6.5.13, \n\"Sink_Capabilities_Extended Message\".\nFigure 8.187 Dual-Role (Source) Give Sink Capabilities Extended diagram\n8.3.3.19.14.1\n  PE_DR_SRC_Give_Sink_Cap_Ext State\nThe Policy Engine Shall transition to the PE_DR_SRC_Give_Sink_Cap_Ext state, from the PE_SRC_Ready state, when \na Get_Sink_Cap_Extended Message is received. \nOn entry to the PE_DR_SRC_Give_Sink_Cap_Ext state the Policy Engine Shall request the present extended Sink \nCapabilities from the Device Policy Manager and then send a Sink_Capabilities_Extended Message based on these \ncapabilities.\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State \nDiagram\")when:\n\nThe Sink_Capabilities_Extended Message has been successfully sent.\n_Get_Sink_Cap Message |\nEPR_Get_Sink_Cap Message\nSink Capabilities\nMessage sent\nPE_SRC_Ready\nPE_DR_SRC_Give_Sink_Cap\nActions on entry:\nGet present extended sink capabilities from Device Policy Manager\nSend Sink_Capabilities_Extended Message (based on Device Policy Manager response):\n• If Get_Sink_Cap Message received send Sink_Capabilities Message.\n• In EPR_Get_Sink Cap Message received send EPR_Sink_Capabilities Message\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":917,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 917\n8.3.3.19.15\n  Dual-Role (Source Port) Get Source Information State Diagram\nFigure 8.188, \"Dual-Role (Source) Get Source Information State Diagram\" shows the state diagram for a Dual-Role \ndevice, presently operating as a Source, on receiving a request from the Device Policy Manager to get the Port \nPartner's Source information. See also Section 6.3.23, \"Get_Source_Info Message\" and Section 6.4.11, \"Source_Info \nMessage\".\nFigure 8.188 Dual-Role (Source) Get Source Information State Diagram\n8.3.3.19.15.1\n  PE_DR_SRC_Get_Source_Info State\nThe Policy Engine Shall transition to the PE_DR_SRC_Get_Source_Info state, from the PE_SRC_Ready state, due to a \nrequest to get the remote Source information from the Device Policy Manager. \nOn entry to the PE_DR_SRC_Get_Source_Info state the Policy Engine Shall send a Get_Source_Info Message and \ninitialize and run the SenderResponseTimer.\nOn exit from the PE_DR_SRC_Get_Source_Info state the Policy Engine Shall inform the Device Policy Manager of the \noutcome (information or response timeout).\nThe Policy Engine Shall transition back to the PE_SRC_Ready state (see Figure 8.132, \"Source Port State Diagram\") \nwhen:\n\nA Source_Info Message is received.\n\nOr SenderResponseTimer times out.\nget source information\nrequest \nfrom Device Policy Manager\nSource_Info Message received |\nSenderResponseTimer\nTimeout\nPE_SRC_Ready\nPE_DR_SRC_Get_Source_Info\nActions on entry:\nSend Get_Source_Info Message\nInitialize and run SenderResponseTimer\nPower = Explicit Contract \nPD = Connected\nActions on exit:\nPass source information/outcome to \nDevice Policy Manager\n","image_count":31,"table_count":1}
{"page":918,"text":"Page 918\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.19.16\n  Dual-Role (Sink Port) Give Source Information State Diagram\nFigure 8.189, \"Dual-Role (Source) Give Source Information diagram\" shows the state diagram for a Dual-Role device, \npresently operating as a Sink, on receiving a Get_Source_Info Message. See also Section 6.3.23, \"Get_Source_Info \nMessage\" and Section 6.4.11, \"Source_Info Message\".\nFigure 8.189 Dual-Role (Source) Give Source Information diagram\n8.3.3.19.16.1\n  PE_DR_SNK_Give_Source_Info State\nThe Policy Engine Shall transition to the PE_DR_SNK_Give_Source_Info state, from the PE_SNK_Ready state, when \na Get_Source_Info Message is received.\nOn entry to the PE_DR_SNK_Give_Source_Info state the Policy Engine Shall request the present Source information \nfrom the Device Policy Manager and then send a Source_Info Message based on this information.\nThe Policy Engine Shall transition back to the PE_SNK_Ready state (see Figure 8.133, \"Sink Port State Diagram\") \nwhen:\n\nThe Source_Info Message has been successfully sent.\nGet_Source_Info Message\nreceived\nSource_Info Message sent\nPE_SNK_Ready\nPE_DR_SNK_Give_Source_Info\nActions on entry:\nGet present source information from Device Policy Manager\nSend Source_Info Message (based on Device Policy Manager response)\nPower = Explicit Contract\nPD = Connected\n","image_count":29,"table_count":1}
{"page":919,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 919\n8.3.3.20\n  VCONN Swap State Diagram\nThe State Diagram in this section Shall apply to Ports that supply VCONN. Figure 8.190, \"VCONN Swap State Diagram\" \nshows the state operation for a Port on sending or receiving a VCONN Swap request.\nFigure 8.190 VCONN Swap State Diagram\n8.3.3.20.1\n  PE_VCS_Send_Swap State\nThe PE_VCS_Send_Swap state is entered from either the PE_SRC_Ready or PE_SNK_Ready state when the Policy \nEngine receives a request from the Device Policy Manager to perform a VCONN Swap.\nOn entry to the PE_VCS_Send_Swap state the Policy Engine Shall send a VCONN_Swap Message and start the \nSenderResponseTimer.\nThe Policy Engine Shall transition to the PE_VCS_Wait_For_VCONN state when:\n\nAn Accept Message is received and\n\nThe Port is presently the VCONN Source.\nThe Policy Engine Shall transition to the PE_VCS_Turn_On_VCONN state when:\n\nAn Accept Message is received and\n\nThe Port is not presently the VCONN Source.\nPE_VCS_Evaluate_Swap\nActions on entry:\nGet evaluation of VCONN swap request \nfrom Device Policy Manager \nPower = Explicit Contract\nPD = Connected\nPE_VCS_Turn_On_VCONN\nActions on entry:\nTell Device Policy Manager to turn on \nVCONN\nPE_VCS_Send_PS_Rdy\nActions on entry:\nSend PS_RDY Message\nPE_VCS_Accept_Swap\nActions on entry:\nSend Accept Message\nPower = Explicit Contract\nPD = Connected\nPE_VCS_Reject_VCONN_Swap\nActions on entry:\nSend Reject or Wait Message as \nappropriate\nPower = Explicit Contract\nPD = Connected\nMessage sent\nVCONN_Swap Message received\nVCONN Swap ok\n(Not Presently VCONN SOURCE &\nVCONN Swap not ok) |\nFurther evaluation \nRequired\nAccept Message sent & \nNot presently VCONN Source1\nVCONN turned on\nPS_RDY Message\nsent\nVCONNOnTimer Timeout\nHard Reset:\nConsumer/Provider -> PE_SNK_Hard_Reset\nProvider/Consumer -> PE_SRC_Hard_Reset\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPE_VCS_Wait_for_VCONN\nActions on entry:\nStart VCONNOnTimer\nPower = Explicit Contract\nPD = Connected\nAccept Message sent & \nPresently VCONN Source1\nPE_VCS_Turn_Off_VCONN\nActions on entry:\nTell Device Policy Manager to turn off \nVCONN\nPower = Explicit Contract\nPD = Connected\nPS_RDY Message\nreceived\nDevice Policy Manager Informed\nVCONN Swap required (indication from Device Policy Manager)\nPE_VCS_Send_Swap\nActions on entry:\nSend VCONN_Swap Message\nInitialize and run \nSenderResponseTimer\nPower = Explicit Contract\nPD = Connected\nReject Message received |\nWait Message received |\nSenderResponseTimer \ntimeout\nAccept Message received &\nPresently VCONN Source1\nAccept Message received &\nNot presently VCONN Source1\nPE_VCS_Force_VCONN2\nActions on entry:\nTell Device Policy Manager to turn on \nVCONN\nPower = Explicit Contract\nPD = Connected\nNot_Supported Message received &\nNot presently VCONN Source1\nVCONN turned on\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Entry_ACK\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable\nPE_SNK_EPR_Mode_Entry_Wait_For_Response\nPE_SRC_Ready,\nPE_SNK_Ready or\nPE_SRC_EPR_Mode_Discover_Cable\n1)\nA Port is presently the VCONN Source if it has the responsibility for supplying VCONN even if VCONN has been turned off.\n2)\nThe PE_VCS_Force_VCONN state is Optional.\n","image_count":56,"table_count":11}
{"page":920,"text":"Page 920\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nA Reject Message is received or\n\nA Wait Message is received or\n\nThe SenderResponseTimer times out.\nThe Policy Engine May transition to the PE_VCS_Force_VCONN state when:\n\nA Not_Supported Message is received and\n\nThe Port is not presently the VCONN Source.\n8.3.3.20.2\n  PE_VCS_Evaluate_Swap State\nThe PE_VCS_Evaluate_Swap state is entered from either the PE_SRC_Ready or PE_SNK_Ready state when the \nPolicy Engine receives a VCONN_Swap Message.\nOn entry to the PE_VCS_Evaluate_Swap state the Policy Engine Shall request the Device Policy Manager for an \nevaluation of the VCONN Swap request.\nThe Policy Engine Shall transition to the PE_VCS_Accept_Swap state when:\n\nThe Device Policy Manager indicates that a VCONN Swap is OK.\nThe Policy Engine Shall transition to the PE_VCS_Reject_Swap state when:\n\nThe Port is not presently the VCONN Source and the Device Policy Manager indicates that a VCONN Swap \nis not OK or\n\nThe Device Policy Manager indicates that a VCONN Swap cannot be done at this time.\n8.3.3.20.3\n  PE_VCS_Accept_Swap State\nOn entry to the PE_VCS_Accept_Swap state the Policy Engine Shall send an Accept Message.\nThe Policy Engine Shall transition to the PE_VCS_Wait_For_VCONN state when:\n\nThe Accept Message has been sent and\n\nThe Port's VCONN is on.\nThe Policy Engine Shall transition to the PE_VCS_Turn_On_VCONN state when:\n\nThe Accept Message has been sent and\n\nThe Port's VCONN is off.\n8.3.3.20.4\n  PE_VCS_Reject_Swap State\nOn entry to the PE_VCS_Reject_Swap state the Policy Engine Shall request the Protocol Layer to send:\n\nA Reject Message if the device is unable to perform a VCONN Swap at this time.\n\nA Wait Message if further evaluation of the VCONN Swap request is required.\nNote:\nIn this case it is expected that the Port will send a VCONN_Swap Message at a later time.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe Reject or Wait Message has been sent.\n","image_count":0,"table_count":1}
{"page":921,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 921\n8.3.3.20.5\n  PE_VCS_Wait_for_VCONN State\nOn entry to the PE_VCS_Wait_For_VCONN state the Policy Engine Shall start the VCONNOnTimer.\nThe Policy Engine Shall transition to the PE_VCS_Turn_Off_VCONN state when:\n\nA PS_RDY Message is received.\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state when:\n\nThe VCONNOnTimer times out.\n8.3.3.20.6\n  PE_VCS_Turn_Off_VCONN State\nOn entry to the PE_VCS_Turn_Off_VCONN state the Policy Engine Shall tell the Device Policy Manager to turn off \nVCONN.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe Device Policy Manager has been informed.\n8.3.3.20.7\n  PE_VCS_Turn_On_VCONN State\nOn entry to the PE_VCS_Turn_On_VCONN state the Policy Engine Shall tell the Device Policy Manager to turn on \nVCONN.\nThe Policy Engine Shall transition to the PE_VCS_Send_Ps_Rdy state when:\n\nThe Port's VCONN is on.\n8.3.3.20.8\n  PE_VCS_Send_PS_Rdy State\nOn entry to the PE_VCS_Send_Ps_Rdy state the Policy Engine Shall send a PS_RDY Message.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe PS_RDY Message has been sent.\n8.3.3.20.9\n  PE_VCS_Force_VCONN State\nOn entry to the PE_VCS_Force_VCONN state the Policy Engine Shall tell the Device Policy Manager to turn on VCONN.\nThe Policy Engine Shall transition back to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe Port's VCONN is on.\n8.3.3.21\n  Initiator Structured VDM State Diagrams\nThe State Diagrams in this section Shall apply to all Initiators.\n","image_count":0,"table_count":1}
{"page":922,"text":"Page 922\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.21.1\n  Initiator Structured VDM Discover Identity State Diagram\nFigure 8.191, \"Initiator to Port VDM Discover Identity State Diagram\" shows the state diagram for an Initiator when \ndiscovering the identity of its Port Partner or Cable Plug.\nFigure 8.191 Initiator to Port VDM Discover Identity State Diagram\n8.3.3.21.1.1\n  PE_INIT_PORT_VDM_Identity_Request State\nThe Policy Engine transitions to the PE_INIT_PORT_VDM_Identity_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state when:\n\nThe Device Policy Manager requests the discovery of the identity of the Port Partner or Cable Plug or\n\nThe DiscoverIdentityTimer times out.\nThe Policy Engine transitions to the PE_INIT_PORT_VDM_Identity_Request state from the \nPE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe Cable Plug Discovery Process has been initiated.\nPE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Discover_Cable\nPE_INIT_PORT_VDM_Identity_Request\nActions on entry:\nSend Discover Identity request\nStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests identity discovery1 |\nDiscoverIdentityTimer timeout\nDiscover Identity ACK\nreceived\nPE_INIT_PORT_VDM_Identity_ACKed\nActions on entry:\nInform DPM of identity\nPower = Explicit Contract\nPD = Connected\nPE_INIT_PORT_VDM_Identity_NAKed\nActions on entry:\nInform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover Identity NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informed\nDPM informed\nPE_SRC_Ready, PE_SNK_Ready or PE_SRC_EPR_Mode_Evaluate_Cable_EPR\n1)\nThe DPM in an EPR Source Shall request the discovery of the identity of the Cable Plug at startup.\n","image_count":35,"table_count":6}
{"page":923,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 923\nOn entry to the PE_INIT_PORT_VDM_Identity_Request state the Policy Engine Shall send a Structured VDM \nDiscover Identity Command request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_ACKed state when:\n\nA Structured VDM Discover Identity ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_NAKed state when:\n\nA Structured VDM Discover Identity NAK or BUSY Command response is received or\n\nThe VDMResponseTimer times out.\n8.3.3.21.1.2\n  PE_INIT_PORT_VDM_Identity_ACKed State\nOn entry to the PE_INIT_PORT_VDM_Identity_ACKed state the Policy Engine Shall inform the Device Policy \nManager of the Identity information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n\nThe Device Policy Manager has been informed.\n8.3.3.21.1.3\n  PE_INIT_PORT_VDM_Identity_NAKed State\nOn entry to the PE_INIT_PORT_VDM_Identity_NAKed state the Policy Engine Shall inform the Device Policy \nManager of the result (NAK, BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or \nPE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":924,"text":"Page 924\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.21.2\n  Initiator Structured VDM Discover SVIDs State Diagram\nFigure 8.192, \"Initiator VDM Discover SVIDs State Diagram\" shows the state diagram for an Initiator when \ndiscovering SVIDs of its Port Partner or Cable Plug.\nFigure 8.192 Initiator VDM Discover SVIDs State Diagram\n8.3.3.21.2.1\n  PE_INIT_VDM_SVIDs_Request State\nThe Policy Engine transitions to the PE_INIT_VDM_SVIDs_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state when:\n\nThe Device Policy Manager requests the discovery of the SVIDs of the Port Partner or a Cable Plug.\nOn entry to the PE_INIT_VDM_SVIDs_Request state the Policy Engine Shall send a Structured VDM Discover SVIDs \nCommand request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_VDM_SVIDs_ACKed state when:\n\nA Structured VDM Discover SVIDs ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_VDM_SVIDs_NAKed state when:\n\nA Structured VDM Discover SVIDs NAK or BUSY Command response is received or\n\nThe VDMResponseTimer times out.\nPE_SRC_Ready or PE_SNK_Ready\nPE_INIT_VDM_SVIDs_Request\nActions on entry:\nSend Discover SVIDs request\nStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests \nSVIDs discovery\nDiscover SVIDs ACK\nreceived\nPE_INIT_VDM_SVIDs_ACKed\nActions on entry:\nInform DPM of SVIDs\nPower = Explicit Contract\nPD = Connected\nPE_INIT_VDM_SVIDs_NAKed\nActions on entry:\nInform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover SVIDs NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informed\nDPM informed\n","image_count":29,"table_count":5}
{"page":925,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 925\n8.3.3.21.2.2\n  PE_INIT_VDM_SVIDs_ACKed State\nOn entry to the PE_INIT_VDM_SVIDs_ACKed state the Policy Engine Shall inform the Device Policy Manager of the \nSVIDs information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Device Policy Manager has been informed.\n8.3.3.21.2.3\n  PE_INIT_VDM_SVIDs_NAKed State\nOn entry to the PE_INIT_VDM_SVIDs_NAKed state the Policy Engine Shall inform the Device Policy Manager of the \nresult (NAK, BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":926,"text":"Page 926\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.21.3\n  Initiator Structured VDM Discover Modes State Diagram\nFigure 8.193, \"Initiator VDM Discover Modes State Diagram\" shows the state diagram for an Initiator when \ndiscovering Modes of its Port Partner or Cable Plug.\nFigure 8.193 Initiator VDM Discover Modes State Diagram\n8.3.3.21.3.1\n  PE_INIT_VDM_Modes_Request State\nThe Policy Engine transitions to the PE_INIT_VDM_Modes_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state when:\n\nThe Device Policy Manager requests the discovery of the Modes of the Port Partner or a Cable Plug.\nOn entry to the PE_INIT_VDM_Modes_Request state the Policy Engine Shall send a Structured VDM Discover Modes \nCommand request and Shall start the VDMResponseTimer.\nThe Policy Engine Shall transition to the PE_INIT_VDM_Modes_ACKed state when:\n\nA Structured VDM Discover Modes ACK Command response is received.\nThe Policy Engine Shall transition to the PE_INIT_VDM_Modes_NAKed state when:\n\nA Structured VDM Discover Modes NAK or BUSY Command response is received or\n\nThe VDMResponseTimer times out.\nPE_SRC_Ready or PE_SNK_Ready\nPE_INIT_VDM_Modes_Request\nActions on entry:\nSend Discover Modes request\nStart VDMResponseTimer\nPower = Explicit Contract\nPD = Connected\nDPM requests \nModes discovery\nDiscover Modes ACK\nreceived\nPE_INIT_VDM_Modes_ACKed\nActions on entry:\nInform DPM of Modes\nPower = Explicit Contract\nPD = Connected\nPE_INIT_VDM_Modes_NAKed\nActions on entry:\nInform DPM of result\nPower = Explicit Contract\nPD = Connected\nDiscover Modes NAK/BUSY |\nVDMResponseTimer Timeout\nDPM informed\nDPM informed\n","image_count":29,"table_count":5}
{"page":927,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 927\n8.3.3.21.3.2\n  PE_INIT_VDM_Modes_ACKed State\nOn entry to the PE_INIT_VDM_Modes_ACKed state the Policy Engine Shall inform the Device Policy Manager of the \nModes information.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n\nThe Device Policy Manager has been informed.\n8.3.3.21.3.3\n  PE_INIT_VDM_Modes_NAKed State\nOn entry to the PE_INIT_VDM_Modes_NAKed state the Policy Engine Shall inform the Device Policy Manager of the \nresult (NAK, BUSY or timeout).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":928,"text":"Page 928\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.21.4\n  Initiator Structured VDM Attention State Diagram\nFigure 8.194, \"Initiator VDM Attention State Diagram\" shows the state diagram for an Initiator when sending an \nAttention Command request.\nFigure 8.194 Initiator VDM Attention State Diagram\n8.3.3.21.4.1\n  PE_INIT_VDM_Attention_Request State\nThe Policy Engine transitions to the PE_INIT_VDM_Attention_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state when:\n\nWhen the Device Policy Manager requests attention from its Port Partner.\nOn entry to the PE_INIT_VDM_Attention_Request state the Policy Engine Shall send an Attention Command \nrequest.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Attention Command request has been sent.\nPE_SRC_Ready or PE_SNK_Ready\nPE_INIT_VDM_Attention_Request\nActions on entry:\nSend Attention Command request\nPower = Explicit Contract\nPD = Connected\nAttention request\nfrom DPM\nAttention Command\nrequest sent\n","image_count":30,"table_count":3}
{"page":929,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 929\n8.3.3.22\n  Responder Structured VDM State Diagrams\n8.3.3.22.1\n  Responder Structured VDM Discover Identity State Diagram\nFigure 8.195, \"Responder Structured VDM Discover Identity State Diagram\" shows the state diagram for a Responder \nreceiving a Discover Identity Command request.\nFigure 8.195 Responder Structured VDM Discover Identity State Diagram\n8.3.3.22.1.1\n  PE_RESP_VDM_Get_Identity State\nThe Policy Engine transitions to the PE_RESP_VDM_Get_Identity state from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state when:\n\nA Structured VDM Discover Identity Command request is received.\nOn entry to the PE_RESP_VDM_Get_Identity state the Responder Shall request identity information from the Device \nPolicy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_Identity state when:\n\nIdentity information is received from the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_Identity_NAK state when:\n\nThe Device Policy Manager indicates that the response to the Discover Identity Command request is \nNAK or BUSY.\n8.3.3.22.1.2\n  PE_RESP_VDM_Send_Identity State\nOn entry to the PE_RESP_VDM_Send_Identity state the Responder Shall send the Structured VDM Discover Identity \nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n\nThe Structured VDM Discover Identity ACK Command response has been sent.\n8.3.3.22.1.3\n  PE_RESP_VDM_Get_Identity_NAK State\nOn entry to the PE_RESP_VDM_Get_Identity_NAK state the Policy Engine Shall send a Structured VDM Discover \nIdentity NAK or BUSY Command response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nThe Structured VDM Discover Identity NAK or BUSY Command response has been sent.\nPE_RESP_VDM_Send_Identity\nActions on entry:\nSend Discover Identity ACK\nPower = Explicit Contract\nPD = Connected\nDiscover Identity\nrequest\nDiscover Identity ACK\nsent\nPE_RESP_VDM_Get_Identity\nActions on entry:\nRequest Identity information from DPM\nPower = Explicit Contract\nPD = Connected\nIdentity information \nfrom DPM\nPE_RESP_VDM_Get_Identity_NAK\nActions on entry:\nSend Discover Identity NAK/BUSY Command \nresponse as requested\nPower = Explicit Contract\nPD = Connected\nDPM says\nNAK/BUSY\nDiscover Identity NAK/BUSY \nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\n","image_count":18,"table_count":4}
{"page":930,"text":"Page 930\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.22.2\n  Responder Structured VDM Discover SVIDs State Diagram\nFigure 8.196, \"Responder Structured VDM Discover SVIDs State Diagram\" shows the state diagram for a Responder \nwhen receiving a Discover SVIDs Command.\nFigure 8.196 Responder Structured VDM Discover SVIDs State Diagram\n8.3.3.22.2.1\n  PE_RESP_VDM_Get_SVIDs State\nThe Policy Engine transitions to the PE_RESP_VDM_Get_SVIDs state from either the PE_SRC_Ready, PE_SNK_Ready \nor PE_CBL_Ready state when:\n\nA Structured VDM Discover SVIDs Command request is received.\nOn entry to the PE_RESP_VDM_Get_SVIDs state the Responder Shall request SVIDs information from the Device \nPolicy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_SVIDs state when:\n\nSVIDs information is received from the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_SVIDs_NAK state when:\n\nThe Device Policy Manager indicates that the response to the Discover SVIDs Command request is NAK \nor BUSY.\n8.3.3.22.2.2\n  PE_UFP_VDM_Send_SVIDs State\nOn entry to the PE_RESP_VDM_Send_SVIDs state the Responder Shall send the Structured VDM Discover SVIDs ACK \nCommand response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nThe Structured VDM Discover SVIDs ACK Command response has been sent.\n8.3.3.22.2.3\n  PE_UFP_VDM_Get_SVIDs_NAK State\nOn entry to the PE_RESP_VDM_Get_SVIDs_NAK state the Policy Engine Shall send a Structured VDM Discover SVIDs \nNAK or BUSY Command response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nThe Structured VDM Discover SVIDs NAK or BUSY Command response has been sent.\nPE_RESP_VDM_Send_SVIDs\nActions on entry:\nSend Discover SVIDs ACK\nPower = Explicit Contract\nPD = Connected\nDiscover SVIDs\nrequest\nDiscover SVIDs ACK\nsent\nPE_RESP_VDM_Get_SVIDs\nActions on entry:\nRequest SVIDs information from DPM\nPower = Explicit Contract\nPD = Connected\nSVIDs information \nfrom DPM\nPE_RESP_VDM_Get_SVIDs_NAK\nActions on entry:\nSend Discover SVIDs NAK/BUSY Command \nresponse as requested\nPower = Explicit Contract\nPD = Connected\nDPM says\nNAK/BUSY\nDiscover SVIDs NAK/BUSY \nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\n","image_count":18,"table_count":4}
{"page":931,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 931\n8.3.3.22.3\n  Responder Structured VDM Discover Modes State Diagram\nFigure 8.197, \"Responder Structured VDM Discover Modes State Diagram\" shows the state diagram for a Responder \non receiving a Discover Modes Command.\nFigure 8.197 Responder Structured VDM Discover Modes State Diagram\n8.3.3.22.3.1\n  PE_RESP_VDM_Get_Modes State\nThe Policy Engine transitions to the PE_RESP_VDM_Get_Modes state from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state when:\n\nA Structured VDM Discover Modes Command request is received.\nOn entry to the PE_RESP_VDM_Get_Modes state the Responder Shall request Modes information from the Device \nPolicy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Send_Modes state when:\n\nModes information is received from the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_RESP_VDM_Get_Modes_NAK state when:\n\nThe Device Policy Manager indicates that the response to the Discover Modes Command request is NAK \nor BUSY.\n8.3.3.22.3.2\n  PE_RESP_VDM_Send_Modes State\nOn entry to the PE_RESP_VDM_Send_Modes state the Responder Shall send the Structured VDM Discover Modes \nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nThe Structured VDM Discover Modes ACK Command response has been sent.\n8.3.3.22.3.3\n  PE_RESP_VDM_Get_Modes_NAK State\nOn entry to the PE_RESP_VDM_Get_Modes_NAK state the Policy Engine Shall send a Structured VDM Discover \nModes NAK or BUSY Command response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nThe Structured VDM Discover Modes NAK or BUSY Command response has been sent.\nPE_RESP_VDM_Send_Modes\nActions on entry:\nSend Discover Modes ACK\nPower = Explicit Contract\nPD = Connected\nDiscover Modes\nrequest\nDiscover Modes ACK\nsent\nPE_RESP_VDM_Get_Modes\nActions on entry:\nRequest Modes information from DPM\nPower = Explicit Contract\nPD = Connected\nModes information \nfrom DPM\nPE_RESP_VDM_Get_Modes_\nActions on entry: NAK\nSend Discover Modes NAK/BUSY \nCommand response as requested\nPower = Explicit Contract\nPD = Connected\nDPM says\nNAK/BUSY\nDiscover Modes NAK/BUSY \nsent\nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready\n","image_count":18,"table_count":4}
{"page":932,"text":"Page 932\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.22.4\n  Receiving a Structured VDM Attention State Diagram\nFigure 8.198, \"Receiving a Structured VDM Attention State Diagram\" shows the state diagram when receiving an \nAttention Command request.\nFigure 8.198 Receiving a Structured VDM Attention State Diagram\n8.3.3.22.4.1\n  PE_RCV_VDM_Attention_Request State\nThe Policy Engine transitions to the PE_RCV_VDM_Attention_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state when:\n\nAn Attention Command request is received.\nOn entry to the PE_RCV_VDM_Attention_Request state the Policy Engine Shall inform the Device Policy Manager of \nthe Attention Command request.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state when:\n\nThe Device Policy Manager has been informed.\nPE_SRC_Ready or PE_SNK_Ready\nPE_RCV_VDM_Attention_Request\nActions on entry:\nInform Device Policy Manager of Attention Command request\nPower = Explicit Contract\nPD = Connected\nAttention Command\nrequest received\nDPM informed\n","image_count":30,"table_count":3}
{"page":933,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 933\n8.3.3.23\n  DFP Structured VDM State Diagrams\nThe State Diagrams in this section Shall apply to all DFPs that support Structured VDMs.\n8.3.3.23.1\n  DFP Structured VDM Mode Entry State Diagram\nFigure 8.199, \"DFP VDM Mode Entry State Diagram\" shows the state operation for a DFP when entering a Mode.\nFigure 8.199 DFP VDM Mode Entry State Diagram\n8.3.3.23.1.1\n  PE_DFP_VDM_Mode_Entry_Request State\nThe Policy Engine transitions to the PE_DFP_VDM_Mode_Entry_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state for a DFP when:\n\nThe Device Policy Manager requests that the Port Partner or a Cable Plug enter a Mode.\nOn entry to the PE_DFP_VDM_Mode_Entry_Request state the Policy Engine Shall send a Structured VDM Enter \nMode Command request and Shall start the VDMModeEntryTimer.\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_ACKed state when:\n\nA Structured VDM Enter Mode ACK Command response is received.\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_NAKed state when:\n\nA Structured VDM Enter Mode NAK or BUSY Command response is received or\n\nThe VDMModeEntryTimer times out.\nPE_SRC_Ready or PE_SNK_Ready\n(DFP)\nDPM requests\nMode entry1\nPE_DFP_VDM_Mode_Entry_ACKed\nActions on entry:\nRequest DPM to enter the mode\nPower = Explicit Contract\nPD = Connected\nPE_DFP_VDM_Mode_Entry_Request\nActions on entry:\nSend Mode Entry request\nStart VDMModeEntryTimer\nPower = Explicit Contract\nPD = Connected\nMode Entry ACK\nreceived\nMode entered\nPE_DFP_VDM_Mode_Entry_NAKed\nActions on entry:\nInform DPM of reason for failure\nPower = Explicit Contract\nPD = Connected\nMode Entry NAK/BUSY\nReceived |\nVDMModeEntryTimer timeout |\nProtocol Error3\nDPM informed2\n1)\nThe Device Policy Manager Shall have placed the system into USB Safe State before issuing this request when entering Modal operation.\n2)\nThe Device Policy Manager Shall have returned the system to USB operation if not in Modal operation at this point.\n3)\nProtocol Errors are handled by informing the DPM, returning to USB Safe State and then processing the Message once the PE_SRC_Ready or\nPE_SNK_Ready state has been entered.\n","image_count":22,"table_count":6}
{"page":934,"text":"Page 934\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.23.1.2\n  PE_DFP_VDM_Mode_Entry_ACKed State\nOn entry to the PE_DFP_VDM_Mode_Entry_ACKed state the Policy Engine Shall request the Device Policy Manager \nto enter the Mode.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n\nThe Mode has been entered.\n8.3.3.23.1.3\n  PE_DFP_VDM_Mode_Entry_NAKed State\nOn entry to the PE_DFP_VDM_Mode_Entry_NAKed state the Policy Engine Shall inform the Device Policy Manager \nof the reason for failure (NAK, BUSY, timeout or Protocol Error).\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":935,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 935\n8.3.3.23.2\n  DFP Structured VDM Mode Exit State Diagram\nFigure 8.200, \"DFP VDM Mode Exit State Diagram\" shows the state diagram for a DFP when exiting a Mode.\nFigure 8.200 DFP VDM Mode Exit State Diagram\n8.3.3.23.2.1\n  PE_DFP_VDM_Mode_Exit_Request State\nThe Policy Engine transitions to the PE_DFP_VDM_Mode_Exit_Request state from either the PE_SRC_Ready or \nPE_SNK_Ready state for a DFP when:\n\nThe Device Policy Manager requests that the Port Partner or a Cable Plug exit a Mode.\nOn entry to the PE_DFP_VDM_Mode_Exit_Request state the Policy Engine Shall send a Structured VDM Exit Mode \nCommand request and Shall start the VDMModeExitTimer.\nThe Policy Engine Shall transition to the PE_DFP_VDM_Mode_Entry_ACKed state when:\n\nA Structured VDM Exit Mode ACK or NAK Command response is received.\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state depending on the \npresent Power Role when:\n\nA Structured VDM Exit Mode BUSY Command response is received or\n\nThe VDMModeExitTimer times out.\n8.3.3.23.2.2\n  PE_DFP_VDM_DFP_Mode_Exit_ACKed State\nOn Exit to the PE_DFP_VDM_Mode_Entry_ACKed state the Policy Engine Shall inform the Device Policy Manager Of \nthe result: ACK or NAK.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a DFP when:\nPE_SRC_Ready or PE_SNK_Ready\n(DFP)\nPE_DFP_VDM_Mode_Exit_Request\nActions on entry:\nSend Exit Mode request\nStart VDMModeExitTimer\nPower = Explicit Contract\nPD = Connected\nDPM indicates\nMode exit\nPE_DFP_VDM_Exit_Mode_ACKed\nActions on entry:\nInform DPM of ACK or NAK\nPower = Explicit Contract\nPD = Connected\nExit Mode ACK/NAK\nreceived\nDPM informed1\nPE_SRC_Hard_Reset or\nPE_SNK_Hard_Reset \n(DFP)\nExit Mode BUSY Received |\nVDMModeExitTimer Timeout\n1)\nThe Device Policy Manager is required to return the system to USB operation at this point when exiting Modal Operation.\n","image_count":39,"table_count":5}
{"page":936,"text":"Page 936\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":937,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 937\n8.3.3.24\n  UFP Structured VDM State Diagrams\nThe State Diagrams in this section Shall apply to all UFPs that support Structured VDMs.\n8.3.3.24.1\n  UFP Structured VDM Enter Mode State Diagram\nFigure 8.201, \"UFP Structured VDM Enter Mode State Diagram\" shows the state diagram for a UFP in response to an \nEnter Mode Command.\nFigure 8.201 UFP Structured VDM Enter Mode State Diagram\n8.3.3.24.1.1\n  PE_UFP_VDM_Evaluate_Mode_Entry State\nThe Policy Engine transitions to the PE_UFP_VDM_Evaluate_Mode_Entry state from either the PE_SRC_Ready or \nPE_SNK_Ready state for a UFP when:\n\nA Structured VDM Enter Mode Command request is received from the DFP.\nOn Entry to the PE_UFP_VDM_Evaluate_Mode_Entry state the Policy Engine Shall request the Device Policy \nManager to evaluate the Enter Mode Command request and enter the Mode indicated in the Command request if \nthe request is acceptable.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Entry_ACK state when:\n\nThe Device Policy Manager indicates that the Mode has been entered.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Entry_NAK state when:\n\nThe Device Policy Manager indicates that the response to the Mode request is NAK.\nPE_SRC_Ready or PE_SNK_Ready (UFP)\nActions on entry:\nPower = Explicit Contract\nPD = Connected\nEnter Modes\nrequest1\nPE_UFP_VDM_Mode_Entry_ACK\nActions on entry:\nSend Enter Mode ACK Command\nCable = Awake\nPD = Connected\nEnter Mode ACK\nsent\nPE_UFP_VDM_Evaluate_Mode_Entry\nActions on entry:\nRequest DPM to evaluate request to enter a Mode\nCable = Awake\nPD = Connected\nPE_UFP_VDM_Mode_Entry_NAK\nActions on entry:\nSend Enter Mode NAK Command response \nas requested\nCable = Awake\nPD = Connected\nDPM says\nNAK\nDPM says \nMode entered\nEnter Mode NAK sent\n1)\nThe UFP is required to be in USB operation or USB Safe State at this point.\n","image_count":0,"table_count":6}
{"page":938,"text":"Page 938\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.24.1.2\n  PE_UFP_VDM_Mode_Entry_ACK State\nOn entry to the PE_UFP_VDM_Mode_Entry_ACK state the Policy Engine Shall send a Structured VDM Enter Mode \nACK Command response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n\nThe Structured VDM Enter Mode ACK Command response has been sent.\n8.3.3.24.1.3\n  PE_UFP_VDM_Mode_Entry_NAK State\nOn entry to the PE_UFP_VDM_Mode_Entry_NAK state the Policy Engine Shall send a Structured VDM Enter Mode \nNAK Command response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n\nThe Structured VDM Enter Mode NAK Command response has been sent.\n","image_count":0,"table_count":1}
{"page":939,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 939\n8.3.3.24.2\n  UFP Structured VDM Exit Mode State Diagram\nFigure 8.202, \"UFP Structured VDM Exit Mode State Diagram\" shows the state diagram for a UFP in response to an \nExit Mode Command.\nFigure 8.202 UFP Structured VDM Exit Mode State Diagram\n8.3.3.24.2.1\n  PE_UFP_VDM_Mode_Exit State\nThe Policy Engine transitions to the PE_UFP_VDM_Mode_Exit state from either the PE_SRC_Ready or \nPE_SNK_Ready state for a UFP when:\n\nA Structured VDM Exit Mode Command request is received from the DFP.\nOn entry to the PE_UFP_VDM_Mode_Exit state the Policy Engine Shall request the Device Policy Manager to exit the \nMode indicated in the Command.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Exit_ACK state when:\n\nThe Device Policy Manager indicates that the Mode has been exited.\nThe Policy Engine Shall transition to the PE_UFP_VDM_Mode_Exit_NAK state when:\n\nThe Device Policy Manager indicates that the Command response to the Exit Mode Command request is \nNAK.\nPE_UFP_VDM_Mode_Exit\nActions on entry:\nRequest DPM to evaluate request to exit \nthe requested Mode\nPower = Explicit Contract\nPD = Connected\nExit Mode request\nreceived\nExit Mode ACK\nsent1\nPE_UFP_VDM_Mode_Exit_ACK\nActions on entry:\nSend Exit Mode ACK Command\nPower = Explicit Contract\nPD = Connected\nMode exited\nPE_SRC_Ready or PE_SNK_Ready (UFP)\nActions on entry:\nPower = Explicit Contract\nPD = Connected\nPE_UFP_VDM_Mode_Exit_NAK\nActions on entry:\nSend Exit Mode NAK Command\nPower = Explicit Contract\nPD = Connected\nDPM says NAK\nExit Mode \nNAK sent\n1)\nThe UFP is required to be in USB operation or USB Safe State at this point.\n","image_count":0,"table_count":6}
{"page":940,"text":"Page 940\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.24.2.2\n  PE_UFP_VDM_Mode_Exit_ACK State\nOn entry to the PE_UFP_VDM_Mode_Exit_ACK state the Policy Engine Shall send a Structured VDM Exit Mode ACK \nCommand response.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n\nThe Structured VDM Exit Mode ACK Command response has been sent.\n8.3.3.24.2.3\n  PE_UFP_VDM_Mode_Exit_NAK State\nOn entry to the PE_UFP_VDM_Mode_Exit_NAK state the Policy Engine Shall send a Structured VDM Exit Mode NAK \nCommand response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to either the either the PE_SRC_Ready or PE_SNK_Ready state for a UFP when:\n\nThe Structured VDM Exit Mode NAK Command response has been sent.\n","image_count":0,"table_count":1}
{"page":941,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 941\n8.3.3.25\n  Cable Plug Specific State Diagrams\nThe State Diagrams in this section Shall apply to all Cable Plugs that support Structured VDMs.\n8.3.3.25.1\n  Cable Plug Cable Ready State Diagram\nFigure 8.203, \"Cable Ready State Diagram\" shows the Cable Ready state diagram for a Cable Plug.\nFigure 8.203 Cable Ready State Diagram\n8.3.3.25.1.1\n  PE_CBL_Ready State\nThe PE_CBL_Ready state shown in the following sections is the normal operational state for a Cable Plug and where \nit starts after power up or a Hard/Cable Reset.\nPE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/Connected\nPower up |\nHard Reset Complete |\nCable Reset Complete\n","image_count":0,"table_count":2}
{"page":942,"text":"Page 942\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.25.2\n  Soft/Hard/Cable Reset\n8.3.3.25.2.1\n  Cable Plug Soft Reset State Diagram\nFigure 8.204, \"Cable Plug Soft Reset State Diagram\" shows the Cable Plug state diagram on reception of a Soft_Reset \nMessage.\nFigure 8.204 Cable Plug Soft Reset State Diagram\n8.3.3.25.2.1.1\n  PE_CBL_Soft_Reset State\nThe PE_CBL_Soft_Reset state Shall be entered from any state when a Soft_Reset Message is received from the \nProtocol Layer.\nOn entry to the PE_CBL_Soft_Reset state the Policy Engine Shall reset the Protocol Layer in the Cable Plug and Shall \nthen request the Protocol Layer to send an Accept Message.\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Accept Message has been sent or\n\nThe Protocol Layer indicates that a transmission error has occurred.\nAccept Message sent |\nTransmission Error indication \nfrom Protocol Layer\nSoft Reset Message \nreceived\nPE_CBL_Soft_Reset\nActions on entry:\nReset Protocol Layer\nSend Accept Message\nCable = Awake \nPD = Connected\nPE_CBL_Ready\n","image_count":18,"table_count":2}
{"page":943,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 943\n8.3.3.25.2.2\n  Cable Plug Hard Reset State Diagram\nFigure 8.205, \"Cable Plug Hard Reset State Diagram\" shows the Cable Plug state diagram for a Hard Reset or Cable \nReset.\nFigure 8.205 Cable Plug Hard Reset State Diagram\n8.3.3.25.2.2.1\n  PE_CBL_Hard_Reset State\nThe PE_CBL_Hard_Reset state Shall be entered from any state when either Hard Reset Signaling or Cable Reset \nSignaling is detected.\nOn entry to the PE_CBL_Hard_Reset state the Policy Engine Shall reset the Cable Plug (equivalent to a power cycle).\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Cable Plug reset is complete.\nHard Reset signalling\nReceived |\nCable Reset Command\nPE_CBL_Hard_Reset\nActions on entry:\nReset Cable Plug\nCable = Awake/Asleep\nPD = Not Connected\nCable reset complete\nPE_CBL_Ready\n","image_count":20,"table_count":2}
{"page":944,"text":"Page 944\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.25.2.3\n  DFP/VCONN Source SOP'/SOP'' Soft Reset or Cable Reset of a Cable \nPlug or VPD State Diagram\nFigure 8.206, \"DFP/VCONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram\" below shows the \nstate diagram for the Policy Engine in a VCONN Source when performing a Soft Reset or Cable Reset of a Cable Plug or \nVPD on SOP’/SOP’’. The following sections describe operation in each of the states.\nFigure 8.206 DFP/VCONN Source Soft Reset or Cable Reset of a Cable Plug or VPD State Diagram\n8.3.3.25.2.3.1\n  PE_DFP_VCS_CBL_Send_Soft_Reset State\nThe PE_DFP_VCS_CBL_Send_Soft_Reset state Shall be entered from any state when a Protocol Error is detected on \nSOP’/SOP’’ by the Protocol Layer (see Section 6.8.1, \"Soft Reset and Protocol Error\") or when a Message has not been \nsent after retries on SOP’/SOP’’ while communicating with a Cable Plug/VPD and when there was previous \ncommunication with the Cable Plug that did not result in a Transmission Error or whenever the Device Policy \nManager directs a Soft Reset on SOP’/SOP’’.\nOn entry to the PE_DFP_VCS_CBL_Send_Soft_Reset state the DFP Policy Engine Shall request the SOP’/SOP’’ \nProtocol Layer to perform a Soft Reset, then Shall send a Soft_Reset Message on SOP’/SOP’’ to the Cable Plug/VPD, \nand initialize and run the SenderResponseTimer. \nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the DFP \nVCONN Source's Power Role, when:\n\nThere is no Explicit Contract in place and\n\nAn Accept Message has been received on SOP’/SOP’’.\nThe Policy Engine Shall transition to either the PE_SRC_Send_Capabilities state or PE_SRC_Discovery state, \ndepending on the DFP's VCONN Source's Power Role, when:\n\nThere is an Explicit Contract in place and\n\nAn Accept Message has been received on SOP’/SOP’’.\nThe Policy Engine Shall transition to the PE_DFP_VCS_CBL_Send_Cable_Reset state when:\n\nA SenderResponseTimer timeout occurs\n\nOr the Protocol Layer indicates that a transmission error has occurred\n\nOr when a Protocol Error is detected on SOP’/SOP’’ by the Protocol Layer.\nPE_DFP_VCS_CBL_Send_Soft_Reset\nActions on entry:\nReset Protocol Layer\nSend Soft Reset Message on SOP’/SOP’’\nInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected; Cable Discovered\nMessage not sent after retries on SOP’/SOP’’ (no GoodCRC received)1  & \nPreviously Cable Discovered| Protocol error detected on SOP’/SOP’’\nSenderResponseTimer\nTimeout |\nTransmission\nError indication \nfrom Protocol Layer |\nProtocol Error\nIn Explicit Contract & \nAccept Message\nReceived on SOP’/SOP’’\nPE_SRC_Ready or \nPE_SNK_Ready (VCONN Source)\nPE_DFP_VCS_CBL_Send_Cable_Reset\nActions on entry:\nSend Cable Reset Message\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected; Cable Discovered\nCable Reset Request \nfrom Device Policy Manager\nCable Reset sent\nPE_SRC_Send_Capabilities or\nPE_SRC_Discovery2\n(VCONN Source)\nNot in Explicit Contract & \nAccept Message\nReceived on SOP’/SOP’’\n1)\nExcludes the Soft_Reset Message itself.\n2)\nSink only communicates with the Cable Plug when in an Explicit Contract. If the Discover Identity Command is being sent at startup, then the Policy Engine will\nsubsequently transition to the PE_SRC_Send_Capabilities state as normal. Otherwise, the Policy Engine will transition to the PE_SRC_Discovery state.\n","image_count":41,"table_count":4}
{"page":945,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 945\n8.3.3.25.2.3.2\n  PE_DFP_VCS_CBL_Send_Cable_Reset State\nThe PE_DFP_VCS_CBL_Send_Cable_Reset state Shall be entered from any state when the Device Policy Manager \nrequests a Cable Reset.\nOn entry to the PE_DFP_VCS_CBL_Send_Cable_Reset state the DFP Policy Engine Shall request the Protocol Layer \nto send Cable Reset Signaling.\nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the VCONN \nSource's Power Role, when:\n\nCable Reset Signaling has been sent.\n","image_count":0,"table_count":1}
{"page":946,"text":"Page 946\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.25.2.4\n  UFP/VCONN Source SOP'/SOP'' Soft Reset of a Cable Plug or VPD \nState Diagram\nFigure 8.207, \"UFP/VCONN Source Soft Reset of a Cable Plug or VPD State Diagram\" below shows the state diagram \nfor the UFP Policy Engine in a VCONN Source when performing a Soft Reset of a Cable Plug or VPD on SOP’/SOP’’. The \nfollowing sections describe operation in each of the states.\nFigure 8.207 UFP/VCONN Source Soft Reset of a Cable Plug or VPD State Diagram\n8.3.3.25.2.4.1\n  PE_UFP_VCS_CBL_Send_Soft_Reset State\nThe PE_UFP_VCS_CBL_Send_Soft_Reset state Shall be entered from any state when a Protocol Error is detected on \nSOP’/SOP’’ by the Protocol Layer (see Section 6.8.1, \"Soft Reset and Protocol Error\") or when a Message has not been \nsent after retries on SOP’/SOP’’ while communicating with a Cable Plug/VPD and when there was previous \ncommunication with the Cable Plug that did not result in a Transmission Error or whenever the Device Policy \nManager directs a Soft Reset on SOP’/SOP’’.\nOn entry to the PE_UFP_VCS_CBL_Send_Soft_Reset state the Policy Engine Shall request the SOP’/SOP’’ Protocol \nLayer to perform a Soft Reset, then Shall send a Soft_Reset Message on SOP’/SOP’’ to the Cable Plug, and initialize \nand run the SenderResponseTimer. \nThe Policy Engine Shall transition to either the PE_SRC_Ready or PE_SNK_Ready state, depending on the UFP VCONN \nSource's Power Role, when:\n\nAn Accept Message has been received on SOP’/SOP’’.\nThe Policy Engine Shall transition to either the PE_SRC_Hard_Reset or PE_SNK_Hard_Reset state, depending on the \nUFP VCONN Source's Power Role, when:\n\nA SenderResponseTimer timeout occurs\n\nOr the Protocol Layer indicates that a transmission error has occurred\n\nOr when a Protocol Error is detected on SOP’/SOP’’ by the Protocol Layer.\nPE_UFP_VCS_CBL_Send_Soft_Reset\nActions on entry:\nReset Protocol Layer\nSend Soft Reset Message on SOP’/SOP’’\nInitialize and run SenderResponseTimer\nPower = DefauIt/Implicit or Explicit Contract\nPD = Connected\nMessage not sent after retries on SOP’/SOP’’ (no GoodCRC received)1  &\nPreviously Cable Discovered | Protocol error detected on SOP’/SOP’’\nSenderResponseTimer\nTimeout |\nTransmission\nError indication \nfrom Protocol Layer | \nProtocol Error\nAccept Message\nReceived on SOP’/SOP’’\nPE_SRC_Ready or \nPE_SNK_Ready (VCONN Source)\nPE_SRC_Hard_Reset or \nPE_SNK_Hard_Reset\n1)\nExcludes the Soft_Reset Message itself.\n","image_count":39,"table_count":2}
{"page":947,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 947\n8.3.3.25.3\n  Source Startup Structured VDM Discover Identity of a Cable Plug \nState Diagram\nFigure 8.208, \"Source Startup Structured VDM Discover Identity State Diagram\" shows the state diagram for Source \ndiscovery of identity information from a Cable Plug during the startup sequence.\nFigure 8.208 Source Startup Structured VDM Discover Identity State Diagram\n8.3.3.25.3.1\n  PE_SRC_VDM_Identity_Request State\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_Request state from the PE_SRC_Startup state \nwhen:\n\nThe Device Policy Manager requests the discovery of the identity of the Cable Plug.\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_Request state from the PE_SRC_Discovery state \nwhen:\n\nThe Device Policy Manager requests the discovery of the identity of the Cable Plug and\n\nThe DiscoverIdentityCounter < nDiscoverIdentityCount.\nEven though there has been a transition out of the PE_SRC_Discovery state the SourceCapabilityTimer Shall \ncontinue to run during the states shown in Figure 8.208, \"Source Startup Structured VDM Discover Identity State \nDiagram\" and Shall Not be initialized on re-entry to PE_SRC_Discovery. \nPE_SRC_Send_Capabilities or \nPE_SRC_Discovery1\nPE_SRC_VDM_Identity_Request\nActions on entry:\nSend Discover Identity request\nIncrement the DiscoverIdentityCounter\nStart VDMResponseTimer\nPower = No or Implicit Contract\nCable Plug = Not PD Connected\nDPM requests identity discovery3 &\nProtocol Layer Reset Complete\nDiscover Identity ACK\nreceived\nPE_SRC_VDM_Identity_ACKed\nActions on entry:\nInform DPM of identity\nPE_SRC_VDM_Identity_NAKed\nActions on entry:\nInform DPM of result\nPower =No or Implicit Contract\nCable Plug = PD Connected\nDiscover Identity NAK/BUSY |\nVDMResponseTimer Timeout |\nDiscover Identity request sending \nfailure (without GoodCRC)\nDPM informed\nDPM informed\nPE_SRC_Startup\nDPM requests identity discovery &\nDiscoverIdentityCounter < nDiscoverIdentityCount2\nPE_SRC_Discovery\nPower = No or Implicit Contract\nCable Plug = PD Connected\n1)\nIf the Discover Identity Command is being sent at startup, then the Policy Engine will subsequently transition to the PE_SRC_Send_Capabilities state as\nnormal.  Otherwise, the Policy Engine will transition to the PE_SRC_Discovery state.\n2)\nThe SourceCapabilityTimer continues to run during the states defined in this diagram even though there has been an exit from the PE_SRC_Discovery\nstate.  This ensures that Source_Capabilities Messages are sent out at a regular rate.\n3)\nThe DPM in an EPR Source Shall request the discovery of the identity of the Cable Plug at startup.\n","image_count":25,"table_count":6}
{"page":948,"text":"Page 948\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nNote:\nAn EPR Source is required to discover the identity of the Cable Plug prior to entering the First Explicit \nContract (see Section 6.4.10.1, \"Process to enter EPR Mode\") \nOn entry to the PE_SRC_VDM_Identity_Request state the Policy Engine Shall send a Structured VDM Discover \nIdentity Command request, Shall increment the DiscoverIdentityCounter and Shall start the \nVDMResponseTimer.\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_ACKed state when:\n\nA Structured VDM Discover Identity ACK Command response is received.\nThe Policy Engine Shall transition to the PE_SRC_VDM_Identity_NAKed state when:\n\nA Structured VDM Discover Identity NAK or BUSY Command response is received or\n\nThe VDMResponseTimer times out or\n\nThe Structured VDM Discover Identity Command request Message sending fails (no GoodCRC Message \nreceived after retries).\n8.3.3.25.3.2\n  PE_SRC_VDM_Identity_ACKed State\nOn entry to the PE_SRC_VDM_Identity_ACKed state the Policy Engine Shall inform the Device Policy Manager of the \nIdentity information.\nThe Policy Engine Shall transition back to either the PE_SRC_Send_Capabilities or PE_SRC_Discovery state when:\n\nThe Device Policy Manager has been informed.\n8.3.3.25.3.3\n  PE_SRC_VDM_Identity_NAKed State\nOn entry to the PE_SRC_VDM_Identity_NAKed state the Policy Engine Shall inform the Device Policy Manager of the \nresult (NAK, BUSY or timeout).\nThe Policy Engine Shall transition back to either the PE_SRC_Send_Capabilities or PE_SRC_Discovery state when:\n\nThe Device Policy Manager has been informed.\n","image_count":0,"table_count":1}
{"page":949,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 949\n8.3.3.25.4\n  Cable Plug Mode Entry/Exit\n8.3.3.25.4.1\n  Cable Plug Structured VDM Enter Mode State Diagram\nFigure 8.209, \"Cable Plug Structured VDM Enter Mode State Diagram\" shows the state diagram for a Cable Plug in \nresponse to an Enter Mode Command.\nFigure 8.209 Cable Plug Structured VDM Enter Mode State Diagram\n8.3.3.25.4.1.1\n  PE_CBL_Evaluate_Mode_Entry State\nThe Policy Engine transitions to the PE_CBL_Evaluate_Mode_Entry state from the PE_CBL_Ready state when:\n\nA Structured VDM Enter Mode Command request is received from the DFP.\nOn Entry to the PE_CBL_Evaluate_Mode_Entry state the Policy Engine Shall request the Device Policy Manager to \nevaluate the Enter Mode Command request and enter the Mode indicated in the Command request if the request is \nacceptable.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Entry_ACK state when:\n\nThe Device Policy Manager indicates that the Mode has been entered.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Entry_NAK state when:\n\nThe Device Policy Manager indicates that the response to the Mode request is NAK.\n8.3.3.25.4.1.2\n  PE_CBL_Mode_Entry_ACK State\nOn entry to the PE_CBL_Mode_Entry_ACK state the Policy Engine Shall send a Structured VDM Enter Mode ACK \nCommand response.\nPE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/Connected\nEnter Modes\nrequest1\nPE_CBL_Mode_Entry_ACK\nActions on entry:\nSend Enter Mode ACK Command\nCable = Awake\nPD = Connected\nEnter Mode ACK\nsent\nPE_CBL_Evaluate_Mode_Entry\nActions on entry:\nRequest DPM to evaluate request to enter \na Mode\nCable = Awake\nPD = Connected\nPE_CBL_Mode_Entry_NAK\nActions on entry:\nSend Enter Mode NAK Command response \nas requested\nCable = Awake\nPD = Connected\nDPM says\nNAK\nDPM says \nMode entered\nEnter Mode NAK sent\n1)\nThe Cable is required to be in USB operation or USB Safe State at this point.\n","image_count":0,"table_count":6}
{"page":950,"text":"Page 950\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Structured VDM Enter Mode ACK Command response has been sent.\n8.3.3.25.4.1.3\n  PE_CBL_Mode_Entry_NAK State\nOn entry to the PE_CBL_Mode_Entry_NAK state the Policy Engine Shall send a Structured VDM Enter Mode NAK \nCommand response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Structured VDM Enter Mode NAK Command response has been sent.\n","image_count":0,"table_count":1}
{"page":951,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 951\n8.3.3.25.4.2\n  Cable Plug Structured VDM Exit Mode State Diagram\nFigure 8.210, \"Cable Plug Structured VDM Exit Mode State Diagram\" shows the state diagram for a Cable Plug in \nresponse to an Exit Mode Command.\nFigure 8.210 Cable Plug Structured VDM Exit Mode State Diagram\n8.3.3.25.4.2.1\n  PE_CBL_Mode_Exit State\nThe Policy Engine transitions to the PE_CBL_Mode_Exit state from the PE_CBL_Ready state when:\n\nA Structured VDM Exit Mode Command request is received from the DFP.\nOn entry to the PE_CBL_Mode_Exit state the Policy Engine Shall request the Device Policy Manager to exit the Mode \nindicated in the Command.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Exit_ACK state when:\n\nThe Device Policy Manager indicates that the Mode has been exited.\nThe Policy Engine Shall transition to the PE_CBL_Mode_Exit_NAK state when:\n\nThe Device Policy Manager indicates that the Command response to the Exit Mode Command request is \nNAK.\n8.3.3.25.4.2.2\n  PE_CBL_Mode_Exit_ACK State\nOn entry to the PE_CBL_Mode_Exit_ACK state the Policy Engine Shall send a Structured VDM Exit Mode ACK \nCommand response.\nPE_CBL_Mode_Exit\nActions on entry:\nRequest DPM to evaluate request to exit \nthe requested Mode\nCable = Awake\nPD = Connected\nExit Mode request\nreceived\nExit Mode ACK\nsent1\nPE_CBL_Mode_Exit_ACK\nActions on entry:\nSend Exit Mode ACK Command\nCable = Awake\nPD = Connected\nMode exited\nPE_CBL_Ready\nActions on entry:\nCable = Awake/Asleep\nPD = Not Connected/Connected\nPE_CBL_Mode_Exit_NAK\nActions on entry:\nSend Exit Mode NAK Command\nCable = Awake\nPD = Connected\nDPM says NAK\nExit Mode \nNAK sent\n1)\nThe Cable is required to be in USB operation or USB Safe State at this point.\n","image_count":0,"table_count":6}
{"page":952,"text":"Page 952\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Structured VDM Exit Mode ACK Command response has been sent.\n8.3.3.25.4.2.3\n  PE_CBL_Mode_Exit_NAK State\nOn entry to the PE_CBL_Mode_Exit_NAK state the Policy Engine Shall send a Structured VDM Exit Mode NAK \nCommand response as indicated by the Device Policy Manager.\nThe Policy Engine Shall transition to the PE_CBL_Ready state when:\n\nThe Structured VDM Exit Mode NAK Command response has been sent.\n","image_count":0,"table_count":1}
{"page":953,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 953\n8.3.3.26\n  EPR Mode State Diagrams\n8.3.3.26.1\n  Source EPR Mode Entry State Diagram\nFigure 8.211, \"Source EPR Mode Entry State Diagram\" shows the state diagram for an EPR Source in response to an \nEPR_Mode Message.\nFigure 8.211 Source EPR Mode Entry State Diagram\n8.3.3.26.1.1\n  PE_SRC_Evaluate_EPR_Mode_Entry State\nThe Policy Engine transitions to the PE_SRC_Evaluate_EPR_Mode_Entry state from the PE_SRC_Ready state when:\n\nAn EPR_Mode (Enter) Message is received from the Sink.\nOn Entry to the PE_SRC_Evaluate_EPR_Mode_Entry state the Policy Engine Shall request the Device Policy Manager \nto evaluate the EPR_Mode (Enter) Message.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Ack state when:\n\nThe Device Policy Manager indicates that EPR Mode can be entered.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n\nThe Device Policy Manager indicates that the EPR Mode is not to be entered.\nEPR_Mode (Enter) received\nPE_SRC_EPR_Mode_Entry_ACK\nActions on entry:\nSend EPR Enter Mode Acknowledge\nIf Source is not the VCONN Source initiate VCONN Swap \nprocess\nPE_SRC_Evaluate_EPR Mode_Entry\nActions on entry:\nRequest DPM to evaluate request to enter EPR Mode\nPower = Explicit Contract\nPD = Connected\nPE_SRC_EPR_Mode_Entry_Failed\nActions on entry:\nSend Enter Mode (Enter Failed) with \nappropriate failure code.\nDPM says enter EPR Mode\nEPR Enter Mode (Enter Failed) sent\nPE_SRC_Ready\nPE_VCS_Send_Swap\nPE_VCS_Force_VCONN or\nPE_VCS_Send_PS_RDY\nVCONN Swap Process\nDPM says don’t \nenter EPR Mode\nPE_SRC_EPR_Mode_Discover_Cable\nActions on entry:\nCheck Vconn Swap Result if Vconn Swap Process \ncarried out.\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nPower = Explicit Contract\nPD = Connected\nEPR Enter Mode (Enter Acknowledged) Sent &\nSource is VCONN Source &\nUnknown Cable\nPE_INIT_PORT_VDM_Identity_Request\nPE_INIT_PORT_VDM_Identity_ACKed or\nPE_INIT_PORT_VDM_Identity_NAKed\nSource is the VCONN Source\nCable Discovery Process\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR\nActions on entry:\nAsk DPM to evaluate Cable Discovery results\nPower = Explicit Contract\nPD = Connected\nPE_SRC_EPR_Mode_Entry_Succeeded\nActions on entry:\nSend EPR Mode (Enter Succeeded)\nEnter EPR Mode.\nPower = Explicit Contract\nPD = Connected\nVCONN Swap Process Complete\nCable Discovery Process Complete\nCable Plug is EPR capable\nPE_SRC_Send_Capabilities\nEPR Mode Entered\nCable Plug is not EPR capable\nEPR Enter Mode (Enter Acknowledged) Sent &\n(captive cable |  known EPR Capable Cable)\nEPR Enter Mode (Enter Acknowledged) Sent &\nSource is not VCONN Source &\nUnknown Cable\n","image_count":38,"table_count":7}
{"page":954,"text":"Page 954\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.26.1.2\n  PE_SRC_EPR_Mode_Entry_Ack State\nOn entry to the PE_SRC_EPR_Mode_Entry_Ack state the Policy Engine Shall send a EPR_Mode (Enter \nAcknowledged) Message.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Evaluate_Cable_EPR state when:\n\nThe EPR_Mode (Enter Acknowledged) Message has been sent and\n\nThe Source is not the VCONN Source and\n\nThe cable is a captive cable or a known EPR Cable.\nThe Policy Engine Shall transition to the PE_VCS_Send_Swap state when:\n\nThe EPR_Mode (Enter Acknowledged) Message has been sent and\n\nThe Source is not the VCONN Source and\n\nThe cable is unknown.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Discover_Cable state when:\n\nThe EPR_Mode (Enter Acknowledged) Message has been sent and\n\nThe Source is the VCONN Source and\n\nThe cable is unknown.\n8.3.3.26.1.3\n  PE_SRC_EPR_Mode_Discover_Cable State\nThe Policy Engine transitions to the PE_SRC_EPR_Mode_Discover_Cable state from the PE_VCS_Force_VCONN state \nor PE_VCS_Send_Ps_Rdy state when:\n\nA Source initiated VCONN Swap process has completed.\nThe Policy Engine Shall transition to the PE_INIT_PORT_VDM_Identity_Request state in order to perform Cable \nPlug discovery when:\n\nThe Source is the VCONN Source.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n\nThe VCONN Swap process failed (the Source is not the VCONN Source).\n8.3.3.26.1.4\n  PE_SRC_EPR_Mode_Evaluate_Cable_EPR State\nIn the PE_SRC_EPR_Mode_Evaluate_Cable_EPR state the Policy Engine requests the DPM to evaluate the Cable \nDiscovery results.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Succeeded state when:\n\nThe Cable Plug is capable of EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_EPR_Mode_Entry_Failed state when:\n\nThe Cable Plug is not capable of EPR Mode.\n8.3.3.26.1.5\n  PE_SRC_EPR_Mode_Entry_Succeeded State\nOn entry to the PE_SRC_EPR_Mode_Entry_Succeeded state the Policy Engine Shall send a EPR_Mode (Enter \nSucceeded) Message and enter EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nEPR Mode has been entered.\n","image_count":0,"table_count":1}
{"page":955,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 955\n8.3.3.26.1.6\n  PE_SRC_EPR_Mode_Entry_Failed State\nOn entry to the PE_SRC_EPR_Mode_Entry_Failed state the Policy Engine Shall send a EPR_Mode (Enter Failed) \nMessage.\nThe Policy Engine Shall transition to the PE_SRC_Ready state when:\n\nThe EPR_Mode (Enter Failed) Message has been sent.\n","image_count":0,"table_count":1}
{"page":956,"text":"Page 956\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.26.2\n  Sink EPR Mode Entry State Diagram\nFigure 8.212, \"Sink EPR Mode Entry State Diagram\" shows the state diagram for an EPR Sink initiating the EPR Mode \nEntry process.\nFigure 8.212 Sink EPR Mode Entry State Diagram\n8.3.3.26.2.1\n  PE_SNK_Send_EPR_Mode_Entry State\nThe Policy Engine transitions to the PE_SNK_Send_EPR_Mode_Entry state from the PE_SNK_Ready state when:\n\nThe DPM requests entry into EPR Mode.\nOn Entry to the PE_SNK_Send_EPR_Mode_Entry state the Policy Engine Shall send an EPR_Mode (Enter) Message \nand starts the SenderResponseTimer and the SinkEPREnterTimer.\nNote:\nThe SinkEPREnterTimer Shall continue to run in every state until it is stopped or times out.\nThe Policy Engine Shall transition to the PE_SNK_EPR_Mode_Wait_For_Response state when:\n\nAn EPR_Mode (Enter Acknowledge) Message is received.\nThe Policy Engine Shall transition to the PE_SNK_Send_Soft_Reset state when:\n\nAn EPR_Mode Message is received which is not Enter Succeeded or\nDPM Request EPR Mode Entry\nPE_SNK_EPR_Mode_Entry_Wait_For_Response\nActions on entry:\nWait for EPR Enter Mode response\nPE_SNK_Send_EPR Mode_Entry\nActions on entry:\nSend EPR Mode Entry Message\nStart SenderResponse Timer\nStart SinkEPREnterTimer\nPower = Explicit Contract\nPD = Connected\nEPR Enter Mode Acknowledge received\nPE_SNK_Ready\nEPR Enter Mode Succeeded received\nPower = Explicit Contract\nPD = Connected\nPE_SNK_Send_Soft_Reset\nEPR Enter Mode received (!Succceded) |\nSenderResponseTimer timeout |\nSinkEPREnterTimer timeout\nEPR Enter Mode received (!Succceded) |\nSinkEPREnterTimer timeout\nActions on exit:\nStop the SinkEPRTimer\nEnter EPR Mode\nPE_SNK_Wait_For_Capabilities\nPE_VCS_Evaluate_Swap\nVCONN Swap Process\nVCONN_Swap Message Received\nVCONN Swap Process completed\nPE_VCS_Turn_Off_VCONN\n","image_count":41,"table_count":4}
{"page":957,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 957\n\nThe SenderResponseTimer times out or\n\nThe SinkEPREnterTimer times out.\n8.3.3.26.2.2\n  PE_SNK_EPR_Mode_Wait_For_Response State\nIn the State the Policy Engine waits for a confirmation that the EPR Mode entry request has succeeded.\nOn exit from the PE_SNK_EPR_Mode_Wait_For_Response state the Policy Engine Shall stop the \nSinkEPREnterTimer and enter EPR Mode.\nThe Policy Engine Shall transition to the PE_SNK_Send_Soft_Reset state when:\n\nAn EPR_Mode Message is received which is not Enter Succeeded or\n\nThe SinkEPREnterTimer times out.\nThe Policy Engine Shall transition to the PE_VCS_Evaluate_Swap State when:\n\nA VCONN_Swap Message is received.\nThe Policy Engine Shall transition back from the PE_VCS_Turn_Off_VCONN State to the \nPE_SNK_EPR_Mode_Wait_For_Response State when:\n\nThe VCONN Swap process has completed.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nAn EPR_Mode (Enter Succeeded) Message has been received.\n","image_count":0,"table_count":1}
{"page":958,"text":"Page 958\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.26.3\n  Source EPR Mode Exit State Diagram\nFigure 8.213, \"Source EPR Mode Exit State Diagram\" shows the state diagram for an EPR Source initiating the EPR \nMode exit process.\nFigure 8.213 Source EPR Mode Exit State Diagram\n8.3.3.26.3.1\n  PE_SRC_Send_EPR_Mode_Exit State\nThe Policy Engine transitions to the PE_SRC_Send_EPR_Mode_Exit state from the PE_SRC_Ready state when:\n\nThe DPM requests exit from EPR Mode.\nOn Entry to the PE_SRC_Send_EPR_Mode_Exit state the Policy Engine Shall send an EPR_Mode (Exit) Message.\nOn Exit from the PE_SRC_Send_EPR_Mode_Exit state the Policy Engine Shall exit EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nThe EPR_Mode (Exit) Message has been sent.\n8.3.3.26.3.2\n  PE_SRC_EPR_Mode_Exit_Received State\nThe Policy Engine transitions to the PE_SRC_EPR_Mode_Exit_Received state from the PE_SRC_Ready state when:\n\nAn EPR_Mode (Exit) Message is received.\nOn Entry to the PE_SRC_EPR_Mode_Exit_Received state the Policy Engine Shall exit EPR Mode.\nThe Policy Engine Shall transition to the PE_SRC_Send_Capabilities state when:\n\nIn an Explicit Contract with an SPR (A)PDO and\n\nEPR Mode has been exited.\nThe Policy Engine Shall transition to the PE_SRC_Hard_Reset state when:\n\nNot in an Explicit Contract with an SPR (A)PDO.\nDPM Requests EPR Mode Exit\nPE_SRC_Send_EPR Mode_Exit\nActions on entry:\nSend EPR Mode Exit Message\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message sent\nPE_SRC_Ready\nActions on exit:\nExit EPR Mode\nPE_SRC_Send_Capabilities\nPE_SRC_EPR Mode_Exit_Received\nActions on entry:\nExit EPR Mode\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message Received\nIn Explict Contract with SPR PDO &\nEPR Mode Exited\nPE_SRC_Hard_Reset\nNot in an Explicit Contract with an SPR PDO\n","image_count":30,"table_count":4}
{"page":959,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 959\n8.3.3.26.4\n  Sink EPR Mode Exit State Diagram\nFigure 8.214, \"Sink EPR Mode Exit State Diagram\" shows the state diagram for an EPR Sink initiating the EPR Mode \nexit process.\nFigure 8.214 Sink EPR Mode Exit State Diagram\n8.3.3.26.4.1\n  PE_SNK_Send_EPR_Mode_Exit State\nThe Policy Engine transitions to the PE_SNK_Send_EPR_Mode_Exit state from the PE_SNK_Ready state when:\n\nThe DPM requests exit from EPR Mode.\nOn Entry to the PE_SNK_Send_EPR_Mode_Exit state the Policy Engine Shall send an EPR_Mode (Exit) Message.\nOn Exit from the PE_SNK_Send_EPR_Mode_Exit state the Policy Engine Shall exit EPR Mode.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nThe EPR_Mode (Exit) Message has been sent.\n8.3.3.26.4.2\n  PE_SNK_EPR_Mode_Exit_Received State\nThe Policy Engine transitions to the PE_SNK_EPR_Mode_Exit_Received state from the PE_SNK_Ready state when:\n\nAn EPR_Mode (Exit) Message is received.\nOn Entry to the PE_SNK_EPR_Mode_Exit_Received state the Policy Engine Shall exit EPR Mode.\nThe Policy Engine Shall transition to the PE_SNK_Wait_for_Capabilities state when:\n\nIn an Explicit Contract with an SPR (A)PDO and\n\nEPR Mode has been exited.\nThe Policy Engine Shall transition to the PE_SNK_Hard_Reset state when:\n\nNot in an Explicit Contract with an SPR (A)PDO.\nDPM Requests EPR Mode Exit\nPE_SNK_Send_EPR Mode_Exit\nActions on entry:\nSend EPR Mode Exit Message\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message sent\nPE_SNK_Ready\nActions on exit:\nExit EPR Mode\nPE_SNK_Wait_for_Capabilities\nPE_SNK_EPR Mode_Exit_Received\nActions on entry:\nExit EPR Mode\nPower = Explicit Contract\nPD = Connected\nEPR Mode Exit Message Received\nIn Explicit Contract with SPR PDO &\nEPR Mode Exited\nPE_SNK_Hard_Reset\nNot in an Explicit Contract with an SPR PDO\n","image_count":30,"table_count":5}
{"page":960,"text":"Page 960\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.27\n  BIST State diagrams\n8.3.3.27.1\n  BIST Carrier Mode State Diagram\nFigure 8.215, \"BIST Carrier Mode State Diagram\" shows the state diagram required by a UUT, which can be either a \nSource, Sink or Cable Plug, when operating in BIST Carrier Mode. Transitions Shall be from either the \nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.215 BIST Carrier Mode State Diagram\n8.3.3.27.1.1\n  PE_BIST_Carrier_Mode State\nThe Source, Sink or Cable Plug Shall enter the PE_BIST_Carrier_Mode state from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state when:\n\nA BIST Message is received with a BIST Carrier Mode BIST Data Object and \n\nVBUS is at vSafe5V.\nOn entry to the PE_BIST_Carrier_Mode state the Policy Engine Shall tell the Protocol Layer to go to BIST Carrier \nMode (see Section 6.4.3.1, \"BIST Carrier Mode\") and Shall initialize and run the BISTContModeTimer.\nBIST message received\nwith Data Object BIST Carrier Mode &\nVBUS = vSafe5V\nBISTContModeTimer\ntimeout\nPE_BIST_Carrier_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Carrier Mode\nInitialize and run BISTContModeTimer\nPE_SRC_Transition_to_default or \nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or \nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS = vSafe5V\nPD = Connected\n","image_count":42,"table_count":3}
{"page":961,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 961\nThe Policy Engine Shall transition to either the PE_SRC_Transition_to_default state, \nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n\nThe BISTContModeTimer times out.\n","image_count":0,"table_count":1}
{"page":962,"text":"Page 962\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.27.2\n  BIST Test Data Mode State Diagram\nFigure 8.216, \"BIST Test Data Mode State Diagram\" shows the state diagram required by a UUT, which can be either \na Source, Sink or Cable Plug, when operating in BIST Test Data Mode. Transitions Shall be from either the \nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.216 BIST Test Data Mode State Diagram\n8.3.3.27.2.1\n  PE_BIST_Test_Mode State\nThe Source, Sink or Cable Plug Shall enter the PE_BIST_Test_Mode state from either the PE_SRC_Ready, \nPE_SNK_Ready or PE_CBL_Ready state when:\n\nA BIST Message is received with a BIST Test Data BIST Data Object and \n\nVBUS is at vSafe5V.\nBIST message received\nwith Data Object BIST Test Mode &\nVBUS = vSafe5V\nHard Reset\nPE_BIST_Test_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Test \nMode\nPE_SRC_Transition_to_default or \nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or \nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS = vSafe5V\nPD = Connected\n","image_count":44,"table_count":3}
{"page":963,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 963\nOn entry to the PE_BIST_Test_Mode state the Policy Engine Shall tell the Protocol Layer to go into BIST Test Data \nMode where it sends no further Messages except for GoodCRC Messages in response to received Messages (see \nSection 6.4.3.2, \"BIST Test Data Mode\").\nThe Policy Engine Shall transition to either the PE_SRC_Transition_to_default state, \nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n\nA Hard Reset occurs.\n","image_count":0,"table_count":1}
{"page":964,"text":"Page 964\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.27.3\n  BIST Shared Capacity Test Mode State Diagram\nFigure 8.217, \"BIST Shared Capacity Test Mode State Diagram\" shows the state diagram required by a UUT, which \ncan be either a Source, Sink or Cable Plug, when operating in BIST Shared Capacity Test Mode. Transitions Shall be \nfrom either the PE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready states.\nFigure 8.217 BIST Shared Capacity Test Mode State Diagram\n8.3.3.27.3.1\n  PE_BIST_Shared_Capacity_Test_Mode State\nThe Source, Sink or Cable Plug Shall enter the PE_BIST_Shared_Capacity_Test_Mode state from either the \nPE_SRC_Ready, PE_SNK_Ready or PE_CBL_Ready state when:\n\nA BIST Message is received with a BIST Shared Test Mode Entry BIST Data Object and \n\nVBUS is at vSafe5V.\nOn entry to the PE_BIST_Shared_Capacity_Test_Mode state the Policy Engine Shall tell the Protocol Layer to go to \nBIST Shared Capacity Test Mode (see Section 6.4.3.3, \"BIST Shared Capacity Test Mode\").\nThe Policy Engine Shall transition to either the PE_SRC_Transition_to_default state, \nPE_SNK_Transition_to_default state or PE_CBL_Ready state (as appropriate) when:\n\nA BIST Message is received with a BIST Shared Test Mode Exit BIST Data Object.\nBIST message received\nwith Data Object BIST Shared Test Mode Entry\nBIST message received\nwith Data Object BIST Shared Test Mode Exit\nPE_BIST_Shared Capacity_Test_Mode\nActions on entry:\nTell Protocol Layer to go to BIST Shared Capacity \nTest Mode1.\nPE_SRC_Transition_to_default or \nPE_SNK_Transition_to_default or\nPE_CBL_Ready\nPE_SRC_Ready or \nPE_SNK_Ready or\nPE_CBL_Ready\nVBUS = vSafe5V\nPD = Connected\n1)\nThe UUT Shall exit BIST Shared Capacity Test Mode when It is powered off. The UUT Shall remain in BIST Shared Capacity\nTest Mode for any PD event (except when a BIST Shared Test Mode Exit BIST Data Object, is received); specifically the \nUUT Shall remain in BIST Shared Capacity Test Mode when any of the following PD events occurs: Hard Reset, Cable Reset, \nSoft Reset, Data Role Swap, Power Role Swap, Fast Role Swap, VCONN Swap. The UUT May leave test mode if the tester \nmakes a request that exceeds the capabilities of the UUT.\n","image_count":41,"table_count":3}
{"page":965,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 965\n8.3.3.28\n  USB Type-C Referenced States\nThis section contains states cross-referenced from the [USB Type-C 2.4] specification.\n8.3.3.28.1\n  ErrorRecovery state\nThe ErrorRecovery state is used to electronically disconnect Port Partners using the USB Type-C connector. The \nErrorRecovery state Shall be entered when there are errors on USB Type-C Ports which cannot be recovered by \nHard Reset. The ErrorRecovery state Shall map to USB Type-C ErrorRecovery state operation as defined in the \n[USB Type-C 2.4] specification. Bus powered Sinks Shall Not be required to meet this requirement as removal of \ntheir power will serve the same purpose.\nOn entry to the ErrorRecovery state the Explicit Contract and PD Connection Shall be ended.\nOn exit from the ErrorRecovery state a new Explicit Contract Should be established once the Port Partners have \nre-connected over the CC wire.\n","image_count":0,"table_count":1}
{"page":966,"text":"Page 966\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n8.3.3.29\n  Policy Engine States\nTable 8.154, \"Policy Engine States\" lists the states used by the various state machines.\nTable 8.154  Policy Engine States\nState name\nReference\nSenderResponseTimer\nSRT_Stopped\nSection 8.3.3.1.1.1\nSRT_Running\nSection 8.3.3.1.1.2\nSRT_Expired\nSection 8.3.3.1.1.3\nSource Port\nPE_SRC_Startup\nSection 8.3.3.2.1\nPE_SRC_Discovery\nSection 8.3.3.2.2\nPE_SRC_Send_Capabilities\nSection 8.3.3.2.3\nPE_SRC_Negotiate_Capability\nSection 8.3.3.2.4\nPE_SRC_Transition_Supply\nSection 8.3.3.2.5\nPE_SRC_Ready\nSection 8.3.3.2.6\nPE_SRC_Disabled\nSection 8.3.3.2.7\nPE_SRC_Capability_Response\nSection 8.3.3.2.8\nPE_SRC_Hard_Reset\nSection 8.3.3.2.9\nPE_SRC_Hard_Reset_Received\nSection 8.3.3.2.10\nPE_SRC_Transition_to_default\nSection 8.3.3.2.11\nPE_SRC_Give_Source_Cap\nSection 8.3.3.2.15\nPE_SRC_Get_Sink_Cap\nSection 8.3.3.2.12\nPE_SRC_Wait_New_Capabilities\nSection 8.3.3.2.13\nPE_SRC_EPR_Keep_Alive\nSection 8.3.3.2.14\nSink Port\nPE_SNK_Startup\nSection 8.3.3.3.1\nPE_SNK_Discovery\nSection 8.3.3.3.2\nPE_SNK_Wait_for_Capabilities\nSection 8.3.3.3.3\nPE_SNK_Evaluate_Capability\nSection 8.3.3.3.4\nPE_SNK_Select_Capability\nSection 8.3.3.3.5\nPE_SNK_Transition_Sink\nSection 8.3.3.3.6\nPE_SNK_Ready\nSection 8.3.3.3.7\nPE_SNK_Hard_Reset\nSection 8.3.3.3.8\nPE_SNK_Transition_to_default\nSection 8.3.3.3.9\nPE_SNK_Give_Sink_Cap\nSection 8.3.3.3.10\nPE_SNK_Get_Source_Cap\nSection 8.3.3.3.12\nPE_SNK_EPR_Keep_Alive\nSection 8.3.3.3.11\n","image_count":0,"table_count":2}
{"page":967,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 967\nSoft Reset and Protocol Error\nSource Port Soft Reset\nPE_SRC_Send_Soft_Reset\nSection 8.3.3.4.1.1\nPE_SRC_Soft_Reset\nSection 8.3.3.4.1.2\nSink Port Soft Reset\nPE_SNK_Send_Soft_Reset\nSection 8.3.3.4.2.1\nPE_SNK_Soft_Reset\nSection 8.3.3.4.2.2\nData Reset\nDFP Data Reset\nPE_DDR_Send_Data_Reset\nSection 8.3.3.5.1.1\nPE_DDR_Data_Reset_Received\nSection 8.3.3.5.1.2\nPE_DDR_Wait_For_VCONN_Off\nSection 8.3.3.5.1.3\nPE_DDR_Perform_Data_Reset\nSection 8.3.3.5.1.4\nUFP Data Reset\nPE_UDR_Send_Data_Reset\nSection 8.3.3.5.2.1\nPE_UDR_Data_Reset_Received\nSection 8.3.3.5.2.2\nPE_UDR_Turn_Off_VCONN\nSection 8.3.3.5.2.3\nPE_UDR_Send_Ps_Rdy\nSection 8.3.3.5.2.4\nPE_UDR_Wait_For_Data_Reset_Complete\nSection 8.3.3.5.2.5\nNot Supported Message\nSource Port Not Supported\nPE_SRC_Send_Not_Supported\nSection 8.3.3.6.1.1\nPE_SRC_Not_Supported_Received\nSection 8.3.3.6.1.2\nPE_SRC_Chunk_Received\nSection 8.3.3.6.1.3\nSink Port Not Supported\nPE_SNK_Send_Not_Supported\nSection 8.3.3.6.2.1\nPE_SNK_Not_Supported_Received\nSection 8.3.3.6.2.2\nPE_SNK_Chunk_Received\nSection 8.3.3.6.2.3\nSource Alert\nSource Port Source Alert\nPE_SRC_Send_Source_Alert\nSection 8.3.3.7.1.1\nPE_SRC_Wait_for_Get_Status\nSection 8.3.3.7.1.2\nSink Port Source Alert\nPE_SNK_Source_Alert_Received\nSection 8.3.3.7.2.1\nSink Port Sink Alert\nPE_SNK_Send_Sink_Alert\nSection 8.3.3.7.3.1\nPE_SNK_Wait_for_Get_Status\nSection 8.3.3.7.3.2\nSource Port Sink Alert\nPE_SRC_Sink_Alert_Received\nSection 8.3.3.7.4.1\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":968,"text":"Page 968\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSource/Sink Extended Capabilities\nSink Port Get Source Capabilities Extended\nPE_SNK_Get_Source_Cap_Ext\nSection 8.3.3.8.1.1\nSource Port Give Source Capabilities Extended\nPE_SRC_Give_Source_Cap_Ext\nSection 8.3.3.8.2.1\nSource Port Get Sink Capabilities Extended\nPE_SRC_Get_Sink_Cap_Ext\nSection 8.3.3.8.3.1\nSource Port Give Source Capabilities Extended\nPE_SNK_Give_Sink_Cap_Ext\nSection 8.3.3.8.4.1\nSource Information\nSink Port Get Source Information\nPE_SNK_Get_Source_Info\nSection 8.3.3.9.1.1\nSource Port Give Source Information\nPE_SRC_Give_Source_Info\nSection 8.3.3.9.2.1\nStatus\nGet Status\nPE_Get_Status\nSection 8.3.3.10.1.1\nGive Status\nPE_Give_Status\nSection 8.3.3.10.1.1\nSink Port Get PPS Status\nPE_SNK_Get_PPS_Status\nSection 8.3.3.10.3.1\nSource Port Give PPS Status\nPE_SRC_Give_PPS_Status\nSection 8.3.3.10.4.1\nBattery Capabilities\nGet Battery Capabilities\nPE_Get_Battery_Cap\nSection 8.3.3.11.1.1\nGive Battery Capabilities\nPE_Give_Battery_Cap\nSection 8.3.3.11.2.1\nBattery Status\nGet Battery Status\nPE_Get_Battery_Status\nSection 8.3.3.12.1.1\nGive Battery Status\nPE_Give_Battery_Status\nSection 8.3.3.12.2.1\nManufacturer Information\nGet Manufacturer Information\nPE_Get_Manufacturer_Info\nSection 8.3.3.13.1.1\nGive Manufacturer Information\nPE_Give_Manufacturer_Info\nSection 8.3.3.13.2.1\nCountry Codes and Information\nGet Country Codes\nPE_Get_Country_Codes\nSection 8.3.3.14.1.1\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":969,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 969\nGive Country Codes\nPE_Give_Country_Codes\nSection 8.3.3.14.2.1\nGet Country Information\nPE_Get_Country_Info\nSection 8.3.3.14.3.1\nGive Country Information\nPE_Give_Country_Info\nSection 8.3.3.14.4.1\nRevision\nGet Revision\nPE_Get_Revision\nSection 8.3.3.15.1.1\nGive Revision\nPE_Give_Revision\nSection 8.3.3.15.2.1\nEnter USB\nDFP Enter USB\nPE_DEU_Send_Enter_USB\nSection 8.3.3.16.1.1\nUFP Enter USB\nPE_UEU_Enter_USB_Received\nSection 8.3.3.16.2.1\nSecurity Request/Response\nSend Security Request\nPE_Send_Security_Request\nSection 8.3.3.17.1.1\nSend Security Response\nPE_Send_Security_Response\nSection 8.3.3.17.2.1\nSecurity Response Received\nPE_Security_Response_Received\nSection 8.3.3.17.3.1\nFirmware Update Request/Response\nSend Firmware Update Request\nPE_Send_Firmware_Update_Request\nSection 8.3.3.18.1.1\nSend Firmware Update Response\nPE_Send_Firmware_Update_Response\nSection 8.3.3.18.2.1\nFirmware Update Response Received\nPE_Firmware_Update_Response_Received\nSection 8.3.3.18.3.1\nDual-Role Port\nDFP to UFP Data Role Swap\nPE_DRS_DFP_UFP_Evaluate_Swap\nSection 8.3.3.19.1.2\nPE_DRS_DFP_UFP_Accept_Swap\nSection 8.3.3.19.1.3\nPE_DRS_DFP_UFP_Change_to_UFP\nSection 8.3.3.19.1.4\nPE_DRS_DFP_UFP_Send_Swap\nSection 8.3.3.19.1.5\nPE_DRS_DFP_UFP_Reject_Swap\nSection 8.3.3.19.1.6\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":970,"text":"Page 970\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nUFP to DFP Data Role Swap\nPE_DRS_UFP_DFP_Evaluate_Swap\nSection 8.3.3.19.2.2\nPE_DRS_UFP_DFP_Accept_Swap\nSection 8.3.3.19.2.3\nPE_DRS_UFP_DFP_Change_to_DFP\nSection 8.3.3.19.2.4\nPE_DRS_UFP_DFP_Send_Swap\nSection 8.3.3.19.2.5\nPE_DRS_UFP_DFP_Reject_Swap\nSection 8.3.3.19.2.6\nSource to Sink Power Role Swap\nPE_PRS_SRC_SNK_Evaluate_Swap\nSection 8.3.3.19.3.2\nPE_PRS_SRC_SNK_Accept_Swap\nSection 8.3.3.19.3.3\nPE_PRS_SRC_SNK_Transition_to_off\nSection 8.3.3.19.3.4\nPE_PRS_SRC_SNK_Assert_Rd\nSection 8.3.3.19.3.5\nPE_PRS_SRC_SNK_Wait_Source_on\nSection 8.3.3.19.3.6\nPE_PRS_SRC_SNK_Send_Swap\nSection 8.3.3.19.3.7\nPE_PRS_SRC_SNK_Reject_Swap\nSection 8.3.3.19.3.8\nSink to Source Power Role Swap\nPE_PRS_SNK_SRC_Evaluate_Swap\nSection 8.3.3.19.4.2\nPE_PRS_SNK_SRC_Accept_Swap\nSection 8.3.3.19.4.3\nPE_PRS_SNK_SRC_Transition_to_off\nSection 8.3.3.19.4.4\nPE_PRS_SNK_SRC_Assert_Rp\nSection 8.3.3.19.4.5\nPE_PRS_SNK_SRC_Source_on\nSection 8.3.3.19.4.6\nPE_PRS_SNK_SRC_Send_Swap\nSection 8.3.3.19.4.7\nPE_PRS_SNK_SRC_Reject_Swap\nSection 8.3.3.19.4.8\nSource to Sink Fast Role Swap\nPE_FRS_SRC_SNK_Evaluate_Swap\nSection 8.3.3.19.5.2\nPE_FRS_SRC_SNK_Accept_Swap\nSection 8.3.3.19.5.3\nPE_FRS_SRC_SNK_Transition_to_off\nSection 8.3.3.19.5.4\nPE_FRS_SRC_SNK_Assert_Rd\nSection 8.3.3.19.5.5\nPE_FRS_SRC_SNK_Wait_Source_on\nSection 8.3.3.19.5.6\nSink to Source Fast Role Swap\nPE_FRS_SNK_SRC_Start_AMS\nSection 8.3.3.19.6.1\nPE_FRS_SNK_SRC_Send_Swap\nSection 8.3.3.19.6.2\nPE_FRS_SNK_SRC_Transition_to_off\nSection 8.3.3.19.6.3\nPE_FRS_SNK_SRC_VBUS_Applied\nSection 8.3.3.19.6.4\nPE_FRS_SNK_SRC_Assert_Rp\nSection 8.3.3.19.6.5\nPE_FRS_SNK_SRC_Source_on\nSection 8.3.3.19.6.6\nDual-Role Source Port Get Source Capabilities\nPE_DR_SRC_Get_Source_Cap\nSection 8.3.3.19.7.1\nDual-Role Source Port Give Sink Capabilities\nPE_DR_SRC_Give_Sink_Cap\nSection 8.3.3.19.8.1\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":971,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 971\nDual-Role Sink Port Get Sink Capabilities\nPE_DR_SNK_Get_Sink_Cap\nSection 8.3.3.19.9.1\nDual-Role Sink Port Give Source Capabilities\nPE_DR_SNK_Give_Source_Cap\nSection 8.3.3.19.10.1\nDual-Role Source Port Get Source Capabilities Extended\nPE_DR_SRC_Get_Source_Cap_Ext\nSection 8.3.3.19.11.1\nDual-Role Sink Port Give Source Capabilities Extended\nPE_DR_SNK_Give_Source_Cap_Ext\nSection 8.3.3.19.12.1\nDual-Role Sink Port Get Sink Capabilities Extended\nPE_DR_SNK_Get_Sink_Cap_Ext\nSection 8.3.3.19.13.1\nDual-Role Source Port Give Sink Capabilities Extended\nPE_DR_SRC_Give_Sink_Cap_Ext\nSection 8.3.3.19.14.1\nDual-Role Source Port Get Source Information\nPE_DR_SRC_Get_Source_Info\nSection 8.3.3.19.15.1\nDual-Role Sink Port Give Source Information\nPE_DR_SNK_Give_Source_Info\nSection 8.3.3.19.16.1\nUSB Type-C VCONN Swap\nPE_VCS_Send_Swap\nSection 8.3.3.20.1\nPE_VCS_Evaluate_Swap\nSection 8.3.3.20.2\nPE_VCS_Accept_Swap\nSection 8.3.3.20.3\nPE_VCS_Reject_Swap\nSection 8.3.3.20.4\nPE_VCS_Wait_For_VCONN\nSection 8.3.3.20.5\nPE_VCS_Turn_Off_VCONN\nSection 8.3.3.20.6\nPE_VCS_Turn_On_VCONN\nSection 8.3.3.20.7\nPE_VCS_Send_Ps_Rdy\nSection 8.3.3.20.8\nPE_VCS_Force_VCONN\nSection 8.3.3.20.9\nInitiator Structured VDM\nInitiator to Port Structured VDM Discover Identity\nPE_INIT_PORT_VDM_Identity_Request\nSection 8.3.3.21.1.1\nPE_INIT_PORT_VDM_Identity_ACKed\nSection 8.3.3.21.1.2\nPE_INIT_PORT_VDM_Identity_NAKed\nSection 8.3.3.21.1.3\nInitiator Structured VDM Discover SVIDs\nPE_INIT_VDM_SVIDs_Request\nSection 8.3.3.21.2.1\nPE_INIT_VDM_SVIDs_ACKed\nSection 8.3.3.21.2.2\nPE_INIT_VDM_SVIDs_NAKed\nSection 8.3.3.21.2.3\nInitiator Structured VDM Discover Modes\nPE_INIT_VDM_Modes_Request\nSection 8.3.3.21.3.1\nPE_INIT_VDM_Modes_ACKed\nSection 8.3.3.21.3.2\nPE_INIT_VDM_Modes_NAKed\nSection 8.3.3.21.3.3\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":972,"text":"Page 972\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nInitiator Structured VDM Attention\nPE_INIT_VDM_Attention_Request\nSection 8.3.3.21.4.1\nResponder Structured VDM\nResponder Structured VDM Discovery Identity\nPE_RESP_VDM_Get_Identity\nSection 8.3.3.22.1.1\nPE_RESP_VDM_Send_Identity\nSection 8.3.3.22.1.2\nPE_RESP_VDM_Get_Identity_NAK\nSection 8.3.3.22.1.3\nResponder Structured VDM Discovery SVIDs\nPE_RESP_VDM_Get_SVIDs\nSection 8.3.3.22.2.1\nPE_RESP_VDM_Send_SVIDs\nSection 8.3.3.22.2.2\nPE_RESP_VDM_Get_SVIDs_NAK\nSection 8.3.3.22.2.3\nResponder Structured VDM Discovery Modes\nPE_RESP_VDM_Get_Modes\nSection 8.3.3.22.3.1\nPE_RESP_VDM_Send_Modes\nSection 8.3.3.22.3.2\nPE_RESP_VDM_Get_Modes_NAK\nSection 8.3.3.22.3.3\nReceiving a Structured VDM Attention\nPE_RCV_VDM_Attention_Request\nSection 8.3.3.22.4.1\nDFP Structured VDM\nDFP Structured VDM Mode Entry\nPE_DFP_VDM_Mode_Entry_Request\nSection 8.3.3.23.1.1\nPE_DFP_VDM_Mode_Entry_ACKed\nSection 8.3.3.23.1.2\nPE_DFP_VDM_Mode_Entry_NAKed\nSection 8.3.3.23.1.3\nDFP Structured VDM Mode Exit\nPE_DFP_VDM_Mode_Exit_Request\nSection 8.3.3.23.2.1\nPE_DFP_VDM_Mode_Exit_ACKed\nSection 8.3.3.23.2.2\nUFP Structure VDM\nUFP Structured VDM Enter Mode\nPE_UFP_VDM_Evaluate_Mode_Entry\nSection 8.3.3.24.1.1\nPE_UFP_VDM_Mode_Entry_ACK\nSection 8.3.3.24.1.2\nPE_UFP_VDM_Mode_Entry_NAK\nSection 8.3.3.24.1.3\nUFP Structured VDM Exit Mode\nPE_UFP_VDM_Mode_Exit\nSection 8.3.3.24.2.1\nPE_UFP_VDM_Mode_Exit_ACK\nSection 8.3.3.24.2.2\nPE_UFP_VDM_Mode_Exit_NAK\nSection 8.3.3.24.2.3\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":973,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 973\nCable Plug Specific\nCable Ready\nPE_CBL_Ready\nSection 8.3.3.25.1.1\nMode Entry\nPE_CBL_Evaluate_Mode_Entry\nSection 8.3.3.25.4.1.1\nPE_CBL_Mode_Entry_ACK\nSection 8.3.3.25.4.1.2\nPE_CBL_Mode_Entry_NAK\nSection 8.3.3.25.4.1.3\nMode Exit\nPE_CBL_Mode_Exit\nSection 8.3.3.25.4.2.1\nPE_CBL_Mode_Exit_ACK\nSection 8.3.3.25.4.2.2\nPE_CBL_Mode_Exit_NAK\nSection 8.3.3.25.4.1.3\nCable Soft Reset\nPE_CBL_Soft_Reset\nSection 8.3.3.25.2.1.1\nCable Hard Reset\nPE_CBL_Hard_Reset\nSection 8.3.3.25.2.2.1\nDFP/VCONN Source Soft Reset or Cable Reset\nPE_DFP_VCS_CBL_Send_Soft_Reset\nSection 8.3.3.25.2.3.1\nPE_DFP_VCS_CBL_Send_Cable_Reset\nSection 8.3.3.25.2.3.2\nUFP/VCONN Source Soft Reset or Cable Reset\nPE_UFP_VCS_CBL_Send_Soft_Reset\nSection 8.3.3.25.2.4.1\nSource Startup Structured VDM Discover Identity\nPE_SRC_VDM_Identity_Request\nSection 8.3.3.25.3.1\nPE_SRC_VDM_Identity_ACKed\nSection 8.3.3.25.3.2\nPE_SRC_VDM_Identity_NAKed\nSection 8.3.3.25.3.3\nEPR Mode\nSource EPR Mode Entry\nPE_SRC_Evaluate_EPR_Mode_Entry\nSection 8.3.3.26.1.1\nPE_SRC_EPR_Mode_Entry_Ack\nSection 8.3.3.26.1.2\nPE_SRC_EPR_Mode_Discover_Cable\nSection 8.3.3.26.1.3\nPE_SRC_EPR_Mode_Evaluate_Cable_EPR\nSection 8.3.3.26.1.4\nPE_SRC_EPR_Mode_Entry_Succeeded\nSection 8.3.3.26.1.5\nPE_SRC_EPR_Mode_Entry_Failed\nSection 8.3.3.26.1.6\nSink EPR Mode Entry\nPE_SNK_Send_EPR_Mode_Entry\nSection 8.3.3.26.2.1\nPE_SNK_EPR_Mode_Wait_For_Response\nSection 8.3.3.26.2.2\nSource EPR Mode Exit\nPE_SRC_Send_EPR_Mode_Exit\nSection 8.3.3.26.3.1\nPE_SRC_EPR_Mode_Exit_Received\nSection 8.3.3.26.3.2\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":974,"text":"Page 974\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSink EPR Mode Exit\nPE_SNK_Send_EPR_Mode_Exit\nSection 8.3.3.26.4.1\nPE_SNK_EPR_Mode_Exit_Received\nSection 8.3.3.26.4.2\nBIST\nBIST Carrier Mode\nPE_BIST_Carrier_Mode\nSection 8.3.3.27.1.1\nBIST Carrier Mode\nPE_BIST_Test_Mode\nSection 8.3.3.27.2.1\nBIST Shared Capacity Test Mode\nPE_BIST_Shared_Capacity_Test_Mode\nSection 8.3.3.27.3.1\nUSB Type-C referenced states\nErrorRecovery\nSection 8.3.3.28.1\nTable 8.154  Policy Engine States\nState name\nReference\n","image_count":0,"table_count":2}
{"page":975,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 975\n9\n States and Status Reporting\n9.1\n  Overview\nThis chapter describes the Status reporting mechanisms for devices with data connections (e.g., D+/D- and or \nSSTx+/- and SSRx+/-). It also describes the corresponding USB state a device that supports USB PD Shall transition \nto as a result of changes to the USB PD state that the device is in. \nThis chapter does not define the System Policy or the System Policy Manager. That is defined in [UCSI]. In addition, \nthe Policies themselves are not described here; these are left to the implementers of the relevant products and \nsystems to define.\nAll PD Capable USB (PDUSB) Devices Shall report themselves as self-powered devices (over USB) when plugged \ninto a PD capable Port even if they are entirely powered from VBUS. However, there are some differences between \nPD and [USB 2.0] / [USB 3.2]; for example, the presence of VBUS alone does not mean that the device (Consumer) \nmoves from the USB Attached State to the USB Powered State. Similarly, the removal of VBUS alone does not move \nthe device (Consumer) from any of the USB states to the USB Attached State. See Section 9.1.2, \"Mapping to USB \nDevice States\" for details.\nPDUSB Devices Shall follow the PD requirements when it comes to suspend (see Section 6.4.1.2.1.2, \"USB Suspend \nSupported\"), configured, and operational power. The PD requirements when the device is configured or \noperational are defined in this section (see Table 9.4, \"PD Consumer Port Descriptor\"). \nNote:\nThe power requirements reported in the PD Consumer Port descriptor of the device Shall override the \npower draw reported in the bMaxPower field in the configuration descriptor. A PDUSB Device Shall \nreport zero in the bMaxPower field after successfully negotiating a mutually agreeable Explicit Contract \nand Shall disconnect and re-enumerate when it switches operation back to operating in standard [USB \n2.0], [USB 3.2], [USB4], [USB Type-C 2.4] or [USBBC 1.2]. When operating in [USB 2.0], [USB 3.2], [USB \nType-C 2.4] or [USBBC 1.2] mode it Shall report its power draw via the bMaxPower field.\nEach Provider and Consumer will have their own Local Policies which operate between Port Partners. An example \nof a typical PD system is shown in Figure 9.1, \"Example PD Topology\". This example consists of a Provider, \nConsumer/Providers and Consumers connected together in a tree topology. Between directly connected devices \nthere is both a flow of Power and also Communication consisting of both Status and Control information.\n","image_count":0,"table_count":1}
{"page":976,"text":"Page 976\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 9.1 Example PD Topology\nConsumer\nConsumer\nConsumer/\nProvider\nConsumer/\nProvider\nProvider\nAC/Battery\nAC/Battery\nPower\nPD Communication\nP/C P/C P/C\nP/C\nProvider/Consumer\n","image_count":0,"table_count":2}
{"page":977,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 977\nFigure 9.2, \"Mapping of PD Topology to USB\" shows how this same topology can be mapped to USB.\nFigure 9.2 Mapping of PD Topology to USB\nDevice\nDevice\nDevice\nRoot Hub\nAC/Battery\nAC/Battery\nPower\nPD Communication\nHub\n","image_count":0,"table_count":1}
{"page":978,"text":"Page 978\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nIn a USB based system, policy is managed by the host and communication of system level policy information is via \nstandard USB data line communication. This is a separate mechanism to the USB Power Delivery VBUS protocol \nwhich is used to manage Local Policy. When USB Communication is used, status information and control requests \nare passed directly between the System Policy Manager (SPM) on the host and the Provider or Consumer. See Figure \n9.3, \"Use of SPM in the PD System\".\nFigure 9.3 Use of SPM in the PD System\nStatus information comes from a Provider or Consumer to the SPM so it can better manage the resources on the host \nand provide feedback to the end user.\nReal systems will be a mixture of devices which in terms of power management support might have implemented \nPD, [USB 2.0], [USB 3.2], [USB4], [USB Type-C 2.4] or [USBBC 1.2] or they might even just be non-compliant \n“power sucking devices”. The level of communication of system status to the SPM will therefore not necessarily be \ncomprehensive. The aim of the status mechanisms described here is to provide a mechanism whereby each \nconnected entity in the system provides as much information as possible on the status of itself.\nInformation described in this section that is communicated to the SPM is as follows:\n\nVersions of USB Type-C®, PD and BC supported.\n\nCapabilities as a Provider/Consumer.\n\nCurrent operational state of each Port e.g. Standard, USB Type-C Current, BC, PD and Negotiated power \nlevel.\n\nStatus of AC or Battery Power for each PDUSB Device in the system.\nThe SPM can Negotiate with Providers or Consumers in the system in order to request a different Local Policy, or to \nrequest the amount of power to be delivered by the Provider to the Consumer. Any change in Local Policy could \nDevice\nDevice\nDevice\nHost\n(SPM)\nAC/Battery\nAC/Battery\nPower\nPD Communication\nUSB Communication\nHub\n","image_count":0,"table_count":1}
{"page":979,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 979\ntrigger a Re-negotiation of the Explicit Contract, using USB Power Delivery protocols, between a directly connected \nProvider and Consumer. A change in how much power is available can, for example, cause a Re-negotiation.\n9.1.1\n  PDUSB Device and Hub Requirements\nAll PDUSB Devices Shall return all relevant descriptors mentioned in this chapter. PDUSB Hubs Shall also support \na PD bridge as defined in [UCSI].\n","image_count":0,"table_count":1}
{"page":980,"text":"Page 980\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.1.2\n  Mapping to USB Device States\nAs mentioned in Section 9.1, \"Overview\" a PDUSB Device reports itself as a self-powered device. However, the device \nShall determine whether or not it is in the USB Attached State or USB Powered States as described in Figure 9.4, \n\"USB Attached to USB Powered State Transition\", Figure 9.5, \"Any USB State to USB Attached State Transition (When \noperating as a Consumer)\" and Figure 9.6, \"Any USB State to USB Attached State Transition (When operating as a \nProvider)\" All other USB states of the PDUSB Device Shall be as described in Chapter 9 of [USB 2.0] and [USB 3.2].\nFigure 9.4, \"USB Attached to USB Powered State Transition\" shows how a PDUSB Device determines when to \ntransition from the USB Attached State to the USB Powered State. USB Type-C Dead Battery operation does not \nrequire special handling since the default state at Attach or after a Hard Reset is that the USB Device is a Sink. \nFigure 9.4 USB Attached to USB Powered State Transition\nFigure 9.5, \"Any USB State to USB Attached State Transition (When operating as a Consumer)\" shows how a PDUSB \nDevice determines when to transition from the USB Powered State to the USB Attached State when the device is a \nConsumer. A PDUSB Device determines that it is performing a Power Role Swap as described in Section 8.3.3.19.3, \n\"Policy Engine in Source to Sink Power Role Swap State Diagram\" and Section 8.3.3.19.4, \"Policy Engine in Sink to \nSource Power Role Swap State Diagram\". See Section 7.1.5, \"Response to Hard Resets\" for additional information on \ndevice behavior during Hard Resets.\nVBUS\nPresent\nNo\nYes\nCan \nenumerate?\nYes\nDevice is a \nSource?\nAttached\nSink?\nUSB\nAttached\nYes\nDevice \nin Sink \nMode\nNo\nNegotiate \nenough \nPower?\nNo\nUSB\nPowered\nNo\nNo\nYes\nDevice in \nSource \nMode  (5V)\nYes\nHard \nReset\n","image_count":19,"table_count":1}
{"page":981,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 981\nFigure 9.5 Any USB State to USB Attached State Transition (When operating as a Consumer)\nFigure 9.6, \"Any USB State to USB Attached State Transition (When operating as a Provider)\" shows how a PDUSB \nDevice determines when to transition from the USB Powered State to the USB Attached State when the device is a \nProvider.\nFigure 9.6 Any USB State to USB Attached State Transition (When operating as a Provider)\nFigure 9.7, \"Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)\" shows how a \nPDUSB Device using the USB Type-C connector determines when to transition from the USB Powered State to the \nUSB Attached State after a Data Role Swap has been performed i.e., it has just changed from operation as a PDUSB \nHost to operation as a PDUSB Device. The Data Role Swap is described in Section 6.3.9, \"DR_Swap Message\". A Hard \nReset will also return a Sink acting as a PDUSB Host to PDUSB Device operation as described in Section 6.8.3, \"Hard \nReset\". See Section 7.1.5, \"Response to Hard Resets\" for additional information on device behavior during Hard \nResets.\nVBUS\nPresent\nYes\nNo\nSwapping \nPower\nRoles?\nAny USB \nState\nUSB\nAttached\nYes\nNo\nHard Reset\nand\nCan Operate\nHard Reset\nand\nCan’t Operate\nHard Reset\nand\nBus Powered\nLack of PD \ncomms?\nNo\nYes\nAny USB \nState\nUSB\nAttached\nLocal Power Source Lost\nHard \nReset\n","image_count":44,"table_count":1}
{"page":982,"text":"Page 982\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 9.7 Any USB State to USB Attached State Transition (After a USB Type-C Data Role Swap)\nVBUS\nPresent\nYes\nSwapping \nData\nRoles?\nAny USB \nState\nUSB\nAttached\nNo\nYes\nHard Reset\nChanges Data \nRole\n","image_count":36,"table_count":1}
{"page":983,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 983\n9.1.3\n  PD Software Stack\nFigure 9.8, \"Software stack on a PD aware OS\" gives an example of the software stack on a PD aware OS. In this stack \nwe are using the example of a system with an xHCI based controller. The USB Power Delivery hardware May or \nMay Not be a part of the xHC.\nFigure 9.8 Software stack on a PD aware OS\nClient Drivers\nClient Drivers\nClient Drivers\nUSB Driver Interface\nComposite Class Driver\nClient Drivers\nUSB Driver Interface\nHub Driver\nInternal Hub/Host Interface\nHost Controller Driver\nxHC Interface\nHost Controller\nPD xface\nPower Delivery\nSystem\nPolicy\nManager\n","image_count":0,"table_count":7}
{"page":984,"text":"Page 984\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.1.4\n  PDUSB Device Enumeration\nAs described earlier, a PDUSB Device acts as a self-powered device with some caveats with respect to how it \ntransitions from the USB Attached State to USB Powered State. Figure 9.9, \"Enumeration of a PDUSB Device\" gives a \nhigh-level overview of the enumeration steps involved due to this change. A PDUSB Device will first (Step1) interact \nwith the Power Delivery hardware and the Local Policy manager to determine whether or not it can get sufficient \npower to enumerate/operate.\nPD is likely to have established a Explicit Contract prior to enumeration. The SPM will be notified (Step 2) of the \nresult of this Negotiation between the Power Delivery hardware and the PDUSB Device. After successfully \nnegotiating a mutually agreeable Explicit Contract the device will signal a connect to the xHC. The standard USB \nenumeration process (Steps 3, 4 and 5) is then followed to load the appropriate driver for the function(s) that the \nPDUSB Device exposes.\nFigure 9.9 Enumeration of a PDUSB Device\nIf a PDUSB Device cannot perform its intended function with the amount of power that it can get from the Port it is \nconnected to, then the host system Should display a notification (on a PD aware OS) about the failure to provide \nsufficient power to the device. In addition, the device Shall follow the requirements listed in Section 8.2.5.2.1, \"Local \ndevice handling of mismatch\".\nClient Drivers\nClient Drivers\nClient Drivers\nUSB Driver Interface\nComposite Class Driver\nClient Drivers\nUSB Driver Interface\nHub Driver\nInternal Hub/Host Interface\nHost Controller Driver\nxHC Interface\nHost Controller\nPD xface\nPower Delivery\nSystem\nPolicy\nManager\n5\n4\n3\n2\n1\n","image_count":0,"table_count":9}
{"page":985,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 985\n9.2\n  PD Specific Descriptors\nA PDUSB Device Shall return all relevant descriptors mentioned in this section.\nThe device Shall return its capability descriptors as part of the device's Binary Object Store (BOS) descriptor set. \nTable 9.1, \"USB Power Delivery Type Codes\" lists the type of PD device capabilities.\nTable 9.1  USB Power Delivery Type Codes\nCapability Code\nValue\nDescription\nPOWER_DELIVERY_CAPABILITY\n06H\nDefines the various PD Capabilities of this device\nBATTERY_INFO_CAPABILITY\n07H\nProvides information on each Battery supported by the device\nPD_CONSUMER_PORT_CAPABILITY\n08H\nThe Consumer characteristics of a Port on the device\nPD_PROVIDER_PORT_CAPABILITY\n09H\nThe Provider characteristics of a Port on the device\n","image_count":0,"table_count":2}
{"page":986,"text":"Page 986\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.2.1\n  USB Power Delivery Capability Descriptor\nTable 9.2, \"USB Power Delivery Capability Descriptor\" details the fields in the USB POWER_DELIVERY_CAPABILITY \nDescriptor.\nTable 9.2  USB Power Delivery Capability Descriptor\nOffset\nField\nSize\nValue\nDescription\n0\nbLength\n1\nNumber\nSize of descriptor\n1\nbDescriptorType\n1\nConstant\nDEVICE CAPABILITY Descriptor type\n2\nbDevCapabilityType\n1\nConstant\nCapability type: POWER_DELIVERY_CAPABILITY\n3\nbReserved\n1\nReserved\nShall be set to zero.\n4\nbmAttributes\n4\nBitmap\nBitmap encoding of supported device level features. A value of one in \na bit location indicates a feature is supported; a value of zero \nindicates it is not supported. Encodings are:\nBit \nDescription\n0\nReserved. Shall be set to zero.\n1\nBattery Charging. This bit Shall be set to one to indicate this \ndevice supports [USBBC 1.2] as per the value reported in \nthe bcdBCVersion field.\n2\nUSB Power Delivery. This bit Shall be set to one to indicate \nthis device supports the USB Power Delivery Specification \nas per the value reported in the bcdPDVersion field.\n3\nProvider. This bit Shall be set to one to indicate this device \nis capable of providing power. This field is only Valid if Bit \n2 is set to one.\n4\nConsumer. This bit Shall be set to one to indicate that this \ndevice is a consumer of power. This field is only Valid if Bit \n2 is set to one.\n5\nThis bit Shall be set to 1 to indicate that this device supports \nthe feature CHARGING_POLICY.\nNote: Supporting the CHARGING_POLICY feature does not \nrequire a BC or PD mechanism to be implemented.\n6\nUSB Type-C Current. This bit Shall be set to one to indicate \nthis device supports power capabilities defined in[USB \nType-C 2.4] as per the value reported in the \nbcdUSBTypeCVersion field\n7\nReserved. Shall be set to zero.\n15:8\nbmPowerSource. At least one of the following bits 8, 9 and \n14 Shall be set to indicate which power sources are \nsupported.\nBit\nDescription\n8\nAC Supply\n9\nBattery\n10\nOther\n13:11\nNumBatteries. This field Shall only be Valid when \nthe Battery field is set to one and Shall be used to \nreport the number of batteries in the device.\n14\nUses VBUS\n15\nReserved and Shall be set to zero.\n13:16\nReserved. Shall be set to zero.\n","image_count":0,"table_count":2}
{"page":987,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 987\n9.2.2\n  Battery Info Capability Descriptor\nA PDUSB Device Shall support the capability descriptor shown in Table 9.3, \"Battery Info Capability Descriptor\" if it \nreported that one of its power sources was a Battery in the bmPowerSource field in its Power Deliver Capability \nDescriptor. It Shall return one BATTERY_INFO_CAPABILITY Descriptor per Battery it supports.\n8\nbcdBCVersion\n2\nBCD\nBattery Charging Specification Release Number in Binary-Coded \nDecimal (e.g., V1.20 is 120H). This field Shall only be Valid if the \ndevice indicates that it supports [USBBC 1.2] in the bmAttributes \nfield.\n10\nbcdPDVersion\n2\nBCD\nUSB Power Delivery Specification Release Number in Binary-Coded \nDecimal. This field Shall only be Valid if the device indicates that it \nsupports PD in the bmAttributes field.\n12\nbcdUSBTypeCVersion\n2\nBCD\nUSB Type-C Specification Release Number in Binary-Coded Decimal. \nThis field Shall only be Valid if the device indicates that it supports \nUSB Type-C in the bmAttributes field.\nTable 9.3  Battery Info Capability Descriptor\nOffset\nField\nSize\nValue\nDescription\n0\nbLength\n1\nNumber\nSize of descriptor\n1\nbDescriptorType\n1\nConstant\nDEVICE CAPABILITY Descriptor type\n2\nbDevCapabilityType\n1\nConstant\nCapability type: BATTERY_INFO_CAPABILITY\n3\niBattery\n1\nIndex\nIndex of string descriptor Shall contain the user-friendly \nname for this Battery.\n4\niSerial \n1\nIndex\nIndex of string descriptor Shall contain the Serial \nNumber String for this Battery.\n5\niManufacturer\n1\nIndex\nIndex of string descriptor Shall contain the name of the \nManufacturer for this Battery.\n6\nbBatteryId\n1\nNumber\nValue Shall be used to uniquely identify this Battery in \nstatus Messages.\n7\nbReserved\n1\nNumber\nReserved and Shall be set to zero.\n8\ndwChargedThreshold\n4\nmWh\n Shall contain the Battery charge value above which this \nBattery is considered to be fully charged but not \nnecessarily “topped off.”\n12\ndwWeakThreshold\n4\nmWh\nShall contain the minimum charge level of this Battery \nsuch that above this threshold, a device can be assured \nof being able to power up successfully (see [USBBC \n1.2]).\n16\ndwBatteryDesignCapacity\n4\nmWh\nShall contain the design capacity of the Battery.\n20\ndwBatteryLastFullchargeCapacity\n4\nmWh\nShall contain the maximum capacity of the Battery \nwhen fully charged.\nTable 9.2  USB Power Delivery Capability Descriptor\nOffset\nField\nSize\nValue\nDescription\n","image_count":0,"table_count":3}
{"page":988,"text":"Page 988\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.2.3\n  PD Consumer Port Capability Descriptor\nA PDUSB Device Shall support the PD_CONSUMER_PORT_CAPABILITY descriptor shown in Table 9.4, \"PD \nConsumer Port Descriptor\" if it is a Consumer.\nTable 9.4  PD Consumer Port Descriptor\nOffset\nField\nSize\nValue\nDescription\n0\nbLength\n1\nNumber\nSize of descriptor\n1\nbDescriptorType\n1\nConstant\nDEVICE CAPABILITY Descriptor type\n2\nbDevCapabilityType\n1\nConstant\nCapability type: PD_CONSUMER_PORT_CAPABILITY\n3\nbReserved\n1\nNumber\n Reserved and Shall be set to zero.\n4\nbmCapabilities\n2\nBitmap\nCapability: This field Shall indicate the specification the \nConsumer Port will operate under.\nBit\nDescription\n0\nBattery Charging (BC)\n1\nUSB Power Delivery (PD)\n2\nUSB Type-C Current\n15:3\nReserved and Shall be set to zero.\n6\nwMinVoltage\n2\nNumber\nShall contain the minimum voltage in 50mV units that this \nConsumer is capable of operating at.\n8\nwMaxVoltage\n2\nNumber\nShall contain the maximum voltage in 50mV units that this \nConsumer is capable of operating at.\n10\nwReserved\n2\nNumber\n Reserved and Shall be set to zero.\n12\ndwMaxOperatingPower\n4\nNumber\nShall contain the maximum power in 10mW units this \nConsumer can draw when it is in a steady state operating mode.\n16\ndwMaxPeakPower\n4\nNumber\nShall contain the maximum power in 10mW units this \nConsumer can draw for a short duration of time \n(dwMaxPeakPowerTime) before it falls back into a steady state.\n20\ndwMaxPeakPowerTime\n4\nNumber\nShall contain the time in 100ms units that this Consumer can \ndraw peak current.\nA device Shall set this field to 0xFFFF if this value is unknown.\n","image_count":0,"table_count":2}
{"page":989,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 989\n9.2.4\n  PD Provider Port Capability Descriptor\nA PDUSB Device Shall support the PD_PROVIDER_PORT_CAPABILITY descriptor shown in Table 9.5, \"PD Provider \nPort Descriptor\" if it is a Provider.\nTable 9.5  PD Provider Port Descriptor\nOffset\nField\nSize\nValue\nDescription\n0\nbLength\n1\nNumber\nSize of descriptor\n1\nbDescriptorType\n1\nConstant\nDEVICE CAPABILITY Descriptor type\n2\nbDevCapabilityType\n1\nConstant\nCapability type: PD_PROVIDER_PORT_CAPABILITY\n3\nbReserved\n1\nNumber\n Reserved and Shall be set to zero.\n4\nbmCapabilities\n2\nBitmap\nCapability: This field Shall indicate the specification the \nProvider Port will operate under.\nBit\nDescription\n0\nBattery Charging (BC)\n1\nUSB Power Delivery (PD)\n2\nUSB Type-C Current\n15:3\nReserved and Shall be set to zero.\n6\nbNumOfPDObjects\n1\nNumber\nShall indicate the number of Power Data Objects.\n7\nbReserved\n1\nNumber\n Reserved and Shall be set to zero.\n8\nwPowerDataObject1\n4\nBitmap\nShall contain the first Power Data Object supported by this \nProvider Port. See Section 6.4.1, \"Capabilities Message\" for \ndetails of the Power Data Objects.\n...\n...\n...\n...\n...\n4*(N+1)\nwPowerDataObjectN\n4\nBitmap\nShall contain the 2nd and subsequent Power Data Objects \nsupported by this Provider Port. See Section 6.4.1, \"Capabilities \nMessage\" for details of the Power Data Objects.\n","image_count":0,"table_count":2}
{"page":990,"text":"Page 990\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.3\n  PD Specific Requests and Events\nA PDUSB Device that is compliant to this specification Shall support the Battery related requests if it has a Battery.\nA PDUSB Hub that is compliant to this specification Shall support a USB PD Bridge as described in [UCSI] \nirrespective of whether the PDUSB Hub is a Provider, a Consumer, or both.\n9.3.1\n  PD Specific Requests\nPD defines requests to which PDUSB Devices Shall respond as outlined in Table 9.6, \"PD Requests\". All Valid \nrequests in Table 9.6, \"PD Requests\" Shall be implemented by PDUSB Devices.\nTable 9.7, \"PD Request Codes\" gives the bRequest values for Commands that are not listed in the hub/device \nframework chapters of [USB 2.0], [USB 3.2].\nTable 9.8, \"PD Feature Selectors\" gives the Valid feature selectors for the PD class. Refer to Section 9.4.2.1, \n\"BATTERY_WAKE_MASK Feature Selector\", and Section 9.4.2.2, \"CHARGING_POLICY Feature Selector\" for a description of the \nfeatures.\nTable 9.6  PD Requests\nRequest\nbmRequestType\nbRequest\nwValue\nwIndex\nwLength\nData\nGetBatteryStatus 10000000B GET_BATTERY_STATUS\nZero\nBattery ID\nEight\nBattery Status\nSetPDFeature\n00000000B\nset_feature\nFeature Selector Feature Specific\nZero\nNone\nTable 9.7  PD Request Codes\nbRequest\nValue\nGET_BATTERY_STATUS\n21\nTable 9.8  PD Feature Selectors\nFeature Selector\nRecipient\nValue\nBATTERY_WAKE_MASK\nDevice\n40\nCHARGING_POLICY\nDevice\n54\n","image_count":0,"table_count":4}
{"page":991,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 991\n9.4\n  PDUSB Hub and PDUSB Peripheral Device Requests\n9.4.1\n  GetBatteryStatus\nThe request shown in Table 9.9, \"Get Battery Status Request\" returns the current status of the Battery in a PDUSB \nHub/Peripheral, with Battery Status information as shown in Table 9.10, \"Battery Status Structure\".\nTable 9.9  Get Battery Status Request\nbmRequestType\nbRequest\nwValue\nwIndex\nwLength\nData\n10000000B\nGET_BATTERY_STATUS\nZero\nBattery ID\nEight\nBattery Status\nTable 9.10  Battery Status Structure\nOffset\nField\nSize\nValue\nDescription\n0\nbBatteryAttributes\n1\nNumber\nShall indicate whether a Battery is installed and \nwhether this is charging or discharging.\nValue\nDescription\n0\nThere is no Battery\n1\nThe Battery is charging\n2\nThe Battery is discharging\n3\nThe Battery is neither discharging nor charging\n255...4\nReserved and Shall Not be used\n1\nbBatterySOC\n1\nNumber\nShall indicate the Battery State of Charge given as \npercentage value from Battery Remaining Capacity.\n2\nbBatteryStatus\n1\nNumber\nIf a Battery is present Shall indicate the present status \nof the Battery.\nValue\nDescription\n0\nNo error\n1\nBattery required and not present\n2\nBattery non-chargeable/wrong chemistry\n3\nOver-temp shutdown\n4\nOver-voltage shutdown\n5\nOver-current shutdown\n6\nFatigued Battery\n7\nUnspecified error\n255...8\nReserved and Shall Not be used\n","image_count":0,"table_count":3}
{"page":992,"text":"Page 992\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nIf wValue or wLength are not as specified above, then the behavior of the PDUSB Device is not specified.\nIf wIndex refers to a Battery that does not exist, then the PDUSB Device Shall respond with a Request Error.\nIf the PDUSB Device is not configured, the PDUSB Hub's response to this request is undefined.\nIf the PDUSB Hub is not configured, the PDUSB Hub's response to this request is undefined.\n9.4.2\n  SetPDFeature\nThe request shown in Table 9.11, \"Set PD Feature\" sets the value requested in the PDUSB Hub/Peripheral.\nSetting a feature enables that feature or starts a process associated with that feature; see Table 9.8, \"PD Feature \nSelectors\" for the feature selector definitions. Features that May be set with this request are:\n\nBATTERY_WAKE_MASK.\n\nCHARGING_POLICY.\n3\nbRemoteWakeCapStatus\n1\nBitmap\nIf the device supports remote wake, then the device \nShall support Battery Remote wake events. The \ndefault value for the Remote wake events Shall be \nturned off (set to zero) and can be enable/disabled by \nthe host as required. If set to one the device Shall \ngenerate a wake event when a change of status \noccurs. See Section 9.4.2, \"SetPDFeature\" for more \ndetails.\nValue\nDescription\n0\nBattery present event\n1\nCharging flow\n2\nBattery error\n7:3\nReserved and Shall be set to zero\n4\nwRemainingOperatingTime\n2\nNumber\nShall contain the operating time (in minutes) until the \nWeak Battery threshold is reached, based on Present \nBattery Strength and the device's present operational \npower needs.\nNote: This value Shall exclude any additional power re-\nceived from charging.\nA Battery that is not capable of returning this information \nShall return a value of 0xFFFF.\n6\nwRemainingChargeTime\n2\nNumber\nShall contain the remaining time (in minutes) until the \nCharged Battery threshold is reached based on Present \nBattery Strength, charging power and the device's present \noperational power needs. Value Shall only be Valid if the \nCharging Flow is \"Charging\".\nA Battery that is not capable of returning this information \nShall return a value of 0xFFFF.\nTable 9.11  Set PD Feature\nbmRequestType\nbRequest\nwValue\nwIndex\nwLength\nData\n00000000B\nset_ feature\nFeature Selector\nFeature Specific\nZero\nNone\nTable 9.10  Battery Status Structure\nOffset\nField\nSize\nValue\nDescription\n","image_count":0,"table_count":3}
{"page":993,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 993\n9.4.2.1\n  BATTERY_WAKE_MASK Feature Selector\nWhen the feature selector is set to BATTERY_WAKE_MASK, then the wIndex field is structured as shown in \nTable 9.12, \"Battery Wake Mask\".\nThe SPM May Enable or Disable the wake events associated with one or more of the above events by using this \nfeature.\nIf the PDUSB Hub is not configured, the PDUSB Hub's response to this request is undefined.\nTable 9.12  Battery Wake Mask\nBit\nDescription\n0\nBattery Present: When this bit is set then \nthe PDUSB Device Shall generate a wake \nevent if it detects that a Battery has been \ninserted.\n1\nCharging Flow: When this bit is set then the \nPDUSB Device Shall generate a wake event if \nit detects that a Battery switched from \ncharging to discharging or vice versa.\n2\nBattery Error: When this bit is set then the \nPDUSB Device Shall generate a wake event if \nthe Battery has detected an error condition.\n15:3\n Reserved and Shall Not be used\n","image_count":0,"table_count":2}
{"page":994,"text":"Page 994\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n9.4.2.2\n  CHARGING_POLICY Feature Selector\nWhen the feature selector is set to CHARGING_POLICY, the wIndex field Shall be set to one of the values defined in \nTable 9.13, \"Charging Policy Encoding\". If the device is using USB Type-C Current above the default value or is using \nPD then this feature setting has no effect and the rules for power levels specified in the [USB Type-C 2.4] or USB \nPD specifications Shall apply.\nThis is a Valid Command for the PDUSB Hub/Peripheral in the Address or Configured USB states. Further, it is only \nValid if the device reports a USB PD capability descriptor in its BOS descriptor and Bit 5 of the bmAttributes in that \ndescriptor is set to 1. The device will go back to the wIndex default value of 0 whenever it is reset.\nTable 9.13  Charging Policy Encoding\nValue\nDescription\n00H\nThe device Shall follow the default current limits as defined in the USB 2.0 or USB 3.1 specification, or \nas negotiated through other USB mechanisms such as BC. \nThis is the default value.\n01H\nThe Device May draw additional power during the unconfigured and suspend states for the purposes \nof charging.\nFor charging the device itself, the device Shall limit its current draw to the higher of these two values:\nICCHPF as defined in the USB 2.0 or USB 3.1 specification, regardless of its USB state.\nCurrent limit as negotiated through other USB mechanisms such as BC.\n02H\nThe Device May draw additional power during the unconfigured and suspend states for the purposes \nof charging.\nFor charging the device itself, the device Shall limit its current draw to the higher of these two values:\nICCLPF as defined in the USB 2.0 or USB 3.1 specification, regardless of its USB state.\nCurrent limit as negotiated through other USB mechanisms such as BC.\n03H\nThe device Shall Not consume any current for charging the device itself regardless of its USB state.\n04H-FFFFH\nReserved and Shall Not be used\n","image_count":0,"table_count":2}
{"page":995,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 995\n10\n Power Rules\n10.1\n  Introduction\nThe flexibility of power provision on USB Type-C® is expected to lead to power adapter re-use and the increasingly \nwidespread provision of USB power outlets in domestic and public places and in transport of all kinds. \nEnvironmental considerations could result in unbundled power adapters. Rules are needed to avoid \nincompatibility between the Sources and the Sinks they are used to power, in order to avoid user confusion and to \nmeet user expectations. This section specifies a set of rules that Sources and Sinks Shall follow. These rules provide \na simple and consistent user experience. \nThe PDP Rating is a manufacturer declared value placed on packaging to help the user understand the capabilities \nof a Charger or the size of Charger required to power their device. For PDP values of 10W and above the PDP Shall \nbe declared as an integer number of Watts. For PDP values less than 10W, the PDP Shall be declared in increments \nof 0.5W.\nThe Source Power Rules define a PDP to provide a simple way to tell the user about the capabilities of their power \nadapter or device. PDP Rating is akin to the wattage rating of a light bulb - bigger numbers mean more capability. \nThe Sink Power Rules define a PDP to provide a simple way to tell the user which Sources will provide adequate \npower for their Sink.\n10.2\n  Source Power Rules\nThe Source Power Rules defined in this section include both Normative and Optional rules. For all of the defined \nrules, the capabilities a Source exposes are based on the Port Maximum PDP, or if power constrained, the Port \nPresent PDP of the Port.\nFor a Guaranteed Capability Port, the Source Shall always include in every Source_Capabilities or \nEPR_Source_Capabilities Message sent to a Sink all the (A)PDOs that are defined by the Normative (and Optional \nwhen implemented) rules based on the Port’s Port Maximum PDP and Mode of operation (i.e., SPR Mode or EPR \nMode).\nFor a Managed Capability Port, except before the First Explicit Contract or before the Explicit Contract after the Port \nPresent PDP changes on a Shared Capacity Charger Port, the Source Shall always include in every \nSource_Capabilities or EPR_Source_Capabilities Message sent to a Sink all the (A)PDOs that are defined by the \nNormative (and Optional when implemented) rules based on the Port’s Port Present PDP and Mode of operation \n(i.e., SPR Mode or EPR Mode). After the First Explicit Contract, this requirement assures that the attached Sink will \nalways know what voltages (or voltage modes) are presently available from the Source.\nIn order to meet the expectations of the user, the Maximum Current/Power in the Source Capabilities PDO or APDO \nfor Sources with a PDP Rating of x Watts Shall be as follows:\n\nMaximum current for Normative and Optional Fixed Supply/Variable Supply PDOs Shall be either \nRoundUp(x/voltage) or RoundDown(x/voltage) to the nearest 10mA.\n\nMaximum current for SPR Programmable Power Supply APDOs Shall be as defined in Table 10.10, \"SPR \nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\".\nNote:\nWhen the Constant Power bit is set in the APDO, the programmable power supply's output current is as \ndefined in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum \nPDP\" however the programmable power supply will limit its output current so that the product of its \nactual output voltage times the output current does not exceed the PDP.\n\nIf a 9V Prog, 15V Prog or 20V Prog Programmable Power Supply APDO is Advertised when not required \nby Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\", \nthen the maximum current Shall be RoundDown (x/Prog Voltage) to the nearest 50mA. When the PPS \nPower Limited bit is clear the Source Shall provide this current at Maximum Voltage.\n\nMaximum power for Optional Battery Supply PDOs Shall be ≤ x.\n","image_count":0,"table_count":1}
{"page":996,"text":"Page 996\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10.2.1\n  Source Power Rule Considerations\nThe Source Power Rules are designed to:\n\nEnsure the PDP Rating (PDP) of an adapter specified in watts explicitly defines the voltages and \ncurrents at each voltage the adapter supports.\n\nEnsure that adapters with a large PDP Ratings are always capable of providing the power to devices \ndesigned for use with adapters with a smaller PDP Rating.\n\nEnable an ecosystem of adapters that are inter-operable with the devices in the ecosystem.\nThe considerations that lead to the Source Power Rules are based are summarized in Table 10.1, \"Considerations for \nSources\".\nTable 10.1  Considerations for Sources\nConsiderations\nRationale\nConsequence\nSimple to identify capability\nA user going into an electronics retailer \nknows what they need\nCannot have a complex identification \nscheme \nHigher power Sources are a superset of \nsmaller ones\nBigger is always better in user’s eyes – don’t \nwant a degradation in performance\nHigher power Sources do everything smaller \nones do\nUnambiguous Source definitions\nSources with the same power rating but \ndifferent VI combinations might not inter-\noperate\nTo avoid user confusion, any given power \nrating has a single definition\nA range of power ratings\nUsers and companies will want freedom to \npick appropriate Source ratings\nFixed profiles at specific power levels don’t \nprovide adequate flexibility, e.g., profiles as \ndefined in previous versions of PD.\n5V@3A USB Type-C Source is defined by \n[USB Type-C 2.4]\n5V@3A USB Type-C Source is considered\nAll > 15W adapters must support 5V@3A or \nsuperset consideration is violated\nMaximize 3A cable utilization\n3A cables will be ubiquitous\nIncrease to maximum voltage (20V) before \nincreasing current beyond 3A\nOptimize voltage rail count\nMore rails are a higher burden for Sources, \nparticularly in terms of testing\n5V is a basic USB requirement. 48V provides \nthe maximum capability. \nSome Sources are not able to provide \nsignificant power\nSome small Battery-operated Sources e.g., \nmobile devices, are able to provide more \npower directly from their Battery than from \na regulated 5V supply\nIn addition to the minimal 5V \nAdvertisements are able to Advertise more \npower from their Battery\nSome Sources share power between \nmultiple Ports (Hubs and multi-Port \nChargers)\nHubs and multi-port Chargers have to be \nsupported\nSee Section 10.3, \"Sink Power Rules\"\n","image_count":0,"table_count":2}
{"page":997,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 997\n10.2.2\n  Normative Voltages and Currents\nThe voltages and currents an SPR Source with a PDP Rating of x Watts Shall support are as defined in Table 10.2, \n\"SPR Normative Voltages and Minimum Currents\".\nTable 10.2  SPR Normative Voltages and Minimum Currents\nPort Maximum \nPDP Rating (W)\n5V Fixed\n9V Fixed\n15V Fixed\n20V Fixed\nSPR AVS\n0.5 ≤ x ≤ 15\n(PDP/5)A3\n-\n-\n-\n-\n15 < x ≤ 27\n3A2\n(PDP/9)A3\n-\n-\n-\n27 < x ≤ 45\n3A2\n3A2\n(PDP/15)A3\n-\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A\n45 < x ≤ 60\n3A2\n3A2\n3A2\n(PDP/20)A3\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A\n60 < x ≤ 100\n3A2\n3A2\n3A2\n(PDP/20)A1, 3\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4, 5\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A1, 5\n1)\nRequires a 5A cable.\n2)\nThe Fixed Supply PDOs Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundUp (PDP/voltage) to the \nnearest 10mA. Requires a 5A cable if over 3A is Advertised.\n3)\nThe Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown (PDP/voltage) or RoundUp (PDP/voltage) to the \nnearest 10mA.\n4)\nSPR AVS current for this voltage range is the maximum current as Advertised by the 15V Fixed Supply PDO. This current can be higher \nthan 3A (refer to Note 2). Requires a 5A cable if over 3A is Advertised.\n5)\nThe Sink is allowed to request up to the 20V Fixed Supply Max Current when the requested voltage is 15.0V.\n","image_count":0,"table_count":2}
{"page":998,"text":"Page 998\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nSPR Managed Capability Ports when power constrained are defined to offer Valid (A)PDOs based on  the port's Port \nMaximum PDP (as per Table 10.2, \"SPR Normative Voltages and Minimum Currents\") at lower Port Present PDP \n(as per Table 10.3, \"SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\") because these \nvoltages would otherwise be available if the Managed Capability Port power hadn't been constrained.\nTable 10.3  SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\nPort Present \nPDP (W)\n5V Fixed\n9V Fixed\n15V Fixed\n20V Fixed\nSPR AVS with Max Voltage of 15V or \n20V per Table 10.26\n5 < x ≤ 15\n(PDP/5)A3\n(PDP/9)A3,7, 8\n(PDP/15)A3,7,8\n(PDP/20)A3,7,8\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4, 6, 8\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A6,8\n15 < x ≤ 27\n3A2\n(PDP/9)A3\n(PDP/15)A3,7\n(PDP/20)A3,7\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A6\n27 < x ≤ 45\n3A2\n3A2\n(PDP/15)A3\n45 < x ≤ 60\n3A2\n3A2\n3A2\n(PDP/20)A3\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A\n60 < x ≤ 100\n3A2\n3A2\n3A2\n(PDP/20)A1, 3\n(9V – 15V):\n\n(15V Fixed Supply Max Current) A4, 5\n(15V – 20V):\n\n(20V Fixed Supply Max Current) A1, 5\n1)\nRequires a 5A cable.\n2)\nThe Fixed Supply PDOs Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundUp (PDP/voltage) to the \nnearest 10mA. Requires a 5A cable if over 3A is Advertised.\n3)\nThe Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown (PDP/voltage) or RoundUp (PDP/voltage) to the \nnearest 10mA.\n4)\nSPR AVS current for this voltage range is the maximum current as Advertised by the 15V Fixed Supply PDO. This current can be higher \nthan 3A (refer to Note 2). Requires a 5A cable if over 3A is Advertised.\n5)\nThe Sink is allowed to request up to the 20V Fixed Supply Max Current when the requested voltage is 15.0V.\n6)\nThe Max Voltage for SPR AVS is what is allowed by Table 10.2, \"SPR Normative Voltages and Minimum Currents\" based on the port's \nPort Maximum PDP.\n7)\nThis SPR Fixed Supply voltage is only available if allowed by Table 10.2, \"SPR Normative Voltages and Minimum Currents\" based on the \nport's Port Maximum PDP.\n8)\nSPR Sources May offer (A)PDOs at this Port Present PDP\n","image_count":0,"table_count":2}
{"page":999,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 999\nIn reference to Table 10.3, \"SPR Source Capabilities When Port Present PDP is less than Port Maximum PDP\", \nTable 10.4, \"SPR Source Port Present PDP less than Port Maximum PDP Examples\" gives examples of which SPR \ncapabilities are Advertised based on Port Present PDP on a Managed Capability Port and the port's Port Maximum \nPDP and cable's current rating.\nTable 10.4  SPR Source Port Present PDP less than Port Maximum PDP Examples\nPort Maximum PDP \nand Cable Rating\nPort Present \nPDP\nOffers\n5V Fixed\n9V Fixed\n15V Fixed\n20V Fixed\nSPR AVS\n80W / 5A\n65W\n3A1\n3A1\n3A1\n3.25A\n9V – 15V: 3A\n15V – 20V: 3.25A\n80W / 5A\n40W\n3A1\n3A1\n2.67A\n2A\n9V – 15V: 2.67A\n15V – 20V: 2A\n80W / 3A\n40W\n3A1\n3A\n2.67A\n2A\n9V – 15V: 2.67A\n15V – 20V: 2A\n40W / 5A\n40W\n3A1\n3A1\n2.67A\nNot Offered\n9V – 15V: 2.67A\n40W / 3A\n40W\n3A1\n3A\n2.67A\nNot Offered\n9V – 15V: 2.67A\n80W / 5A\n20W\n3A1\n2.22A\n1.33A\n1A\n9V – 15V: 1.33A\n15V – 20V: 1A\n80W / 3A\n20W\n3A1\n2.22A\n1.33A\n1A\n9V – 15V: 1.33A\n15V – 20V: 1A\n40W / 5A\n20W\n3A1\n2.22A\n1.33A\nNot Offered\n9V – 15V: 1.33A\n40W / 3A\n20W\n3A1\n2.22A\n1.33A\nNot Offered\n9V – 15V: 1.33A\n80W/3A\n15W\n3A\n1.67A2\n1A2\n0.75A2\n9V - 15V: 1A2\n15V - 20V: 0.75A2\n40W/3A\n15W\n3A\n1.67A2\n1A2\nNot offered\n9V - 15V: 1A2\n1)\nThe Fixed Supply PDO Maximum Current field will Advertise at least 3A but May Advertise up to RoundUp (PDP/voltage) to the \nnearest 10mA.\n2)\nThese Capabilities are not required but may be offered at this Port Present PDP.\n","image_count":0,"table_count":2}
{"page":1000,"text":"Page 1000\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10.2.2.1\n  Fixed Supply PDOs\nFigure 10.1, \"SPR Source Power Rule Illustration for Fixed Supply PDOs\" illustrates the minimum current that an SPR \nSource Shall support at each voltage for a given PDP Rating for Fixed Supply PDOs.\nNote:\nNot illustrated are that currents higher than 3A are allowed to be offered up to a limit of 5A given that a \n5A cable is detected by the Source and the voltage times current remains within the Source PDP Rating.\nFigure 10.1 SPR Source Power Rule Illustration for Fixed Supply PDOs\nFigure 10.2, \"SPR Source Power Rule Example For Fixed Supply PDOs\" shows an example of an adapter with a rating \nat 50W. The adapter is required to support 20V at 2.5A, 15V at 3A, 9V at 3A and 5V at 3A.\n0\n1\n2\n3\n4\n5\n6\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n5V\n9V\n15V\n5 + 9V\n5 + 9 + 15V\n20V\n7.5W\n15W\n27W\n45W\nSource PDP Rating (W)\nCurrent (A)\nRP1\nRP2\n20V\n5 + 9 + 15V\n","image_count":0,"table_count":2}
{"page":1001,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1001\nFigure 10.2 SPR Source Power Rule Example For Fixed Supply PDOs\nTable 10.5, \"Fixed Supply PDO - Source 5V\", Table 10.6, \"Fixed Supply PDO - Source 9V\", Table 10.7, \"Fixed Supply PDO \n- Source 15V\" and Table 10.8, \"Fixed Supply PDO - Source 20V\" show the Fixed Supply PDOs that Shall be supported \nfor each of the Normative voltages defined in Table 10.2, \"SPR Normative Voltages and Minimum Currents\".\nTable 10.5  Fixed Supply PDO - Source 5V\nBit(s)\nDescription\nB31…30\nFixed Supply\nB29\nDual-Role Power\nB28\nUSB Suspend Supported\nB27\nUnconstrained Power\nB26\nUSB Communications Capable\nB25\nDual-Role Data\nB24\nUnchunked Extended Messages Supported\nB23\nEPR Capable\nB22\nReserved – Shall be set to zero.\nB21…20\nPeak Current\nB19…10\n5V\nB9...0\nCurrent based on PDP\nPDP Rating (x)\nCurrent (A)\n0.5 ≤ x ≤ 15\nx ÷ 5\n15 < x ≤ 25\n3 ≤ A ≤ x ÷ 5\n25 < x ≤ 100\n3 ≤ A ≤ 5 \n0\n1\n2\n3\n4\n5\n6\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n5V\n9V\n15V\n5 + 9V\n5 + 9 + 15V\n20V\n7.5W\n15W\n27W\n45W\nSource PDP Rating (W)\nCurrent (A)\nRP1\nRP2\n50W\n20V\n5 + 9 + 15V\n","image_count":0,"table_count":3}
{"page":1002,"text":"Page 1002\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nMore current May be offered in the PDOs when Optional voltages/currents are supported and a 5A cable is being \nused (see Section 10.2.3, \"Optional Voltages/Currents\").\nTable 10.6  Fixed Supply PDO - Source 9V\nBit(s)\nDescription\nB31…30\nFixed Supply \nB29...22\nReserved – Shall be set to zero.\nB21…20\nPeak Current\nB19…10\n9V\nB9...0\nCurrent based on PDP\nPDP Rating (x)\nCurrent (A)\n0.5 ≤ x ≤ 15\nPDO not required\n15 < x ≤ 27\nx ÷ 9\n27 < x ≤ 45\n3 ≤ A ≤ x ÷ 9\n45 < x ≤ 100\n3 ≤ A ≤ 5 \nTable 10.7  Fixed Supply PDO - Source 15V\nBit(s)\nDescription\nB31…30\nFixed Supply \nB29...22\nReserved – Shall be set to zero.\nB21…20\nPeak Current\nB19…10\n15V\nB9...0\nCurrent based on PDP\nPDP Rating (x)\nCurrent (A)\n0.5 ≤ x ≤ 27\nPDO not required\n27 < x ≤ 45\nx ÷ 15\n45 < x ≤ 75\n3 ≤ A ≤ x ÷ 15\n75 < x ≤ 100\n3 ≤ A ≤ 5 \nTable 10.8  Fixed Supply PDO - Source 20V\nBit(s)\nDescription\nB31…30\nFixed Supply\nB29...22\nReserved – Shall be set to zero.\nB21…20\nPeak Current\nB19…10\n20V\nB9...0\nCurrent based on PDP\nPDP Rating (x)\nCurrent (A)\n0.5 ≤ x ≤ 45\nPDO not required\n45 < x ≤ 100\nx ÷ 20\n","image_count":0,"table_count":4}
{"page":1003,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1003\n10.2.2.2\n  SPR Adjustable Voltage Supply (AVS)\nFor SPR AVS, Figure 10.3, \"Valid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\", \nFigure 10.4, \"Valid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\" and Figure \n10.5, \"Valid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤ 100W\" illustrate the valid \noperating region for SPR AVS RDO requests in the ranges of 27W < PDP ≤ 45W, 45W < PDP ≤ 60W and 60W < PDP ≤ \n100W, respectively.\nFigure 10.3 Valid SPR AVS Operating Region for a Source advertising in the range of 27W < PDP ≤ 45W\nFigure 10.4 Valid SPR AVS Operating Region for a Source advertising in the range of 45W < PDP ≤ 60W\n0\n1\n2\n3\n4\n5\n6\n0\n15\n30\n45\n60\nRDO Current (A)\nRDO Voltage (V)\nInvalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP �����\nValid RDO Requests\n20V  \n9V\n15V Fixed PDO Max Current\n15V  \n0\n1\n2\n3\n4\n5\n6\n30\nRDO Current (A)\nRDO Voltage (V)\nInvalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP �����\nValid RDO Requests\n20V  \n9V\n15V Fixed PDO Max Current  \n15V  \n20V Fixed PDO Max Current\n(Minimum of 3A)\n","image_count":13,"table_count":3}
{"page":1004,"text":"Page 1004\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 10.5 Valid SPR AVS Operating Region for a Source advertising in the range of 60W < PDP ≤ 100W\n10.2.2.2.1\n  SPR Adjustable Voltage Supply (AVS) Voltage Ranges\nTable 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\" shows the \nMinimum and Maximum Voltage for the SPR AVS ranges.\nThe voltage output at the Source's connector Shall be +/-5% for both the Maximum Voltage and the Minimum \nVoltage.\nTable 10.9  SPR Adjustable Voltage Supply (AVS) Voltage Ranges\nAVS Voltage Range\n15V AVS\n20V AVS\nMaximum Voltage\n15V\n20V\nMinimum Voltage\n9V\n9V\n0\n1\n2\n3\n4\n5\n6\n30\nRDO Current (A)\nRDO Voltage (V)\nInvalid Requests\n(Crosshatched Area)\nValid Operating Region\nfor SPR AVS Sink Requests\nfor 27W < PDP �����\nValid RDO Requests\n20V  \n9V\n* At 15.0V, up to the (20V Fixed PDO \nCurrent)A is allowed\n15V*\n20V Fixed PDO Max Current\n15V Fixed PDO Max Current  \n","image_count":9,"table_count":3}
{"page":1005,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1005\n10.2.3\n  Optional Voltages/Currents\n10.2.3.1\n  Optional Normative Fixed, Variable and Battery Supply\nIn addition to the voltages and currents specified in Section 10.2.2, \"Normative Voltages and Currents\", an SPR \nSource that is optimized for use with a specific Sink or a specific class of Sinks May Optionally supply additional \nvoltages and increased currents. However, the Optional voltages Shall Not exceed 9V.\nOptional voltages Shall Not be implemented on EPR Source including for both SPR Mode and EPR Modes of \noperation. EPR versions of Variable Supply and Battery Supply PDOs are not defined and Shall Not be implemented, \nhowever SPR Variable Supply and Battery Supply PDOs are allowed in EPR Mode.\nWhile allowed, the use of Optional voltages and currents is not recommended as two Sources with the same PDP \nRating but not supporting the same Optional voltages and currents can behave differently thus confusing the user.\nSee Section 10.2, \"Source Power Rules\" for the rules that Shall apply to Optional PDOs in order to be consistent with \nthe declared PDP Rating and the Normative voltages and currents.\n10.2.3.2\n  Optional Normative SPR Programmable Power Supply\nThe voltages and currents a Programmable Power Supply with a PDP Rating of x Watts Shall support are as defined \nTable 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\".\nWhen Optional Programmable Power Supply APDOs are offered, the following requirements Shall apply:\n\nA Source that Advertises Optional Programmable Power Supply APDOs Shall Advertise the PDOs and \nAPDOs shown in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based on the Port \nMaximum PDP\".\n\nA Source Shall Advertise Optional Programmable Power Supply APDOs with Maximum Voltage and \nMinimum Voltages for nominal voltage as defined in Table 10.11, \"SPR Programmable Power Supply \nVoltage Ranges\". \n\nA Source Shall Not Advertise a Programmable Power Supply APDO that does not follow the Minimum \nVoltage and Maximum Voltage defined in Table 10.11, \"SPR Programmable Power Supply Voltage \nRanges\".\n\nIn no case Shall a Source Advertise a current that exceeds the Attached cable's current rating.\n\nThe Max Voltage Shall Not exceed 21V while in SPR Mode.\nTable 10.10  SPR Programmable Power Supply PDOs and APDOs based on the Port Maximum PDP\nPDP Maximum PDP \n(W)\nSPR Fixed and AVS\n9V Prog3\n15V Prog3\n20V Prog3\nx < 15W\nRequired per Table 10.2, \"SPR Normative Voltages \nand Minimum Currents\" (or Table 10.3, \"SPR \nSource Capabilities When Port Present PDP is less \nthan Port Maximum PDP\" when applicable)\n-\n-\n-\n15W\n-\n-\n-\n15 < x < 27W\n(PDP/9)A1\n-\n-\n27W\n3A\n-\n-\n27 < x < 45W\n3A2\n(PDP/15)A1\n-\n45W\n-\n3A\n-\n45 < x < 60W\n-\n3A2\n(PDP/20)A1\n60W\n-\n-\n3A\n60 < x < 100W\n-\n-\n(PDP/20)A1\n100W\n-\n-\n5A\n1)\nThe SPR PPS APDOs Maximum Current field Shall Advertise RoundDown (PDP/Prog Voltage) to the nearest 50mA.\n2)\nThe SPR PPS APDOs Maximum Current field Shall Advertise at least 3A, but May Advertise up to RoundDown(PDP/Prog Voltage) \nto the nearest 50mA.\n3)\nApplies to APDOs regardless of value of the PPS Power Limited bit.\n","image_count":0,"table_count":2}
{"page":1006,"text":"Page 1006\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10.2.3.2.1\n  SPR Programmable Power Supply Voltage Ranges\nThe SPR PPS Voltage ranges map to the Fixed Supply Voltages. For each fixed voltage there is a defined voltage range \nfor the matching SPR PPS APDO. Table 10.11, \"SPR Programmable Power Supply Voltage Ranges\" shows the \nMinimum and Maximum Voltage for the Programmable Power Supply that corresponds to the Fixed nominal \nvoltage.\nThe voltage output at the Source's connector Shall be +/-5% for both the Maximum Voltage and the Minimum \nVoltage.\n10.2.3.2.2\n  Examples of the use of SPR Programmable Power Supplies\nThe following examples illustrate what a power adapter that Advertises a particular PDP Rating May offer:\n1)\nPDP 27W implementation includes:\n\n5V @ 3A,\n\n9V @ 3A, and\n\n9V Prog @ 3A.\n2)\nPDP 36W implementation includes:\n\n5V @ 3A,\n\n9V @ 3A,\n\n15 @ 2.4A,\n\nSPR AVS with 9V - 15V @ 2.4A,\n\n9V Prog @ 3 A, and\n\n15V Prog @ 2.4A.\n3)\nPDP 36W implementation that Optionally includes higher current in the 9V Prog PPS:\n\n5V @ 3A,\n\n9V @ 3A,\n\n15 @ 2.4A,\n\nSPR AVS with 9V - 15V @ 2.4A,\n\n9V Prog @ >3A up to 4A (with a 5A cable) and 15V\n\nProg @ 2.4A.\n4)\nPDP 50W implementation includes:\n\n5V @ 3A,\n\n9V @ 3A,\n\n15 @ 3A,\n\n20V @ 2.5A,\nTable 10.11  SPR Programmable Power Supply Voltage Ranges\nFixed Nominal Voltage\n9V Prog\n15V Prog\n20V Prog\nMaximum Voltage\n11V\n16V\n21V\nMinimum Voltage\n5V\n5V\n5V\n","image_count":0,"table_count":2}
{"page":1007,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1007\n\nSPR AVS with 9V - 15V @ 3A & 15V - 20V @ 2.5A,\n\n15V Prog @ 3A, and\n\n20V Prog @ 2.5A.\n5)\nPDP 80W implementation includes:\n\n5V @ 3A, \n\n9V @ 3A, \n\n15 @ 3A, \n\n20V @ 4A, \n\nSPR AVS with 9V - 15V @ 3A & 15V - 20V @ 4A, \n\n15V Prog @ 3A, and \n\n20V Prog @ 4A.\nThe first example illustrates a basic example of a supply that can only support 5V and 9V.\nThe second and third examples illustrates as the PDP Rating goes higher there are more possible combinations that \nmeet the Power Rules. These examples also add SPR AVS. Although there are multiple ways to meet the Power Rules, \nwhile operating in SPR Mode no more than a combination of seven SPR (A)PDOs and APDOs can be offered.\nThe fourth and fifth example show that the 15V Prog @ 3A fully covers the 9V Prog @3A range so it is not necessary \nto Advertise both. These examples also illustrate SPR AVS being extended up to 20V with separate current limits for \nthe 9V - 15V and 15V - 20V ranges - a single SPR AVS APDO covers advertising both ranges.\n","image_count":0,"table_count":1}
{"page":1008,"text":"Page 1008\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n10.2.3.3\n  Optional Normative Extended Power Range (EPR)\nSupport of EPR Mode is Optional. An EPR Capable port has a PDP Rating that is >100W and ≤ 240W. An EPR Capable \nSource Port (EPR Source Port) May operate in either SPR Mode or EPR Mode when operating at 100W or less.\nAn EPR Source Port operating in SPR Mode May offer less than 100W to avoid violating safety regulations. When \noperating in EPR Mode, an EPR Source Port Shall offer 100W in Fixed 20V when not constrained by multi- port \nsharing limits.\nAn EPR Source May include multiple ports and these ports can be functionally implemented as Shared Capacity \nCharger or Assured Capacity Charger ports as defined in [USB Type-C 2.4].\nAny port on an EPR Source that has a Port Present PDP of 100W or less Shall follow the Normative requirements \nfor SPR Source Ports and Shall operate only in SPR Mode. Any port on an EPR Source that is operating with a cable \nthat is not EPR Capable Shall operate only in SPR Mode. An EPR Source, when operating in SPR Mode with a 5A cable, \nMay offer less than 5A due to design tolerances in order to meet applicable safety standards. For best user \nexperience it Should be as close to 100W as possible.\nTable 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\" and \nTable 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using an EPR-\ncapable cable\" define the Normative requirements EPR Source Ports. While not included in these tables, any EPR \nSource Port that also supports SPR PPS Shall offer the SPR Fixed 20V PDO and PPS 20V Prog APDO at 100W (or the \nmaximum available PDP when the port is operating at an Equivalent PDP <100W) when in EPR Mode:\n\nWhen an EPR Source Port is capable of supplying its PDP Rating, it Shall adhere to the requirements \ndefined in Table 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and using an EPR \nCapable Cable\" based on its PDP Rating of x Watts. \n\nWhen a Source Port on an EPR Charger is unable to provide its Port Maximum PDP, it Shall adhere to \nthe requirements defined in Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than \nPort Maximum PDP and using an EPR-capable cable\" based on a Port Present PDP of x Watts. Some \nexamples:\n\nAn EPR Source Port May be unable to provide its PDP Rating because it is thermally constrained at \nthe time of power Negotiation.\n\nA Shared port on a multi-port EPR Charger that is limited by the remaining available power.\n\nWhen an EPR Charger is in an Adjustable Voltage Supply (AVS) Explicit Contract: \n\nIt Shall Reject all Requests outside of the defined voltage range (see Table 10.15, \"EPR Adjustable \nVoltage Supply (AVS) Voltage Ranges\") or for a requested voltage and Current that results in a power \nlevel that is more than the Port's Advertised PDP.\n\nIn no case Shall a Source Advertise a Current or accept a Current requested by a Sink that exceeds the \nAttached cable's current rating.\n","image_count":0,"table_count":1}
{"page":1009,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1009\n\nThe Max Voltage offered by an EPR Source Shall Not exceed 48V.\nTable 10.12  EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\nPort \nMaximum \nPDP (W)\nSPR Fixed and AVS\n28V Fixed\n36V \nFixed3\n48V Fixed \nEPR AVS3, 4\n100 < x ≤ 140\nRequired per Table 10.2, \"SPR \nNormative Voltages and Minimum \nCurrents\" (or Table 10.3, \"SPR Source \nCapabilities When Port Present PDP is \nless than Port Maximum PDP\" when \napplicable)\n(PDP/28)A2\nN/A1\nN/A1\n(15V – PDP/5A):\n\n5A\n(>PDP/5A – 28V):\n\n(PDP/AVS voltage) A\n140 < x ≤ 180\n5A\n(PDP/\n36)A2\nN/A1\n(15V – PDP/5A):\n\n5A\n(>PDP/5A – 36V):\n\n(PDP/AVS voltage) A\n180 < x ≤ 240\n5A\n5A\n(PDP/48)A2\n(15V – PDP/5A):\n\n5A\n(>PDP/5A – 48V):\n\n(PDP/AVS voltage) A\n1)\nEPR Sources are disallowed from offering Fixed Supply voltages that are above the defined voltages for a given PDP, e.g., 36V is \ndisallowed for any PDP of 140W or lower.\n2)\nThe Fixed PDOs Maximum Current field Shall Advertise either RoundDown (PDP/voltage) or RoundUp (PDP/voltage) to the \nnearest 10mA.\n3)\nEPR Sources Shall reject any request for more than the Advertised PDP, i.e., when output voltage and operating current requested \nin the Sink RDO is outside of the defined AVS voltage and current range represented by the Advertised PDP, the RDO will be rejected.\n4)\nThe current available for a given AVS voltage is as indicated in this column. The current defined here is describing the top edge of \nthe Valid Operating Region as illustrated in Figure 10.6, \"Valid EPR AVS Operating Region\". The AVS APDO does not have a \nMaximum Current field, so the maximum current has to be calculated from the PDP.\n","image_count":0,"table_count":2}
{"page":1010,"text":"Page 1010\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nNote:\nEPR Managed Capability Ports when power constrained are defined to offer higher voltages at lower Port \nPresent PDP (as per Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port \nMaximum PDP and using an EPR-capable cable\") than the port's Port Maximum PDP (as per Table 10.12, \n\"EPR Source Capabilities based on the Port Maximum PDP and using an EPR Capable Cable\") because these \nvoltages would otherwise be available if the Managed Capability Port power hadn't been constrained. \nManaged Capability Ports are required to be properly identified to the user based on the port's Port \nMaximum PDP.\nIn reference to Table 10.13, \"EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and \nusing an EPR-capable cable\", Table 10.14, \"EPR Source Examples when Port Present PDP is less than Port Maximum \nPDP\" gives examples of which EPR Capabilities, in addition to the required SPR Fixed Supply PDOs and SPR AVS \nAPDO, are Advertised based on Port Present PDP and the port's Port Maximum PDP.\nTable 10.13  EPR Source Capabilities when Port Present PDP is less than Port Maximum PDP and using an \nEPR-capable cable\nPort Present \nPDP (W)\nSPR Fixed and AVS\n28V Fixed\n36V Fixed4\n48V Fixed4\nEPR AVS with Max Voltage of 28V, 36V or 48V \nper Table 10.122, 5, 6\n28V\n36V\n48V\n7.5 ≤ x ≤ 15\nRequired per Table 10.2, \"SPR \nNormative Voltages and \nMinimum Currents\" (or \nTable 10.3, \"SPR Source \nCapabilities When Port \nPresent PDP is less than Port \nMaximum PDP\" when \napplicable)\n(PDP/28) A3\n(PDP/36) A3\n(PDP/48) A3\n\n(15V – max voltage):\n\n(PDP/AVS Voltage) A3\n15 < x ≤ 27\n27 < x ≤ 45\n(PDP/28) A1\n45 < x ≤ 60\n(PDP/36) \nA1\n60 < x ≤ 100\n(PDP/48) \nA1\nUp to 75W:\n\n(15V – max voltage):\n\n(PDP/AVS voltage) A \nAbove 75W:\n\n(15V – PDP/5A):\n\n5A \n\n(>PDP/5A – max voltage):\n\n(PDP/AVS voltage) A\n100 < x ≤ 140\nTable 10.3, \"SPR Source \nCapabilities When Port \nPresent PDP is less than Port \nMaximum PDP\" with a Port \nPresent PDP of 100W.\n140 < x ≤ 180\n5A\n180 < x ≤ 240\n5A\n5A\n1)\nThe Fixed Supply PDOs Maximum Current field Shall Advertise either RoundDown (PDP/voltage) or RoundUp (PDP/voltage) to the \nnearest 10mA.\n2)\nEPR Sources Shall reject any Request for more than the Advertised PDP, i.e., when output voltage and operating current requested in \nthe Sink RDO is outside of the defined AVS voltage and current range represented by the Advertised PDP, the RDO will be rejected.\n3)\nEPR Sources May offer an (A)PDOs at this Port Present PDP. When offered, the Fixed Supply PDOs Maximum Current field Shall \nAdvertise either RoundDown (PDP/Voltage) or RoundUp (PDP/Voltage) to the nearest 10mA.\n4)\nThis EPR Fixed Supply voltage is only available if allowed by Table 10.12, \"EPR Source Capabilities based on the Port Maximum \nPDP and using an EPR Capable Cable\" based on the port’s PDP Rating.\n5)\nThe Max Voltage for AVS is what is allowed by TTable 10.12, \"EPR Source Capabilities based on the Port Maximum PDP and \nusing an EPR Capable Cable\" based on the port’s Port Maximum PDP.\n6)\nThe current available based on AVS voltage is as indicated in this column. The current defined here is describing the top edge of the \nValid Operating Region as illustrated in Figure 10.6, \"Valid EPR AVS Operating Region\". AVS APDO does not have a Maximum \nCurrent field so the maximum current has to be calculated from the PDP.\nTable 10.14  EPR Source Examples when Port Present PDP is less than Port Maximum PDP\nPort Maximum \nPDP\nPort Present \nPDP\nOffers\n28V Fixed\n36V Fixed\n48V Fixed\nAVS\n200W\n108W\n3.86A\n3A\n2.25A\n48V@108W\n160W\n108W\n3.86A\n3A\nNot offered\n36V@108W\n120W\n108W\n3.86A\nNot offered\nNot offered\n28V@108W\n200W\n72W\n2.57A\n2A\n1.5A\n48V@72W\n160W\n72W\n2.57A\n2A\nNot offered\n36V@72W\n120W\n72W\n2.57A\nNot offered\nNot offered\n28V@72W\n200W\n36W\n1.29A\n1A1\n0.75A1\n48V@36W1\n1)\nThese Capabilities are not required but may be offered at this Port Present PDP.\n","image_count":0,"table_count":3}
{"page":1011,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1011\nEPR Sources when operating in an AVS Explicit Contract are required to stay within their PDP as such they Shall \nrespond to any request (VA) for more than the PDP with a Reject Message. Figure 10.6, \"Valid EPR AVS Operating \nRegion\" illustrates the definition of the Valid operating range for an EPR Source operating in an AVS Explicit \nContract based on its Advertised PDP.\nFigure 10.6 Valid EPR AVS Operating Region\nFigure 10.7, \"EPR Source Power Rule Illustration for Fixed PDOs\" illustrates the minimum current that an EPR Source \nShall support at each voltage for a given PDP Rating.\nNote:\nNot illustrated are that currents higher than 3A are allowed to be offered up to a limit of 5A given that a \n5A cable is detected by the Source and the voltage times current remains within the Source PDP Rating.\n160W\n36W\n1.29A\n1A1\nNot offered\n36V@36W1\n120W\n36W\n1.29A\nNot offered\nNot offered\n28V@36W\nTable 10.14  EPR Source Examples when Port Present PDP is less than Port Maximum PDP\nPort Maximum \nPDP\nPort Present \nPDP\nOffers\n28V Fixed\n36V Fixed\n48V Fixed\nAVS\n1)\nThese Capabilities are not required but may be offered at this Port Present PDP.\n0\n1\n2\n3\n4\n5\n6\n0\n15\n30\n45\n60\nRDO Current (A)\nRDO Voltage (V)\n5A\nInvalid Requests\n(Crosshatched Area)\nValid Operating Region  \nfor EPR AVS Sink Requests\nValid RDO Requests\nAdvertised\nVoltage =  \n28, 36 or 48V\n15V\nVoltage =  \nPDP/5A\nCurrent =  \nAdvertised PDP/Advertised Voltage\n","image_count":6,"table_count":3}
{"page":1012,"text":"Page 1012\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure 10.7 EPR Source Power Rule Illustration for Fixed PDOs\n10.2.3.3.1\n  EPR Adjustable Voltage Supply (AVS) Voltage Ranges\nTable 10.15, \"EPR Adjustable Voltage Supply (AVS) Voltage Ranges\" shows the Minimum and Maximum Voltage for \nthe EPR AVS ranges.\nThe voltage output at the Source's connector Shall be +/-5% for both the Maximum Voltage and the Minimum \nVoltage.\nTable 10.15  EPR Adjustable Voltage Supply (AVS) Voltage Ranges\nAVS Voltage Ranges\n28V AVS\n36V AVS\n48V AVS\nMaximum Voltage\n28V\n36V\n48V\nMinimum Voltage\n15V\n15V\n15V\n0\n1\n2\n3\n4\n5\n6\n0\n20\n40\n60\n80\n100\nSource PDP Rating (W)\nCurrent (A)\n120\n140\n160\n180\n200\n220\n240\nRP1 RP2\n5V\n15V\n5 + 9V 5 + 9 + 15V\n20V\n7.5W\n27W\n45W\n15W\n100W\n140W\n180W\n20V\n9V\n5 + 9 + 15V\n5 + 9 + 15V\n28V\n36V\n48V\n5 + 9 + 15V\n5 + 9 + 15V\n20V\n20+28V\n20+28+36V\n","image_count":0,"table_count":3}
{"page":1013,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1013\n10.3\n  Sink Power Rules\n10.3.1\n  Sink Power Rule Considerations\nThe Sink Power Rules are designed to ensure the best possible user experience when a given Sink used with a \ncompliant Source of arbitrary Output Power Rating that only supplies the Normative voltages and currents. \nThe Sink Power Rules are based on the following considerations:\n\nLow power Sources (e.g., 5V) are expected to be very common and will be used with Sinks designed for \na higher PDP. \n\nOptimizing the user experience when Sources with a higher PDP Rating are used with low power Sinks.\n\nPreventing Sinks that only function well (or at all) when using Optional voltages and currents.\n10.3.2\n  Normative Sink Rules\nSinks designed to use Sources with a PDP Rating of x W Shall:\n\nEither operate or charge from Sources that have a PDP Rating ≥ x W.\n\nEither operate, charge or indicate a Capabilities Mismatch (see Section 6.4.2.3, \"Capability Mismatch\") \nfrom Sources that have a PDP Rating < x W and ≥ 0.5W.\nA Sink optimized for a Source with Optional voltages and currents or power as described in Section 10.2.3, \"Optional \nVoltages/Currents\" with a PDP Rating of x W Shall provide a similar user experience when powered from a Source \nwith a PDP Rating of ≥ x W that supplies only the Normative voltages and currents as specified in Section 10.2.2, \n\"Normative Voltages and Currents\". For example, a 60W Source might not offer 9V Prog or 15V Prog since 20V Prog \nis a suitable substitute for both (as shown in Table 10.10, \"SPR Programmable Power Supply PDOs and APDOs based \non the Port Maximum PDP\").\nThe Operational Current/Power in the Sink Capabilities PDO for Sinks with an Operational PDP of x Watts Shall be \nas follows:\n\nOperational current for Fixed Supply/Variable Supply PDOs: RoundDown(x/voltage) to the nearest \n10mA.\n\nOperational power for Battery Supply PDOs: ≤ x.\n\nOperational current for Programmable Power Supply APDOs as defined in Table 10.10, \"SPR \nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\": RoundDown (x/Prog \nVoltage) to the nearest 50mA.\nThe Maximum Current/Power in the Sink RDO for Sinks with an Operational PDP of x Watts and Maximum PDP of y \nWatts Shall be as follows:\n\nMaximum current for Fixed Supply/Variable Supply RDOs from Sinks without a Battery: RoundDown(x/\nvoltage) to the nearest 10mA.\n\nMaximum current for Fixed Supply/Variable Supply RDOs from Sinks with a Battery: RoundDown(y/\nVoltage) to the nearest 10mA.\n\nMaximum power for Battery Supply RDOs from Sinks without a Battery: ≤ x.\n\nMaximum power for Battery Supply RDOs from Sinks with a Battery: ≤ y.\n\nMaximum current for PPS Supply RDOs from Source PDOs as defined in Table 10.10, \"SPR \nProgrammable Power Supply PDOs and APDOs based on the Port Maximum PDP\" or Table 10.14, \"EPR \nSource Examples when Port Present PDP is less than Port Maximum PDP\": RoundDown (y/Prog Voltage) \nto the nearest 50mA.\nThe following requirements Shall apply to the Advertised Sink Capabilities:\n","image_count":0,"table_count":1}
{"page":1014,"text":"Page 1014\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n\nA Sink Shall Not Advertise Fixed Supply PDO maximum voltages and currents that exceed the PDP Rating \nthey were designed to use.\n\nA Sink Shall Not Advertise Variable Supply PDO maximum voltages and currents that exceed the PDP \nRating they were designed to use.\n\nA Sink Shall Not Advertise a Battery Supply PDO maximum allowable power that exceeds the PDP Rating \nthey were designed to use.\n\nA Sink Shall Not Advertise a PPS APDO maximum allowable power that exceeds the PDP Rating they \nwere designed to use.\n\nA Sink Shall Not Advertise an AVS APDO maximum allowable power that exceeds the PDP Rating they \nwere designed to use.\n","image_count":0,"table_count":1}
{"page":1015,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1015\nA\n CRC calculation\nA.1\n  C code example \n//\n// USB PD CRC Demo Code.\n//\n#include <stdio.h>\nint crc;\n//-----------------------------------------------------------------------------\nvoid crcBits(int x, int len) {\nconst int poly = 0x04C11DB6; //spec 04C1 1DB7h\nint newbit, newword, rl_crc;\nfor(int i=0; i<len; i++) {\nnewbit = ((crc>>31) ^ ((x>>i)&1)) & 1;\nif(newbit) newword=poly; else newword=0;\nrl_crc = (crc<<1) | newbit;\ncrc = rl_crc ^ newword;\nprintf(\"%2d newbit=%d, x>>i=0x%x, crc=0x%x\\n\", i, newbit,(x>>i),crc);\n}\n}\nint crcWrap(int c){\nint ret = 0;\nint j, bit;\nc = ~c;\nprintf(\"~crc=0x%x\\n\", c);\nfor(int i=0;i<32;i++) {\nj = 31-i;\nbit = (c>>i) & 1;\nret |= bit<<j;\n}\nreturn ret;\n}\n//-----------------------------------------------------------------------------\nint main(){\nint txCrc=0,rxCrc=0,residue=0,data;\nprintf(\"using packet data 0x%x\\n\", data=0x0101);\ncrc = 0xffffffff;\ncrcBits(data,16);\ntxCrc = crcWrap(crc);\nprintf(\"crc=0x%x, txCrc=0x%x\\n\", crc, txCrc);\nprintf(\"received packet after decode= 0x%x, 0x%x\\n\", data, txCrc);\ncrc = 0xffffffff;\ncrcBits(data,16);\nrxCrc = crcWrap(crc);\nprintf(\"Crc of the received packet data is (of course) =0x%x\\n\", rxCrc);\nprintf(\"continue by running the transmit crc through the crc\\n\"); \ncrcBits(rxCrc,32);\nprintf(\"Now the crc residue is 0x%x\\n\", crc);\nprintf(\"should be 0xc704dd7b\\n\");\n}\n","image_count":0,"table_count":1}
{"page":1016,"text":"Page 1016\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nB\n Message Sequence Examples (Deprecated)\nThis appendix has been Deprecated.\n","image_count":0,"table_count":1}
{"page":1017,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1017\nC\n VDM Command Examples\nC.1\n  Discover Identity Example\nC.1.1\n  Discover Identity Command request\nTable C.1, \"Discover Identity Command request from Initiator Example\" below shows the contents of the key fields \nin the Message Header and VDM Header for an Initiator sending a Discover Identity Command request.\nTable C.1  Discover Identity Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\n0xFF00 (PD SID)\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n1 (Discover Identity)\n","image_count":0,"table_count":2}
{"page":1018,"text":"Page 1018\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.1.2\n  Discover Identity Command response - Active Cable.\nTable C.2, \"Discover Identity Command response from Active Cable Responder Example\" shows the contents of the \nkey fields in the Message Header and VDM Header for a Responder returning VDOs in response to a Discover \nIdentity Command request. In this illustration, the Responder is an active Gen2 cable which supports Modal \nOperation.\nTable C.2  Discover Identity Command response from Active Cable Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n5 (VDM Header + ID Header VDO + Cert Stat VDO + \nProduct VDO + Cable VDO)\n11…9\nMessageID\n0…7\n8\nCable Plug\n1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\n0xFF00 (PD SID)\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n2 (Discover Identity)\nID Header VDO\nB31\nUSB Communications Capable as USB Host\n0 (not USB Communications capable as a USB \nHost)\nB30\nUSB Communications Capable as a USB Device\n0 (not data capable as a Device)\nB29…27\nSOP’ Product Type (Cable Plug/VPD)\n100b (Active Cable)\nB26\nModal Operation Supported\n1 (supports Modes)\nB25…16\nReserved. Shall be set to zero.\n0\nB15…0\n16-bit unsigned integer. USB Vendor ID\nUSB-IF assigned VID for this cable vendor\nCert Stat VDO\nB31…0\n32-bit unsigned integer\nUSB-IF assigned XID for this cable\nProduct VDO\nB31…16\n16-bit unsigned integer. USB Product ID\nProduct ID assigned by the cable vendor\nB15…0\n16-bit unsigned integer. bcdDevice\nDevice version assigned by the cable vendor\nCable VDO1 (returned for Product Type “Active Cable”)\nB31…28\nHW Version\nCable HW version number (vendor defined)\nB27…24\nFirmware Version\nCable FW version number (vendor defined)\nB23…21\nVDO Version\n010b (Version 1.2)\n","image_count":0,"table_count":2}
{"page":1019,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1019\nB20\nReserved\n0\nB19…18\nUSB Type-C plug to USB Type-C/Captive\n10b (USB Type-C®)\nB17\nEPR Capable (Active Cable)\n0 (not EPR Capable)\nB16…13\nCable Latency\n0001b (<10ns (~1m))\nB12…11\nCable Termination Type (Active Cable)\n11b (Both ends Active, VCONN required)\nB10…9\nMaximum VBUS Voltage (Active Cable)\n00b (20V)\nB8\nSBU Supported\n0 (SBUs connections supported)\nB7\nSBU Type\n0 (SBU is passive)\nB6…5\nVBUS Current Handling Capability (Active Cable)\n01b (3A)\nB4\nVBUS Through Cable\n1 (Yes)\nB3\nSOP’’ Controller Present\n1 (SOP’’ controller present)\nB2…0\nReserved\n0\nCable VDO2 (returned for Product Type “Active Cable”)\nB31…24\nMaximum Operating Temperature\n70\nB23…16\nShutdown Temperature\n80\nB15\nReserved\n0\nB14…12\nU3/CLd Power\n010b (1-5mW)\nB11\nU3 to U0 transition mode\n00b (U3 to U0 direct)\nB10\nPhysical connection\n0 (Copper)\nB9\nActive element\n0 (Active Re-driver)\nB8\nUSB4 Supported\n0 (USB4 Supported)\nB7…6\nUSB 2.0 Hub Hops Consumed\n2\nB5\nUSB 2.0 Supported\n0 ([USB 2.0] supported)\nB4\nUSB 3.2 Supported\n0 ([USB 3.2] SuperSpeed supported)\nB3\nUSB Lanes Supported\n1b (Two lanes)\nB2\nOptically Isolated Active Cable\n0 (Not supported)\nB1\nUSB4 Asymmetric Mode Supported\n0 (Not Supported)\nB0\nUSB Gen\n1b (Gen 2 or higher)\nTable C.2  Discover Identity Command response from Active Cable Responder Example\nBit(s)\nField\nValue\n","image_count":0,"table_count":2}
{"page":1020,"text":"Page 1020\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.1.3\n  Discover Identity Command response - Hub.\nTable C.3, \"Discover Identity Command response from Hub Responder Example\" shows the contents of the key fields \nin the Message Header and VDM Header for a Responder returning VDOs in response to a Discover SVIDs Command \nrequest. In this illustration, the Responder is a Hub.\nTable C.3  Discover Identity Command response from Hub Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n4 (VDM Header + ID Header VDO + Cert Stat VDO + \nProduct VDO)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\n0xFF00 (PD SID)\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n2 (Discover Identity)\nID Header VDO\nB31\nUSB Communications Capable as USB Host\n0 (not USB Communications capable as a USB Host)\nB30\nUSB Communications Capable as a USB Device\n1 (data capable as a Device)\nB29…27\nSOP’ Product Type (Cable Plug/VPD)\n001b (Hub)\nB26\nModal Operation Supported\n0 (doesn’t support Modes)\nB25…16\nReserved. Shall be set to zero.\n0\nB15…0\n16-bit unsigned integer. USB Vendor ID\nUSB-IF assigned VID for this Hub vendor\nCert Stat VDO\nB31…0\n32-bit unsigned integer\nUSB-IF assigned XID for this Hub\nProduct VDO\nB31…16\n16-bit unsigned integer. USB Product ID\nProduct ID assigned by the Hub vendor\nB15…0\n16-bit unsigned integer. bcdDevice\nDevice version assigned by the Hub vendor\n","image_count":0,"table_count":2}
{"page":1021,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1021\nC.2\n  Discover SVIDs Example\nC.2.1\n  Discover SVIDs Command request\nTable C.4, \"Discover SVIDs Command request from Initiator Example\" below shows the contents of the key fields in \nthe Message Header and VDM Header for an Initiator sending a Discover SVIDs Command request.\nTable C.4  Discover SVIDs Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\n0xFF00 (PD SID)\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n2 (Discover SVIDs)\n","image_count":0,"table_count":2}
{"page":1022,"text":"Page 1022\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.2.2\n  Discover SVIDs Command response\nTable C.5, \"Discover SVIDs Command response from Responder Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for a Responder returning VDOs in response to a Discover SVIDs Command \nrequest. In this illustration, the value 3 in the Message Header Number of Data Objects field indicates that one VDO \ncontaining the supported SVIDs would be returned followed by a terminating VDO. \nNote:\nThe last VDO returned (the terminator of the transmission) contains zero value SVIDs. If a SVID value is \nzero, it is not used.\nTable C.5  Discover SVIDs Command response from Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n3 (VDM Header + 2*VDO)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\n0xFF00 (PD SID)\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n2 (Discover SVIDs)\nVDO 1\nB31…16\nSVID 0\nSVID value\nB15…0\nSVID 1\nSVID value\nVDO 2\nB31…16\nSVID 2\n0x0000\nB15…0\nSVID 3\n0x0000\n","image_count":0,"table_count":2}
{"page":1023,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1023\nC.3\n  Discover Modes Example\nC.3.1\n  Discover Modes Command request\nTable C.6, \"Discover Modes Command request from Initiator Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for an Initiator sending a Discover Modes Command request. The Initiator of the \nDiscover Modes Command AMS sends a Message Header with the Number of Data Objects field set to 1 followed \nby a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an Initiator and the \nCommand (B4…0) is set to 3 indicating Mode discovery.\nTable C.6  Discover Modes Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for which Modes are being requested\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n3 (Discover Modes)\n","image_count":0,"table_count":2}
{"page":1024,"text":"Page 1024\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.3.2\n  Discover Modes Command response\nThe Responder to the Discover Modes Command request returns a Message Header with the Number of Data \nObjects field set to a value of 1 to 7 (the actual value is the number of Mode objects plus one) followed by a VDM \nHeader with the Command Type (B7…6) set to 1 indicating the Command is from a Responder and the Command \n(B4…0) set to 3 indicating the following objects describe the Modes the device supports. If the ID is a VID, the \nstructure and content of the VDO is left to the vendor. If the ID is a SID, the structure and content of the VDO is \ndefined by the Standard. \nTable C.7, \"Discover Modes Command response from Responder Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for a Responder returning VDOs in response to a Discover Modes Command \nrequest. In this illustration, the value 2 in the Message Header Number of Data Objects field indicates that the \ndevice is returning one VDO describing the Mode it supports. It is possible for a Responder to report up to six \ndifferent Modes.\nTable C.7  Discover Modes Command response from Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n2 (VDM Header + 1 Mode VDO)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for which Modes were requested\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n000b\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n3 (Discover Modes)\nMode VDO\nB31…0\nMode 1\nStandard or Vendor defined Mode value\n","image_count":0,"table_count":2}
{"page":1025,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1025\nC.4\n  Enter Mode Example\nC.4.1\n  Enter Mode Command request\nThe Initiator of the Enter Mode Command request sends a Message Header with the Number of Data Objects field \nset to 1 followed by a VDM Header with the Command Type (B7…6) set to 0 indicating the Command is from an \nInitiator and the Command (B4…0) set to 4 to request the Responder to enter its mode of operation and sets the \nObject Position field to the desired functional VDO based on its offset as received during Discovery. \nTable C.8, \"Enter Mode Command request from Initiator Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for an Initiator sending an Enter Mode Command request.\nTable C.8  Enter Mode Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for the Mode being entered\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (a one in this field indicates a request to enter \nthe first Mode in list returned by Discover Modes)\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n4 (Enter Mode)\n","image_count":0,"table_count":2}
{"page":1026,"text":"Page 1026\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.4.2\n  Enter Mode Command response\nThe Responder that is the target of the Enter Mode Command request sends a Message Header with the Number of \nData Objects field set to a value of 1 followed by a VDM Header with the Command Type (B7…6) set to 1 indicating \nthe Command is from a Responder and the Command (B4…0) set to 4 indicating the Responder has entered the \nMode and is ready to operate.\nTable C.9, \"Enter Mode Command response from Responder Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for a Responder sending an Enter Mode Command response with an ACK.\nTable C.9  Enter Mode Command response from Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for the Mode entered\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (offset of the Mode entered)\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n4 (Enter Mode)\n","image_count":0,"table_count":2}
{"page":1027,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1027\nC.4.3\n  Enter Mode Command request with additional VDO.\nThe Initiator of the Enter Mode Command request sends a Message Header with the Number of Data Objects field \nset to 2 indicating an additional VDO followed by a VDM Header with the Command Type (B7…6) set to zero \nindicating the Command is from an Initiator and the Command (B4…0) set to 4 to request the Responder to enter \nits mode of operation and sets the Object Position field to the desired functional VDO based on its offset as received \nduring Discovery. \nTable C.10, \"Enter Mode Command request with additional VDO Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for an Initiator sending an Enter Mode Command request with an additional VDO.\nTable C.10  Enter Mode Command request with additional VDO Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for the Mode being entered\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (a one in this field indicates a request to enter \nthe first Mode in list returned by Discover Modes)\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n4 (Enter Mode)\nIncluding Optional Mode specific VDO\nB31…0\nMode specific\n","image_count":0,"table_count":2}
{"page":1028,"text":"Page 1028\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.5\n  Exit Mode Example\nC.5.1\n  Exit Mode Command request\nThe Initiator of the Exit Mode Command request sends a Message Header with the Number of Data Objects field \nset to 1 followed by a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an \nInitiator and the Command (B4…0) set to 5 to request the Responder to exit its Mode of operation. \nTable C.11, \"Exit Mode Command request from Initiator Example\" shows the contents of the key fields in the Message \nHeader and VDM Header for an Initiator sending an Exit Mode Command request.\nTable C.11  Exit Mode Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for the Mode being exited\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (identifies the previously entered Mode by its \nObject Position that is to be exited)\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n5 (Exit Mode)\n","image_count":0,"table_count":2}
{"page":1029,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1029\nC.5.2\n  Exit Mode Command response\nThe Responder that receives the Exit Mode Command request sends a Message Header with the Number of Data \nObjects field set to a value of 1 followed by a VDM Header with the Command Type (B7…6) set to 1 indicating the \nCommand is from a Responder and the Command (B4…0) set to 5 indicating the Responder has exited the Mode and \nhas returned to normal USB operation.\nTable C.12, \"Exit Mode Command response from Responder Example\" shows the contents of the key fields in the \nMessage Header and VDM Header for a Responder sending an Exit Mode Command ACK response.\nTable C.12  Exit Mode Command response from Responder Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for the Mode exited\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (offset of the Mode to be exited)\nB7…6\nCommand Type\n01b (Responder ACK)\nB5\nReserved\n0\nB4…0\nCommand\n5 (Exit Mode)\n","image_count":0,"table_count":2}
{"page":1030,"text":"Page 1030\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nC.6\n  Attention Example\nC.6.1\n  Attention Command request\nThe Initiator of the Attention Command request sends a Message Header with the Number of Data Objects field \nset to 1 followed by a VDM Header with the Command Type (B7…6) set to zero indicating the Command is from an \nInitiator and the Command (B4…0) set to 6 to request attention from the Responder. \nTable C.13, \"Attention Command request from Initiator Example\" shows the contents of the key fields in the Message \nHeader and VDM Header for an Initiator sending an Attention Command request.\nTable C.13  Attention Command request from Initiator Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n1 (VDM Header)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for which attention is being requested\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (offset of the Mode requesting attention)\nB7…6\nCommand Type\n00b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n6 (Attention)\n","image_count":0,"table_count":2}
{"page":1031,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1031\nC.6.2\n  Attention Command request with additional VDO.\nThe Initiator of the Attention Command request sends a Message Header with the Number of Data Objects field \nset to 2 indicating an additional VDO followed by a VDM Header with the Command Type (B7…6) set to zero \nindicating the Command is from a Responder and the Command (B4…0) set to 6 to request attention from the \nResponder. \nTable C.14, \"Attention Command request from Initiator with additional VDO Example\" shows the contents of the key \nfields in the Message Header and VDM Header for an Initiator sending an Attention Command request with an \nadditional VDO.\nTable C.14  Attention Command request from Initiator with additional VDO Example\nBit(s)\nField\nValue\nMessage Header\n15\nReserved\n0\n14…12\nNumber of Data Objects\n2 (VDM Header + VDO)\n11…9\nMessageID\n0…7\n8\nPort Power Role\n0 or 1\n7…6\nSpecification Revision\n10b (Revision 3.x)\n5…4\nReserved\n0\n3…0\nMessage Type\n1111b (Vendor Defined Message)\nVDM Header\nB31…16\nStandard or Vendor ID (SVID)\nSVID for which attention is being requested\nB15\nVDM Type\n1 (Structured VDM)\nB14…13\nStructured VDM Version (Major)\n01b (Version 2.0)\nB12…11\nStructured VDM Version (Minor)\n01b (Version 2.1)\nB10…8\nObject Position\n001b (offset of the Mode requesting attention)\nB7…6\nCommand Type\n000b (Initiator)\nB5\nReserved\n0\nB4…0\nCommand\n6 (Attention)\nIncluding Optional Mode specific VDO\nB31…0\nMode specific\n","image_count":0,"table_count":2}
{"page":1032,"text":"Page 1032\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nD\n BMC Receiver Design Examples\nThe BMC signal is DC-coupled so that the voltage level is affected by the ground IR Drop. The DC offset of the BMC \nsignal at Power Source and Power Sink are in the opposite directions. When the VBUS current is increased from 0A, \nthe BMC signal waveform shifts downward at Power Sink and shifts upward at Power Source. This section \nintroduces two sample BMC receiver circuit implementations, which are immune from DC offset and high current \nload step. They can be used in Power Source, Power Sink and inside cables. \nD.1\n  Finite Difference Scheme\nD.1.1\n  Sample Circuitry\nThe sample Finite Difference BMC receiver shown in Figure D.1, \"Circuit Block of BMC Finite Difference \nReceiver\"consists of the Rx bandwidth limiting filter with the time constant tRxFilter, a sampler with the sampling \nstep ΔtS, 50ns, a Finite Difference Calculator which calculates the voltage difference between the time interval of \nΔtFD, 300ns, an edge detector controlled by two voltage thresholds, Vth, H and Vth, L and a logic block for bit \nrecognition.\nFigure D.1 Circuit Block of BMC Finite Difference Receiver\nD.1.2\n  Theory\nThis section describes the fundamental theory of Finite Difference Scheme to recover the received BMC signal with \nthe input and output signal waveforms of the circuit blocks shown in Figure D.1, \"Circuit Block of BMC Finite \nDifference Receiver\". To illustrate the robustness of the implementation, the VBUS current load step rate is \nintentionally increased to 2A/µs at the Sink load. In Figure D.2, \"BMC AC and DC noise from VBUS at Power Sink\" (a), \nthe red curve represents the VBUS current measured at the Power Sink when the current is increased at 9 µs from \n0A to 5A and the blue dash curve represents the VBUS current measured at the USB Type-C ®connector of the power \nSink. In this example, the peak current overshoot with larger load step rate is increased to 518 mA which exceeds \niOvershoot. Figure D.2, \"BMC AC and DC noise from VBUS at Power Sink\" (b) shows the total BMC noise at Power Sink, \ncoupled from VBUS and D+/D- through the worst [USB Type-C 2.4] compliant cable, after the Rx bandwidth limiting \nfilter with the time constant tRxFilter is applied. The noise can be decomposed into 3 components. The first is the \nDC offset, IVBUS(t)*RGND, while IVBUS is the VBUS current and RGND is the ground DC resistance of the cable. The \noffset is negative in Power Sink and positive at Power Source. The second noise component is the inductive VBUS \nnoise, M*d IVBUS(t)/dt, while M is the mutual inductance between the VBUS and CC wires in the cable and d IVBUS(t)/\ndt is the load step rate. The third component is [USB 2.0] Full Speed SE0 coupling noise which would normally \noccur randomly but was assumed to occur periodically in the simulation to account for the crosstalk in any phase \nbetween the BMC and [USB 2.0] signals. In Figure D.3, \"Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with \nUSB 2.0 SE0 Noise\", the blue dash curve represents the BMC signal when there is no VBUS current, and the red solid \ncurve represents the BMC signal affected by the VBUS coupling noise shown in Figure D.2, \"BMC AC and DC noise from \nVBUS at Power Sink\"(b). The green solid curve is the sample [USB 2.0] noise, after the Rx bandwidth limiting filter \nwith the time constant tRxFilter is applied.\n","image_count":1,"table_count":1}
{"page":1033,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1033\nFigure D.2 BMC AC and DC noise from VBUS at Power Sink\nFigure D.3 Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\nThe BMC signals shown in Figure D.3, \"Sample BMC Signals (a) without USB 2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\" \nare sampled every 50ns and the scaled derivative waveforms, Vcc(t) - Vcc (t - 50ns), without and with [USB 2.0] \nnoise are shown in Figure D.4, \"Scaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) \nwith USB 2.0 Noise\" (a) and (b), respectively. In Figure D.4, \"Scaled BMC Signal Derivative with 50ns Sampling Rate \n(a) without USB 2.0 Noise (b) with USB 2.0 Noise\" (a), if there is no [USB 2.0] noise, the derivative waveform just \nchanges slightly before and after the VBUS current transition. That means, the slope of the BMC waveform is not \nsensitive to the DC offset and is very useful to be used to design a robust receiver against a large DC offset. However, \nthe derivative waveforms with [USB 2.0] noise have large perturbation as shown in Figure D.4, \"Scaled BMC Signal \nDerivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with USB 2.0 Noise\" (b). \n","image_count":6,"table_count":1}
{"page":1034,"text":"Page 1034\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure D.4 Scaled BMC Signal Derivative with 50ns Sampling Rate (a) without USB 2.0 Noise (b) with USB \n2.0 Noise\nTo remove the high frequency content of the [USB 2.0] noise, Finite Difference technique with the proper time \ninterval is applied to the BMC waveform with [USB 2.0] noise in Figure D.3, \"Sample BMC Signals (a) without USB \n2.0 SE0 Noise (b) with USB 2.0 SE0 Noise\". Using Backward Finite Difference Calculator, ΔVcc = Vcc (t) - Vcc(t- Δt), \nFigure D.5, \"BMC Signal and Finite Difference Output with Various Time Steps\" shows the Finite Difference Output \nwhile Δt = 500ns. The larger the time interval Δt is, the larger the peak-to-peak magnitude of the Finite Difference \nOutput will be. However, the time interval is bounded by the rise time of the BMC signal so that 300ns to 500ns is \na good range of the time interval.\nFigure D.5 BMC Signal and Finite Difference Output with Various Time Steps\nD.1.3\n  Data Recovery \nThe edge detection is followed by the Finite Difference Calculation. At the input of the edge detector, if the voltage \nis larger than Vth, H at the rising edge, the output will become high voltage level, VH, if the voltage is smaller than \nVth, L at the falling edge, the output will become low voltage level, VL. In this example, Vth, H and Vth, L are 0.2V and \n-0.2V, respectively. The solid curve in Figure D.6, \"Output of Finite Difference in dash line and Edge Detector in solid \nline\" represents the output of the edge detector, where VH is 0.5V and VL is -0.5V. \n","image_count":5,"table_count":1}
{"page":1035,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1035\nFigure D.6 Output of Finite Difference in dash line and Edge Detector in solid line\nThe duty cycle of the output signal from the edge detector varies depending on the thresholds, Vth, H and Vth, L, as \nwell as jitter and noise from silicon and channel. The techniques such as integrating receiver can be used to recover \nthe BMC signal.\nD.1.4\n  Noise Zone and Detection Zone \nFigure D.7, \"Noise Zone and Detect Zone of BMC Receiver\" shows the output of Finite Difference when the time \ninterval of Finite Difference is set to 300ns. The noise Zone is defined in between +Vnoise and -Vnoise, in which the \nnoise glitches occur. The detect zone is defined in between +Vdetect and -Vdetect, excluding the noise zone. The \nthresholds of the edge detectors, Vth, H and Vth, L, must be properly set within the detect zone so that the data can \nbe recovered successfully. \nIn this example, Vdetect is 250mV and Vnoise is 50mV. It is highly recommended that the product implemented \nwith the similar techniques indicates the performance with the range of Vnoise and Vdetect in the electrical \nspecification. \nFigure D.7 Noise Zone and Detect Zone of BMC Receiver\n","image_count":2,"table_count":1}
{"page":1036,"text":"Page 1036\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nD.2\n  Subtraction Scheme\nD.2.1\n  Sample Circuitry\nThe sample Subtraction BMC receiver shown in Figure D.8, \"Circuit Block of BMC Subtraction Receiver\" consists of \nthe two Low Pass Filters (LPF1 and LPF2), a Subtractor, an Edge Detector and a logic block for bit recognition. The \ntime constant of the first and second LPF are 200ns and 300ns, respectively. The Subtractor subtracts the LPF1 \noutput from the LPF2 output. The Edge Detector controlled by two voltage thresholds, Vth, H and Vth, L to recover \nthe data.\nFigure D.8 Circuit Block of BMC Subtraction Receiver\nD.2.2\n  Output of Each Circuit Block\nFigure D.9, \"(a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\" (a) shows the output of LPF1 as \nthe red solid line and LPF2 as the blue dash line as well as the [USB 2.0] noise in green solid line. Figure D.9, \"(a) \nOutput of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\" (b) shows the voltage difference between the \ntwo output filters, Vdiff = Vcc_afterLPF1 - Vcc_afterLPF2. The Vdiff waveform looks very similar to the Finite \nDifference output waveform shown in Figure D.6, \"Output of Finite Difference in dash line and Edge Detector in solid \nline\" so that the data recovery method through the edge detector is the same as described in Section D.1.3, \"Data \nRecovery\".\nFigure D.9 (a) Output of LPF1 and LPF2 (b) Subtraction of LPF1 and LPF2 Output\nD.2.3\n  Subtractor Output at Power Source and Power Sink\nThe following figures shows the example when the VBUS current increases from 0A to 5A and then decreases to 0A \nwith high load step rate. The output of the LPF1 and the Subtractor at Power Source and Power Sink are shown in \nFigure D.10, \"Output of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at Power Source (b) \nat Power Sink\" (a) and (b), respectively. Although the BMC signals at Power Source and Power Sink shift toward the \nopposite direction, the Subtractor outputs at Power Source and Power Sink are almost identical disregard of the \nopposite direction of the DC offset. \n","image_count":4,"table_count":1}
{"page":1037,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1037\nFigure D.10 Output of the BMC LPF1 in blue dash curve and the Subtractor in red solid curve (a) at Power \nSource (b) at Power Sink\nD.2.4\n  Noise Zone and Detection Zone \nThe zone definition is the same as defined in Section D.1.4, \"Noise Zone and Detection Zone\". The sizes of the noise \nzone and detection zone of the Subtraction Scheme are dependent on the filter time constant. When the time \nconstant of the first and second LPF are 200ns and 300ns, respectively, Vdetect is 250mV and Vnoise is 50mV. It is \nhighly recommended that the product implemented with the similar techniques indicates the performance with \nthe range of Vnoise and Vdetect in the electrical specification.\n","image_count":4,"table_count":1}
{"page":1038,"text":"Page 1038\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nE\n FRS System Level Example\nE.1\n  Overview\nAppendix E, \"FRS System Level Example\" is intended to clarify Fast Role Swap (FRS) functionality at the system level \nthrough the use of an example implementation. \nFigure E.1, \"Example FRS Capable System\" is an example of a Hub and laptop implementation that supports Fast Role \nSwap (see Figure 7.16, \"VBUS Power during Fast Role Swap\"). It is not the only possible Hub or laptop architecture. \nHowever, it is intended to provide an example system whose functionality is used here to illustrate how Fast Role \nSwap works.\nFigure E.1 Example FRS Capable System\nThis appendix describes two cases that cover a variety of behaviors that might be seen in practice. \n\nSlow VBUS Discharge where VBUS between the Hub and the laptop takes more than 15ms (tFRSwapInit) \nto discharge below 5.5 V (vSafe5V (max)). In this case the FR_Swap Message is sent by the laptop while \nVBUS is still greater than vSafe5V (max). See Figure E.2, \"Slow VBUS Discharge\".\n\nFast VBUS Discharge where VBUS between the Hub and the laptop discharges very quickly, perhaps be-\nfore the Fast Role Swap Request is even complete. See Figure E.3, \"Fast VBUS Discharge\".\nHowever, neither the Hub nor the laptop can anticipate how quickly VBUS will discharge until the power adapter is \ndisconnected from an AC Supply or it is unplugged from the Hub.\nThe Fast Role Swap Request is the momentary low driven by the Hub on the CC wire which is detected by the laptop.\nFigure E.2, \"Slow VBUS Discharge\" and Figure E.3, \"Fast VBUS Discharge\" show the voltage seen on VBUS in \nrelationship to the Fast Role Swap Request They also show the transition between when the Hub stops supplying \nVBUS and when the laptop starts supplying VBUS.\nNotebook\n������ F\n F\n�����\n��\n2\nVB\nHub\n������ F\n F\n�����\n����\n F\n�������\n����������\nFRS                 \n��\n4\nVB\n��\n1\nVB\n������\n������\nPower \nAdapter\n F\n��\nPeripheral\n��\n3\nVB\n������ F\nFRS\n�������\n����������\n������\n���������\n����������\n�������\n�������\n���������������\n��\nH3\n��\nH4\n��\nN3\nN4\n��\nVHubVB\nVNbVB\n������ F\n��������\n�������\n����\n�������\n�����\nH5\nH6\n","image_count":0,"table_count":6}
{"page":1039,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1039\nFigure E.2 Slow VBUS Discharge\nOld Voltage\n0V\nvSafe5V(min)\ntSrcFRSwap\n�\nNew Source may \nturn on at any time \nafter VBUS falls below \nvSafe5V(max)\nVBUS at Hub & \nNotebook\nOld Source detects power loss and \nsignals Fast Role Swap\ntFRSwapTx\nCC\nN3\nH2\nN1\nvSafe5V(max)\nVBUS voltage when it discharges slowly \n(assume very small cable IR drop prior to FR swap) \nVBUS at \nNotebook\nVBUS at\nHub\n0A\n+3A\nCurrent from Notebook to Hub\nIn this example the Notebook is drawing little current prior to the \nFRS signaling. In other cases it may be drawing more current.\nCable IR \ndrop\nO\nH1\nN2\nN4\n<iSnkStdby\ntSnkFRSwap\n","image_count":0,"table_count":5}
{"page":1040,"text":"Page 1040\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure E.3 Fast VBUS Discharge\nCable IR \ndrop\nCable IR drop\nH2\nOld Voltage\n0V\nvSafe5V(min)\ntSrcFRSwap\nOld Source sends Fast \nRole Swap signal\ntFRSwapRx\nVBUS at\nNotebook\nCC\nVBUS voltage when it discharges quickly\nN4\nvSafe5V(max)\nVBUS at Hub\nN2\n0A\n-5A\n+3A\nIn this example the Notebook is drawing 5A prior to the FRS \nsignaling. In other cases it may be drawing less current.\nCurrent from Notebook to Hub\nN1\ntSnkFRSwap\n<iSnkStdby\n","image_count":0,"table_count":5}
{"page":1041,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1041\nE.2\n  FRS Initial Setup\nBefore a Fast Role Swap can occur, some initial setup steps are required. They require the laptop to discover \nwhether Fast Role Swap is supported by the Hub, the amount of current the Hub requires after a Fast Role Swap, \nand whether the laptop is able and willing to provide that amount. They also ensure that the laptop supplies VCONN \nbefore, during and after an FRS. Table E.1, \"Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter \nfirst)\" and Table E.2, \"Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\" below \nshow two typical sequences that might be used to prepare a laptop to support Fast Role Swap.\nTable E.1  Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)\nStep #\nHub\nLaptop\n1\nHub connected to power adapter\n2\nHub is connected to laptop.\n3\nLaptop sources 5 V to VBUS (vSafe5V).\nLaptop sources 5 V to VCONN\n4\nLaptop reads the cable to check its current \ncarrying capability and/or if it is an Active Cable \nrequiring VCONN.\n5\nLaptop sends a Capabilities Message\n6\nHub sends a Request Message\n7\nHub and laptop establish an Explicit Contract with Hub as Sink.\n8\nLaptop sends a Get_Source_Cap Message to \ndetermine how much power the Hub can provide.\n9\nHub sends a Source_Capabilities Message with the \nDual-Role Power bit set, and Unconstrained Power \nbit set, and Maximum Current > 0.\n10\nSince the Hub can supply power the laptop sends a \nPR_Swap Message\n11\nHub sends an Accept Message and starts supplying \nVBUS \n12\nLaptop sends a Get_Sink_Cap Message to \ndetermine the current required by the Hub to \nsupport an FRS. If the Hub does not support FRS or \nthe laptop cannot supply the required current, the \nlaptop Ignores any Fast Role Swap Requests it \nmight see. \n13\nIf the Hub can supply more than 3A, it initiates a \nVCONN Swap to make to make itself the VCONN Source \nand reads the cable to check its current carrying \ncapability. \n14\nHub sends a Sink_Capabilities Message \n15\nLaptop sends a Request Message\n16\nHub and laptop establish an Explicit Contract with Hub as source.\n","image_count":0,"table_count":2}
{"page":1042,"text":"Page 1042\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\n17\nIf the laptop has detected that it is connected via \nan Active Cable (or one that supports Alternate \nModes) and/or that it can support an FRS, it \ninitiates a VCONN Swap to make itself the VCONN \nSource. This removes a requirement that the Hub \nto hold up VCONN during the FRS. \n18\nNormal PD Power traffic flow\n19\nThe Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.\nTable E.2  Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\nStep #\nHub\nLaptop\n0\nHub is connected to laptop.\n1\nLaptop sources 5 V to VBUS (vSafe5V).\nLaptop sources 5 V to VCONN\n2\nLaptop reads the cable to check its current carrying \ncapability and/or if it is an Active Cable requiring \nVCONN.\n3\nLaptop sends Source_Capabilities Message\n4\nHub sends Request Message\n5\nHub and laptop establish an Explicit Contract with Hub as Sink.\n6\nLaptop sends a Get_Source_Cap Message to \ndetermine how much power the Hub can provide\n7\nHub sends a Source_Capabilities Message with the \nDual-Role Power bit set, and Unconstrained Power \nbit cleared, and Maximum Current = 0.\n8\nSince the Hub cannot supply power, the laptop does \nnot send a PR_Swap Message\n9\nThe power adapter is connected to the Hub\n10\nIf the Hub can source more than 3A, it initiates a VCONN \nSwap to become the VCONN Source. \n11\nHub reads the e-marker to determine the cable’s \ncurrent carrying capability.\n12\nHub initiates a Power Role Swap to become the Source\n13\nHub sends a Source_Capabilities Message with the \nUnconstrained Power bit set and Maximum Current > \n0.\n14\nHub and laptop establish an Explicit Contract with Hub as source.\n15\nLaptop sends a Get_Sink_Cap Message to determine \nthe current required by the Hub to support an FRS. If \nthe Hub does not support FRS or the laptop cannot \nsupply the required current, the laptop Ignores any \nFast Role Swap Requests it might see.\nTable E.1  Sequence for setup of a Fast Role Swap (Hub connected to Power Adapter first)\nStep #\nHub\nLaptop\n","image_count":0,"table_count":3}
{"page":1043,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1043\n16\nIf the laptop has detected that it is connected via an \nActive Cable (or one that supports Alternate Modes) \nand/or that it can support an FRS, it initiates a VCONN \nSwap to make itself the VCONN Source. This removes \na requirement that the Hub also hold up VCONN \nduring the FRS. \n17\nThe Hub and laptop are now ready to do a Fast Role Swap in case the power adapter gets removed.\nTable E.2  Sequence for setup of a Fast Role Swap (Hub connected to laptop before Power Adapter)\nStep #\nHub\nLaptop\n","image_count":0,"table_count":2}
{"page":1044,"text":"Page 1044\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nE.3\n  FRS Process\nAfter the initial setup is completed and the laptop has determined both that the Hub can request FRS and that the \nlaptop is able and willing to supply the requested current, the system is ready to support FRS. This section \ndescribes the sequence of events that take place during a Fast Role Swap. The following figures and tables do not \ncover the actions of the Device Policy Manager or the Policy Engine. Those actions occur orthogonally to the \nelectrical events shown in this appendix. However, the diagrams do indicate the inputs/outputs where the DPM \nand Policy Engine interact with the electrical events:\n\nThe laptop sends the FR_Swap Message to initiate the FRS AMS (see Figure 7.43, \"Transition Diagram for \nFast Role Swap\") within 15ms after the laptop detects the Fast Role Swap Request on CC.\n\nThe laptop sends the final PS_RDY Message in the FRS AMS only after it is sourcing VBUS. \nFigure E.4 Slow VBUS discharge after FR_Swap message is sent\ndischarging to vSafe5V(max)\nNotebook:\nFRS signal \ndetected\nOld Sink (old current)\nNew Sink (0.5A, 0.9A, 1.5A, or 3.0A)\nAdapter\nHub\nPower Path\nNotebook\nPower Path\nVBUS Voltage\nVBUS Current\nPower Path \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nHub: \nAdapter\nMains Loss \nDetected\nNew Source = vSafe5V    \nSink\nSource\nHub: \nVBUS > vSafe5V  (min) \nand sinking\nNotebook: \nSourcing 5V\nSource vSafe5V\nWait to Source\nSink\nWaiting to Sink\nTurning on Source\nSignals to/\nfrom DPM & \nPolicy \nEngine\nHub: \nSend FRS \nsignal\nH1\nH2\nN1\nN4\nN3\nNotebook:\nInitiates FRS \nmessage sequence\n","image_count":0,"table_count":3}
{"page":1045,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1045\nTable E.3  Sequence for slow VBUS discharge (it discharges after FR_Swap message is sent)\nStep #\nHub\nLaptop\n1\nThe power adapter’s AC Supply power is lost. \n2\nHub detects the power adapter disconnect (H1) as \nquickly as possible.\n3\nHub sends Fast Role Swap Request on CC (H2) and \nstarts monitoring VHubVB (H3). Hub also starts a \ntSnkFRSwap timer after the FRS signal begins and \nVBUS has fallen below vSafe5V (min).\n4\nLaptop detects Fast Role Swap Request on CC (N1) \nthat triggers sending of the FR_Swap Message. This \ncan happen at any point in the following steps so \nlong as it is within 15 ms (tFRSwapInit). \n5\nLaptop opens the sinking switch (N2), as quickly as \npossible to minimize power drained from Hub after \nthe Fast Role Swap Request.\n6\nLaptop begins monitoring VBUS (N3) to know when \nto turn the laptop into a Source\n. \n7\nHub opens the sourcing switch (H4) while VHubVB > \n5.5V (after the Fast Role Swap Request is sent). \nHowever, the sourcing switch (H4) must be kept \nclosed until VHubVB is as close to 5.5V as possible. It is \nimportant for the Hub to open its sourcing switch (H4) \nbefore the laptop’s sourcing switch (N4) gets closed to \nminimize inrush current. \n8\nHub closes the switch (H5) to use the hold-up \ncapacitor to supply VBUS to the peripheral(s). \nSystems with a holding cap permanently in place do \nnot need the switch (H5). Hub does not draw more \nthan iSnkStdby from VBUS, until the tSnkFRSwap timer \nexpires.\n9\nLaptop detects VBUS < VNbVB (N1) before closing the \nsourcing switch (N4) when VNbVB is as close as \npossible to 5.5V. This minimizes the time when VBUS \nis not sourced.\n10\nLaptop closes sourcing switch (N4). When this \noccurs the Hub’s input capacitance on VBUS will be \nless than 10F (cSnkBulk).\n11\nHub’s tSnkFRSwap timer expires (H6).\n12\nHub draws up to the current it Advertised in the Fast \nRole Swap required USB Type-C Current field of its \nSink_Capabilities Message.\n13\nHubs with (H5) will open (H5) and remove the Hold-\nUp capacitor.\n","image_count":0,"table_count":2}
{"page":1046,"text":"Page 1046\nUniversal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nFigure E.5 VBUS discharges quickly before FR_Swap message is sent after adapter disconnected\nTable E.4  VBUS discharges quickly after adapter disconnected\nStep #\nHub\nLaptop\n1\nThe power adapter is Detached from the Hub.\n2\nHub detects power adapter disconnect (H1) causing \nVHubVB to drop below 5.5V very rapidly.\n3\nHub sends Fast Role Swap Request on CC (H2) and starts \nmonitoring VHubVB (H3). Hub opens sourcing switch \n(H4). Hub also starts a tSnkFRSwap timer.\n4\nHub closes the switch (H5) to use the hold-up \ncapacitor to supply VBUS to the peripheral(s). \nSystems with a holding cap permanently in place do \nnot need the switch (H5). Hub does not draw more \nthan iSnkStdby from VBUS, until the tSnkFRSwap \ntimer expires.\n5\nLaptop detects Fast Role Swap Request on CC (N1) \nthat triggers sending of the FR_Swap Message. This \ncan happen at any point in the following steps so \nlong as it is within 15 ms (tFRSwapInit).\n6\nLaptop opens the sinking switch (N2), as quickly as \npossible to minimize power drained from Hub after \nthe Fast Role Swap Request.\n7\nLaptop begin monitoring VBUS (N3) to know when \nto turn the laptop into a Source\n. \nHub:\nStart Fast \nSwap Signal\nNotebook: \nFRS signal \ndetected\nOld Sink\nNew Sink (0.5A, 0.9A, 1.5A, or 3.0A)\nAdapter\nSink Port\nDevice Policy Mgr\nSink Port\nPower Path\nSource Port\nVoltage\nSink Port\nCurrent\nSignals to/\nfrom DPM & \npolicy \nengine\nSource Port \nInteraction\nSink Port \nInteraction\nSource \nVBUS Voltage\nSink \nVBUS Current\nHub:\nAdapter \nDetached\nDetected\nNew Source = vSafe5V    \nSink\nSource\nHub:\nVBUS <\nvSafe5V \n(max)\nSource vSafe5V\nTurning On \nSource\nSink\nH1\nH2\nN1\nH4\nWaiting to Sink\nvSafe5V (max)\nHub: \nVBUS > vSafe5V \nand sinking\nNotebook: \nSourcing 5V\nN4\nN3\nN2\n","image_count":0,"table_count":5}
{"page":1047,"text":"Universal Serial Bus Power Delivery Specification, Revision 3.2, Version 1.1, 2024-10\nPage 1047\n8\nLaptop detects VBUS < VNbVB (N3).\n9\nLaptop closes sourcing switch (N4). When this \noccurs the Hub’s input capacitance on VBUS will be \nless than 10 F (cSnkBulk).\n10\nHub’s tSnkFRSwap timer expires (H6).\n11\nHub draws up to the current it Advertised in the Fast \nRole Swap required USB Type-C Current field of its \nSink_Capabilities Message.\n12\nHubs with (H5) will open (H5) and remove the Hold-\nUp capacitor.\nTable E.4  VBUS discharges quickly after adapter disconnected\nStep #\nHub\nLaptop\n","image_count":0,"table_count":2}
{"doc_title":"USB Power Delivery Specification","section_id":"5","title":"July,","page":2012,"level":1,"parent_id":null,"full_path":"5 July,"}
{"doc_title":"USB Power Delivery Specification","section_id":"31","title":"October","page":2012,"level":1,"parent_id":null,"full_path":"31 October"}
{"doc_title":"USB Power Delivery Specification","section_id":"26","title":"June,","page":2013,"level":1,"parent_id":null,"full_path":"26 June,"}
{"doc_title":"USB Power Delivery Specification","section_id":"11","title":"March","page":2014,"level":1,"parent_id":null,"full_path":"11 March"}
{"doc_title":"USB Power Delivery Specification","section_id":"7","title":"May","page":2015,"level":1,"parent_id":null,"full_path":"7 May"}
{"doc_title":"USB Power Delivery Specification","section_id":"25","title":"March","page":2016,"level":1,"parent_id":null,"full_path":"25 March"}
{"doc_title":"USB Power Delivery Specification","section_id":"11","title":"January","page":2017,"level":1,"parent_id":null,"full_path":"11 January"}
{"doc_title":"USB Power Delivery Specification","section_id":"11","title":"December","page":2015,"level":1,"parent_id":null,"full_path":"11 December"}
{"doc_title":"USB Power Delivery Specification","section_id":"12","title":"January","page":2017,"level":1,"parent_id":null,"full_path":"12 January"}
{"doc_title":"USB Power Delivery Specification","section_id":"21","title":"June","page":2018,"level":1,"parent_id":null,"full_path":"21 June"}
{"doc_title":"USB Power Delivery Specification","section_id":"29","title":"August","page":2019,"level":1,"parent_id":null,"full_path":"29 August"}
{"doc_title":"USB Power Delivery Specification","section_id":"7","title":"6 5 4 3 2 1","page":0,"level":1,"parent_id":null,"full_path":"7 6 5 4 3 2 1"}
{"doc_title":"USB Power Delivery Specification","section_id":"15","title":"14 13 12 11 10 9 8 23 22 21 20 19 18 17 16 31 30 29 28 27 26 25","page":24,"level":1,"parent_id":null,"full_path":"15 14 13 12 11 10 9 8 23 22 21 20 19 18 17 16 31 30 29 28 27 26 25"}
{"doc_title":"USB Power Delivery Specification","section_id":"7","title":"6 5","page":4,"level":1,"parent_id":null,"full_path":"7 6 5"}
{"doc_title":"USB Power Delivery Specification","section_id":"3","title":"2 1","page":0,"level":1,"parent_id":null,"full_path":"3 2 1"}
{"doc_title":"USB Power Delivery Specification","section_id":"23222120","title":"19181716 15141312 1110 9","page":8,"level":1,"parent_id":null,"full_path":"23222120 19181716 15141312 1110 9"}
{"doc_title":"USB Power Delivery Specification","section_id":"0.5","title":"≤ x ≤","page":15,"level":1,"parent_id":"0","full_path":"0.5 ≤ x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"15","title":"< x ≤","page":27,"level":1,"parent_id":null,"full_path":"15 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"27","title":"< x ≤","page":45,"level":1,"parent_id":null,"full_path":"27 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"45","title":"< x ≤","page":60,"level":1,"parent_id":null,"full_path":"45 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"60","title":"< x ≤","page":100,"level":1,"parent_id":null,"full_path":"60 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"5","title":"< x ≤","page":15,"level":1,"parent_id":null,"full_path":"5 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"15","title":"< x ≤","page":25,"level":1,"parent_id":null,"full_path":"15 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"3","title":"≤ A ≤ x ÷","page":5,"level":1,"parent_id":null,"full_path":"3 ≤ A ≤ x ÷"}
{"doc_title":"USB Power Delivery Specification","section_id":"25","title":"< x ≤","page":100,"level":1,"parent_id":null,"full_path":"25 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"3","title":"≤ A ≤ x ÷","page":9,"level":1,"parent_id":null,"full_path":"3 ≤ A ≤ x ÷"}
{"doc_title":"USB Power Delivery Specification","section_id":"45","title":"< x ≤","page":100,"level":1,"parent_id":null,"full_path":"45 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"0.5","title":"≤ x ≤","page":27,"level":1,"parent_id":"0","full_path":"0.5 ≤ x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"45","title":"< x ≤","page":75,"level":1,"parent_id":null,"full_path":"45 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"3","title":"≤ A ≤ x ÷","page":15,"level":1,"parent_id":null,"full_path":"3 ≤ A ≤ x ÷"}
{"doc_title":"USB Power Delivery Specification","section_id":"75","title":"< x ≤","page":100,"level":1,"parent_id":null,"full_path":"75 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"0.5","title":"≤ x ≤","page":45,"level":1,"parent_id":"0","full_path":"0.5 ≤ x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"100","title":"< x ≤","page":140,"level":1,"parent_id":null,"full_path":"100 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"140","title":"< x ≤","page":180,"level":1,"parent_id":null,"full_path":"140 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"180","title":"< x ≤","page":240,"level":1,"parent_id":null,"full_path":"180 < x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"7.5","title":"≤ x ≤","page":15,"level":1,"parent_id":"7","full_path":"7.5 ≤ x ≤"}
{"doc_title":"USB Power Delivery Specification","section_id":"0","title":"or","page":1,"level":1,"parent_id":null,"full_path":"0 or"}
